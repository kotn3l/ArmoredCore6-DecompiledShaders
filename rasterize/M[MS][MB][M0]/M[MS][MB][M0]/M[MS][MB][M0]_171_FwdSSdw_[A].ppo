#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1238;
float _3623;
float _3624;
float _3625;
float _3626;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3635 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3646 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3657 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _388 = _386.x;
    float _398 = dot(vec4(_388, _386.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _415 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_388 - _398) * cbMtdParam._m0[24u].x) + _398) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3668 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _423 = (_416 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _424 = (_416 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _425 = (_416 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _285) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _286) + cbTextureTilingScale._m0[3u].w));
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _464 = _462.x;
    float _474 = dot(vec4(_464, _462.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _488 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_464 - _474) * cbMtdParam._m0[24u].x) + _474) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3679 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _496 = (_489 * ((_442.x * cbMtdParam._m0[13u].x) - _423)) + _423;
    float _497 = (_489 * ((_442.y * cbMtdParam._m0[13u].y) - _424)) + _424;
    float _498 = (_489 * ((_442.z * cbMtdParam._m0[13u].z) - _425)) + _425;
    float _502 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _496;
    float _505 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _497;
    float _508 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _498;
    float _515 = ((_496 - _502) * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) + _502;
    float _516 = ((_497 - _505) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) + _505;
    float _517 = ((_498 - _508) * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) + _508;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _580 = ((_552.x - _571) * _416) + _571;
    float _581 = ((_552.y - _572) * _416) + _572;
    float _582 = ((_552.z - _573) * _416) + _573;
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _285) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _286) + cbTextureTilingScale._m0[2u].w));
    float _607 = ((_594.z - _582) * _489) + _582;
    float _610 = ((((_594.x - _580) * _489) + _580) * 2.0) + (-1.0);
    float _611 = ((((_594.y - _581) * _489) + _581) * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3690 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    vec4 _637 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _649 = (_610 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_529.x * 2.0) + (-1.0)))) + (((_637.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _650 = (_611 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_529.y * 2.0) + (-1.0)))) + (((_637.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _655 = (((_529.z - _607) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _607;
    float _659 = ((_637.z - _655) * cbMtdParam._m0[19u].w) + _655;
    float _661 = cbMtdParam._m0[22u].x + _637.w;
    float _664 = fma(_617, _232 * NORMAL.x, fma(_650, _239 * TANGENT.x, (_225 * _217) * _649));
    float _667 = fma(_617, _232 * NORMAL.y, fma(_650, _239 * TANGENT.y, (_225 * _218) * _649));
    float _670 = fma(_617, _232 * NORMAL.z, fma(_650, _239 * TANGENT.z, (_225 * _219) * _649));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3701 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _678 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3723 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3734 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3745 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    vec4 _762 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _764 = _762.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _918 = sqrt(((_748 * _748) + (_749 * _749)) + (_750 * _750));
        float _924 = (cbMatDynParam._m0[5u].x * _918) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _929 = (cbMatDynParam._m0[5u].z * _918) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _925)) + _925) < ((_764 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _794 = fma(_677, cbSceneParam._m0[5u].z, fma(_676, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _675));
    float _797 = fma(_677, cbSceneParam._m0[6u].z, fma(_676, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _675));
    float _800 = fma(_677, cbSceneParam._m0[7u].z, fma(_676, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _675));
    uint _813 = _266 + 9u;
    uint _814 = _813 + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3778 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _838 = ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * TEXCOORD_5.w) * _834.x;
    float _839 = dot(vec3(_675, _676, _677), vec3(_755, _756, _757));
    float _842 = _839 * 2.0;
    float _846 = (_842 * _675) - _755;
    float _847 = (_842 * _676) - _756;
    float _848 = (_842 * _677) - _757;
    float _852 = abs(dot(vec3(_755, _756, _757), vec3(_675, _676, _677)));
    float _3811 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _854 = sqrt(_678);
    float _867 = exp2((_854 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_854 * 3.0));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_907, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899));
        float _966 = fma(_907, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899));
        float _970 = fma(_907, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899));
        float _995 = _899 + _675;
        float _996 = _903 + _676;
        float _997 = _907 + _677;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _962;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _966;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _970;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_675, _676, _677), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3859 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_675, _676, _677), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3892 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_675, _676, _677), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3925 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_907, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899));
        float _1283 = fma(_907, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899));
        float _1287 = fma(_907, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899));
        float _1310 = _899 + _675;
        float _1311 = _903 + _676;
        float _1312 = _907 + _677;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_675, _676, _677), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3988 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_675, _676, _677), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4021 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_675, _676, _677), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4054 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1238;
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = _1238;
        _1559 = _1238;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1250)) + _1250;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1251)) + _1251;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1252)) + _1252;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _846 * 0.5;
    float _1617 = _847 * 0.5;
    float _1618 = _848 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_907, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_907, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_907, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_848, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846));
        float _1748 = fma(_848, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846));
        float _1751 = fma(_848, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1779 = frontier_phi_17_15_ladder;
        }
        float _2002;
        if (_1748 > 0.0)
        {
            _2002 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2002 = frontier_phi_26_22_ladder;
        }
        float _2248;
        if (_1751 > 0.0)
        {
            _2248 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2248 = frontier_phi_38_33_ladder;
        }
        float _2250 = isnan(_2002) ? _1779 : (isnan(_1779) ? _2002 : min(_1779, _2002));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1745) + _1734;
        float _2256 = (_2251 * _1748) + _1738;
        float _2257 = (_2251 * _1751) + _1742;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2258;
        float _2262 = _2258 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 > _2262) || ((_2256 < _2260) || ((_2255 < _2260) || (_2255 > _2262))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_16_38_ladder_2;
        _1769 = frontier_phi_16_38_ladder_1;
        _1771 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_846, _847, _848), _1685);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_907, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_907, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_907, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_848, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846));
        float _1845 = fma(_848, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846));
        float _1848 = fma(_848, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846));
        float _2007;
        if (_1842 > 0.0)
        {
            _2007 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2007 = frontier_phi_28_24_ladder;
        }
        float _2275;
        if (_1845 > 0.0)
        {
            _2275 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2275 = frontier_phi_40_35_ladder;
        }
        float _2480;
        if (_1848 > 0.0)
        {
            _2480 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2480 = frontier_phi_49_46_ladder;
        }
        float _2482 = isnan(_2275) ? _2007 : (isnan(_2007) ? _2275 : min(_2007, _2275));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1842) + _1831;
        float _2488 = (_2483 * _1845) + _1835;
        float _2489 = (_2483 * _1848) + _1839;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_25_49_ladder = _2688.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2688.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_25_49_ladder_2;
        _1869 = frontier_phi_25_49_ladder_1;
        _1871 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_846, _847, _848), _1776);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1883 = ((((1.0 - _867) * ((_854 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_867 * _854)) * _838;
    float _1884 = _1883 * ((cbModelParam._m0[1u].w * (_1867 - _1767)) + _1767);
    float _1885 = _1883 * ((cbModelParam._m0[1u].w * (_1869 - _1769)) + _1769);
    float _1886 = _1883 * ((cbModelParam._m0[1u].w * (_1871 - _1771)) + _1771);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    vec4 _1903 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_775, _776));
    float _1905 = _1903.w;
    float _1917 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1905);
    float _1918 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1905);
    float _1919 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1905);
    uvec4 _1923 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1925 = _1923.x * 14u;
    uint _1926 = _1925 + 13u;
    float _1933 = _838 + (-1.0);
    float _1938 = (cbLight._m0[_1926].x * _1933) + 1.0;
    float _1939 = (cbLight._m0[_1926].y * _1933) + 1.0;
    float _1940 = (cbLight._m0[_1926].z * _1933) + 1.0;
    float _1941 = (cbLight._m0[_1926].w * _1933) + 1.0;
    uint _1942 = _1925 + 5u;
    float _1948 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1952 = _1925 + 4u;
    float _1961 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1965 = _1925 | 1u;
    float _1976 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_675, _676, _677));
    float _1979 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_675, _676, _677));
    float _4190 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _4201 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1984 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1986 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1993 = ((cbLight._m0[_1942].x * _1948) * _1986) + (((cbLight._m0[_1952].x * _1917) * _1961) * _1984);
    float _1994 = ((_1948 * cbLight._m0[_1942].y) * _1986) + (((cbLight._m0[_1952].y * _1918) * _1961) * _1984);
    float _1995 = ((_1948 * cbLight._m0[_1942].z) * _1986) + (((cbLight._m0[_1952].z * _1919) * _1961) * _1984);
    uvec4 _1999 = floatBitsToUint(cbLight._m0[_1925 + 12u]);
    bool _2001 = _1999.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_2001)
    {
        _2012 = _1993;
        _2014 = _1994;
        _2016 = _1995;
    }
    else
    {
        uint _2020 = _1925 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1925 + 2u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4212 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2039 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1993;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1994;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1995;
    }
    bool _2019 = _1999.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2019)
    {
        _2057 = _2012;
        _2059 = _2014;
        _2061 = _2016;
    }
    else
    {
        uint _2219 = _1925 + 7u;
        float _2235 = (dot(vec3(cbLight._m0[_1925 + 3u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4228 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2238 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2057 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2012;
        _2059 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2014;
        _2061 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2016;
    }
    uint _2064 = _1925 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _678) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1925].x + _755;
    float _2080 = cbLight._m0[_1925].y + _756;
    float _2081 = cbLight._m0[_1925].z + _757;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1925].xyz));
    float _4244 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2093 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2094 = dot(vec3(_675, _676, _677), vec3(_2086, _2087, _2088));
    float _4266 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2086, _2087, _2088));
    float _4277 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2093 * ((_2092 * _2118) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2118) + _2078) * _2092))) * _2092;
    float _4288 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2145 = _1925 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _678) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1965].x + _755;
    float _2159 = cbLight._m0[_1965].y + _756;
    float _2160 = cbLight._m0[_1965].z + _757;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1965].xyz));
    float _4299 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2172 = dot(vec3(_675, _676, _677), vec3(_2165, _2166, _2167));
    float _4310 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2165, _2166, _2167));
    float _4321 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2157;
    float _2204 = (0.5 / (((_2093 * ((_2171 * _2194) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2194) + _2157) * _2171))) * _2171;
    float _4332 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2216 = (((_2193 * cbLight._m0[_2145].x) * _2206) * _1948) + ((((cbLight._m0[_2064].x * _1917) * _2117) * _2131) * _1961);
    float _2217 = (((_2193 * cbLight._m0[_2145].y) * _2206) * _1948) + ((((cbLight._m0[_2064].y * _1918) * _2117) * _2131) * _1961);
    float _2218 = (((_2193 * cbLight._m0[_2145].z) * _2206) * _1948) + ((((cbLight._m0[_2064].z * _1919) * _2117) * _2131) * _1961);
    float _2280;
    float _2282;
    float _2284;
    if (_2001)
    {
        _2280 = _2216;
        _2282 = _2217;
        _2284 = _2218;
    }
    else
    {
        uint _2286 = _1925 + 2u;
        uint _2290 = _1925 + 10u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _678) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _755;
        float _2307 = cbLight._m0[_2286].y + _756;
        float _2308 = cbLight._m0[_2286].z + _757;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2286].xyz));
        float _4343 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2320 = dot(vec3(_675, _676, _677), vec3(_2313, _2314, _2315));
        float _4354 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4365 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2342 = 1.0 - _2305;
        float _2352 = (0.5 / (((_2093 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2342) + _2305) * _2319))) * _2319;
        float _4376 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2354 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2355 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2280 = (((_2341 * cbLight._m0[_2290].x) * _2354) * _2355) + _2216;
        _2282 = (((_2341 * cbLight._m0[_2290].y) * _2354) * _2355) + _2217;
        _2284 = (((_2341 * cbLight._m0[_2290].z) * _2354) * _2355) + _2218;
    }
    float _2390;
    float _2392;
    float _2394;
    if (_2019)
    {
        _2390 = _2280;
        _2392 = _2282;
        _2394 = _2284;
    }
    else
    {
        uint _2401 = _1925 + 3u;
        uint _2405 = _1925 + 11u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _678) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _755;
        float _2422 = cbLight._m0[_2401].y + _756;
        float _2423 = cbLight._m0[_2401].z + _757;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2401].xyz));
        float _4392 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2435 = dot(vec3(_675, _676, _677), vec3(_2428, _2429, _2430));
        float _4403 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4414 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2093 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2457) + _2420) * _2434))) * _2434;
        float _4425 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2390 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2280;
        _2392 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2282;
        _2394 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2284;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1923.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
        }
        else
        {
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            uint _2852 = 0u;
            uint _2861;
            bool _2862;
            for (;;)
            {
                _2861 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                _2862 = _2861 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2862)
                {
                    frontier_phi_66_pred = _2846;
                    frontier_phi_66_pred_1 = _2851;
                    frontier_phi_66_pred_2 = _2850;
                    frontier_phi_66_pred_3 = _2849;
                    frontier_phi_66_pred_4 = _2848;
                    frontier_phi_66_pred_5 = _2847;
                }
                else
                {
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    uint _2997;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2861;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    for (;;)
                    {
                        uint _3001 = uint(findLSB(_2997)) + (_2852 << 5u);
                        uint _2998 = (_2997 + 4294967295u) & _2997;
                        uint _3003 = _3001 * 48u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3023 = (_3001 * 48u) + 4u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3042 = (_3001 * 48u) + 8u;
                        vec3 _3053 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x));
                        float _3057 = _3017.x - _2546;
                        float _3058 = _3017.y - _2547;
                        float _3059 = _3017.z - _2548;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_794, _797, _800), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _3017.w);
                        float _4451 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3074 = sqrt(_3060) * _3036.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3067) + _3078;
                        float _3084 = _3074 * _3074;
                        float _3088 = ((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3073) / ((_3084 * 0.699999988079071044921875) + 1.0);
                        float _3092 = (-0.0) - _2546;
                        float _3093 = (-0.0) - _2547;
                        float _3094 = (-0.0) - _2548;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3109 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                        float _3110 = 1.0 - _854;
                        float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                        float _3118 = _3117 * _3117;
                        float _3119 = _3118 * _3118;
                        float _3120 = _3099 + _3064;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3130 = dot(vec3(_794, _797, _800), vec3(_3099, _3100, _3101));
                        float _4467 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3134 = dot(vec3(_794, _797, _800), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                        float _4478 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                        float _3142 = _3077 * _3118;
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3067) + _3143;
                        float _4489 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3148 = 1.0 - _3118;
                        float _3158 = (0.5 / (((_3147 * ((_3133 * _3148) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3118) * _3133))) * _3147;
                        float _4500 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3169 = (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3141 * _3141) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2921 = (_3088 * _3036.x) + _2994;
                        _2922 = (_3088 * _3036.y) + _2995;
                        _2923 = (_3088 * _3036.z) + _2996;
                        _2918 = (_3169 * _3053.x) + _2991;
                        _2919 = (_3169 * _3053.y) + _2992;
                        _2920 = (_3169 * _3053.z) + _2993;
                        if (_2998 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2998;
                        }
                    }
                    frontier_phi_66_pred = _2918;
                    frontier_phi_66_pred_1 = _2923;
                    frontier_phi_66_pred_2 = _2922;
                    frontier_phi_66_pred_3 = _2921;
                    frontier_phi_66_pred_4 = _2920;
                    frontier_phi_66_pred_5 = _2919;
                }
                _2694 = frontier_phi_66_pred;
                _2704 = frontier_phi_66_pred_1;
                _2702 = frontier_phi_66_pred_2;
                _2700 = frontier_phi_66_pred_3;
                _2698 = frontier_phi_66_pred_4;
                _2696 = frontier_phi_66_pred_5;
                uint _2853 = _2852 + 1u;
                if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2846 = _2694;
                    _2847 = _2696;
                    _2848 = _2698;
                    _2849 = _2700;
                    _2850 = _2702;
                    _2851 = _2704;
                    _2852 = _2853;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
        }
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.z;
        uint _2710 = (_2708 >> 8u) & 15u;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((4294967295u << _2710) & _2592) == 0u)
        {
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
        }
        else
        {
            float _2839 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2840 = _2839 * _2546;
            float _2841 = _2839 * _2547;
            float _2842 = _2839 * _2548;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2710 < ((_2708 >> 12u) & 15u))
            {
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2974 = _2693;
                float _2975 = _2695;
                float _2976 = _2697;
                float _2977 = _2699;
                float _2978 = _2701;
                float _2979 = _2703;
                uint _2980 = _2710;
                uint _2989;
                bool _2990;
                for (;;)
                {
                    _2989 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                    _2990 = _2989 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2990)
                    {
                        frontier_phi_77_pred = _2979;
                        frontier_phi_77_pred_1 = _2978;
                        frontier_phi_77_pred_2 = _2977;
                        frontier_phi_77_pred_3 = _2976;
                        frontier_phi_77_pred_4 = _2975;
                        frontier_phi_77_pred_5 = _2974;
                    }
                    else
                    {
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        uint _3202 = _2989;
                        uint _3203;
                        vec4 _3228;
                        float _3229;
                        vec4 _3244;
                        vec3 _3256;
                        vec4 _3271;
                        vec4 _3286;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3213 = ((_2980 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3202));
                            _3203 = (_3202 + 4294967295u) & _3202;
                            uint _3215 = _3213 * 40u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3229 = _3228.w;
                            uint _3231 = (_3213 * 40u) + 4u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3213 * 40u) + 8u;
                            _3256 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x));
                            uint _3258 = (_3213 * 40u) + 16u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3213 * 40u) + 20u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3213 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3213 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_2548, _3320.z, fma(_2547, _3320.y, _3320.x * _2546)) + _3320.w;
                            _3333 = !((fma(_2548, _3301.z, fma(_2547, _3301.y, _3301.x * _2546)) + _3301.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3333)
                            {
                                float _3360 = _3228.x - _2546;
                                float _3361 = _3228.y - _2547;
                                float _3362 = _3228.z - _2548;
                                float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                                float _3366 = inversesqrt(_3363);
                                float _3367 = _3366 * _3360;
                                float _3368 = _3366 * _3361;
                                float _3369 = _3366 * _3362;
                                float _3373 = 1.0 - (_3363 / (_3229 * _3229));
                                float _4511 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3378 = sqrt(_3363) * _3244.w;
                                float _3380 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                                float _3381 = _3380 * _3380;
                                float _3384 = ((1.0 - _3381) * dot(vec3(_3367, _3368, _3369), vec3(_794, _797, _800))) + _3381;
                                float _3387 = _3378 * _3378;
                                float _3391 = (fma(_2548, _3271.z, fma(_2547, _3271.y, _3271.x * _2546)) + _3271.w) / _3332;
                                float _3392 = (fma(_2548, _3286.z, fma(_2547, _3286.y, _3286.x * _2546)) + _3286.w) / _3332;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4527 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3398 = _3397 * (((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3374) / ((_3387 * 0.699999988079071044921875) + 1.0));
                                float _3410 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                                float _3411 = 1.0 - _854;
                                float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                                float _3419 = _3418 * _3418;
                                float _3420 = _3419 * _3419;
                                float _3421 = _3367 - _2840;
                                float _3422 = _3368 - _2841;
                                float _3423 = _3369 - _2842;
                                float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                                float _3431 = dot(vec3(_794, _797, _800), vec3((-0.0) - _2840, (-0.0) - _2841, (-0.0) - _2842));
                                float _4538 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3435 = dot(vec3(_794, _797, _800), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                                float _4549 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                                float _3443 = _3380 * _3419;
                                float _3444 = _3443 * _3443;
                                float _3450 = ((1.0 - _3444) * dot(vec3(_794, _797, _800), vec3(_3367, _3368, _3369))) + _3444;
                                float _4560 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3452 = 1.0 - _3419;
                                float _3462 = (0.5 / (((_3451 * ((_3434 * _3452) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3419) * _3434))) * _3451;
                                float _4571 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3472 = (_3397 * _3374) * (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3442 * _3442) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3398 * _3244.y;
                                frontier_phi_83_pred_1 = _3398 * _3244.x;
                                frontier_phi_83_pred_2 = _3472 * _3256.z;
                                frontier_phi_83_pred_3 = _3472 * _3256.y;
                                frontier_phi_83_pred_4 = _3472 * _3256.x;
                                frontier_phi_83_pred_5 = _3398 * _3244.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3480 = frontier_phi_83_pred;
                            _3479 = frontier_phi_83_pred_1;
                            _3478 = frontier_phi_83_pred_2;
                            _3477 = frontier_phi_83_pred_3;
                            _3476 = frontier_phi_83_pred_4;
                            _3481 = frontier_phi_83_pred_5;
                            _3186 = _3479 + _3199;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            if (_3203 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3203;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3188;
                        frontier_phi_77_pred_1 = _3187;
                        frontier_phi_77_pred_2 = _3186;
                        frontier_phi_77_pred_3 = _3185;
                        frontier_phi_77_pred_4 = _3184;
                        frontier_phi_77_pred_5 = _3183;
                    }
                    _2825 = frontier_phi_77_pred;
                    _2823 = frontier_phi_77_pred_1;
                    _2821 = frontier_phi_77_pred_2;
                    _2819 = frontier_phi_77_pred_3;
                    _2817 = frontier_phi_77_pred_4;
                    _2815 = frontier_phi_77_pred_5;
                    uint _2981 = _2980 + 1u;
                    if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2974 = _2815;
                        _2975 = _2817;
                        _2976 = _2819;
                        _2977 = _2821;
                        _2978 = _2823;
                        _2979 = _2825;
                        _2980 = _2981;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2819;
                frontier_phi_58_59_ladder_1 = _2825;
                frontier_phi_58_59_ladder_2 = _2823;
                frontier_phi_58_59_ladder_3 = _2821;
                frontier_phi_58_59_ladder_4 = _2817;
                frontier_phi_58_59_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_58_59_ladder = _2697;
                frontier_phi_58_59_ladder_1 = _2703;
                frontier_phi_58_59_ladder_2 = _2701;
                frontier_phi_58_59_ladder_3 = _2699;
                frontier_phi_58_59_ladder_4 = _2695;
                frontier_phi_58_59_ladder_5 = _2693;
            }
            _2814 = frontier_phi_58_59_ladder_5;
            _2816 = frontier_phi_58_59_ladder_4;
            _2818 = frontier_phi_58_59_ladder;
            _2820 = frontier_phi_58_59_ladder_3;
            _2822 = frontier_phi_58_59_ladder_2;
            _2824 = frontier_phi_58_59_ladder_1;
        }
        float _2829 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
        _2605 = (_2829 * _2820) + _2057;
        _2607 = (_2829 * _2822) + _2059;
        _2609 = (_2829 * _2824) + _2061;
        _2611 = ((_2814 * 0.039999999105930328369140625) * _2829) + _2390;
        _2613 = ((_2816 * 0.039999999105930328369140625) * _2829) + _2392;
        _2615 = ((_2818 * 0.039999999105930328369140625) * _2829) + _2394;
    }
    else
    {
        _2605 = _2057;
        _2607 = _2059;
        _2609 = _2061;
        _2611 = _2390;
        _2613 = _2392;
        _2615 = _2394;
    }
    float _4587 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4598 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4609 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2632 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2605 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _838))) + ((_2611 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2633 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2607 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _838))) + ((_2613 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2634 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2609 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _838))) + ((_2615 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    uint _2635 = _266 + 6u;
    float _2643 = _775 / cbSceneParam._m0[86u].x;
    float _2644 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2658 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2660 = _2658.x;
    float _2661 = _2658.y;
    float _2662 = _2658.z;
    float _2663 = _2658.w;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2718 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2719 = _2718 / _696;
        float _2730 = _2719 * _748;
        float _2731 = _749 * _2719;
        float _2732 = (-0.0) - _2731;
        float _2734 = _2719 * _750;
        float _2736 = (cbSceneParam._m0[77u].w * _2732) / _2718;
        float _2737 = _2736 + cbSceneParam._m0[79u].w;
        float _2738 = cbSceneParam._m0[79u].w - _2731;
        float _2744 = sqrt(((_2730 * _2730) + (_2731 * _2731)) + (_2734 * _2734));
        float _2747 = (1.0 - (cbSceneParam._m0[77u].w / _2718)) * _2744;
        float _2752 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2754 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2931;
        if (abs((_2732 - _2736) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2931 = ((((_2737 > 0.0) ? exp2(_2752 * _2737) : (2.0 - exp2(_2754 * _2737))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2747;
        }
        else
        {
            float _2875 = 1.0 / cbSceneParam._m0[80u].x;
            float _2876 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : max(_2737, _2738));
            float _2877 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : min(_2737, _2738));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            _2931 = ((abs(_2744 / _2732) * cbSceneParam._m0[80u].y) * ((((_2886 - _2887) * 2.0) - ((exp2(_2752 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0)))) - exp2(_2752 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))))) * _2875)) - ((exp2(_2754 * _2886) - exp2(_2754 * _2887)) * _2875))) + (_2747 * cbSceneParam._m0[80u].z);
        }
        vec4 _2933 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, 1.0), 0.0);
        float _2942 = exp2((_2931 * (-1.44269502162933349609375)) * (1.0 - _2933.w));
        float _2943 = log2(_2942);
        float _2959 = log2(_2663);
        _2756 = (exp2(_2959 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].x)) * _2933.x) / cbSceneParam._m0[78u].x)) + _2660;
        _2758 = (exp2(_2959 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].y)) * _2933.y) / cbSceneParam._m0[78u].y)) + _2661;
        _2760 = (exp2(_2959 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].z)) * _2933.z) / cbSceneParam._m0[78u].z)) + _2662;
        _2762 = _2942 * _2663;
    }
    else
    {
        _2756 = _2660;
        _2758 = _2661;
        _2760 = _2662;
        _2762 = _2663;
    }
    bool _2969;
    vec4 _2772;
    vec4 _2794;
    float _2796;
    float _2800;
    float _2801;
    float _2802;
    float _2803;
    bool _2813;
    for (;;)
    {
        _2772 = cbMatDynParam._m0[0u];
        float _2774 = roundEven(_2772.y);
        bool _2775 = _2774 == 3.0;
        float _2776 = log2(_2762);
        float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * _2632;
        float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * _2633;
        float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * _2634;
        float _2792 = _764 + (-0.5);
        _2794 = cbMtdParam._m0[1u];
        _2796 = _2794.y * _2792;
        float _2799 = (_2774 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2800 = _2799 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2756)));
        _2801 = _2799 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
        _2802 = _2799 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
        _2803 = _2792 * 0.999000012874603271484375;
        _2813 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2813)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _2803) < 0.5)
            {
                _2969 = true;
                break;
            }
        }
        uint _2910 = _813 + uint(_2772.w);
        if ((cbInstanceData._m0[_2910].w < 1.0) && ((cbInstanceData._m0[_2910].w + _2803) < 0.5))
        {
            _2969 = true;
            break;
        }
        if ((_2796 + 1.0) < _2794.x)
        {
            _2969 = true;
            break;
        }
        _2969 = false;
        break;
    }
    float _3174;
    if (_2969)
    {
        discard_state = true;
        _3174 = 0.0;
    }
    else
    {
        _3174 = cbInstanceData._m0[_2635].w;
    }
    SV_Target.x = _2800;
    SV_Target.y = _2801;
    SV_Target.z = _2802;
    SV_Target.w = _3174;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2635].w;
    discard_exit();
}


