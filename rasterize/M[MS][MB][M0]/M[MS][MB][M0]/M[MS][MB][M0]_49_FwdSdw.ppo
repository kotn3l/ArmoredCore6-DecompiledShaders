#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1114;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _332 = (_323.x * 2.0) + (-1.0);
    float _334 = (_323.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3704 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    float _344 = fma(_341, _225, fma(_334, _232, _332 * _218));
    float _347 = fma(_341, _226, fma(_334, _233, _332 * _219));
    float _350 = fma(_341, _227, fma(_334, _234, _332 * _220));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _392 = _390.x;
    float _393 = 1.0 - _392;
    float _402 = (cbMtdParam._m0[19u].x + dot(vec4(_354 * _344, _354 * _347, _354 * _350, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_392 - _393) * cbMtdParam._m0[24u].z) + _393) * cbMtdParam._m0[21u].z);
    float _3715 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _405 = (-0.0) - cbMtdParam._m0[24u].y;
    float _407 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
    float _415 = _403 - ((_403 * TEXCOORD_8.x) * _408);
    float _416 = _403 - ((_403 * TEXCOORD_8.y) * _408);
    float _417 = _403 - ((_403 * TEXCOORD_8.z) * _408);
    float _424 = (_415 * ((_303.x * cbMtdParam._m0[18u].x) - _282)) + _282;
    float _425 = (_416 * ((_303.y * cbMtdParam._m0[18u].y) - _283)) + _283;
    float _426 = (_417 * ((_303.z * cbMtdParam._m0[18u].z) - _284)) + _284;
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _440 = _438.x;
    float _441 = 1.0 - _440;
    float _471 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_440 - _441) * cbMtdParam._m0[24u].w) + _441) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3736 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _480 = ((((cbMtdParam._m0[10u].x - _424) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _472) + _424;
    float _481 = ((((cbMtdParam._m0[10u].y - _425) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _472) + _425;
    float _482 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _426)) * _472) + _426;
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _503 = (_496.x * 2.0) + (-1.0);
    float _504 = (_496.y * 2.0) + (-1.0);
    float _505 = dot(vec2(_503, _504), vec2(_503, _504));
    float _3747 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _513 = ((_496.z - _327) * _415) + _327;
    float _516 = ((cbMtdParam._m0[23u].y - _513) * _472) + _513;
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _541 = (_535.x * 2.0) + (-1.0);
    float _542 = (_535.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3758 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _558 = ((sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _341) * _417) + _341;
    float _561 = (((_503 - _332) * _415) + _332) + (cbMtdParam._m0[21u].x * _332);
    float _562 = (((_504 - _334) * _416) + _334) + (cbMtdParam._m0[21u].x * _334);
    float _573 = (((_541 - _561) + (_561 * cbMtdParam._m0[22u].z)) * _472) + _561;
    float _574 = (((_542 - _562) + (_562 * cbMtdParam._m0[22u].z)) * _472) + _562;
    float _575 = (_472 * (sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _558)) + _558;
    float _577 = cbMtdParam._m0[22u].x + _323.w;
    float _580 = fma(_575, _225, fma(_574, _232, _573 * _218));
    float _583 = fma(_575, _226, fma(_574, _233, _573 * _219));
    float _586 = fma(_575, _227, fma(_574, _234, _573 * _220));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3769 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _594 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3791 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3802 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3813 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _662 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _652);
    float _663 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _652);
    float _664 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _652);
    float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
    float _669 = _662 * _668;
    float _670 = _663 * _668;
    float _671 = _664 * _668;
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _702 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _705 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _719 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3824 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _743 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * TEXCOORD_5.w) * _739.x;
    float _744 = dot(vec3(_591, _592, _593), vec3(_669, _670, _671));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _591) - _669;
    float _752 = (_747 * _592) - _670;
    float _753 = (_747 * _593) - _671;
    float _757 = abs(dot(vec3(_669, _670, _671), vec3(_591, _592, _593)));
    float _3857 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_594);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _842 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _846 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _871 = _804 + _591;
        float _872 = _808 + _592;
        float _873 = _812 + _593;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _838;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _842;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _846;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_838 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_842 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_846 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_591, _592, _593), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3905 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_591, _592, _593), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3938 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_591, _592, _593), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3971 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1157 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1161 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1184 = _804 + _591;
        float _1185 = _808 + _592;
        float _1186 = _812 + _593;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_591, _592, _593), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4034 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_591, _592, _593), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4067 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_591, _592, _593), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4100 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1114;
        _1423 = _1114;
        _1424 = _1114;
        _1425 = _1114;
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1620 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1623 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1821;
        if (_1620 > 0.0)
        {
            _1821 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1821 = frontier_phi_23_19_ladder;
        }
        float _2117;
        if (_1623 > 0.0)
        {
            _2117 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2117 = frontier_phi_35_30_ladder;
        }
        float _2119 = isnan(_1821) ? _1651 : (isnan(_1651) ? _1821 : min(_1651, _1821));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1617) + _1606;
        float _2125 = (_2120 * _1620) + _1610;
        float _2126 = (_2120 * _1623) + _1614;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_13_35_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1559);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1701 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1705 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1709 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1712 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1715 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1718 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1826;
        if (_1712 > 0.0)
        {
            _1826 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1826 = frontier_phi_25_21_ladder;
        }
        float _2144;
        if (_1715 > 0.0)
        {
            _2144 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2144 = frontier_phi_37_32_ladder;
        }
        float _2471;
        if (_1718 > 0.0)
        {
            _2471 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2471 = frontier_phi_47_44_ladder;
        }
        float _2473 = isnan(_2144) ? _1826 : (isnan(_1826) ? _2144 : min(_1826, _2144));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1712) + _1701;
        float _2479 = (_2474 * _1715) + _1705;
        float _2480 = (_2474 * _1718) + _1709;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_47_ladder = _2598.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2598.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2598.x * cbModelParam._m0[1u].z;
        }
        _1737 = frontier_phi_22_47_ladder_2;
        _1739 = frontier_phi_22_47_ladder_1;
        _1741 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1648);
        _1737 = _1721.x * cbModelParam._m0[1u].z;
        _1739 = _1721.y * cbModelParam._m0[1u].z;
        _1741 = _1721.z * cbModelParam._m0[1u].z;
    }
    float _1753 = ((((1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_772 * _759)) * _743;
    float _1754 = _1753 * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1755 = _1753 * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1756 = _1753 * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, _1754 * cbSceneParam._m0[91u].x));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1813 = _1800 / _1812;
    float _1814 = _1804 / _1812;
    float _1815 = _1808 / _1812;
    float _1962;
    float _1963;
    float _1964;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1842 = ((uint(_1815 > cbSceneParam._m0[59u].y) + uint(_1815 > cbSceneParam._m0[59u].x)) + uint(_1815 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1843 = _1842 + 43u;
        uint _1851 = _1842 + 44u;
        uint _1859 = _1842 + 45u;
        uint _1867 = _1842 + 46u;
        float _1878 = fma(_1812, cbSceneParam._m0[_1843].w, fma(_1808, cbSceneParam._m0[_1843].z, fma(_1804, cbSceneParam._m0[_1843].y, _1800 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1812, cbSceneParam._m0[_1851].w, fma(_1808, cbSceneParam._m0[_1851].z, fma(_1804, cbSceneParam._m0[_1851].y, _1800 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1812, cbSceneParam._m0[_1867].w, fma(_1808, cbSceneParam._m0[_1867].z, fma(_1804, cbSceneParam._m0[_1867].y, _1800 * cbSceneParam._m0[_1867].x)));
        float _1895 = cbSceneParam._m0[33u].z * _1890;
        float _1897 = cbSceneParam._m0[33u].w * _1890;
        float _1900 = fma(_1812, cbSceneParam._m0[_1859].w, fma(_1808, cbSceneParam._m0[_1859].z, fma(_1804, cbSceneParam._m0[_1859].y, _1800 * cbSceneParam._m0[_1859].x))) / _1890;
        float _1948 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
        float _4226 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1955 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 + _1878) / _1890, (_1897 + _1882) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 + _1878) / _1890, (_1882 - _1895) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1895) / _1890, (_1882 - _1897) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1897) / _1890, (_1895 + _1882) / _1890), _1900), 0.0)).x), vec4(0.25)));
        _1962 = 1.0 - (_1955 * cbSceneParam._m0[34u].x);
        _1963 = 1.0 - (_1955 * cbSceneParam._m0[34u].y);
        _1964 = 1.0 - (_1955 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1962 = 1.0;
        _1963 = 1.0;
        _1964 = 1.0;
    }
    float _2028;
    float _2030;
    float _2032;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2016 = fma(_1812, cbSceneParam._m0[63u].w, fma(_1808, cbSceneParam._m0[63u].z, fma(_1804, cbSceneParam._m0[63u].y, _1800 * cbSceneParam._m0[63u].x)));
        float _2017 = fma(_1812, cbSceneParam._m0[60u].w, fma(_1808, cbSceneParam._m0[60u].z, fma(_1804, cbSceneParam._m0[60u].y, _1800 * cbSceneParam._m0[60u].x))) / _2016;
        float _2018 = fma(_1812, cbSceneParam._m0[61u].w, fma(_1808, cbSceneParam._m0[61u].z, fma(_1804, cbSceneParam._m0[61u].y, _1800 * cbSceneParam._m0[61u].x))) / _2016;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2017 >= cbSceneParam._m0[64u].x) && (_2018 >= cbSceneParam._m0[64u].y)) && (_2017 <= cbSceneParam._m0[64u].z)) && (_2018 <= cbSceneParam._m0[64u].w))
        {
            float _2157 = fma(_1812, cbSceneParam._m0[62u].w, fma(_1808, cbSceneParam._m0[62u].z, fma(_1804, cbSceneParam._m0[62u].y, _1800 * cbSceneParam._m0[62u].x))) / _2016;
            float _2161 = isnan(cbSceneParam._m0[41u].w) ? _2157 : (isnan(_2157) ? cbSceneParam._m0[41u].w : max(_2157, cbSceneParam._m0[41u].w));
            float _2204 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
            float _4242 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
            float _2211 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2017, cbSceneParam._m0[33u].w + _2018), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2017, _2018 - cbSceneParam._m0[33u].z), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].z, _2018 - cbSceneParam._m0[33u].w), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2018), _2161), 0.0)).x), vec4(0.25)));
            float _2215 = 1.0 - (_2211 * cbSceneParam._m0[34u].x);
            float _2216 = 1.0 - (_2211 * cbSceneParam._m0[34u].y);
            float _2217 = 1.0 - (_2211 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2217) ? _1964 : (isnan(_1964) ? _2217 : min(_1964, _2217));
            frontier_phi_34_33_ladder_1 = isnan(_2216) ? _1963 : (isnan(_1963) ? _2216 : min(_1963, _2216));
            frontier_phi_34_33_ladder_2 = isnan(_2215) ? _1962 : (isnan(_1962) ? _2215 : min(_1962, _2215));
        }
        else
        {
            frontier_phi_34_33_ladder = _1964;
            frontier_phi_34_33_ladder_1 = _1963;
            frontier_phi_34_33_ladder_2 = _1962;
        }
        _2028 = frontier_phi_34_33_ladder_2;
        _2030 = frontier_phi_34_33_ladder_1;
        _2032 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2028 = _1962;
        _2030 = _1963;
        _2032 = _1964;
    }
    uvec4 _2037 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _2039 = _2037.x * 14u;
    uint _2040 = _2039 + 13u;
    float _2047 = _743 + (-1.0);
    float _2052 = (cbLight._m0[_2040].x * _2047) + 1.0;
    float _2053 = (cbLight._m0[_2040].y * _2047) + 1.0;
    float _2054 = (cbLight._m0[_2040].z * _2047) + 1.0;
    float _2055 = (cbLight._m0[_2040].w * _2047) + 1.0;
    uint _2056 = _2039 + 5u;
    float _2062 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2066 = _2039 + 4u;
    float _2076 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2080 = _2039 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_591, _592, _593));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_591, _592, _593));
    float _4278 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4289 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2056].x * _2062) * _2101) + (((cbLight._m0[_2066].x * _2028) * _2076) * _2099);
    float _2109 = ((_2062 * cbLight._m0[_2056].y) * _2101) + (((cbLight._m0[_2066].y * _2030) * _2076) * _2099);
    float _2110 = ((_2062 * cbLight._m0[_2056].z) * _2101) + (((cbLight._m0[_2066].z * _2032) * _2076) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2039 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2116)
    {
        _2218 = _2108;
        _2220 = _2109;
        _2222 = _2110;
    }
    else
    {
        uint _2226 = _2039 + 6u;
        float _2242 = (dot(vec3(cbLight._m0[_2039 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4300 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2245 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2218 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2108;
        _2220 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2109;
        _2222 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2110;
    }
    bool _2225 = _2114.y == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2225)
    {
        _2280 = _2218;
        _2282 = _2220;
        _2284 = _2222;
    }
    else
    {
        uint _2442 = _2039 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2039 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4316 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2461 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2280 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2218;
        _2282 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2220;
        _2284 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2222;
    }
    uint _2287 = _2039 + 8u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _594) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2039].x + _669;
    float _2303 = cbLight._m0[_2039].y + _670;
    float _2304 = cbLight._m0[_2039].z + _671;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2039].xyz));
    float _4332 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2316 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2317 = dot(vec3(_591, _592, _593), vec3(_2309, _2310, _2311));
    float _4354 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2309, _2310, _2311));
    float _4365 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2301 * _2301;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2340 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2341 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2316 * ((_2315 * _2341) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2341) + _2301) * _2315))) * _2315;
    float _4376 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    uint _2368 = _2039 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _594) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2080].x + _669;
    float _2382 = cbLight._m0[_2080].y + _670;
    float _2383 = cbLight._m0[_2080].z + _671;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2080].xyz));
    float _4387 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2395 = dot(vec3(_591, _592, _593), vec3(_2388, _2389, _2390));
    float _4398 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2388, _2389, _2390));
    float _4409 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2416 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2417 = 1.0 - _2380;
    float _2427 = (0.5 / (((_2316 * ((_2394 * _2417) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2417) + _2380) * _2394))) * _2394;
    float _4420 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2439 = (((_2416 * cbLight._m0[_2368].x) * _2429) * _2062) + ((((cbLight._m0[_2287].x * _2028) * _2340) * _2354) * _2076);
    float _2440 = (((_2416 * cbLight._m0[_2368].y) * _2429) * _2062) + ((((cbLight._m0[_2287].y * _2030) * _2340) * _2354) * _2076);
    float _2441 = (((_2416 * cbLight._m0[_2368].z) * _2429) * _2062) + ((((cbLight._m0[_2287].z * _2032) * _2340) * _2354) * _2076);
    float _2497;
    float _2499;
    float _2501;
    if (_2116)
    {
        _2497 = _2439;
        _2499 = _2440;
        _2501 = _2441;
    }
    else
    {
        uint _2503 = _2039 + 2u;
        uint _2507 = _2039 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _594) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _669;
        float _2524 = cbLight._m0[_2503].y + _670;
        float _2525 = cbLight._m0[_2503].z + _671;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2503].xyz));
        float _4431 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2537 = dot(vec3(_591, _592, _593), vec3(_2530, _2531, _2532));
        float _4442 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4453 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2559 = 1.0 - _2522;
        float _2569 = (0.5 / (((_2316 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2559) + _2522) * _2536))) * _2536;
        float _4464 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2497 = (((_2558 * cbLight._m0[_2507].x) * _2571) * _2572) + _2439;
        _2499 = (((_2558 * cbLight._m0[_2507].y) * _2571) * _2572) + _2440;
        _2501 = (((_2558 * cbLight._m0[_2507].z) * _2571) * _2572) + _2441;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2225)
    {
        _2603 = _2497;
        _2605 = _2499;
        _2607 = _2501;
    }
    else
    {
        uint _2614 = _2039 + 3u;
        uint _2618 = _2039 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _594) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _669;
        float _2635 = cbLight._m0[_2614].y + _670;
        float _2636 = cbLight._m0[_2614].z + _671;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2614].xyz));
        float _4480 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2648 = dot(vec3(_591, _592, _593), vec3(_2641, _2642, _2643));
        float _4491 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4502 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2316 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2670) + _2633) * _2647))) * _2647;
        float _4513 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2603 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2497;
        _2605 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2499;
        _2607 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2501;
    }
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2037.y == 0u)
    {
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2705)));
        float _2726 = (log2(_1815 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            uint _2966 = 0u;
            uint _2975;
            bool _2976;
            for (;;)
            {
                _2975 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                _2976 = _2975 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2976)
                {
                    frontier_phi_66_pred = _2965;
                    frontier_phi_66_pred_1 = _2964;
                    frontier_phi_66_pred_2 = _2963;
                    frontier_phi_66_pred_3 = _2962;
                    frontier_phi_66_pred_4 = _2961;
                    frontier_phi_66_pred_5 = _2960;
                }
                else
                {
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    uint _3090;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2975;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    for (;;)
                    {
                        uint _3094 = uint(findLSB(_3090)) + (_2966 << 5u);
                        uint _3091 = (_3090 + 4294967295u) & _3090;
                        uint _3096 = _3094 * 48u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3116 = (_3094 * 48u) + 4u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3135 = (_3094 * 48u) + 8u;
                        vec3 _3146 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x));
                        float _3150 = _3110.x - _1813;
                        float _3151 = _3110.y - _1814;
                        float _3152 = _3110.z - _1815;
                        float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                        float _3156 = inversesqrt(_3153);
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3160 = dot(vec3(_699, _702, _705), vec3(_3157, _3158, _3159));
                        float _3165 = 1.0 - (_3153 * _3110.w);
                        float _4539 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3167 = sqrt(_3153) * _3129.w;
                        float _3170 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3160) + _3171;
                        float _3177 = _3167 * _3167;
                        float _3181 = ((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3166) / ((_3177 * 0.699999988079071044921875) + 1.0);
                        float _3185 = (-0.0) - _1813;
                        float _3186 = (-0.0) - _1814;
                        float _3187 = (-0.0) - _1815;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3192 = _3191 * _3185;
                        float _3193 = _3191 * _3186;
                        float _3194 = _3191 * _3187;
                        float _3201 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _759;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3192 + _3157;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_699, _702, _705), vec3(_3192, _3193, _3194));
                        float _4555 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3226 = dot(vec3(_699, _702, _705), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4566 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3170 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3160) + _3235;
                        float _4577 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4588 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3233 * _3233) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125))) * _3166;
                        _3019 = (_3181 * _3129.x) + _3087;
                        _3020 = (_3181 * _3129.y) + _3088;
                        _3021 = (_3181 * _3129.z) + _3089;
                        _3016 = (_3261 * _3146.x) + _3084;
                        _3017 = (_3261 * _3146.y) + _3085;
                        _3018 = (_3261 * _3146.z) + _3086;
                        if (_3091 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3091;
                        }
                    }
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3020;
                    frontier_phi_66_pred_2 = _3019;
                    frontier_phi_66_pred_3 = _3018;
                    frontier_phi_66_pred_4 = _3017;
                    frontier_phi_66_pred_5 = _3016;
                }
                _2827 = frontier_phi_66_pred;
                _2825 = frontier_phi_66_pred_1;
                _2823 = frontier_phi_66_pred_2;
                _2821 = frontier_phi_66_pred_3;
                _2819 = frontier_phi_66_pred_4;
                _2817 = frontier_phi_66_pred_5;
                uint _2967 = _2966 + 1u;
                if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2960 = _2817;
                    _2961 = _2819;
                    _2962 = _2821;
                    _2963 = _2823;
                    _2964 = _2825;
                    _2965 = _2827;
                    _2966 = _2967;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((4294967295u << _2833) & _2736) == 0u)
        {
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
            _2934 = _2822;
            _2936 = _2824;
            _2938 = _2826;
        }
        else
        {
            float _2953 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
            float _2954 = _2953 * _1813;
            float _2955 = _2953 * _1814;
            float _2956 = _2953 * _1815;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _3067 = _2816;
                float _3068 = _2818;
                float _3069 = _2820;
                float _3070 = _2822;
                float _3071 = _2824;
                float _3072 = _2826;
                uint _3073 = _2833;
                uint _3082;
                bool _3083;
                for (;;)
                {
                    _3082 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                    _3083 = _3082 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3083)
                    {
                        frontier_phi_72_pred = _3072;
                        frontier_phi_72_pred_1 = _3071;
                        frontier_phi_72_pred_2 = _3070;
                        frontier_phi_72_pred_3 = _3069;
                        frontier_phi_72_pred_4 = _3068;
                        frontier_phi_72_pred_5 = _3067;
                    }
                    else
                    {
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3279 = _3067;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        uint _3285 = _3082;
                        uint _3286;
                        vec4 _3311;
                        float _3312;
                        vec4 _3327;
                        vec3 _3339;
                        vec4 _3355;
                        vec4 _3371;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3296 = ((_3073 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3285));
                            _3286 = (_3285 + 4294967295u) & _3285;
                            uint _3298 = _3296 * 40u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3312 = _3311.w;
                            uint _3314 = (_3296 * 40u) + 4u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3296 * 40u) + 8u;
                            _3339 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x));
                            uint _3342 = (_3296 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3358 = (_3296 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3296 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3296 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_1815, _3405.z, fma(_1814, _3405.y, _3405.x * _1813)) + _3405.w;
                            _3418 = !((fma(_1815, _3386.z, fma(_1814, _3386.y, _3386.x * _1813)) + _3386.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3311.x - _1813;
                                float _3446 = _3311.y - _1814;
                                float _3447 = _3311.z - _1815;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3312 * _3312));
                                float _4599 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3463 = sqrt(_3448) * _3327.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_699, _702, _705))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_1815, _3355.z, fma(_1814, _3355.y, _3355.x * _1813)) + _3355.w) / _3417;
                                float _3477 = (fma(_1815, _3371.z, fma(_1814, _3371.y, _3371.x * _1813)) + _3371.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4615 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _759;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2954;
                                float _3507 = _3453 - _2955;
                                float _3508 = _3454 - _2956;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2954, (-0.0) - _2955, (-0.0) - _2956));
                                float _4626 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3520 = dot(vec3(_699, _702, _705), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4637 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_699, _702, _705), vec3(_3452, _3453, _3454))) + _3529;
                                float _4648 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4659 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3483 * _3327.y;
                                frontier_phi_78_pred_1 = _3483 * _3327.x;
                                frontier_phi_78_pred_2 = _3557 * _3339.z;
                                frontier_phi_78_pred_3 = _3557 * _3339.y;
                                frontier_phi_78_pred_4 = _3557 * _3339.x;
                                frontier_phi_78_pred_5 = _3483 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_78_pred;
                            _3564 = frontier_phi_78_pred_1;
                            _3563 = frontier_phi_78_pred_2;
                            _3562 = frontier_phi_78_pred_3;
                            _3561 = frontier_phi_78_pred_4;
                            _3566 = frontier_phi_78_pred_5;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            _3266 = _3561 + _3279;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            if (_3286 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3286;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3271;
                        frontier_phi_72_pred_1 = _3270;
                        frontier_phi_72_pred_2 = _3269;
                        frontier_phi_72_pred_3 = _3268;
                        frontier_phi_72_pred_4 = _3267;
                        frontier_phi_72_pred_5 = _3266;
                    }
                    _2939 = frontier_phi_72_pred;
                    _2937 = frontier_phi_72_pred_1;
                    _2935 = frontier_phi_72_pred_2;
                    _2933 = frontier_phi_72_pred_3;
                    _2931 = frontier_phi_72_pred_4;
                    _2929 = frontier_phi_72_pred_5;
                    uint _3074 = _3073 + 1u;
                    if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3067 = _2929;
                        _3068 = _2931;
                        _3069 = _2933;
                        _3070 = _2935;
                        _3071 = _2937;
                        _3072 = _2939;
                        _3073 = _3074;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2939;
                frontier_phi_60_61_ladder_1 = _2937;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2929;
                frontier_phi_60_61_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_60_61_ladder = _2826;
                frontier_phi_60_61_ladder_1 = _2824;
                frontier_phi_60_61_ladder_2 = _2820;
                frontier_phi_60_61_ladder_3 = _2818;
                frontier_phi_60_61_ladder_4 = _2816;
                frontier_phi_60_61_ladder_5 = _2822;
            }
            _2928 = frontier_phi_60_61_ladder_4;
            _2930 = frontier_phi_60_61_ladder_3;
            _2932 = frontier_phi_60_61_ladder_2;
            _2934 = frontier_phi_60_61_ladder_5;
            _2936 = frontier_phi_60_61_ladder_1;
            _2938 = frontier_phi_60_61_ladder;
        }
        float _2943 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2749 = (_2943 * _2934) + _2280;
        _2751 = (_2943 * _2936) + _2282;
        _2753 = (_2943 * _2938) + _2284;
        _2755 = ((_2928 * 0.039999999105930328369140625) * _2943) + _2603;
        _2757 = ((_2930 * 0.039999999105930328369140625) * _2943) + _2605;
        _2759 = ((_2932 * 0.039999999105930328369140625) * _2943) + _2607;
    }
    else
    {
        _2749 = _2280;
        _2751 = _2282;
        _2753 = _2284;
        _2755 = _2603;
        _2757 = _2605;
        _2759 = _2607;
    }
    float _4675 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4686 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4697 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    uint _2779 = _237 + 6u;
    float _2787 = _677 / cbSceneParam._m0[86u].x;
    float _2788 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2842 = _2841 / _612;
        float _2853 = _2842 * _662;
        float _2854 = _663 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2856 = _2842 * _664;
        float _2858 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2859 = _2858 + cbSceneParam._m0[79u].w;
        float _2860 = cbSceneParam._m0[79u].w - _2854;
        float _2866 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2856 * _2856));
        float _2869 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2866;
        float _2874 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2876 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3029;
        if (abs((_2855 - _2858) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3029 = ((((_2859 > 0.0) ? exp2(_2874 * _2859) : (2.0 - exp2(_2876 * _2859))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2869;
        }
        else
        {
            float _2989 = 1.0 / cbSceneParam._m0[80u].x;
            float _2990 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : max(_2859, _2860));
            float _2991 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : min(_2859, _2860));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            _3029 = ((abs(_2866 / _2855) * cbSceneParam._m0[80u].y) * ((((_3000 - _3001) * 2.0) - ((exp2(_2874 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0)))) - exp2(_2874 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))))) * _2989)) - ((exp2(_2876 * _3000) - exp2(_2876 * _3001)) * _2989))) + (_2869 * cbSceneParam._m0[80u].z);
        }
        vec4 _3031 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3040 = exp2((_3029 * (-1.44269502162933349609375)) * (1.0 - _3031.w));
        float _3041 = log2(_3040);
        float _3057 = log2(_2807);
        _2878 = (exp2(_3057 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].x)) * _3031.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2880 = (exp2(_3057 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].y)) * _3031.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2882 = (exp2(_3057 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].z)) * _3031.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2884 = _3040 * _2807;
    }
    else
    {
        _2878 = _2804;
        _2880 = _2805;
        _2882 = _2806;
        _2884 = _2807;
    }
    float _2896 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2897 = _2896 == 3.0;
    float _2898 = log2(_2884);
    float _2905 = exp2(_2898 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2749 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _743))) + ((_2755 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2906 = exp2(_2898 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2751 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _743))) + ((_2757 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2898 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2753 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _743))) + ((_2759 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2916 = (_2896 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2916 * (_2897 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.y = _2916 * (_2897 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.z = _2916 * (_2897 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.w = cbInstanceData._m0[_2779].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
}


