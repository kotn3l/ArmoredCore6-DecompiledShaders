#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1197;
float _3581;
float _3582;
float _3583;
float _3584;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _361 = _357.z;
    float _365 = (_357.x * 2.0) + (-1.0);
    float _366 = (_357.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3593 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    float _378 = _365 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_331.x * 2.0) + (-1.0)));
    float _379 = _366 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_331.y * 2.0) + (-1.0)));
    float _382 = fma(_373, _233, fma(_379, _240, _378 * _226));
    float _385 = fma(_373, _234, fma(_379, _241, _378 * _227));
    float _388 = fma(_373, _235, fma(_379, _242, _378 * _228));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = 1.0 - _430;
    float _440 = (cbMtdParam._m0[19u].x + dot(vec4(_392 * _382, _392 * _385, _392 * _388, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_430 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[21u].z);
    float _3604 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _443 = (-0.0) - cbMtdParam._m0[24u].y;
    float _445 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _453 = _441 - ((_441 * TEXCOORD_8.x) * _446);
    float _454 = _441 - ((_441 * TEXCOORD_8.y) * _446);
    float _455 = _441 - ((_441 * TEXCOORD_8.z) * _446);
    float _462 = (_453 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) + _290;
    float _463 = (_454 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) + _291;
    float _464 = (_455 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) + _292;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _509 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3625 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _518 = ((((cbMtdParam._m0[10u].x - _462) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _510) + _462;
    float _519 = ((((cbMtdParam._m0[10u].y - _463) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _510) + _463;
    float _520 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _464)) * _510) + _464;
    float _525 = (((_331.z - _361) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _361;
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _546 = (_539.x * 2.0) + (-1.0);
    float _547 = (_539.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3636 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _556 = ((_539.z - _525) * _453) + _525;
    float _559 = ((cbMtdParam._m0[23u].y - _556) * _510) + _556;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3647 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _601 = ((sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) - _373) * _455) + _373;
    float _604 = (((_546 - _378) * _453) + _378) + (cbMtdParam._m0[21u].x * _378);
    float _605 = (((_547 - _379) * _454) + _379) + (cbMtdParam._m0[21u].x * _379);
    float _616 = (((_584 - _604) + (_604 * cbMtdParam._m0[22u].z)) * _510) + _604;
    float _617 = (((_585 - _605) + (_605 * cbMtdParam._m0[22u].z)) * _510) + _605;
    float _618 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _601)) + _601;
    float _620 = cbMtdParam._m0[22u].x + _357.w;
    float _623 = fma(_618, _233, fma(_617, _240, _616 * _226));
    float _626 = fma(_618, _234, fma(_617, _241, _616 * _227));
    float _629 = fma(_618, _235, fma(_617, _242, _616 * _228));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3658 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _637 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3680 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3691 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3702 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    vec4 _719 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _721 = _719.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _878 = sqrt(((_705 * _705) + (_706 * _706)) + (_707 * _707));
        float _884 = (cbMatDynParam._m0[5u].x * _878) + cbMatDynParam._m0[5u].y;
        float _3713 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _889 = (cbMatDynParam._m0[5u].z * _878) + cbMatDynParam._m0[5u].w;
        float _3724 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) - _885)) + _885) < ((_721 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _754 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _757 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _760 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    uint _773 = _245 + 9u;
    uint _774 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_774].z;
    float _3735 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _798 = ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_634, _635, _636), vec3(_712, _713, _714));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _634) - _712;
    float _807 = (_802 * _635) - _713;
    float _808 = (_802 * _636) - _714;
    float _812 = abs(dot(vec3(_712, _713, _714), vec3(_634, _635, _636)));
    float _3768 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_637);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _925 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _929 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _954 = _859 + _634;
        float _955 = _863 + _635;
        float _956 = _867 + _636;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_634, _635, _636), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3816 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_634, _635, _636), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3849 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_634, _635, _636), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3882 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1239 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1243 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1247 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1270 = _859 + _634;
        float _1271 = _863 + _635;
        float _1272 = _867 + _636;
        float _1282 = fma(_1272, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270)) - _1239;
        float _1283 = fma(_1272, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270)) - _1243;
        float _1284 = fma(_1272, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270)) - _1247;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1239 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1243 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[35u].z) + ((((((_1247 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1338 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1305.x + (-0.5));
        float _1340 = _1338 * (_1305.y + (-0.5));
        float _1341 = _1338 * (_1305.z + (-0.5));
        float _1348 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1312.x + (-0.5));
        float _1350 = _1348 * (_1312.y + (-0.5));
        float _1351 = _1348 * (_1312.z + (-0.5));
        float _1358 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1319.x + (-0.5));
        float _1360 = _1358 * (_1319.y + (-0.5));
        float _1361 = _1358 * (_1319.z + (-0.5));
        float _1368 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1326.x + (-0.5));
        float _1370 = _1368 * (_1326.y + (-0.5));
        float _1371 = _1368 * (_1326.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_634, _635, _636), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3945 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1402 + 1.0))) + _1407) * _1372;
        float _1417 = _1340 * 0.5;
        float _1418 = _1350 * 0.5;
        float _1419 = _1360 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_634, _635, _636), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3978 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1444 + 1.0))) + _1449) * _1373;
        float _1459 = _1341 * 0.5;
        float _1460 = _1351 * 0.5;
        float _1461 = _1361 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_634, _635, _636), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4011 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1486 + 1.0))) + _1491) * _1374;
        _1508 = _1341;
        _1509 = _1340;
        _1510 = _1339;
        _1511 = _1351;
        _1512 = _1350;
        _1513 = _1349;
        _1514 = _1361;
        _1515 = _1360;
        _1516 = _1359;
        _1517 = _1374;
        _1518 = _1373;
        _1519 = _1372;
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = _1197;
        _1518 = _1197;
        _1519 = _1197;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1555 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1532));
    float _1576 = _806 * 0.5;
    float _1577 = _807 * 0.5;
    float _1578 = _808 * 0.5;
    float _1579 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1582 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1585 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1619;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1592 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1596 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1600 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1607 = dot(vec4(cbModelParam._m0[39u]), vec4(_1576, _1577, _1578, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1630;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1621 = dot(vec4(cbModelParam._m0[40u]), vec4(_1576, _1577, _1578, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1634 = (_1630 * cbModelParam._m0[1u].x) + (_1619 * (1.0 - cbModelParam._m0[1u].x));
    float _1644 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _637);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1644 : min(cbModelParam._m0[25u].z, _1644));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1706 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1709 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1737 = frontier_phi_17_15_ladder;
        }
        float _1960;
        if (_1706 > 0.0)
        {
            _1960 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1960 = frontier_phi_26_22_ladder;
        }
        float _2206;
        if (_1709 > 0.0)
        {
            _2206 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2206 = frontier_phi_38_33_ladder;
        }
        float _2208 = isnan(_1960) ? _1737 : (isnan(_1737) ? _1960 : min(_1737, _1960));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1703) + _1692;
        float _2214 = (_2209 * _1706) + _1696;
        float _2215 = (_2209 * _1709) + _1700;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1645);
            frontier_phi_16_38_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_16_38_ladder_2;
        _1727 = frontier_phi_16_38_ladder_1;
        _1729 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1645);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _637);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1787 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1791 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1795 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1798 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1801 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1804 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1965;
        if (_1798 > 0.0)
        {
            _1965 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1965 = frontier_phi_28_24_ladder;
        }
        float _2233;
        if (_1801 > 0.0)
        {
            _2233 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2233 = frontier_phi_40_35_ladder;
        }
        float _2438;
        if (_1804 > 0.0)
        {
            _2438 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2438 = frontier_phi_49_46_ladder;
        }
        float _2440 = isnan(_2233) ? _1965 : (isnan(_1965) ? _2233 : min(_1965, _2233));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1798) + _1787;
        float _2446 = (_2441 * _1801) + _1791;
        float _2447 = (_2441 * _1804) + _1795;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_25_49_ladder = _2646.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2646.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2646.x * cbModelParam._m0[1u].z;
        }
        _1823 = frontier_phi_25_49_ladder_2;
        _1825 = frontier_phi_25_49_ladder_1;
        _1827 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1734);
        _1823 = _1807.x * cbModelParam._m0[1u].z;
        _1825 = _1807.y * cbModelParam._m0[1u].z;
        _1827 = _1807.z * cbModelParam._m0[1u].z;
    }
    float _1839 = ((((1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_827 * _814)) * _798;
    float _1840 = _1839 * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1841 = _1839 * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1842 = _1839 * ((cbModelParam._m0[1u].w * (_1827 - _1729)) + _1729);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1840 * cbSceneParam._m0[91u].x));
    vec4 _1859 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_733, _734));
    float _1861 = _1859.w;
    float _1873 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1861);
    float _1874 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1861);
    float _1875 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1861);
    uvec4 _1879 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1881 = _1879.x * 14u;
    uint _1882 = _1881 + 13u;
    float _1889 = _798 + (-1.0);
    float _1894 = (cbLight._m0[_1882].x * _1889) + 1.0;
    float _1895 = (cbLight._m0[_1882].y * _1889) + 1.0;
    float _1896 = (cbLight._m0[_1882].z * _1889) + 1.0;
    float _1897 = (cbLight._m0[_1882].w * _1889) + 1.0;
    uint _1898 = _1881 + 5u;
    float _1904 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1908 = _1881 + 4u;
    float _1918 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1922 = _1881 | 1u;
    float _1933 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_634, _635, _636));
    float _1936 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_634, _635, _636));
    float _4147 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _4158 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1941 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1943 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _1950 = ((cbLight._m0[_1898].x * _1904) * _1943) + (((cbLight._m0[_1908].x * _1873) * _1918) * _1941);
    float _1951 = ((_1904 * cbLight._m0[_1898].y) * _1943) + (((cbLight._m0[_1908].y * _1874) * _1918) * _1941);
    float _1952 = ((_1904 * cbLight._m0[_1898].z) * _1943) + (((cbLight._m0[_1908].z * _1875) * _1918) * _1941);
    uvec4 _1957 = floatBitsToUint(cbLight._m0[_1881 + 12u]);
    bool _1959 = _1957.x == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1959)
    {
        _1970 = _1950;
        _1972 = _1951;
        _1974 = _1952;
    }
    else
    {
        uint _1978 = _1881 + 6u;
        float _1994 = (dot(vec3(cbLight._m0[_1881 + 2u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _1995 = _1994 * _1994;
        float _4169 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1997 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _1970 = (((cbLight._m0[_1978].x * 0.3183098733425140380859375) * _1996) * _1997) + _1950;
        _1972 = (((cbLight._m0[_1978].y * 0.3183098733425140380859375) * _1996) * _1997) + _1951;
        _1974 = (((cbLight._m0[_1978].z * 0.3183098733425140380859375) * _1996) * _1997) + _1952;
    }
    bool _1977 = _1957.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1977)
    {
        _2015 = _1970;
        _2017 = _1972;
        _2019 = _1974;
    }
    else
    {
        uint _2177 = _1881 + 7u;
        float _2193 = (dot(vec3(cbLight._m0[_1881 + 3u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2194 = _2193 * _2193;
        float _4185 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2196 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2015 = (((cbLight._m0[_2177].x * 0.3183098733425140380859375) * _2195) * _2196) + _1970;
        _2017 = (((cbLight._m0[_2177].y * 0.3183098733425140380859375) * _2195) * _2196) + _1972;
        _2019 = (((cbLight._m0[_2177].z * 0.3183098733425140380859375) * _2195) * _2196) + _1974;
    }
    uint _2022 = _1881 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _637) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1881].x + _712;
    float _2038 = cbLight._m0[_1881].y + _713;
    float _2039 = cbLight._m0[_1881].z + _714;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1881].xyz));
    float _4201 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2051 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2052 = dot(vec3(_634, _635, _636), vec3(_2044, _2045, _2046));
    float _4223 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2044, _2045, _2046));
    float _4234 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2036;
    float _2087 = (0.5 / (((_2051 * ((_2050 * _2076) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2076) + _2036) * _2050))) * _2050;
    float _4245 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2103 = _1881 + 9u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _637) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1922].x + _712;
    float _2117 = cbLight._m0[_1922].y + _713;
    float _2118 = cbLight._m0[_1922].z + _714;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1922].xyz));
    float _4256 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2130 = dot(vec3(_634, _635, _636), vec3(_2123, _2124, _2125));
    float _4267 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2123, _2124, _2125));
    float _4278 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2115 * _2115;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2152 = 1.0 - _2115;
    float _2162 = (0.5 / (((_2051 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2152) + _2115) * _2129))) * _2129;
    float _4289 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    float _2174 = (((_2151 * cbLight._m0[_2103].x) * _2164) * _1904) + ((((cbLight._m0[_2022].x * _1873) * _2075) * _2089) * _1918);
    float _2175 = (((_2151 * cbLight._m0[_2103].y) * _2164) * _1904) + ((((cbLight._m0[_2022].y * _1874) * _2075) * _2089) * _1918);
    float _2176 = (((_2151 * cbLight._m0[_2103].z) * _2164) * _1904) + ((((cbLight._m0[_2022].z * _1875) * _2075) * _2089) * _1918);
    float _2238;
    float _2240;
    float _2242;
    if (_1959)
    {
        _2238 = _2174;
        _2240 = _2175;
        _2242 = _2176;
    }
    else
    {
        uint _2244 = _1881 + 2u;
        uint _2248 = _1881 + 10u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _637) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _712;
        float _2265 = cbLight._m0[_2244].y + _713;
        float _2266 = cbLight._m0[_2244].z + _714;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2244].xyz));
        float _4300 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2278 = dot(vec3(_634, _635, _636), vec3(_2271, _2272, _2273));
        float _4311 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4322 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_2051 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2300) + _2263) * _2277))) * _2277;
        float _4333 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2238 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2174;
        _2240 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2175;
        _2242 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2176;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1977)
    {
        _2348 = _2238;
        _2350 = _2240;
        _2352 = _2242;
    }
    else
    {
        uint _2359 = _1881 + 3u;
        uint _2363 = _1881 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _637) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _712;
        float _2380 = cbLight._m0[_2359].y + _713;
        float _2381 = cbLight._m0[_2359].z + _714;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2359].xyz));
        float _4349 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2393 = dot(vec3(_634, _635, _636), vec3(_2386, _2387, _2388));
        float _4360 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4371 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2415 = 1.0 - _2378;
        float _2425 = (0.5 / (((_2051 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2415) + _2378) * _2392))) * _2392;
        float _4382 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2348 = (((_2414 * cbLight._m0[_2363].x) * _2427) * _2428) + _2238;
        _2350 = (((_2414 * cbLight._m0[_2363].y) * _2427) * _2428) + _2240;
        _2352 = (((_2414 * cbLight._m0[_2363].z) * _2427) * _2428) + _2242;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1879.y == 0u)
    {
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2503;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2503;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2503;
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2519)));
        float _2540 = (log2(_2506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
        }
        else
        {
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            uint _2809 = 0u;
            uint _2818;
            bool _2819;
            for (;;)
            {
                _2818 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                _2819 = _2818 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2819)
                {
                    frontier_phi_66_pred = _2803;
                    frontier_phi_66_pred_1 = _2808;
                    frontier_phi_66_pred_2 = _2807;
                    frontier_phi_66_pred_3 = _2806;
                    frontier_phi_66_pred_4 = _2805;
                    frontier_phi_66_pred_5 = _2804;
                }
                else
                {
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    uint _2954;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2818;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2958 = uint(findLSB(_2954)) + (_2809 << 5u);
                        uint _2955 = (_2954 + 4294967295u) & _2954;
                        uint _2960 = _2958 * 48u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2980 = (_2958 * 48u) + 4u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _2999 = (_2958 * 48u) + 8u;
                        vec3 _3010 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x));
                        float _3014 = _2974.x - _2504;
                        float _3015 = _2974.y - _2505;
                        float _3016 = _2974.z - _2506;
                        float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                        float _3020 = inversesqrt(_3017);
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3024 = dot(vec3(_754, _757, _760), vec3(_3021, _3022, _3023));
                        float _3029 = 1.0 - (_3017 * _2974.w);
                        float _4408 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3031 = sqrt(_3017) * _2993.w;
                        float _3034 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _3024) + _3035;
                        float _3041 = _3031 * _3031;
                        float _3045 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3030) / ((_3041 * 0.699999988079071044921875) + 1.0);
                        float _3049 = (-0.0) - _2504;
                        float _3050 = (-0.0) - _2505;
                        float _3051 = (-0.0) - _2506;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3066 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                        float _3067 = 1.0 - _814;
                        float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                        float _3075 = _3074 * _3074;
                        float _3076 = _3075 * _3075;
                        float _3077 = _3056 + _3021;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3087 = dot(vec3(_754, _757, _760), vec3(_3056, _3057, _3058));
                        float _4424 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3091 = dot(vec3(_754, _757, _760), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                        float _4435 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                        float _3099 = _3034 * _3075;
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3024) + _3100;
                        float _4446 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3105 = 1.0 - _3075;
                        float _3115 = (0.5 / (((_3104 * ((_3090 * _3105) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3075) * _3090))) * _3104;
                        float _4457 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3126 = (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3098 * _3098) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125))) * _3030;
                        _2878 = (_3045 * _2993.x) + _2951;
                        _2879 = (_3045 * _2993.y) + _2952;
                        _2880 = (_3045 * _2993.z) + _2953;
                        _2875 = (_3126 * _3010.x) + _2948;
                        _2876 = (_3126 * _3010.y) + _2949;
                        _2877 = (_3126 * _3010.z) + _2950;
                        if (_2955 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2955;
                        }
                    }
                    frontier_phi_66_pred = _2875;
                    frontier_phi_66_pred_1 = _2880;
                    frontier_phi_66_pred_2 = _2879;
                    frontier_phi_66_pred_3 = _2878;
                    frontier_phi_66_pred_4 = _2877;
                    frontier_phi_66_pred_5 = _2876;
                }
                _2652 = frontier_phi_66_pred;
                _2662 = frontier_phi_66_pred_1;
                _2660 = frontier_phi_66_pred_2;
                _2658 = frontier_phi_66_pred_3;
                _2656 = frontier_phi_66_pred_4;
                _2654 = frontier_phi_66_pred_5;
                uint _2810 = _2809 + 1u;
                if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2803 = _2652;
                    _2804 = _2654;
                    _2805 = _2656;
                    _2806 = _2658;
                    _2807 = _2660;
                    _2808 = _2662;
                    _2809 = _2810;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
        }
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.z;
        uint _2668 = (_2666 >> 8u) & 15u;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((4294967295u << _2668) & _2550) == 0u)
        {
            _2771 = _2651;
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
            _2779 = _2659;
            _2781 = _2661;
        }
        else
        {
            float _2796 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
            float _2797 = _2796 * _2504;
            float _2798 = _2796 * _2505;
            float _2799 = _2796 * _2506;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2668 < ((_2666 >> 12u) & 15u))
            {
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2931 = _2651;
                float _2932 = _2653;
                float _2933 = _2655;
                float _2934 = _2657;
                float _2935 = _2659;
                float _2936 = _2661;
                uint _2937 = _2668;
                uint _2946;
                bool _2947;
                for (;;)
                {
                    _2946 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                    _2947 = _2946 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2947)
                    {
                        frontier_phi_77_pred = _2936;
                        frontier_phi_77_pred_1 = _2935;
                        frontier_phi_77_pred_2 = _2934;
                        frontier_phi_77_pred_3 = _2933;
                        frontier_phi_77_pred_4 = _2932;
                        frontier_phi_77_pred_5 = _2931;
                    }
                    else
                    {
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        uint _3159 = _2946;
                        uint _3160;
                        vec4 _3185;
                        float _3186;
                        vec4 _3201;
                        vec3 _3213;
                        vec4 _3229;
                        vec4 _3244;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3170 = ((_2937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3159));
                            _3160 = (_3159 + 4294967295u) & _3159;
                            uint _3172 = _3170 * 40u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3186 = _3185.w;
                            uint _3188 = (_3170 * 40u) + 4u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3170 * 40u) + 8u;
                            _3213 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x));
                            uint _3216 = (_3170 * 40u) + 16u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3170 * 40u) + 20u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3170 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3170 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2506, _3278.z, fma(_2505, _3278.y, _3278.x * _2504)) + _3278.w;
                            _3291 = !((fma(_2506, _3259.z, fma(_2505, _3259.y, _3259.x * _2504)) + _3259.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3185.x - _2504;
                                float _3319 = _3185.y - _2505;
                                float _3320 = _3185.z - _2506;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3186 * _3186));
                                float _4468 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3336 = sqrt(_3321) * _3201.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_754, _757, _760))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2506, _3229.z, fma(_2505, _3229.y, _3229.x * _2504)) + _3229.w) / _3290;
                                float _3350 = (fma(_2506, _3244.z, fma(_2505, _3244.y, _3244.x * _2504)) + _3244.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4484 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _814;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2797;
                                float _3380 = _3326 - _2798;
                                float _3381 = _3327 - _2799;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_754, _757, _760), vec3((-0.0) - _2797, (-0.0) - _2798, (-0.0) - _2799));
                                float _4495 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3393 = dot(vec3(_754, _757, _760), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4506 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_754, _757, _760), vec3(_3325, _3326, _3327))) + _3402;
                                float _4517 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4528 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3356 * _3201.y;
                                frontier_phi_83_pred_1 = _3356 * _3201.x;
                                frontier_phi_83_pred_2 = _3430 * _3213.z;
                                frontier_phi_83_pred_3 = _3430 * _3213.y;
                                frontier_phi_83_pred_4 = _3430 * _3213.x;
                                frontier_phi_83_pred_5 = _3356 * _3201.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3438 = frontier_phi_83_pred;
                            _3437 = frontier_phi_83_pred_1;
                            _3436 = frontier_phi_83_pred_2;
                            _3435 = frontier_phi_83_pred_3;
                            _3434 = frontier_phi_83_pred_4;
                            _3439 = frontier_phi_83_pred_5;
                            _3143 = _3437 + _3156;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3140 = _3434 + _3153;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            if (_3160 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3160;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3145;
                        frontier_phi_77_pred_1 = _3144;
                        frontier_phi_77_pred_2 = _3143;
                        frontier_phi_77_pred_3 = _3142;
                        frontier_phi_77_pred_4 = _3141;
                        frontier_phi_77_pred_5 = _3140;
                    }
                    _2782 = frontier_phi_77_pred;
                    _2780 = frontier_phi_77_pred_1;
                    _2778 = frontier_phi_77_pred_2;
                    _2776 = frontier_phi_77_pred_3;
                    _2774 = frontier_phi_77_pred_4;
                    _2772 = frontier_phi_77_pred_5;
                    uint _2938 = _2937 + 1u;
                    if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2931 = _2772;
                        _2932 = _2774;
                        _2933 = _2776;
                        _2934 = _2778;
                        _2935 = _2780;
                        _2936 = _2782;
                        _2937 = _2938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2776;
                frontier_phi_58_59_ladder_1 = _2782;
                frontier_phi_58_59_ladder_2 = _2780;
                frontier_phi_58_59_ladder_3 = _2778;
                frontier_phi_58_59_ladder_4 = _2774;
                frontier_phi_58_59_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_58_59_ladder = _2655;
                frontier_phi_58_59_ladder_1 = _2661;
                frontier_phi_58_59_ladder_2 = _2659;
                frontier_phi_58_59_ladder_3 = _2657;
                frontier_phi_58_59_ladder_4 = _2653;
                frontier_phi_58_59_ladder_5 = _2651;
            }
            _2771 = frontier_phi_58_59_ladder_5;
            _2773 = frontier_phi_58_59_ladder_4;
            _2775 = frontier_phi_58_59_ladder;
            _2777 = frontier_phi_58_59_ladder_3;
            _2779 = frontier_phi_58_59_ladder_2;
            _2781 = frontier_phi_58_59_ladder_1;
        }
        float _2786 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2563 = (_2786 * _2777) + _2015;
        _2565 = (_2786 * _2779) + _2017;
        _2567 = (_2786 * _2781) + _2019;
        _2569 = ((_2771 * 0.039999999105930328369140625) * _2786) + _2348;
        _2571 = ((_2773 * 0.039999999105930328369140625) * _2786) + _2350;
        _2573 = ((_2775 * 0.039999999105930328369140625) * _2786) + _2352;
    }
    else
    {
        _2563 = _2015;
        _2565 = _2017;
        _2567 = _2019;
        _2569 = _2348;
        _2571 = _2350;
        _2573 = _2352;
    }
    float _4544 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4555 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4566 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2590 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2563 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _798))) + ((_2569 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    float _2591 = ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2565 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _798))) + ((_2571 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2567 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _798))) + ((_2573 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1634)) * cbPerFrame._m0[3u].x);
    uint _2593 = _245 + 6u;
    float _2601 = _733 / cbSceneParam._m0[86u].x;
    float _2602 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2676 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2677 = _2676 / _655;
        float _2688 = _2677 * _705;
        float _2689 = _706 * _2677;
        float _2690 = (-0.0) - _2689;
        float _2691 = _2677 * _707;
        float _2693 = (cbSceneParam._m0[77u].w * _2690) / _2676;
        float _2694 = _2693 + cbSceneParam._m0[79u].w;
        float _2695 = cbSceneParam._m0[79u].w - _2689;
        float _2701 = sqrt(((_2688 * _2688) + (_2689 * _2689)) + (_2691 * _2691));
        float _2704 = (1.0 - (cbSceneParam._m0[77u].w / _2676)) * _2701;
        float _2709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2690 - _2693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2694 > 0.0) ? exp2(_2709 * _2694) : (2.0 - exp2(_2711 * _2694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2704;
        }
        else
        {
            float _2832 = 1.0 / cbSceneParam._m0[80u].x;
            float _2833 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : max(_2694, _2695));
            float _2834 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : min(_2694, _2695));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            _2888 = ((abs(_2701 / _2690) * cbSceneParam._m0[80u].y) * ((((_2843 - _2844) * 2.0) - ((exp2(_2709 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0)))) - exp2(_2709 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))))) * _2832)) - ((exp2(_2711 * _2843) - exp2(_2711 * _2844)) * _2832))) + (_2704 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2621);
        _2713 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2715 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2717 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2719 = _2899 * _2621;
    }
    else
    {
        _2713 = _2618;
        _2715 = _2619;
        _2717 = _2620;
        _2719 = _2621;
    }
    bool _2926;
    vec4 _2729;
    vec4 _2751;
    float _2753;
    float _2757;
    float _2758;
    float _2759;
    float _2760;
    bool _2770;
    for (;;)
    {
        _2729 = cbMatDynParam._m0[0u];
        float _2731 = roundEven(_2729.y);
        bool _2732 = _2731 == 3.0;
        float _2733 = log2(_2719);
        float _2740 = exp2(_2733 * cbSceneParam._m0[78u].x) * _2590;
        float _2741 = exp2(_2733 * cbSceneParam._m0[78u].y) * _2591;
        float _2742 = exp2(_2733 * cbSceneParam._m0[78u].z) * _2592;
        float _2749 = _721 + (-0.5);
        _2751 = cbMtdParam._m0[1u];
        _2753 = _2751.y * _2749;
        float _2756 = (_2731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2757 = _2756 * (_2732 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2713)));
        _2758 = _2756 * (_2732 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2715)));
        _2759 = _2756 * (_2732 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2717)));
        _2760 = _2749 * 0.999000012874603271484375;
        _2770 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2770)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2760) < 0.5)
            {
                _2926 = true;
                break;
            }
        }
        uint _2867 = _773 + uint(_2729.w);
        if ((cbInstanceData._m0[_2867].w < 1.0) && ((cbInstanceData._m0[_2867].w + _2760) < 0.5))
        {
            _2926 = true;
            break;
        }
        if ((_2753 + 1.0) < _2751.x)
        {
            _2926 = true;
            break;
        }
        _2926 = false;
        break;
    }
    float _3131;
    if (_2926)
    {
        discard_state = true;
        _3131 = 0.0;
    }
    else
    {
        _3131 = cbInstanceData._m0[_2593].w;
    }
    SV_Target.x = _2757;
    SV_Target.y = _2758;
    SV_Target.z = _2759;
    SV_Target.w = _3131;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2593].w;
    discard_exit();
}


