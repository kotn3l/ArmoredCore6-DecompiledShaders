#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1129;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3437 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3448 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3459 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _278) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _279) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _315.x * cbMtdParam._m0[9u].x;
    float _321 = _315.y * cbMtdParam._m0[9u].y;
    float _322 = _315.z * cbMtdParam._m0[9u].z;
    float _326 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _292.x) * _320;
    float _329 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _292.y) * _321;
    float _332 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _292.z) * _322;
    float _339 = ((_320 - _326) * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) + _326;
    float _340 = ((_321 - _329) * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) + _329;
    float _341 = ((_322 - _332) * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) + _332;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3470 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_416 - _417) * cbMtdParam._m0[24u].w) + _417) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3481 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _339) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _449) + _339;
    float _458 = ((((cbMtdParam._m0[10u].y - _340) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _449) + _340;
    float _459 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _341)) * _449) + _341;
    float _464 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    float _468 = ((cbMtdParam._m0[23u].y - _464) * _449) + _464;
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _502 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_228, _229, _230, 0.0));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _278) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _279) + cbTextureTilingScale._m0[18u].w));
    float _519 = _517.x;
    float _524 = fract(_517.w + cbPerFrame._m0[22u].x);
    float _526 = (1.0 - _524) * _519;
    float _531 = ((_524 + (-1.0)) + _519) * 9.0;
    float _533 = ((_519 + (-1.0)) + _524) * 9.0;
    float _534 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _535 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _549 = (_526 * ((_517.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _534 : (isnan(_534) ? 3.0 : min(_534, 3.0))) * 3.1415927410125732421875);
    float _551 = (_526 * ((_517.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _535 : (isnan(_535) ? 3.0 : min(_535, 3.0))) * 3.1415927410125732421875);
    float _555 = inversesqrt(dot(vec3(_549, _551, 1.0), vec3(_549, _551, 1.0)));
    float _571 = (((((0.5 - _492) + ((_549 * 0.5) * _555)) * _502) + _492) * 2.0) + (-1.0);
    float _572 = (((((0.5 - _493) + ((_555 * 0.5) * _551)) * _502) + _493) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3512 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _589 = ((((cbMtdParam._m0[22u].z * _400) - _400) + _571) * _449) + _400;
    float _590 = ((((cbMtdParam._m0[22u].z * _401) - _401) + _572) * _449) + _401;
    float _591 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) - _395)) + _395;
    float _593 = cbMtdParam._m0[22u].x + _380.w;
    float _596 = fma(_591, _228, fma(_590, _234 * TANGENT.x, (_220 * _212) * _589));
    float _599 = fma(_591, _229, fma(_590, _234 * TANGENT.y, (_220 * _213) * _589));
    float _602 = fma(_591, _230, fma(_590, _234 * TANGENT.z, (_220 * _214) * _589));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3523 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _610 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3545 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3556 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3567 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _628 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _679 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _669);
    float _680 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _669);
    float _681 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _669);
    float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
    float _686 = _679 * _685;
    float _687 = _680 * _685;
    float _688 = _681 * _685;
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _716 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _719 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _722 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _736 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _742 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_736].x;
    float _743 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_736].y;
    float _744 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_736].z;
    float _3578 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    vec4 _756 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _760 = ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * TEXCOORD_5.w) * _756.x;
    float _761 = dot(vec3(_607, _608, _609), vec3(_686, _687, _688));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _607) - _686;
    float _769 = (_764 * _608) - _687;
    float _770 = (_764 * _609) - _688;
    float _774 = abs(dot(vec3(_686, _687, _688), vec3(_607, _608, _609)));
    float _3611 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = sqrt(_610);
    float _788 = exp2((_776 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_776 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _858 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _862 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _886 = _820 + _607;
        float _887 = _824 + _608;
        float _888 = _828 + _609;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _854;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _858;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _862;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_607, _608, _609), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3659 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_607, _608, _609), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3692 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_607, _608, _609), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3725 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1172 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1176 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1199 = _820 + _607;
        float _1200 = _824 + _608;
        float _1201 = _828 + _609;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_607, _608, _609), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3788 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_607, _608, _609), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3821 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_607, _608, _609), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3854 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1129;
        _1438 = _1129;
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _768 * 0.5;
    float _1506 = _769 * 0.5;
    float _1507 = _770 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1637 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1640 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1668 = frontier_phi_14_12_ladder;
        }
        float _1871;
        if (_1637 > 0.0)
        {
            _1871 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1871 = frontier_phi_23_19_ladder;
        }
        float _2114;
        if (_1640 > 0.0)
        {
            _2114 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2114 = frontier_phi_35_30_ladder;
        }
        float _2116 = isnan(_1871) ? _1668 : (isnan(_1668) ? _1871 : min(_1668, _1871));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1634) + _1623;
        float _2122 = (_2117 * _1637) + _1627;
        float _2123 = (_2117 * _1640) + _1631;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2124;
        float _2128 = _2124 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 > _2128) || ((_2122 < _2126) || ((_2121 < _2126) || (_2121 > _2128))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2123, cbModelParam._m0[9u].z, fma(_2122, cbModelParam._m0[9u].y, _2121 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2123, cbModelParam._m0[10u].z, fma(_2122, cbModelParam._m0[10u].y, _2121 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2123, cbModelParam._m0[11u].z, fma(_2122, cbModelParam._m0[11u].y, _2121 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_13_35_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_13_35_ladder_2;
        _1658 = frontier_phi_13_35_ladder_1;
        _1660 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1574);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1733 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1736 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _1876;
        if (_1730 > 0.0)
        {
            _1876 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2141;
        if (_1733 > 0.0)
        {
            _2141 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2141 = frontier_phi_37_32_ladder;
        }
        float _2346;
        if (_1736 > 0.0)
        {
            _2346 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2346 = frontier_phi_46_43_ladder;
        }
        float _2348 = isnan(_2141) ? _1876 : (isnan(_1876) ? _2141 : min(_1876, _2141));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1730) + _1719;
        float _2354 = (_2349 * _1733) + _1723;
        float _2355 = (_2349 * _1736) + _1727;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_22_46_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_22_46_ladder_2;
        _1757 = frontier_phi_22_46_ladder_1;
        _1759 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1665);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _788) * ((_776 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _776)) * _760;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    uvec4 _1793 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _1795 = _1793.x * 14u;
    uint _1796 = _1795 + 13u;
    float _1803 = _760 + (-1.0);
    float _1808 = (cbLight._m0[_1796].x * _1803) + 1.0;
    float _1809 = (cbLight._m0[_1796].y * _1803) + 1.0;
    float _1810 = (cbLight._m0[_1796].z * _1803) + 1.0;
    float _1811 = (cbLight._m0[_1796].w * _1803) + 1.0;
    uint _1812 = _1795 + 5u;
    float _1818 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1822 = _1795 + 4u;
    float _1829 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1833 = _1795 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_607, _608, _609));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_607, _608, _609));
    float _3990 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4001 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1812].x * _1818) * _1854) + ((cbLight._m0[_1822].x * _1829) * _1852);
    float _1862 = ((_1818 * cbLight._m0[_1812].y) * _1854) + ((_1829 * cbLight._m0[_1822].y) * _1852);
    float _1863 = ((_1818 * cbLight._m0[_1812].z) * _1854) + ((_1829 * cbLight._m0[_1822].z) * _1852);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1795 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1870)
    {
        _1881 = _1861;
        _1883 = _1862;
        _1885 = _1863;
    }
    else
    {
        uint _1889 = _1795 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1795 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _4012 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1908 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1861;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1862;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1863;
    }
    bool _1888 = _1868.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1888)
    {
        _1926 = _1881;
        _1928 = _1883;
        _1930 = _1885;
    }
    else
    {
        uint _2085 = _1795 + 7u;
        float _2101 = (dot(vec3(cbLight._m0[_1795 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2102 = _2101 * _2101;
        float _4028 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2104 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1926 = (((cbLight._m0[_2085].x * 0.3183098733425140380859375) * _2103) * _2104) + _1881;
        _1928 = (((cbLight._m0[_2085].y * 0.3183098733425140380859375) * _2103) * _2104) + _1883;
        _1930 = (((cbLight._m0[_2085].z * 0.3183098733425140380859375) * _2103) * _2104) + _1885;
    }
    uint _1933 = _1795 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _610) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1795].x + _686;
    float _1949 = cbLight._m0[_1795].y + _687;
    float _1950 = cbLight._m0[_1795].z + _688;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1795].xyz));
    float _4044 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _1962 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1963 = dot(vec3(_607, _608, _609), vec3(_1955, _1956, _1957));
    float _4066 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1955, _1956, _1957));
    float _4077 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1962 * ((_1961 * _1987) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1987) + _1947) * _1961))) * _1961;
    float _4088 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2011 = _1795 + 9u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _610) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1833].x + _686;
    float _2025 = cbLight._m0[_1833].y + _687;
    float _2026 = cbLight._m0[_1833].z + _688;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1833].xyz));
    float _4099 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2038 = dot(vec3(_607, _608, _609), vec3(_2031, _2032, _2033));
    float _4110 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2031, _2032, _2033));
    float _4121 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2023 * _2023;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2059 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = 1.0 - _2023;
    float _2070 = (0.5 / (((_1962 * ((_2037 * _2060) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2060) + _2023) * _2037))) * _2037;
    float _4132 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    float _2082 = (((_2059 * cbLight._m0[_2011].x) * _2072) * _1818) + (((_1986 * cbLight._m0[_1933].x) * _2000) * _1829);
    float _2083 = (((_2059 * cbLight._m0[_2011].y) * _2072) * _1818) + (((_1986 * cbLight._m0[_1933].y) * _2000) * _1829);
    float _2084 = (((_2059 * cbLight._m0[_2011].z) * _2072) * _1818) + (((_1986 * cbLight._m0[_1933].z) * _2000) * _1829);
    float _2146;
    float _2148;
    float _2150;
    if (_1870)
    {
        _2146 = _2082;
        _2148 = _2083;
        _2150 = _2084;
    }
    else
    {
        uint _2152 = _1795 + 2u;
        uint _2156 = _1795 + 10u;
        float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _610) * 0.949999988079071044921875);
        float _2171 = _2170 * _2170;
        float _2172 = cbLight._m0[_2152].x + _686;
        float _2173 = cbLight._m0[_2152].y + _687;
        float _2174 = cbLight._m0[_2152].z + _688;
        float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
        float _2179 = _2178 * _2172;
        float _2180 = _2178 * _2173;
        float _2181 = _2178 * _2174;
        float _2182 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2152].xyz));
        float _4143 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2186 = dot(vec3(_607, _608, _609), vec3(_2179, _2180, _2181));
        float _4154 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2190 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2179, _2180, _2181));
        float _4165 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2194 = _2171 * _2171;
        float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
        float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2208 = 1.0 - _2171;
        float _2218 = (0.5 / (((_1962 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2208) + _2171) * _2185))) * _2185;
        float _4176 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2146 = (((_2207 * cbLight._m0[_2156].x) * _2220) * _2221) + _2082;
        _2148 = (((_2207 * cbLight._m0[_2156].y) * _2220) * _2221) + _2083;
        _2150 = (((_2207 * cbLight._m0[_2156].z) * _2220) * _2221) + _2084;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1888)
    {
        _2256 = _2146;
        _2258 = _2148;
        _2260 = _2150;
    }
    else
    {
        uint _2267 = _1795 + 3u;
        uint _2271 = _1795 + 11u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _610) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _686;
        float _2288 = cbLight._m0[_2267].y + _687;
        float _2289 = cbLight._m0[_2267].z + _688;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2267].xyz));
        float _4192 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2301 = dot(vec3(_607, _608, _609), vec3(_2294, _2295, _2296));
        float _4203 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4214 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_1962 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2323) + _2286) * _2300))) * _2300;
        float _4225 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2256 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2146;
        _2258 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2148;
        _2260 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2150;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1793.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            uint _2710 = 0u;
            uint _2719;
            bool _2720;
            for (;;)
            {
                _2719 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                _2720 = _2719 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2720)
                {
                    frontier_phi_61_pred = _2704;
                    frontier_phi_61_pred_1 = _2709;
                    frontier_phi_61_pred_2 = _2708;
                    frontier_phi_61_pred_3 = _2707;
                    frontier_phi_61_pred_4 = _2706;
                    frontier_phi_61_pred_5 = _2705;
                }
                else
                {
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    uint _2834;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2719;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2838 = uint(findLSB(_2834)) + (_2710 << 5u);
                        uint _2835 = (_2834 + 4294967295u) & _2834;
                        uint _2840 = _2838 * 48u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2860 = (_2838 * 48u) + 4u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2879 = (_2838 * 48u) + 8u;
                        vec3 _2890 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x));
                        float _2894 = _2854.x - _2412;
                        float _2895 = _2854.y - _2413;
                        float _2896 = _2854.z - _2414;
                        float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                        float _2900 = inversesqrt(_2897);
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2904 = dot(vec3(_716, _719, _722), vec3(_2901, _2902, _2903));
                        float _2909 = 1.0 - (_2897 * _2854.w);
                        float _4251 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2911 = sqrt(_2897) * _2873.w;
                        float _2914 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2904) + _2915;
                        float _2921 = _2911 * _2911;
                        float _2925 = ((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2910) / ((_2921 * 0.699999988079071044921875) + 1.0);
                        float _2929 = (-0.0) - _2412;
                        float _2930 = (-0.0) - _2413;
                        float _2931 = (-0.0) - _2414;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2946 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2947 = 1.0 - _776;
                        float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                        float _2955 = _2954 * _2954;
                        float _2956 = _2955 * _2955;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2967 = dot(vec3(_716, _719, _722), vec3(_2936, _2937, _2938));
                        float _4267 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2971 = dot(vec3(_716, _719, _722), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                        float _4278 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                        float _2979 = _2914 * _2955;
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2904) + _2980;
                        float _4289 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2985 = 1.0 - _2955;
                        float _2995 = (0.5 / (((_2984 * ((_2970 * _2985) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2955) * _2970))) * _2984;
                        float _4300 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _3005 = (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_2978 * _2978) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2910;
                        _2763 = (_2925 * _2873.x) + _2831;
                        _2764 = (_2925 * _2873.y) + _2832;
                        _2765 = (_2925 * _2873.z) + _2833;
                        _2760 = (_3005 * _2890.x) + _2828;
                        _2761 = (_3005 * _2890.y) + _2829;
                        _2762 = (_3005 * _2890.z) + _2830;
                        if (_2835 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2835;
                        }
                    }
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                _2560 = frontier_phi_61_pred;
                _2570 = frontier_phi_61_pred_1;
                _2568 = frontier_phi_61_pred_2;
                _2566 = frontier_phi_61_pred_3;
                _2564 = frontier_phi_61_pred_4;
                _2562 = frontier_phi_61_pred_5;
                uint _2711 = _2710 + 1u;
                if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2704 = _2560;
                    _2705 = _2562;
                    _2706 = _2564;
                    _2707 = _2566;
                    _2708 = _2568;
                    _2709 = _2570;
                    _2710 = _2711;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
        }
        else
        {
            float _2697 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2698 = _2697 * _2412;
            float _2699 = _2697 * _2413;
            float _2700 = _2697 * _2414;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2811 = _2559;
                float _2812 = _2561;
                float _2813 = _2563;
                float _2814 = _2565;
                float _2815 = _2567;
                float _2816 = _2569;
                uint _2817 = _2576;
                uint _2826;
                bool _2827;
                for (;;)
                {
                    _2826 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                    _2827 = _2826 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2827)
                    {
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3023 = _2811;
                        float _3024 = _2812;
                        float _3025 = _2813;
                        float _3026 = _2814;
                        float _3027 = _2815;
                        float _3028 = _2816;
                        uint _3029 = _2826;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3098;
                        vec4 _3113;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3040 = ((_2817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3085 = (_3040 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3040 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3040 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3040 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2414, _3147.z, fma(_2413, _3147.y, _3147.x * _2412)) + _3147.w;
                            _3160 = !((fma(_2414, _3128.z, fma(_2413, _3128.y, _3128.x * _2412)) + _3128.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3055.x - _2412;
                                float _3188 = _3055.y - _2413;
                                float _3189 = _3055.z - _2414;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3056 * _3056));
                                float _4311 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3205 = sqrt(_3190) * _3071.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_716, _719, _722))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2414, _3098.z, fma(_2413, _3098.y, _3098.x * _2412)) + _3098.w) / _3159;
                                float _3219 = (fma(_2414, _3113.z, fma(_2413, _3113.y, _3113.x * _2412)) + _3113.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4327 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _776;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2698;
                                float _3249 = _3195 - _2699;
                                float _3250 = _3196 - _2700;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_716, _719, _722), vec3((-0.0) - _2698, (-0.0) - _2699, (-0.0) - _2700));
                                float _4338 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3262 = dot(vec3(_716, _719, _722), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4349 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_716, _719, _722), vec3(_3194, _3195, _3196))) + _3271;
                                float _4360 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4371 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3299 * _3083.x;
                                frontier_phi_73_pred_1 = _3299 * _3083.y;
                                frontier_phi_73_pred_2 = _3225 * _3071.z;
                                frontier_phi_73_pred_3 = _3225 * _3071.y;
                                frontier_phi_73_pred_4 = _3225 * _3071.x;
                                frontier_phi_73_pred_5 = _3299 * _3083.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_73_pred;
                            _3304 = frontier_phi_73_pred_1;
                            _3308 = frontier_phi_73_pred_2;
                            _3307 = frontier_phi_73_pred_3;
                            _3306 = frontier_phi_73_pred_4;
                            _3305 = frontier_phi_73_pred_5;
                            _3013 = _3306 + _3026;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            _3010 = _3303 + _3023;
                            _3011 = _3304 + _3024;
                            _3012 = _3305 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3013;
                        frontier_phi_67_pred_1 = _3014;
                        frontier_phi_67_pred_2 = _3015;
                        frontier_phi_67_pred_3 = _3012;
                        frontier_phi_67_pred_4 = _3011;
                        frontier_phi_67_pred_5 = _3010;
                    }
                    _2679 = frontier_phi_67_pred;
                    _2681 = frontier_phi_67_pred_1;
                    _2683 = frontier_phi_67_pred_2;
                    _2677 = frontier_phi_67_pred_3;
                    _2675 = frontier_phi_67_pred_4;
                    _2673 = frontier_phi_67_pred_5;
                    uint _2818 = _2817 + 1u;
                    if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2811 = _2673;
                        _2812 = _2675;
                        _2813 = _2677;
                        _2814 = _2679;
                        _2815 = _2681;
                        _2816 = _2683;
                        _2817 = _2818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2681;
                frontier_phi_55_56_ladder_1 = _2683;
                frontier_phi_55_56_ladder_2 = _2679;
                frontier_phi_55_56_ladder_3 = _2677;
                frontier_phi_55_56_ladder_4 = _2675;
                frontier_phi_55_56_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            _2672 = frontier_phi_55_56_ladder_5;
            _2674 = frontier_phi_55_56_ladder_4;
            _2676 = frontier_phi_55_56_ladder_3;
            _2678 = frontier_phi_55_56_ladder_2;
            _2680 = frontier_phi_55_56_ladder;
            _2682 = frontier_phi_55_56_ladder_1;
        }
        float _2687 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2471 = (_2687 * _2678) + _1926;
        _2473 = (_2687 * _2680) + _1928;
        _2475 = (_2687 * _2682) + _1930;
        _2477 = ((_2672 * 0.039999999105930328369140625) * _2687) + _2256;
        _2479 = ((_2674 * 0.039999999105930328369140625) * _2687) + _2258;
        _2481 = ((_2676 * 0.039999999105930328369140625) * _2687) + _2260;
    }
    else
    {
        _2471 = _1926;
        _2473 = _1928;
        _2475 = _1930;
        _2477 = _2256;
        _2479 = _2258;
        _2481 = _2260;
    }
    float _4387 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4398 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4409 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    uint _2501 = _259 + 6u;
    float _2509 = _694 / cbSceneParam._m0[86u].x;
    float _2510 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _628 : (isnan(_628) ? cbSceneParam._m0[77u].w : min(_628, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_628 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_628) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _628 : min(cbSceneParam._m0[80u].w, _628));
        float _2585 = _2584 / _628;
        float _2596 = _2585 * _679;
        float _2597 = _680 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _681;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2733 = 1.0 / cbSceneParam._m0[80u].x;
            float _2734 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2735 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            _2773 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2744 - _2745) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))))) * _2733)) - ((exp2(_2620 * _2744) - exp2(_2620 * _2745)) * _2733))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2529);
        _2622 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2784 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    float _2640 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2641 = _2640 == 3.0;
    float _2642 = log2(_2628);
    float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2471 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _760))) + ((_2477 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2473 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _760))) + ((_2479 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2475 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _760))) + ((_2481 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2660 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2660 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2660 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2660 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


