#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1007;
float _3654;
float _3655;
float _3656;
float _3657;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _294 = _290.z;
    float _299 = (_290.x * 2.0) + (-1.0);
    float _301 = (_290.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3666 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))));
    float _311 = fma(_308, _212, fma(_301, _219, _299 * _205));
    float _314 = fma(_308, _213, fma(_301, _220, _299 * _206));
    float _317 = fma(_308, _214, fma(_301, _221, _299 * _207));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _369 = (cbMtdParam._m0[19u].x + dot(vec4(_321 * _311, _321 * _314, _321 * _317, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_359 - _360) * cbMtdParam._m0[24u].z) + _360) * cbMtdParam._m0[21u].z);
    float _3677 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _377 = (_370 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _378 = (_370 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _379 = (_370 * (cbMtdParam._m0[17u].z - _272)) + _272;
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _399 = (_392.x * 2.0) + (-1.0);
    float _400 = (_392.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3688 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _409 = ((_392.z - _294) * _370) + _294;
    float _419 = ((sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _308) * _370) + _308;
    float _422 = (((_399 - _299) * _370) + _299) + (cbMtdParam._m0[21u].x * _299);
    float _423 = (((_400 - _301) * _370) + _301) + (cbMtdParam._m0[21u].x * _301);
    float _428 = cbMtdParam._m0[22u].x + _290.w;
    float _431 = fma(_419, _212, fma(_423, _219, _422 * _205));
    float _434 = fma(_419, _213, fma(_423, _220, _422 * _206));
    float _437 = fma(_419, _214, fma(_423, _221, _422 * _207));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _3699 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _445 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3721 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3732 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3743 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _463 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _514 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _504);
    float _515 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _504);
    float _516 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _504);
    float _520 = inversesqrt(dot(vec3(_514, _515, _516), vec3(_514, _515, _516)));
    float _521 = _514 * _520;
    float _522 = _515 * _520;
    float _523 = _516 * _520;
    vec4 _528 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _530 = _528.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _687 = sqrt(((_514 * _514) + (_515 * _515)) + (_516 * _516));
        float _693 = (cbMatDynParam._m0[5u].x * _687) + cbMatDynParam._m0[5u].y;
        float _3754 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _698 = (cbMatDynParam._m0[5u].z * _687) + cbMatDynParam._m0[5u].w;
        float _3765 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) - _694)) + _694) < ((_530 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _542 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _543 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _563 = fma(_444, cbSceneParam._m0[5u].z, fma(_443, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _442));
    float _566 = fma(_444, cbSceneParam._m0[6u].z, fma(_443, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _442));
    float _569 = fma(_444, cbSceneParam._m0[7u].z, fma(_443, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _442));
    uint _582 = _224 + 9u;
    uint _583 = _582 + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3776 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _603 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _542, cbSceneParam._m0[86u].y * _543));
    float _607 = ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * TEXCOORD_5.w) * _603.x;
    float _608 = dot(vec3(_442, _443, _444), vec3(_521, _522, _523));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _442) - _521;
    float _616 = (_611 * _443) - _522;
    float _617 = (_611 * _444) - _523;
    float _621 = abs(dot(vec3(_521, _522, _523), vec3(_442, _443, _444)));
    float _3809 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_445);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_676, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668));
        float _735 = fma(_676, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668));
        float _739 = fma(_676, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668));
        float _764 = _668 + _442;
        float _765 = _672 + _443;
        float _766 = _676 + _444;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_442, _443, _444), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3857 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_442, _443, _444), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3890 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_442, _443, _444), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3923 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_676, cbModelParam._m0[30u].z, fma(_672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _668));
        float _1053 = fma(_676, cbModelParam._m0[31u].z, fma(_672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _668));
        float _1057 = fma(_676, cbModelParam._m0[32u].z, fma(_672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _668));
        float _1080 = _668 + _442;
        float _1081 = _672 + _443;
        float _1082 = _676 + _444;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_442, _443, _444), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3986 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_442, _443, _444), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4019 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_442, _443, _444), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4052 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1007;
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = _1007;
        _1329 = _1007;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1019)) + _1019;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1020)) + _1020;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1021)) + _1021;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _615 * 0.5;
    float _1387 = _616 * 0.5;
    float _1388 = _617 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _445);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_676, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_676, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_676, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1517 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1520 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1548;
        if (_1514 > 0.0)
        {
            _1548 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1548 = frontier_phi_17_15_ladder;
        }
        float _1719;
        if (_1517 > 0.0)
        {
            _1719 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1719 = frontier_phi_26_22_ladder;
        }
        float _2015;
        if (_1520 > 0.0)
        {
            _2015 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2015 = frontier_phi_38_33_ladder;
        }
        float _2017 = isnan(_1719) ? _1548 : (isnan(_1548) ? _1719 : min(_1548, _1719));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1514) + _1503;
        float _2023 = (_2018 * _1517) + _1507;
        float _2024 = (_2018 * _1520) + _1511;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2169 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_16_38_ladder = _2169.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2169.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2169.x * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_16_38_ladder_2;
        _1538 = frontier_phi_16_38_ladder_1;
        _1540 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1455);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1544 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _445);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1544 : min(cbModelParam._m0[25u].w, _1544));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1599 = fma(_676, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668)) + cbModelParam._m0[21u].w;
        float _1603 = fma(_676, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668)) + cbModelParam._m0[22u].w;
        float _1607 = fma(_676, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668)) + cbModelParam._m0[23u].w;
        float _1610 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1613 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1616 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1724;
        if (_1610 > 0.0)
        {
            _1724 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1724 = frontier_phi_28_24_ladder;
        }
        float _2042;
        if (_1613 > 0.0)
        {
            _2042 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2042 = frontier_phi_40_35_ladder;
        }
        float _2369;
        if (_1616 > 0.0)
        {
            _2369 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2369 = frontier_phi_50_47_ladder;
        }
        float _2371 = isnan(_2042) ? _1724 : (isnan(_1724) ? _2042 : min(_1724, _2042));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1610) + _1599;
        float _2377 = (_2372 * _1613) + _1603;
        float _2378 = (_2372 * _1616) + _1607;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2379;
        float _2382 = _2379 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2378 > _2382) || ((_2378 < _2380) || ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 < _2380) || (_2376 > _2382))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2378, cbModelParam._m0[17u].z, fma(_2377, cbModelParam._m0[17u].y, _2376 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2378, cbModelParam._m0[18u].z, fma(_2377, cbModelParam._m0[18u].y, _2376 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2378, cbModelParam._m0[19u].z, fma(_2377, cbModelParam._m0[19u].y, _2376 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_25_50_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1635 = frontier_phi_25_50_ladder_2;
        _1637 = frontier_phi_25_50_ladder_1;
        _1639 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1545);
        _1635 = _1619.x * cbModelParam._m0[1u].z;
        _1637 = _1619.y * cbModelParam._m0[1u].z;
        _1639 = _1619.z * cbModelParam._m0[1u].z;
    }
    float _1651 = ((((1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_636 * _623)) * _607;
    float _1652 = _1651 * ((cbModelParam._m0[1u].w * (_1635 - _1536)) + _1536);
    float _1653 = _1651 * ((cbModelParam._m0[1u].w * (_1637 - _1538)) + _1538);
    float _1654 = _1651 * ((cbModelParam._m0[1u].w * (_1639 - _1540)) + _1540);
    float _1657 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1711 = _1698 / _1710;
    float _1712 = _1702 / _1710;
    float _1713 = _1706 / _1710;
    float _1860;
    float _1861;
    float _1862;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1740 = ((uint(_1713 > cbSceneParam._m0[59u].y) + uint(_1713 > cbSceneParam._m0[59u].x)) + uint(_1713 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1741 = _1740 + 43u;
        uint _1749 = _1740 + 44u;
        uint _1757 = _1740 + 45u;
        uint _1765 = _1740 + 46u;
        float _1776 = fma(_1710, cbSceneParam._m0[_1741].w, fma(_1706, cbSceneParam._m0[_1741].z, fma(_1702, cbSceneParam._m0[_1741].y, _1698 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1710, cbSceneParam._m0[_1749].w, fma(_1706, cbSceneParam._m0[_1749].z, fma(_1702, cbSceneParam._m0[_1749].y, _1698 * cbSceneParam._m0[_1749].x)));
        float _1788 = fma(_1710, cbSceneParam._m0[_1765].w, fma(_1706, cbSceneParam._m0[_1765].z, fma(_1702, cbSceneParam._m0[_1765].y, _1698 * cbSceneParam._m0[_1765].x)));
        float _1793 = cbSceneParam._m0[33u].z * _1788;
        float _1795 = cbSceneParam._m0[33u].w * _1788;
        float _1798 = fma(_1710, cbSceneParam._m0[_1757].w, fma(_1706, cbSceneParam._m0[_1757].z, fma(_1702, cbSceneParam._m0[_1757].y, _1698 * cbSceneParam._m0[_1757].x))) / _1788;
        float _1846 = (cbSceneParam._m0[33u].x - sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713))) * cbSceneParam._m0[33u].y;
        float _4178 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1853 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1793 + _1776) / _1788, (_1795 + _1780) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 + _1776) / _1788, (_1780 - _1793) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 - _1793) / _1788, (_1780 - _1795) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 - _1795) / _1788, (_1793 + _1780) / _1788), _1798), 0.0)).x), vec4(0.25)));
        _1860 = 1.0 - (_1853 * cbSceneParam._m0[34u].x);
        _1861 = 1.0 - (_1853 * cbSceneParam._m0[34u].y);
        _1862 = 1.0 - (_1853 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1860 = 1.0;
        _1861 = 1.0;
        _1862 = 1.0;
    }
    float _1926;
    float _1928;
    float _1930;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1914 = fma(_1710, cbSceneParam._m0[63u].w, fma(_1706, cbSceneParam._m0[63u].z, fma(_1702, cbSceneParam._m0[63u].y, _1698 * cbSceneParam._m0[63u].x)));
        float _1915 = fma(_1710, cbSceneParam._m0[60u].w, fma(_1706, cbSceneParam._m0[60u].z, fma(_1702, cbSceneParam._m0[60u].y, _1698 * cbSceneParam._m0[60u].x))) / _1914;
        float _1916 = fma(_1710, cbSceneParam._m0[61u].w, fma(_1706, cbSceneParam._m0[61u].z, fma(_1702, cbSceneParam._m0[61u].y, _1698 * cbSceneParam._m0[61u].x))) / _1914;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1915 >= cbSceneParam._m0[64u].x) && (_1916 >= cbSceneParam._m0[64u].y)) && (_1915 <= cbSceneParam._m0[64u].z)) && (_1916 <= cbSceneParam._m0[64u].w))
        {
            float _2055 = fma(_1710, cbSceneParam._m0[62u].w, fma(_1706, cbSceneParam._m0[62u].z, fma(_1702, cbSceneParam._m0[62u].y, _1698 * cbSceneParam._m0[62u].x))) / _1914;
            float _2059 = isnan(cbSceneParam._m0[41u].w) ? _2055 : (isnan(_2055) ? cbSceneParam._m0[41u].w : max(_2055, cbSceneParam._m0[41u].w));
            float _2102 = (cbSceneParam._m0[33u].x - sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713))) * cbSceneParam._m0[33u].y;
            float _4194 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
            float _2109 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1915, cbSceneParam._m0[33u].w + _1916), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1915, _1916 - cbSceneParam._m0[33u].z), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].z, _1916 - cbSceneParam._m0[33u].w), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1916), _2059), 0.0)).x), vec4(0.25)));
            float _2113 = 1.0 - (_2109 * cbSceneParam._m0[34u].x);
            float _2114 = 1.0 - (_2109 * cbSceneParam._m0[34u].y);
            float _2115 = 1.0 - (_2109 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2115) ? _1862 : (isnan(_1862) ? _2115 : min(_1862, _2115));
            frontier_phi_37_36_ladder_1 = isnan(_2114) ? _1861 : (isnan(_1861) ? _2114 : min(_1861, _2114));
            frontier_phi_37_36_ladder_2 = isnan(_2113) ? _1860 : (isnan(_1860) ? _2113 : min(_1860, _2113));
        }
        else
        {
            frontier_phi_37_36_ladder = _1862;
            frontier_phi_37_36_ladder_1 = _1861;
            frontier_phi_37_36_ladder_2 = _1860;
        }
        _1926 = frontier_phi_37_36_ladder_2;
        _1928 = frontier_phi_37_36_ladder_1;
        _1930 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1926 = _1860;
        _1928 = _1861;
        _1930 = _1862;
    }
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _607 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1974 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1978 = _1937 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_442, _443, _444));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_442, _443, _444));
    float _4230 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4241 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1954].x * _1960) * _1999) + (((cbLight._m0[_1964].x * _1926) * _1974) * _1997);
    float _2007 = ((_1960 * cbLight._m0[_1954].y) * _1999) + (((cbLight._m0[_1964].y * _1928) * _1974) * _1997);
    float _2008 = ((_1960 * cbLight._m0[_1954].z) * _1999) + (((cbLight._m0[_1964].z * _1930) * _1974) * _1997);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2014)
    {
        _2116 = _2006;
        _2118 = _2007;
        _2120 = _2008;
    }
    else
    {
        uint _2124 = _1937 + 6u;
        float _2140 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4252 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2143 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2116 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _2006;
        _2118 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _2007;
        _2120 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _2008;
    }
    bool _2123 = _2012.y == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2123)
    {
        _2178 = _2116;
        _2180 = _2118;
        _2182 = _2120;
    }
    else
    {
        uint _2340 = _1937 + 7u;
        float _2356 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4268 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2359 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2178 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2116;
        _2180 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2118;
        _2182 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2120;
    }
    uint _2185 = _1937 + 8u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _445) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_1937].x + _521;
    float _2201 = cbLight._m0[_1937].y + _522;
    float _2202 = cbLight._m0[_1937].z + _523;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1937].xyz));
    float _4284 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2214 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2215 = dot(vec3(_442, _443, _444), vec3(_2207, _2208, _2209));
    float _4306 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2207, _2208, _2209));
    float _4317 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2199 * _2199;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2239 = 1.0 - _2199;
    float _2250 = (0.5 / (((_2214 * ((_2213 * _2239) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2239) + _2199) * _2213))) * _2213;
    float _4328 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    uint _2266 = _1937 + 9u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _445) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_1978].x + _521;
    float _2280 = cbLight._m0[_1978].y + _522;
    float _2281 = cbLight._m0[_1978].z + _523;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1978].xyz));
    float _4339 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2293 = dot(vec3(_442, _443, _444), vec3(_2286, _2287, _2288));
    float _4350 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2286, _2287, _2288));
    float _4361 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2278 * _2278;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2314 = (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2315 = 1.0 - _2278;
    float _2325 = (0.5 / (((_2214 * ((_2292 * _2315) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2315) + _2278) * _2292))) * _2292;
    float _4372 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    float _2337 = (((_2314 * cbLight._m0[_2266].x) * _2327) * _1960) + ((((cbLight._m0[_2185].x * _1926) * _2238) * _2252) * _1974);
    float _2338 = (((_2314 * cbLight._m0[_2266].y) * _2327) * _1960) + ((((cbLight._m0[_2185].y * _1928) * _2238) * _2252) * _1974);
    float _2339 = (((_2314 * cbLight._m0[_2266].z) * _2327) * _1960) + ((((cbLight._m0[_2185].z * _1930) * _2238) * _2252) * _1974);
    float _2395;
    float _2397;
    float _2399;
    if (_2014)
    {
        _2395 = _2337;
        _2397 = _2338;
        _2399 = _2339;
    }
    else
    {
        uint _2401 = _1937 + 2u;
        uint _2405 = _1937 + 10u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _445) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _521;
        float _2422 = cbLight._m0[_2401].y + _522;
        float _2423 = cbLight._m0[_2401].z + _523;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2401].xyz));
        float _4383 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2435 = dot(vec3(_442, _443, _444), vec3(_2428, _2429, _2430));
        float _4394 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4405 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2214 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2457) + _2420) * _2434))) * _2434;
        float _4416 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2395 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2337;
        _2397 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2338;
        _2399 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2339;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2123)
    {
        _2501 = _2395;
        _2503 = _2397;
        _2505 = _2399;
    }
    else
    {
        uint _2512 = _1937 + 3u;
        uint _2516 = _1937 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _445) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _521;
        float _2533 = cbLight._m0[_2512].y + _522;
        float _2534 = cbLight._m0[_2512].z + _523;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2512].xyz));
        float _4432 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2546 = dot(vec3(_442, _443, _444), vec3(_2539, _2540, _2541));
        float _4443 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4454 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2568 = 1.0 - _2531;
        float _2578 = (0.5 / (((_2214 * ((_2545 * _2568) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2568) + _2531) * _2545))) * _2545;
        float _4465 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2501 = (((_2567 * cbLight._m0[_2516].x) * _2580) * _2581) + _2395;
        _2503 = (((_2567 * cbLight._m0[_2516].y) * _2580) * _2581) + _2397;
        _2505 = (((_2567 * cbLight._m0[_2516].z) * _2580) * _2581) + _2399;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1935.y == 0u)
    {
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _543) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _542) / _2603)));
        float _2624 = (log2(_1713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2883)
                {
                    frontier_phi_71_pred = _2872;
                    frontier_phi_71_pred_1 = _2871;
                    frontier_phi_71_pred_2 = _2870;
                    frontier_phi_71_pred_3 = _2869;
                    frontier_phi_71_pred_4 = _2868;
                    frontier_phi_71_pred_5 = _2867;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2882;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2873 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _1711;
                        float _3079 = _3038.y - _1712;
                        float _3080 = _3038.z - _1713;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_563, _566, _569), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4491 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _1711;
                        float _3114 = (-0.0) - _1712;
                        float _3115 = (-0.0) - _1713;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3129 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3130 = 1.0 - _623;
                        float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                        float _3138 = _3137 * _3137;
                        float _3139 = _3138 * _3138;
                        float _3140 = _3120 + _3085;
                        float _3141 = _3121 + _3086;
                        float _3142 = _3122 + _3087;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3150 = dot(vec3(_563, _566, _569), vec3(_3120, _3121, _3122));
                        float _4507 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3154 = dot(vec3(_563, _566, _569), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                        float _4518 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                        float _3162 = _3098 * _3138;
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3088) + _3163;
                        float _4529 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3168 = 1.0 - _3138;
                        float _3178 = (0.5 / (((_3167 * ((_3153 * _3168) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3138) * _3153))) * _3167;
                        float _4540 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3189 = (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3161 * _3161) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2942 = (_3109 * _3057.x) + _3015;
                        _2943 = (_3109 * _3057.y) + _3016;
                        _2944 = (_3109 * _3057.z) + _3017;
                        _2939 = (_3189 * _3074.x) + _3012;
                        _2940 = (_3189 * _3074.y) + _3013;
                        _2941 = (_3189 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_71_pred = _2944;
                    frontier_phi_71_pred_1 = _2943;
                    frontier_phi_71_pred_2 = _2942;
                    frontier_phi_71_pred_3 = _2941;
                    frontier_phi_71_pred_4 = _2940;
                    frontier_phi_71_pred_5 = _2939;
                }
                _2725 = frontier_phi_71_pred;
                _2723 = frontier_phi_71_pred_1;
                _2721 = frontier_phi_71_pred_2;
                _2719 = frontier_phi_71_pred_3;
                _2717 = frontier_phi_71_pred_4;
                _2715 = frontier_phi_71_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2715;
                    _2868 = _2717;
                    _2869 = _2719;
                    _2870 = _2721;
                    _2871 = _2723;
                    _2872 = _2725;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2731) & _2634) == 0u)
        {
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
            float _2861 = _2860 * _1711;
            float _2862 = _2860 * _1712;
            float _2863 = _2860 * _1713;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2995 = _2714;
                float _2996 = _2716;
                float _2997 = _2718;
                float _2998 = _2720;
                float _2999 = _2722;
                float _3000 = _2724;
                uint _3001 = _2731;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3011)
                    {
                        frontier_phi_82_pred = _3000;
                        frontier_phi_82_pred_1 = _2999;
                        frontier_phi_82_pred_2 = _2998;
                        frontier_phi_82_pred_3 = _2997;
                        frontier_phi_82_pred_4 = _2996;
                        frontier_phi_82_pred_5 = _2995;
                    }
                    else
                    {
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3216 = _2995;
                        float _3217 = _2996;
                        float _3218 = _2997;
                        float _3219 = _2998;
                        float _3220 = _2999;
                        float _3221 = _3000;
                        uint _3222 = _3010;
                        uint _3223;
                        vec4 _3248;
                        float _3249;
                        vec4 _3264;
                        vec3 _3276;
                        vec4 _3292;
                        vec4 _3308;
                        float _3354;
                        bool _3355;
                        for (;;)
                        {
                            uint _3233 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3222));
                            _3223 = (_3222 + 4294967295u) & _3222;
                            uint _3235 = _3233 * 40u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3249 = _3248.w;
                            uint _3251 = (_3233 * 40u) + 4u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3233 * 40u) + 8u;
                            _3276 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x));
                            uint _3279 = (_3233 * 40u) + 16u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3295 = (_3233 * 40u) + 20u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3233 * 40u) + 24u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3329 = (_3233 * 40u) + 28u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3354 = fma(_1713, _3342.z, fma(_1712, _3342.y, _3342.x * _1711)) + _3342.w;
                            _3355 = !((fma(_1713, _3323.z, fma(_1712, _3323.y, _3323.x * _1711)) + _3323.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3355)
                            {
                                float _3382 = _3248.x - _1711;
                                float _3383 = _3248.y - _1712;
                                float _3384 = _3248.z - _1713;
                                float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                                float _3388 = inversesqrt(_3385);
                                float _3389 = _3388 * _3382;
                                float _3390 = _3388 * _3383;
                                float _3391 = _3388 * _3384;
                                float _3395 = 1.0 - (_3385 / (_3249 * _3249));
                                float _4551 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3400 = sqrt(_3385) * _3264.w;
                                float _3402 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                                float _3403 = _3402 * _3402;
                                float _3406 = ((1.0 - _3403) * dot(vec3(_3389, _3390, _3391), vec3(_563, _566, _569))) + _3403;
                                float _3409 = _3400 * _3400;
                                float _3413 = (fma(_1713, _3292.z, fma(_1712, _3292.y, _3292.x * _1711)) + _3292.w) / _3354;
                                float _3414 = (fma(_1713, _3308.z, fma(_1712, _3308.y, _3308.x * _1711)) + _3308.w) / _3354;
                                float _3418 = 1.0 - dot(vec2(_3413, _3414), vec2(_3413, _3414));
                                float _4567 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3420 = _3419 * (((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3396) / ((_3409 * 0.699999988079071044921875) + 1.0));
                                float _3432 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                                float _3433 = 1.0 - _623;
                                float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                                float _3441 = _3440 * _3440;
                                float _3442 = _3441 * _3441;
                                float _3443 = _3389 - _2861;
                                float _3444 = _3390 - _2862;
                                float _3445 = _3391 - _2863;
                                float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                                float _3453 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4578 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3457 = dot(vec3(_563, _566, _569), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                                float _4589 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                                float _3465 = _3402 * _3441;
                                float _3466 = _3465 * _3465;
                                float _3472 = ((1.0 - _3466) * dot(vec3(_563, _566, _569), vec3(_3389, _3390, _3391))) + _3466;
                                float _4600 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3474 = 1.0 - _3441;
                                float _3484 = (0.5 / (((_3473 * ((_3456 * _3474) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3441) * _3456))) * _3473;
                                float _4611 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3494 = (_3419 * _3396) * (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3464 * _3464) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3420 * _3264.z;
                                frontier_phi_88_pred_1 = _3420 * _3264.y;
                                frontier_phi_88_pred_2 = _3420 * _3264.x;
                                frontier_phi_88_pred_3 = _3494 * _3276.z;
                                frontier_phi_88_pred_4 = _3494 * _3276.y;
                                frontier_phi_88_pred_5 = _3494 * _3276.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_88_pred;
                            _3502 = frontier_phi_88_pred_1;
                            _3501 = frontier_phi_88_pred_2;
                            _3500 = frontier_phi_88_pred_3;
                            _3499 = frontier_phi_88_pred_4;
                            _3498 = frontier_phi_88_pred_5;
                            _3206 = _3501 + _3219;
                            _3207 = _3502 + _3220;
                            _3208 = _3503 + _3221;
                            _3203 = _3498 + _3216;
                            _3204 = _3499 + _3217;
                            _3205 = _3500 + _3218;
                            if (_3223 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3223;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3208;
                        frontier_phi_82_pred_1 = _3207;
                        frontier_phi_82_pred_2 = _3206;
                        frontier_phi_82_pred_3 = _3205;
                        frontier_phi_82_pred_4 = _3204;
                        frontier_phi_82_pred_5 = _3203;
                    }
                    _2846 = frontier_phi_82_pred;
                    _2844 = frontier_phi_82_pred_1;
                    _2842 = frontier_phi_82_pred_2;
                    _2840 = frontier_phi_82_pred_3;
                    _2838 = frontier_phi_82_pred_4;
                    _2836 = frontier_phi_82_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2836;
                        _2996 = _2838;
                        _2997 = _2840;
                        _2998 = _2842;
                        _2999 = _2844;
                        _3000 = _2846;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2842;
                frontier_phi_63_64_ladder_1 = _2846;
                frontier_phi_63_64_ladder_2 = _2844;
                frontier_phi_63_64_ladder_3 = _2840;
                frontier_phi_63_64_ladder_4 = _2838;
                frontier_phi_63_64_ladder_5 = _2836;
            }
            else
            {
                frontier_phi_63_64_ladder = _2720;
                frontier_phi_63_64_ladder_1 = _2724;
                frontier_phi_63_64_ladder_2 = _2722;
                frontier_phi_63_64_ladder_3 = _2718;
                frontier_phi_63_64_ladder_4 = _2716;
                frontier_phi_63_64_ladder_5 = _2714;
            }
            _2835 = frontier_phi_63_64_ladder_5;
            _2837 = frontier_phi_63_64_ladder_4;
            _2839 = frontier_phi_63_64_ladder_3;
            _2841 = frontier_phi_63_64_ladder;
            _2843 = frontier_phi_63_64_ladder_2;
            _2845 = frontier_phi_63_64_ladder_1;
        }
        float _2850 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2647 = (_2850 * _2841) + _2178;
        _2649 = (_2850 * _2843) + _2180;
        _2651 = (_2850 * _2845) + _2182;
        _2653 = ((_2835 * 0.039999999105930328369140625) * _2850) + _2501;
        _2655 = ((_2837 * 0.039999999105930328369140625) * _2850) + _2503;
        _2657 = ((_2839 * 0.039999999105930328369140625) * _2850) + _2505;
    }
    else
    {
        _2647 = _2178;
        _2649 = _2180;
        _2651 = _2182;
        _2653 = _2501;
        _2655 = _2503;
        _2657 = _2505;
    }
    float _4627 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4638 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4649 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2674 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2647 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _607))) + ((_2653 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2649 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _607))) + ((_2655 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2676 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2651 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _607))) + ((_2657 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    uint _2677 = _224 + 6u;
    float _2685 = _542 / cbSceneParam._m0[86u].x;
    float _2686 = _543 / cbSceneParam._m0[86u].y;
    vec4 _2700 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, (log2((isnan(cbSceneParam._m0[77u].w) ? _463 : (isnan(_463) ? cbSceneParam._m0[77u].w : min(_463, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2702 = _2700.x;
    float _2703 = _2700.y;
    float _2704 = _2700.z;
    float _2705 = _2700.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_463 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_463) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _463 : min(cbSceneParam._m0[80u].w, _463));
        float _2740 = _2739 / _463;
        float _2751 = _2740 * _514;
        float _2752 = _515 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2755 = _2740 * _516;
        float _2757 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2752;
        float _2765 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2753 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2898 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2952 = ((abs(_2765 / _2753) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2775 * _2907) - exp2(_2775 * _2908)) * _2896))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2705);
        _2777 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2702;
        _2779 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2703;
        _2781 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2704;
        _2783 = _2963 * _2705;
    }
    else
    {
        _2777 = _2702;
        _2779 = _2703;
        _2781 = _2704;
        _2783 = _2705;
    }
    bool _2990;
    vec4 _2793;
    vec4 _2815;
    float _2817;
    float _2821;
    float _2822;
    float _2823;
    float _2824;
    bool _2834;
    for (;;)
    {
        _2793 = cbMatDynParam._m0[0u];
        float _2795 = roundEven(_2793.y);
        bool _2796 = _2795 == 3.0;
        float _2797 = log2(_2783);
        float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * _2674;
        float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * _2675;
        float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * _2676;
        float _2813 = _530 + (-0.5);
        _2815 = cbMtdParam._m0[1u];
        _2817 = _2815.y * _2813;
        float _2820 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2821 = _2820 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
        _2822 = _2820 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
        _2823 = _2820 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
        _2824 = _2813 * 0.999000012874603271484375;
        _2834 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2834)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2824) < 0.5)
            {
                _2990 = true;
                break;
            }
        }
        uint _2931 = _582 + uint(_2793.w);
        if ((cbInstanceData._m0[_2931].w < 1.0) && ((cbInstanceData._m0[_2931].w + _2824) < 0.5))
        {
            _2990 = true;
            break;
        }
        if ((_2817 + 1.0) < _2815.x)
        {
            _2990 = true;
            break;
        }
        _2990 = false;
        break;
    }
    float _3194;
    if (_2990)
    {
        discard_state = true;
        _3194 = 0.0;
    }
    else
    {
        _3194 = cbInstanceData._m0[_2677].w;
    }
    SV_Target.x = _2821;
    SV_Target.y = _2822;
    SV_Target.z = _2823;
    SV_Target.w = _3194;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2677].w;
    discard_exit();
}


