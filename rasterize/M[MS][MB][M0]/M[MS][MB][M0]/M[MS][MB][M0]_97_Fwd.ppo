#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1132;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3438 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _368) + _443;
    float _455 = ((((_422.x - _441) * _368) + _441) * 2.0) + (-1.0);
    float _456 = ((((_422.y - _442) * _368) + _442) * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3449 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    float _465 = _455 + ((((_395.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _466 = _456 + ((((_395.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _469 = fma(_462, _220, fma(_466, _227, _465 * _213));
    float _472 = fma(_462, _221, fma(_466, _228, _465 * _214));
    float _475 = fma(_462, _222, fma(_466, _229, _465 * _215));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = 1.0 - _525;
    float _532 = (cbMtdParam._m0[19u].x + dot(vec4(_479 * _469, _479 * _472, _479 * _475, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_525 - _526) * cbMtdParam._m0[24u].z) + _526) * cbMtdParam._m0[21u].z);
    float _3460 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _540 = (_533 * (cbMtdParam._m0[17u].x - _375)) + _375;
    float _541 = (_533 * (cbMtdParam._m0[17u].y - _376)) + _376;
    float _542 = (_533 * (cbMtdParam._m0[17u].z - _377)) + _377;
    float _547 = (((_395.z - _452) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _452;
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _567 = (_560.x * 2.0) + (-1.0);
    float _568 = (_560.y * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3471 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _577 = ((_560.z - _547) * _533) + _547;
    float _587 = ((sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) - _462) * _533) + _462;
    float _590 = (((_567 - _465) * _533) + _465) + (cbMtdParam._m0[21u].x * _465);
    float _591 = (((_568 - _466) * _533) + _466) + (cbMtdParam._m0[21u].x * _466);
    float _596 = cbMtdParam._m0[22u].x + _495.w;
    float _599 = fma(_587, _220, fma(_591, _227, _590 * _213));
    float _602 = fma(_587, _221, fma(_591, _228, _590 * _214));
    float _605 = fma(_587, _222, fma(_591, _229, _590 * _215));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3482 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _613 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3504 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3515 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3526 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _683 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _673);
    float _684 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _673);
    float _685 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _673);
    float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
    float _690 = _683 * _689;
    float _691 = _684 * _689;
    float _692 = _685 * _689;
    float _698 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _699 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _720 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _723 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _737 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3537 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _698, cbSceneParam._m0[86u].y * _699));
    float _761 = ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * TEXCOORD_5.w) * _757.x;
    float _762 = dot(vec3(_610, _611, _612), vec3(_690, _691, _692));
    float _765 = _762 * 2.0;
    float _769 = (_765 * _610) - _690;
    float _770 = (_765 * _611) - _691;
    float _771 = (_765 * _612) - _692;
    float _775 = abs(dot(vec3(_690, _691, _692), vec3(_610, _611, _612)));
    float _3570 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = sqrt(_613);
    float _790 = exp2((_777 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_777 * 3.0));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _860 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _864 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _889 = _822 + _610;
        float _890 = _826 + _611;
        float _891 = _830 + _612;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _856;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _860;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _864;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_610, _611, _612), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3618 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_610, _611, _612), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3651 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_610, _611, _612), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3684 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1175 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1179 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1202 = _822 + _610;
        float _1203 = _826 + _611;
        float _1204 = _830 + _612;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_610, _611, _612), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3747 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_610, _611, _612), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3780 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_610, _611, _612), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3813 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1132;
        _1441 = _1132;
        _1442 = _1132;
        _1443 = _1132;
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _769 * 0.5;
    float _1509 = _770 * 0.5;
    float _1510 = _771 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_771, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769));
        float _1639 = fma(_771, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769));
        float _1642 = fma(_771, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1670 = frontier_phi_14_12_ladder;
        }
        float _1871;
        if (_1639 > 0.0)
        {
            _1871 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1871 = frontier_phi_23_19_ladder;
        }
        float _2114;
        if (_1642 > 0.0)
        {
            _2114 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2114 = frontier_phi_35_30_ladder;
        }
        float _2116 = isnan(_1871) ? _1670 : (isnan(_1670) ? _1871 : min(_1670, _1871));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1636) + _1625;
        float _2122 = (_2117 * _1639) + _1629;
        float _2123 = (_2117 * _1642) + _1633;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2124;
        float _2128 = _2124 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 > _2128) || ((_2122 < _2126) || ((_2121 < _2126) || (_2121 > _2128))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2123, cbModelParam._m0[9u].z, fma(_2122, cbModelParam._m0[9u].y, _2121 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2123, cbModelParam._m0[10u].z, fma(_2122, cbModelParam._m0[10u].y, _2121 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2123, cbModelParam._m0[11u].z, fma(_2122, cbModelParam._m0[11u].y, _2121 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_13_35_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_13_35_ladder_2;
        _1660 = frontier_phi_13_35_ladder_1;
        _1662 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_769, _770, _771), _1577);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_771, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769));
        float _1735 = fma(_771, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769));
        float _1738 = fma(_771, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769));
        float _1876;
        if (_1732 > 0.0)
        {
            _1876 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2141;
        if (_1735 > 0.0)
        {
            _2141 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2141 = frontier_phi_37_32_ladder;
        }
        float _2346;
        if (_1738 > 0.0)
        {
            _2346 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2346 = frontier_phi_46_43_ladder;
        }
        float _2348 = isnan(_2141) ? _1876 : (isnan(_1876) ? _2141 : min(_1876, _2141));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1732) + _1721;
        float _2354 = (_2349 * _1735) + _1725;
        float _2355 = (_2349 * _1738) + _1729;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_22_46_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_22_46_ladder_2;
        _1759 = frontier_phi_22_46_ladder_1;
        _1761 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_769, _770, _771), _1667);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _790) * ((_777 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_790 * _777)) * _761;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _761 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1830 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1834 = _1797 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_610, _611, _612));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_610, _611, _612));
    float _3949 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _3960 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1814].x * _1820) * _1855) + ((cbLight._m0[_1824].x * _1830) * _1853);
    float _1863 = ((_1820 * cbLight._m0[_1814].y) * _1855) + ((_1830 * cbLight._m0[_1824].y) * _1853);
    float _1864 = ((_1820 * cbLight._m0[_1814].z) * _1855) + ((_1830 * cbLight._m0[_1824].z) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1870)
    {
        _1881 = _1862;
        _1883 = _1863;
        _1885 = _1864;
    }
    else
    {
        uint _1889 = _1797 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _3971 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1908 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1862;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1863;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1864;
    }
    bool _1888 = _1868.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1888)
    {
        _1926 = _1881;
        _1928 = _1883;
        _1930 = _1885;
    }
    else
    {
        uint _2085 = _1797 + 7u;
        float _2101 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2102 = _2101 * _2101;
        float _3987 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2104 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1926 = (((cbLight._m0[_2085].x * 0.3183098733425140380859375) * _2103) * _2104) + _1881;
        _1928 = (((cbLight._m0[_2085].y * 0.3183098733425140380859375) * _2103) * _2104) + _1883;
        _1930 = (((cbLight._m0[_2085].z * 0.3183098733425140380859375) * _2103) * _2104) + _1885;
    }
    uint _1933 = _1797 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _613) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1797].x + _690;
    float _1949 = cbLight._m0[_1797].y + _691;
    float _1950 = cbLight._m0[_1797].z + _692;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1797].xyz));
    float _4003 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _1962 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1963 = dot(vec3(_610, _611, _612), vec3(_1955, _1956, _1957));
    float _4025 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1955, _1956, _1957));
    float _4036 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1962 * ((_1961 * _1987) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1987) + _1947) * _1961))) * _1961;
    float _4047 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2011 = _1797 + 9u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _613) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1834].x + _690;
    float _2025 = cbLight._m0[_1834].y + _691;
    float _2026 = cbLight._m0[_1834].z + _692;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1834].xyz));
    float _4058 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2038 = dot(vec3(_610, _611, _612), vec3(_2031, _2032, _2033));
    float _4069 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2031, _2032, _2033));
    float _4080 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2023 * _2023;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2059 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = 1.0 - _2023;
    float _2070 = (0.5 / (((_1962 * ((_2037 * _2060) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2060) + _2023) * _2037))) * _2037;
    float _4091 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    float _2082 = (((_2059 * cbLight._m0[_2011].x) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].x) * _2000) * _1830);
    float _2083 = (((_2059 * cbLight._m0[_2011].y) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].y) * _2000) * _1830);
    float _2084 = (((_2059 * cbLight._m0[_2011].z) * _2072) * _1820) + (((_1986 * cbLight._m0[_1933].z) * _2000) * _1830);
    float _2146;
    float _2148;
    float _2150;
    if (_1870)
    {
        _2146 = _2082;
        _2148 = _2083;
        _2150 = _2084;
    }
    else
    {
        uint _2152 = _1797 + 2u;
        uint _2156 = _1797 + 10u;
        float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _613) * 0.949999988079071044921875);
        float _2171 = _2170 * _2170;
        float _2172 = cbLight._m0[_2152].x + _690;
        float _2173 = cbLight._m0[_2152].y + _691;
        float _2174 = cbLight._m0[_2152].z + _692;
        float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
        float _2179 = _2178 * _2172;
        float _2180 = _2178 * _2173;
        float _2181 = _2178 * _2174;
        float _2182 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2152].xyz));
        float _4102 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2186 = dot(vec3(_610, _611, _612), vec3(_2179, _2180, _2181));
        float _4113 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2190 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2179, _2180, _2181));
        float _4124 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2194 = _2171 * _2171;
        float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
        float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2208 = 1.0 - _2171;
        float _2218 = (0.5 / (((_1962 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2208) + _2171) * _2185))) * _2185;
        float _4135 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2146 = (((_2207 * cbLight._m0[_2156].x) * _2220) * _2221) + _2082;
        _2148 = (((_2207 * cbLight._m0[_2156].y) * _2220) * _2221) + _2083;
        _2150 = (((_2207 * cbLight._m0[_2156].z) * _2220) * _2221) + _2084;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1888)
    {
        _2256 = _2146;
        _2258 = _2148;
        _2260 = _2150;
    }
    else
    {
        uint _2267 = _1797 + 3u;
        uint _2271 = _1797 + 11u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _613) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _690;
        float _2288 = cbLight._m0[_2267].y + _691;
        float _2289 = cbLight._m0[_2267].z + _692;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2267].xyz));
        float _4151 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2301 = dot(vec3(_610, _611, _612), vec3(_2294, _2295, _2296));
        float _4162 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4173 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_1962 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2323) + _2286) * _2300))) * _2300;
        float _4184 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2256 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2146;
        _2258 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2148;
        _2260 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2150;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1795.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _699) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _698) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            uint _2710 = 0u;
            uint _2719;
            bool _2720;
            for (;;)
            {
                _2719 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                _2720 = _2719 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2720)
                {
                    frontier_phi_61_pred = _2704;
                    frontier_phi_61_pred_1 = _2709;
                    frontier_phi_61_pred_2 = _2708;
                    frontier_phi_61_pred_3 = _2707;
                    frontier_phi_61_pred_4 = _2706;
                    frontier_phi_61_pred_5 = _2705;
                }
                else
                {
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    uint _2834;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2719;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2838 = uint(findLSB(_2834)) + (_2710 << 5u);
                        uint _2835 = (_2834 + 4294967295u) & _2834;
                        uint _2840 = _2838 * 48u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2860 = (_2838 * 48u) + 4u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2879 = (_2838 * 48u) + 8u;
                        vec3 _2890 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x));
                        float _2894 = _2854.x - _2412;
                        float _2895 = _2854.y - _2413;
                        float _2896 = _2854.z - _2414;
                        float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                        float _2900 = inversesqrt(_2897);
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2904 = dot(vec3(_717, _720, _723), vec3(_2901, _2902, _2903));
                        float _2909 = 1.0 - (_2897 * _2854.w);
                        float _4210 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2911 = sqrt(_2897) * _2873.w;
                        float _2914 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2904) + _2915;
                        float _2921 = _2911 * _2911;
                        float _2925 = ((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2910) / ((_2921 * 0.699999988079071044921875) + 1.0);
                        float _2929 = (-0.0) - _2412;
                        float _2930 = (-0.0) - _2413;
                        float _2931 = (-0.0) - _2414;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2946 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2947 = 1.0 - _777;
                        float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                        float _2955 = _2954 * _2954;
                        float _2956 = _2955 * _2955;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2967 = dot(vec3(_717, _720, _723), vec3(_2936, _2937, _2938));
                        float _4226 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2971 = dot(vec3(_717, _720, _723), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                        float _4237 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                        float _2979 = _2914 * _2955;
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2904) + _2980;
                        float _4248 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2985 = 1.0 - _2955;
                        float _2995 = (0.5 / (((_2984 * ((_2970 * _2985) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2955) * _2970))) * _2984;
                        float _4259 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _3006 = (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2978 * _2978) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2910;
                        _2763 = (_2925 * _2873.x) + _2831;
                        _2764 = (_2925 * _2873.y) + _2832;
                        _2765 = (_2925 * _2873.z) + _2833;
                        _2760 = (_3006 * _2890.x) + _2828;
                        _2761 = (_3006 * _2890.y) + _2829;
                        _2762 = (_3006 * _2890.z) + _2830;
                        if (_2835 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2835;
                        }
                    }
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                _2560 = frontier_phi_61_pred;
                _2570 = frontier_phi_61_pred_1;
                _2568 = frontier_phi_61_pred_2;
                _2566 = frontier_phi_61_pred_3;
                _2564 = frontier_phi_61_pred_4;
                _2562 = frontier_phi_61_pred_5;
                uint _2711 = _2710 + 1u;
                if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2704 = _2560;
                    _2705 = _2562;
                    _2706 = _2564;
                    _2707 = _2566;
                    _2708 = _2568;
                    _2709 = _2570;
                    _2710 = _2711;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
        }
        else
        {
            float _2697 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2698 = _2697 * _2412;
            float _2699 = _2697 * _2413;
            float _2700 = _2697 * _2414;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2811 = _2559;
                float _2812 = _2561;
                float _2813 = _2563;
                float _2814 = _2565;
                float _2815 = _2567;
                float _2816 = _2569;
                uint _2817 = _2576;
                uint _2826;
                bool _2827;
                for (;;)
                {
                    _2826 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                    _2827 = _2826 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2827)
                    {
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    else
                    {
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        uint _3030 = _2826;
                        uint _3031;
                        vec4 _3056;
                        float _3057;
                        vec4 _3072;
                        vec3 _3084;
                        vec4 _3099;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3041 = ((_2817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3030));
                            _3031 = (_3030 + 4294967295u) & _3030;
                            uint _3043 = _3041 * 40u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3057 = _3056.w;
                            uint _3059 = (_3041 * 40u) + 4u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_3041 * 40u) + 8u;
                            _3084 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x));
                            uint _3086 = (_3041 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3041 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3041 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3041 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2414, _3148.z, fma(_2413, _3148.y, _3148.x * _2412)) + _3148.w;
                            _3161 = !((fma(_2414, _3129.z, fma(_2413, _3129.y, _3129.x * _2412)) + _3129.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3056.x - _2412;
                                float _3189 = _3056.y - _2413;
                                float _3190 = _3056.z - _2414;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3057 * _3057));
                                float _4270 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3206 = sqrt(_3191) * _3072.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_717, _720, _723))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2414, _3099.z, fma(_2413, _3099.y, _3099.x * _2412)) + _3099.w) / _3160;
                                float _3220 = (fma(_2414, _3114.z, fma(_2413, _3114.y, _3114.x * _2412)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4286 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _777;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2698;
                                float _3250 = _3196 - _2699;
                                float _3251 = _3197 - _2700;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2698, (-0.0) - _2699, (-0.0) - _2700));
                                float _4297 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3263 = dot(vec3(_717, _720, _723), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4308 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_717, _720, _723), vec3(_3195, _3196, _3197))) + _3272;
                                float _4319 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4330 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3300 * _3084.x;
                                frontier_phi_73_pred_1 = _3300 * _3084.y;
                                frontier_phi_73_pred_2 = _3226 * _3072.z;
                                frontier_phi_73_pred_3 = _3226 * _3072.y;
                                frontier_phi_73_pred_4 = _3226 * _3072.x;
                                frontier_phi_73_pred_5 = _3300 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3304 = frontier_phi_73_pred;
                            _3305 = frontier_phi_73_pred_1;
                            _3309 = frontier_phi_73_pred_2;
                            _3308 = frontier_phi_73_pred_3;
                            _3307 = frontier_phi_73_pred_4;
                            _3306 = frontier_phi_73_pred_5;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            _3016 = _3309 + _3029;
                            _3011 = _3304 + _3024;
                            _3012 = _3305 + _3025;
                            _3013 = _3306 + _3026;
                            if (_3031 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3031;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3014;
                        frontier_phi_67_pred_1 = _3015;
                        frontier_phi_67_pred_2 = _3016;
                        frontier_phi_67_pred_3 = _3013;
                        frontier_phi_67_pred_4 = _3012;
                        frontier_phi_67_pred_5 = _3011;
                    }
                    _2679 = frontier_phi_67_pred;
                    _2681 = frontier_phi_67_pred_1;
                    _2683 = frontier_phi_67_pred_2;
                    _2677 = frontier_phi_67_pred_3;
                    _2675 = frontier_phi_67_pred_4;
                    _2673 = frontier_phi_67_pred_5;
                    uint _2818 = _2817 + 1u;
                    if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2811 = _2673;
                        _2812 = _2675;
                        _2813 = _2677;
                        _2814 = _2679;
                        _2815 = _2681;
                        _2816 = _2683;
                        _2817 = _2818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2681;
                frontier_phi_55_56_ladder_1 = _2683;
                frontier_phi_55_56_ladder_2 = _2679;
                frontier_phi_55_56_ladder_3 = _2677;
                frontier_phi_55_56_ladder_4 = _2675;
                frontier_phi_55_56_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            _2672 = frontier_phi_55_56_ladder_5;
            _2674 = frontier_phi_55_56_ladder_4;
            _2676 = frontier_phi_55_56_ladder_3;
            _2678 = frontier_phi_55_56_ladder_2;
            _2680 = frontier_phi_55_56_ladder;
            _2682 = frontier_phi_55_56_ladder_1;
        }
        float _2687 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2471 = (_2687 * _2678) + _1926;
        _2473 = (_2687 * _2680) + _1928;
        _2475 = (_2687 * _2682) + _1930;
        _2477 = ((_2672 * 0.039999999105930328369140625) * _2687) + _2256;
        _2479 = ((_2674 * 0.039999999105930328369140625) * _2687) + _2258;
        _2481 = ((_2676 * 0.039999999105930328369140625) * _2687) + _2260;
    }
    else
    {
        _2471 = _1926;
        _2473 = _1928;
        _2475 = _1930;
        _2477 = _2256;
        _2479 = _2258;
        _2481 = _2260;
    }
    float _4346 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4357 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4368 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    uint _2501 = _232 + 6u;
    float _2509 = _698 / cbSceneParam._m0[86u].x;
    float _2510 = _699 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2585 = _2584 / _631;
        float _2596 = _2585 * _683;
        float _2597 = _684 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _685;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2733 = 1.0 / cbSceneParam._m0[80u].x;
            float _2734 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2735 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            _2773 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2744 - _2745) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))))) * _2733)) - ((exp2(_2620 * _2744) - exp2(_2620 * _2745)) * _2733))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2529);
        _2622 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2784 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    float _2640 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2641 = _2640 == 3.0;
    float _2642 = log2(_2628);
    float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2471 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _761))) + ((_2477 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2473 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _761))) + ((_2479 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2475 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _761))) + ((_2481 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2660 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2660 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2660 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2660 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


