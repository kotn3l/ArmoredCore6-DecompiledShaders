#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1028;
float _3414;
float _3415;
float _3416;
float _3417;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3426 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_380 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[21u].z);
    float _3437 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _398 = (_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) + _270;
    float _399 = (_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) + _271;
    float _400 = (_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) + _272;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _420 = (_413.x * 2.0) + (-1.0);
    float _421 = (_413.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3448 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _430 = ((_413.z - _315) * _391) + _315;
    float _440 = ((sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) - _329) * _391) + _329;
    float _443 = (((_420 - _320) * _391) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _444 = (((_421 - _322) * _391) + _322) + (cbMtdParam._m0[21u].x * _322);
    float _449 = cbMtdParam._m0[22u].x + _311.w;
    float _452 = fma(_440, _212, fma(_444, _219, _443 * _205));
    float _455 = fma(_440, _213, fma(_444, _220, _443 * _206));
    float _458 = fma(_440, _214, fma(_444, _221, _443 * _207));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3459 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _466 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3481 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3492 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3503 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _535 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _525);
    float _536 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _525);
    float _537 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _525);
    float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
    float _542 = _535 * _541;
    float _543 = _536 * _541;
    float _544 = _537 * _541;
    vec4 _549 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _551 = _549.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _708 = sqrt(((_535 * _535) + (_536 * _536)) + (_537 * _537));
        float _714 = (cbMatDynParam._m0[5u].x * _708) + cbMatDynParam._m0[5u].y;
        float _3514 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _719 = (cbMatDynParam._m0[5u].z * _708) + cbMatDynParam._m0[5u].w;
        float _3525 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) - _715)) + _715) < ((_551 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _584 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _587 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _590 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    uint _603 = _224 + 9u;
    uint _604 = _603 + uint(cbMatDynParam._m0[0u].w);
    float _610 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_604].x;
    float _611 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_604].y;
    float _612 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_604].z;
    float _3536 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _628 = ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * TEXCOORD_5.w) * _624.x;
    float _629 = dot(vec3(_463, _464, _465), vec3(_542, _543, _544));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _463) - _542;
    float _637 = (_632 * _464) - _543;
    float _638 = (_632 * _465) - _544;
    float _642 = abs(dot(vec3(_542, _543, _544), vec3(_463, _464, _465)));
    float _3569 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_466);
    float _657 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _756 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _760 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _785 = _689 + _463;
        float _786 = _693 + _464;
        float _787 = _697 + _465;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _752;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _756;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _760;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_463, _464, _465), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3617 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_463, _464, _465), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3650 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_463, _464, _465), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3683 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1074 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1078 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1101 = _689 + _463;
        float _1102 = _693 + _464;
        float _1103 = _697 + _465;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_463, _464, _465), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3746 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_463, _464, _465), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3779 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_463, _464, _465), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3812 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1028;
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = _1028;
        _1350 = _1028;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1040)) + _1040;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1041)) + _1041;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1042)) + _1042;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _636 * 0.5;
    float _1408 = _637 * 0.5;
    float _1409 = _638 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1537 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1540 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1568 = frontier_phi_17_15_ladder;
        }
        float _1791;
        if (_1537 > 0.0)
        {
            _1791 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1791 = frontier_phi_26_22_ladder;
        }
        float _2037;
        if (_1540 > 0.0)
        {
            _2037 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2037 = frontier_phi_38_33_ladder;
        }
        float _2039 = isnan(_1791) ? _1568 : (isnan(_1568) ? _1791 : min(_1568, _1791));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1534) + _1523;
        float _2045 = (_2040 * _1537) + _1527;
        float _2046 = (_2040 * _1540) + _1531;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2047;
        float _2051 = _2047 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 > _2051) || ((_2045 < _2049) || ((_2044 < _2049) || (_2044 > _2051))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2046, cbModelParam._m0[9u].z, fma(_2045, cbModelParam._m0[9u].y, _2044 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2046, cbModelParam._m0[10u].z, fma(_2045, cbModelParam._m0[10u].y, _2044 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2046, cbModelParam._m0[11u].z, fma(_2045, cbModelParam._m0[11u].y, _2044 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_16_38_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_16_38_ladder_2;
        _1558 = frontier_phi_16_38_ladder_1;
        _1560 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1476);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1618 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1622 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1626 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1629 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1632 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1635 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1796;
        if (_1629 > 0.0)
        {
            _1796 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1796 = frontier_phi_28_24_ladder;
        }
        float _2064;
        if (_1632 > 0.0)
        {
            _2064 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2064 = frontier_phi_40_35_ladder;
        }
        float _2269;
        if (_1635 > 0.0)
        {
            _2269 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2269 = frontier_phi_49_46_ladder;
        }
        float _2271 = isnan(_2064) ? _1796 : (isnan(_1796) ? _2064 : min(_1796, _2064));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1629) + _1618;
        float _2277 = (_2272 * _1632) + _1622;
        float _2278 = (_2272 * _1635) + _1626;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2278, cbModelParam._m0[17u].z, fma(_2277, cbModelParam._m0[17u].y, _2276 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2278, cbModelParam._m0[18u].z, fma(_2277, cbModelParam._m0[18u].y, _2276 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2278, cbModelParam._m0[19u].z, fma(_2277, cbModelParam._m0[19u].y, _2276 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_25_49_ladder = _2477.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2477.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2477.x * cbModelParam._m0[1u].z;
        }
        _1654 = frontier_phi_25_49_ladder_2;
        _1656 = frontier_phi_25_49_ladder_1;
        _1658 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1565);
        _1654 = _1638.x * cbModelParam._m0[1u].z;
        _1656 = _1638.y * cbModelParam._m0[1u].z;
        _1658 = _1638.z * cbModelParam._m0[1u].z;
    }
    float _1670 = ((((1.0 - _657) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_657 * _644)) * _628;
    float _1671 = _1670 * ((cbModelParam._m0[1u].w * (_1654 - _1556)) + _1556);
    float _1672 = _1670 * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1673 = _1670 * ((cbModelParam._m0[1u].w * (_1658 - _1560)) + _1560);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1671 * cbSceneParam._m0[91u].x));
    vec4 _1690 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1692 = _1690.w;
    float _1704 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1692);
    float _1705 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1692);
    float _1706 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1692);
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1720 = _628 + (-1.0);
    float _1725 = (cbLight._m0[_1713].x * _1720) + 1.0;
    float _1726 = (cbLight._m0[_1713].y * _1720) + 1.0;
    float _1727 = (cbLight._m0[_1713].z * _1720) + 1.0;
    float _1728 = (cbLight._m0[_1713].w * _1720) + 1.0;
    uint _1729 = _1712 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1712 + 4u;
    float _1749 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1753 = _1712 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_463, _464, _465));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_463, _464, _465));
    float _3948 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3959 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1729].x * _1735) * _1774) + (((cbLight._m0[_1739].x * _1704) * _1749) * _1772);
    float _1782 = ((_1735 * cbLight._m0[_1729].y) * _1774) + (((cbLight._m0[_1739].y * _1705) * _1749) * _1772);
    float _1783 = ((_1735 * cbLight._m0[_1729].z) * _1774) + (((cbLight._m0[_1739].z * _1706) * _1749) * _1772);
    uvec4 _1788 = floatBitsToUint(cbLight._m0[_1712 + 12u]);
    bool _1790 = _1788.x == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1790)
    {
        _1801 = _1781;
        _1803 = _1782;
        _1805 = _1783;
    }
    else
    {
        uint _1809 = _1712 + 6u;
        float _1825 = (dot(vec3(cbLight._m0[_1712 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3970 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1828 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1801 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1781;
        _1803 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1782;
        _1805 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1783;
    }
    bool _1808 = _1788.y == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1808)
    {
        _1846 = _1801;
        _1848 = _1803;
        _1850 = _1805;
    }
    else
    {
        uint _2008 = _1712 + 7u;
        float _2024 = (dot(vec3(cbLight._m0[_1712 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _3986 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2027 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1846 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1801;
        _1848 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1803;
        _1850 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1805;
    }
    uint _1853 = _1712 + 8u;
    float _1866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _466) * 0.949999988079071044921875);
    float _1867 = _1866 * _1866;
    float _1868 = cbLight._m0[_1712].x + _542;
    float _1869 = cbLight._m0[_1712].y + _543;
    float _1870 = cbLight._m0[_1712].z + _544;
    float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
    float _1875 = _1874 * _1868;
    float _1876 = _1874 * _1869;
    float _1877 = _1874 * _1870;
    float _1878 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1712].xyz));
    float _4002 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1882 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1883 = dot(vec3(_463, _464, _465), vec3(_1875, _1876, _1877));
    float _4024 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1875, _1876, _1877));
    float _4035 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1867 * _1867;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1907 = 1.0 - _1867;
    float _1918 = (0.5 / (((_1882 * ((_1881 * _1907) + _1867)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1907) + _1867) * _1881))) * _1881;
    float _4046 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    uint _1934 = _1712 + 9u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _466) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1753].x + _542;
    float _1948 = cbLight._m0[_1753].y + _543;
    float _1949 = cbLight._m0[_1753].z + _544;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1753].xyz));
    float _4057 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1961 = dot(vec3(_463, _464, _465), vec3(_1954, _1955, _1956));
    float _4068 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1954, _1955, _1956));
    float _4079 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1946 * _1946;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1946;
    float _1993 = (0.5 / (((_1882 * ((_1960 * _1983) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1983) + _1946) * _1960))) * _1960;
    float _4090 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    float _2005 = (((_1982 * cbLight._m0[_1934].x) * _1995) * _1735) + ((((cbLight._m0[_1853].x * _1704) * _1906) * _1920) * _1749);
    float _2006 = (((_1982 * cbLight._m0[_1934].y) * _1995) * _1735) + ((((cbLight._m0[_1853].y * _1705) * _1906) * _1920) * _1749);
    float _2007 = (((_1982 * cbLight._m0[_1934].z) * _1995) * _1735) + ((((cbLight._m0[_1853].z * _1706) * _1906) * _1920) * _1749);
    float _2069;
    float _2071;
    float _2073;
    if (_1790)
    {
        _2069 = _2005;
        _2071 = _2006;
        _2073 = _2007;
    }
    else
    {
        uint _2075 = _1712 + 2u;
        uint _2079 = _1712 + 10u;
        float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _466) * 0.949999988079071044921875);
        float _2094 = _2093 * _2093;
        float _2095 = cbLight._m0[_2075].x + _542;
        float _2096 = cbLight._m0[_2075].y + _543;
        float _2097 = cbLight._m0[_2075].z + _544;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2102 = _2101 * _2095;
        float _2103 = _2101 * _2096;
        float _2104 = _2101 * _2097;
        float _2105 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2075].xyz));
        float _4101 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2109 = dot(vec3(_463, _464, _465), vec3(_2102, _2103, _2104));
        float _4112 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2113 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2102, _2103, _2104));
        float _4123 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2117 = _2094 * _2094;
        float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
        float _2130 = (exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2131 = 1.0 - _2094;
        float _2141 = (0.5 / (((_1882 * ((_2108 * _2131) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2131) + _2094) * _2108))) * _2108;
        float _4134 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2069 = (((_2130 * cbLight._m0[_2079].x) * _2143) * _2144) + _2005;
        _2071 = (((_2130 * cbLight._m0[_2079].y) * _2143) * _2144) + _2006;
        _2073 = (((_2130 * cbLight._m0[_2079].z) * _2143) * _2144) + _2007;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1808)
    {
        _2179 = _2069;
        _2181 = _2071;
        _2183 = _2073;
    }
    else
    {
        uint _2190 = _1712 + 3u;
        uint _2194 = _1712 + 11u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _466) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _542;
        float _2211 = cbLight._m0[_2190].y + _543;
        float _2212 = cbLight._m0[_2190].z + _544;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2190].xyz));
        float _4150 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2224 = dot(vec3(_463, _464, _465), vec3(_2217, _2218, _2219));
        float _4161 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4172 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1882 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2246) + _2209) * _2223))) * _2223;
        float _4183 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2179 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2069;
        _2181 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2071;
        _2183 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2073;
    }
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_1710.y == 0u)
    {
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2334;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2334;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2334;
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.x;
        uint _2361 = uint((float(_2349.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2350))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2350)));
        float _2371 = (log2(_2337 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2372 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        uint _2375 = uint(isnan(14.0) ? _2372 : (isnan(_2372) ? 14.0 : min(_2372, 14.0)));
        uvec4 _2380 = texelFetch(g_lightClusterGridBuffer, int(((_2375 << 2u) + (_2361 << 6u)) >> 2u));
        uint _2381 = _2380.x;
        uint _2382 = _2349.z;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((((1u << ((_2382 >> 4u) & 15u)) + 4294967295u) & _2381) == 0u) || ((_2382 & 240u) == 0u))
        {
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
        }
        else
        {
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            uint _2641 = 0u;
            uint _2650;
            bool _2651;
            for (;;)
            {
                _2650 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                _2651 = _2650 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2651)
                {
                    frontier_phi_66_pred = _2635;
                    frontier_phi_66_pred_1 = _2640;
                    frontier_phi_66_pred_2 = _2639;
                    frontier_phi_66_pred_3 = _2638;
                    frontier_phi_66_pred_4 = _2637;
                    frontier_phi_66_pred_5 = _2636;
                }
                else
                {
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    uint _2786;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2650;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2790 = uint(findLSB(_2786)) + (_2641 << 5u);
                        uint _2787 = (_2786 + 4294967295u) & _2786;
                        uint _2792 = _2790 * 48u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2812 = (_2790 * 48u) + 4u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2831 = (_2790 * 48u) + 8u;
                        vec3 _2842 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x));
                        float _2846 = _2806.x - _2335;
                        float _2847 = _2806.y - _2336;
                        float _2848 = _2806.z - _2337;
                        float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                        float _2852 = inversesqrt(_2849);
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2856 = dot(vec3(_584, _587, _590), vec3(_2853, _2854, _2855));
                        float _2861 = 1.0 - (_2849 * _2806.w);
                        float _4209 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2863 = sqrt(_2849) * _2825.w;
                        float _2866 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2856) + _2867;
                        float _2873 = _2863 * _2863;
                        float _2877 = ((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2862) / ((_2873 * 0.699999988079071044921875) + 1.0);
                        float _2881 = (-0.0) - _2335;
                        float _2882 = (-0.0) - _2336;
                        float _2883 = (-0.0) - _2337;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2898 = exp2(log2(1.0 / ((_2873 * 3.5) + 5.0)) * 0.25);
                        float _2899 = 1.0 - _644;
                        float _2906 = sqrt(1.0 - ((1.0 - (_2899 * _2899)) * (1.0 - (_2898 * _2898))));
                        float _2907 = _2906 * _2906;
                        float _2908 = _2907 * _2907;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2919 = dot(vec3(_584, _587, _590), vec3(_2888, _2889, _2890));
                        float _4225 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2923 = dot(vec3(_584, _587, _590), vec3(_2915 * _2909, _2915 * _2910, _2915 * _2911));
                        float _4236 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2930 = ((_2926 * _2926) * (_2908 + (-1.0))) + 1.0;
                        float _2931 = _2866 * _2907;
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2856) + _2932;
                        float _4247 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2937 = 1.0 - _2907;
                        float _2947 = (0.5 / (((_2936 * ((_2922 * _2937) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2936 * _2937) + _2907) * _2922))) * _2936;
                        float _4258 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2958 = (((_2908 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_2930 * _2930) * ((_2873 * 2.1991131305694580078125) + 3.141590118408203125))) * _2862;
                        _2710 = (_2877 * _2825.x) + _2783;
                        _2711 = (_2877 * _2825.y) + _2784;
                        _2712 = (_2877 * _2825.z) + _2785;
                        _2707 = (_2958 * _2842.x) + _2780;
                        _2708 = (_2958 * _2842.y) + _2781;
                        _2709 = (_2958 * _2842.z) + _2782;
                        if (_2787 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2787;
                        }
                    }
                    frontier_phi_66_pred = _2707;
                    frontier_phi_66_pred_1 = _2712;
                    frontier_phi_66_pred_2 = _2711;
                    frontier_phi_66_pred_3 = _2710;
                    frontier_phi_66_pred_4 = _2709;
                    frontier_phi_66_pred_5 = _2708;
                }
                _2483 = frontier_phi_66_pred;
                _2493 = frontier_phi_66_pred_1;
                _2491 = frontier_phi_66_pred_2;
                _2489 = frontier_phi_66_pred_3;
                _2487 = frontier_phi_66_pred_4;
                _2485 = frontier_phi_66_pred_5;
                uint _2642 = _2641 + 1u;
                if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2635 = _2483;
                    _2636 = _2485;
                    _2637 = _2487;
                    _2638 = _2489;
                    _2639 = _2491;
                    _2640 = _2493;
                    _2641 = _2642;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
        }
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.z;
        uint _2499 = (_2497 >> 8u) & 15u;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((4294967295u << _2499) & _2381) == 0u)
        {
            _2603 = _2482;
            _2605 = _2484;
            _2607 = _2486;
            _2609 = _2488;
            _2611 = _2490;
            _2613 = _2492;
        }
        else
        {
            float _2628 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
            float _2629 = _2628 * _2335;
            float _2630 = _2628 * _2336;
            float _2631 = _2628 * _2337;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2499 < ((_2497 >> 12u) & 15u))
            {
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2763 = _2482;
                float _2764 = _2484;
                float _2765 = _2486;
                float _2766 = _2488;
                float _2767 = _2490;
                float _2768 = _2492;
                uint _2769 = _2499;
                uint _2778;
                bool _2779;
                for (;;)
                {
                    _2778 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                    _2779 = _2778 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2779)
                    {
                        frontier_phi_77_pred = _2768;
                        frontier_phi_77_pred_1 = _2767;
                        frontier_phi_77_pred_2 = _2766;
                        frontier_phi_77_pred_3 = _2765;
                        frontier_phi_77_pred_4 = _2764;
                        frontier_phi_77_pred_5 = _2763;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        float _2988 = _2766;
                        float _2989 = _2767;
                        float _2990 = _2768;
                        uint _2991 = _2778;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3061;
                        vec4 _3077;
                        float _3123;
                        bool _3124;
                        for (;;)
                        {
                            uint _3002 = ((_2769 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3048 = (_3002 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_3002 * 40u) + 20u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3079 = (_3002 * 40u) + 24u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3098 = (_3002 * 40u) + 28u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3123 = fma(_2337, _3111.z, fma(_2336, _3111.y, _3111.x * _2335)) + _3111.w;
                            _3124 = !((fma(_2337, _3092.z, fma(_2336, _3092.y, _3092.x * _2335)) + _3092.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3124)
                            {
                                float _3151 = _3017.x - _2335;
                                float _3152 = _3017.y - _2336;
                                float _3153 = _3017.z - _2337;
                                float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                                float _3157 = inversesqrt(_3154);
                                float _3158 = _3157 * _3151;
                                float _3159 = _3157 * _3152;
                                float _3160 = _3157 * _3153;
                                float _3164 = 1.0 - (_3154 / (_3018 * _3018));
                                float _4269 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3169 = sqrt(_3154) * _3033.w;
                                float _3171 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                                float _3172 = _3171 * _3171;
                                float _3175 = ((1.0 - _3172) * dot(vec3(_3158, _3159, _3160), vec3(_584, _587, _590))) + _3172;
                                float _3178 = _3169 * _3169;
                                float _3182 = (fma(_2337, _3061.z, fma(_2336, _3061.y, _3061.x * _2335)) + _3061.w) / _3123;
                                float _3183 = (fma(_2337, _3077.z, fma(_2336, _3077.y, _3077.x * _2335)) + _3077.w) / _3123;
                                float _3187 = 1.0 - dot(vec2(_3182, _3183), vec2(_3182, _3183));
                                float _4285 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3189 = _3188 * (((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3165) / ((_3178 * 0.699999988079071044921875) + 1.0));
                                float _3201 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                                float _3202 = 1.0 - _644;
                                float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                                float _3210 = _3209 * _3209;
                                float _3211 = _3210 * _3210;
                                float _3212 = _3158 - _2629;
                                float _3213 = _3159 - _2630;
                                float _3214 = _3160 - _2631;
                                float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                                float _3222 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2629, (-0.0) - _2630, (-0.0) - _2631));
                                float _4296 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3226 = dot(vec3(_584, _587, _590), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                                float _4307 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                                float _3234 = _3171 * _3210;
                                float _3235 = _3234 * _3234;
                                float _3241 = ((1.0 - _3235) * dot(vec3(_584, _587, _590), vec3(_3158, _3159, _3160))) + _3235;
                                float _4318 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3243 = 1.0 - _3210;
                                float _3253 = (0.5 / (((_3242 * ((_3225 * _3243) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3210) * _3225))) * _3242;
                                float _4329 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3263 = (_3188 * _3165) * (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3233 * _3233) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3189 * _3033.y;
                                frontier_phi_83_pred_1 = _3189 * _3033.x;
                                frontier_phi_83_pred_2 = _3263 * _3045.z;
                                frontier_phi_83_pred_3 = _3263 * _3045.y;
                                frontier_phi_83_pred_4 = _3263 * _3045.x;
                                frontier_phi_83_pred_5 = _3189 * _3033.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3271 = frontier_phi_83_pred;
                            _3270 = frontier_phi_83_pred_1;
                            _3269 = frontier_phi_83_pred_2;
                            _3268 = frontier_phi_83_pred_3;
                            _3267 = frontier_phi_83_pred_4;
                            _3272 = frontier_phi_83_pred_5;
                            _2975 = _3270 + _2988;
                            _2976 = _3271 + _2989;
                            _2977 = _3272 + _2990;
                            _2972 = _3267 + _2985;
                            _2973 = _3268 + _2986;
                            _2974 = _3269 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2977;
                        frontier_phi_77_pred_1 = _2976;
                        frontier_phi_77_pred_2 = _2975;
                        frontier_phi_77_pred_3 = _2974;
                        frontier_phi_77_pred_4 = _2973;
                        frontier_phi_77_pred_5 = _2972;
                    }
                    _2614 = frontier_phi_77_pred;
                    _2612 = frontier_phi_77_pred_1;
                    _2610 = frontier_phi_77_pred_2;
                    _2608 = frontier_phi_77_pred_3;
                    _2606 = frontier_phi_77_pred_4;
                    _2604 = frontier_phi_77_pred_5;
                    uint _2770 = _2769 + 1u;
                    if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2763 = _2604;
                        _2764 = _2606;
                        _2765 = _2608;
                        _2766 = _2610;
                        _2767 = _2612;
                        _2768 = _2614;
                        _2769 = _2770;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2608;
                frontier_phi_58_59_ladder_1 = _2614;
                frontier_phi_58_59_ladder_2 = _2612;
                frontier_phi_58_59_ladder_3 = _2610;
                frontier_phi_58_59_ladder_4 = _2606;
                frontier_phi_58_59_ladder_5 = _2604;
            }
            else
            {
                frontier_phi_58_59_ladder = _2486;
                frontier_phi_58_59_ladder_1 = _2492;
                frontier_phi_58_59_ladder_2 = _2490;
                frontier_phi_58_59_ladder_3 = _2488;
                frontier_phi_58_59_ladder_4 = _2484;
                frontier_phi_58_59_ladder_5 = _2482;
            }
            _2603 = frontier_phi_58_59_ladder_5;
            _2605 = frontier_phi_58_59_ladder_4;
            _2607 = frontier_phi_58_59_ladder;
            _2609 = frontier_phi_58_59_ladder_3;
            _2611 = frontier_phi_58_59_ladder_2;
            _2613 = frontier_phi_58_59_ladder_1;
        }
        float _2618 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2394 = (_2618 * _2609) + _1846;
        _2396 = (_2618 * _2611) + _1848;
        _2398 = (_2618 * _2613) + _1850;
        _2400 = ((_2603 * 0.039999999105930328369140625) * _2618) + _2179;
        _2402 = ((_2605 * 0.039999999105930328369140625) * _2618) + _2181;
        _2404 = ((_2607 * 0.039999999105930328369140625) * _2618) + _2183;
    }
    else
    {
        _2394 = _1846;
        _2396 = _1848;
        _2398 = _1850;
        _2400 = _2179;
        _2402 = _2181;
        _2404 = _2183;
    }
    float _4345 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4356 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4367 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2421 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2394 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _628))) + ((_2400 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2422 = ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2396 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _628))) + ((_2402 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2423 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2398 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _628))) + ((_2404 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    uint _2424 = _224 + 6u;
    float _2432 = _563 / cbSceneParam._m0[86u].x;
    float _2433 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2447 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2449 = _2447.x;
    float _2450 = _2447.y;
    float _2451 = _2447.z;
    float _2452 = _2447.w;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2507 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2508 = _2507 / _484;
        float _2519 = _2508 * _535;
        float _2520 = _536 * _2508;
        float _2521 = (-0.0) - _2520;
        float _2523 = _2508 * _537;
        float _2525 = (cbSceneParam._m0[77u].w * _2521) / _2507;
        float _2526 = _2525 + cbSceneParam._m0[79u].w;
        float _2527 = cbSceneParam._m0[79u].w - _2520;
        float _2533 = sqrt(((_2519 * _2519) + (_2520 * _2520)) + (_2523 * _2523));
        float _2536 = (1.0 - (cbSceneParam._m0[77u].w / _2507)) * _2533;
        float _2541 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2543 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2521 - _2525) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2526 > 0.0) ? exp2(_2541 * _2526) : (2.0 - exp2(_2543 * _2526))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2536;
        }
        else
        {
            float _2664 = 1.0 / cbSceneParam._m0[80u].x;
            float _2665 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : max(_2526, _2527));
            float _2666 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : min(_2526, _2527));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            _2720 = ((abs(_2533 / _2521) * cbSceneParam._m0[80u].y) * ((((_2675 - _2676) * 2.0) - ((exp2(_2541 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)))) - exp2(_2541 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))))) * _2664)) - ((exp2(_2543 * _2675) - exp2(_2543 * _2676)) * _2664))) + (_2536 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2452);
        _2545 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2449;
        _2547 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2450;
        _2549 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2451;
        _2551 = _2731 * _2452;
    }
    else
    {
        _2545 = _2449;
        _2547 = _2450;
        _2549 = _2451;
        _2551 = _2452;
    }
    bool _2758;
    vec4 _2561;
    vec4 _2583;
    float _2585;
    float _2589;
    float _2590;
    float _2591;
    float _2592;
    bool _2602;
    for (;;)
    {
        _2561 = cbMatDynParam._m0[0u];
        float _2563 = roundEven(_2561.y);
        bool _2564 = _2563 == 3.0;
        float _2565 = log2(_2551);
        float _2572 = exp2(_2565 * cbSceneParam._m0[78u].x) * _2421;
        float _2573 = exp2(_2565 * cbSceneParam._m0[78u].y) * _2422;
        float _2574 = exp2(_2565 * cbSceneParam._m0[78u].z) * _2423;
        float _2581 = _551 + (-0.5);
        _2583 = cbMtdParam._m0[1u];
        _2585 = _2583.y * _2581;
        float _2588 = (_2563 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2589 = _2588 * (_2564 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2545)));
        _2590 = _2588 * (_2564 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
        _2591 = _2588 * (_2564 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
        _2592 = _2581 * 0.999000012874603271484375;
        _2602 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2602)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2592) < 0.5)
            {
                _2758 = true;
                break;
            }
        }
        uint _2699 = _603 + uint(_2561.w);
        if ((cbInstanceData._m0[_2699].w < 1.0) && ((cbInstanceData._m0[_2699].w + _2592) < 0.5))
        {
            _2758 = true;
            break;
        }
        if ((_2585 + 1.0) < _2583.x)
        {
            _2758 = true;
            break;
        }
        _2758 = false;
        break;
    }
    float _2963;
    if (_2758)
    {
        discard_state = true;
        _2963 = 0.0;
    }
    else
    {
        _2963 = cbInstanceData._m0[_2424].w;
    }
    SV_Target.x = _2589;
    SV_Target.y = _2590;
    SV_Target.z = _2591;
    SV_Target.w = _2963;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2424].w;
    discard_exit();
}


