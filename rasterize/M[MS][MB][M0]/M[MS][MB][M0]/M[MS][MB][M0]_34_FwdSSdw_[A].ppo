#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3582;
float _3583;
float _3584;
float _3585;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3594 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    float _361 = fma(_352, _233, fma(_358, _240, _357 * _226));
    float _364 = fma(_352, _234, fma(_358, _241, _357 * _227));
    float _367 = fma(_352, _235, fma(_358, _242, _357 * _228));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _417 = ((_409 - _410) * cbMtdParam._m0[24u].z) + _410;
    float _419 = (cbMtdParam._m0[19u].x + dot(vec4(_371 * _361, _371 * _364, _371 * _367, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_417 * cbMtdParam._m0[21u].z);
    float _3605 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _422 = (-0.0) - cbMtdParam._m0[24u].y;
    float _424 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
    float _432 = _420 - ((_420 * TEXCOORD_8.x) * _425);
    float _433 = _420 - ((_420 * TEXCOORD_8.y) * _425);
    float _434 = _420 - ((_420 * TEXCOORD_8.z) * _425);
    float _441 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _445 = ((isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : min(_441, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _453 = (_445 - (((_417 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _445))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3636 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _458 = ((_432 * (cbMtdParam._m0[17u].x - _290)) * _454) + _290;
    float _459 = ((_433 * (cbMtdParam._m0[17u].y - _291)) * _454) + _291;
    float _460 = ((_434 * (cbMtdParam._m0[17u].z - _292)) * _454) + _292;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _474 = _472.x;
    float _475 = 1.0 - _474;
    float _504 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_474 - _475) * cbMtdParam._m0[24u].w) + _475) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3647 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _513 = ((((cbMtdParam._m0[10u].x - _458) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _505) + _458;
    float _514 = ((((cbMtdParam._m0[10u].y - _459) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _505) + _459;
    float _515 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _460)) * _505) + _460;
    float _520 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3658 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _552 = (((_534.z - _520) * _432) * _454) + _520;
    float _555 = ((cbMtdParam._m0[23u].y - _552) * _505) + _552;
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _580 = (_574.x * 2.0) + (-1.0);
    float _581 = (_574.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3669 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _602 = (((cbMtdParam._m0[21u].x * _357) + ((_541 - _357) * _432)) * _454) + _357;
    float _603 = (((cbMtdParam._m0[21u].x * _358) + ((_542 - _358) * _433)) * _454) + _358;
    float _604 = (((sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) - _352) * _434) * _454) + _352;
    float _615 = (((_580 - _602) + (_602 * cbMtdParam._m0[22u].z)) * _505) + _602;
    float _616 = (((_581 - _603) + (_603 * cbMtdParam._m0[22u].z)) * _505) + _603;
    float _617 = ((sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) - _604) * _505) + _604;
    float _619 = cbMtdParam._m0[22u].x + _336.w;
    float _622 = fma(_617, _233, fma(_616, _240, _615 * _226));
    float _625 = fma(_617, _234, fma(_616, _241, _615 * _227));
    float _628 = fma(_617, _235, fma(_616, _242, _615 * _228));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3680 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _636 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3702 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3713 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3724 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    vec4 _718 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _720 = _718.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _877 = sqrt(((_704 * _704) + (_705 * _705)) + (_706 * _706));
        float _883 = (cbMatDynParam._m0[5u].x * _877) + cbMatDynParam._m0[5u].y;
        float _3735 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _888 = (cbMatDynParam._m0[5u].z * _877) + cbMatDynParam._m0[5u].w;
        float _3746 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) - _884)) + _884) < ((_720 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _756 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _759 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _772 = _245 + 9u;
    uint _773 = _772 + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3757 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _797 = ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * TEXCOORD_5.w) * _793.x;
    float _798 = dot(vec3(_633, _634, _635), vec3(_711, _712, _713));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _633) - _711;
    float _806 = (_801 * _634) - _712;
    float _807 = (_801 * _635) - _713;
    float _811 = abs(dot(vec3(_711, _712, _713), vec3(_633, _634, _635)));
    float _3790 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_636);
    float _826 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _924 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _928 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _953 = _858 + _633;
        float _954 = _862 + _634;
        float _955 = _866 + _635;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_633, _634, _635), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3838 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_633, _634, _635), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3871 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_633, _634, _635), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3904 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1238 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1242 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1246 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1269 = _858 + _633;
        float _1270 = _862 + _634;
        float _1271 = _866 + _635;
        float _1281 = fma(_1271, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1238 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1242 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[35u].z) + ((((((_1246 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1337 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1304.x + (-0.5));
        float _1339 = _1337 * (_1304.y + (-0.5));
        float _1340 = _1337 * (_1304.z + (-0.5));
        float _1347 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1311.x + (-0.5));
        float _1349 = _1347 * (_1311.y + (-0.5));
        float _1350 = _1347 * (_1311.z + (-0.5));
        float _1357 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1318.x + (-0.5));
        float _1359 = _1357 * (_1318.y + (-0.5));
        float _1360 = _1357 * (_1318.z + (-0.5));
        float _1367 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1325.x + (-0.5));
        float _1369 = _1367 * (_1325.y + (-0.5));
        float _1370 = _1367 * (_1325.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_633, _634, _635), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3967 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1401 + 1.0))) + _1406) * _1371;
        float _1416 = _1339 * 0.5;
        float _1417 = _1349 * 0.5;
        float _1418 = _1359 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_633, _634, _635), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4000 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1443 + 1.0))) + _1448) * _1372;
        float _1458 = _1340 * 0.5;
        float _1459 = _1350 * 0.5;
        float _1460 = _1360 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_633, _634, _635), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4033 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1485 + 1.0))) + _1490) * _1373;
        _1507 = _1340;
        _1508 = _1339;
        _1509 = _1338;
        _1510 = _1350;
        _1511 = _1349;
        _1512 = _1348;
        _1513 = _1360;
        _1514 = _1359;
        _1515 = _1358;
        _1516 = _1373;
        _1517 = _1372;
        _1518 = _1371;
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1554 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1531));
    float _1575 = _805 * 0.5;
    float _1576 = _806 * 0.5;
    float _1577 = _807 * 0.5;
    float _1578 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1581 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1584 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1618;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1591 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1599 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1606 = dot(vec4(cbModelParam._m0[39u]), vec4(_1575, _1576, _1577, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1629;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1620 = dot(vec4(cbModelParam._m0[40u]), vec4(_1575, _1576, _1577, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1633 = (_1629 * cbModelParam._m0[1u].x) + (_1618 * (1.0 - cbModelParam._m0[1u].x));
    float _1643 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1643 : min(cbModelParam._m0[25u].z, _1643));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1706 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1709 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1737 = frontier_phi_17_15_ladder;
        }
        float _1961;
        if (_1706 > 0.0)
        {
            _1961 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1961 = frontier_phi_26_22_ladder;
        }
        float _2207;
        if (_1709 > 0.0)
        {
            _2207 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2207 = frontier_phi_38_33_ladder;
        }
        float _2209 = isnan(_1961) ? _1737 : (isnan(_1737) ? _1961 : min(_1737, _1961));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1703) + _1692;
        float _2215 = (_2210 * _1706) + _1696;
        float _2216 = (_2210 * _1709) + _1700;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2217;
        float _2221 = _2217 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 > _2221) || ((_2215 < _2219) || ((_2214 < _2219) || (_2214 > _2221))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2216, cbModelParam._m0[9u].z, fma(_2215, cbModelParam._m0[9u].y, _2214 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2216, cbModelParam._m0[10u].z, fma(_2215, cbModelParam._m0[10u].y, _2214 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2216, cbModelParam._m0[11u].z, fma(_2215, cbModelParam._m0[11u].y, _2214 * cbModelParam._m0[11u].x))), _1644);
            frontier_phi_16_38_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_16_38_ladder_2;
        _1727 = frontier_phi_16_38_ladder_1;
        _1729 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1644);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1802 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1805 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1966;
        if (_1799 > 0.0)
        {
            _1966 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1966 = frontier_phi_28_24_ladder;
        }
        float _2234;
        if (_1802 > 0.0)
        {
            _2234 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2234 = frontier_phi_40_35_ladder;
        }
        float _2439;
        if (_1805 > 0.0)
        {
            _2439 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2439 = frontier_phi_49_46_ladder;
        }
        float _2441 = isnan(_2234) ? _1966 : (isnan(_1966) ? _2234 : min(_1966, _2234));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1799) + _1788;
        float _2447 = (_2442 * _1802) + _1792;
        float _2448 = (_2442 * _1805) + _1796;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_25_49_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_25_49_ladder_2;
        _1826 = frontier_phi_25_49_ladder_1;
        _1828 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1734);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1840 = ((((1.0 - _826) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_826 * _813)) * _797;
    float _1841 = _1840 * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1842 = _1840 * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1843 = _1840 * ((cbModelParam._m0[1u].w * (_1828 - _1729)) + _1729);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    vec4 _1860 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_732, _733));
    float _1862 = _1860.w;
    float _1874 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1862);
    float _1875 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1862);
    float _1876 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1862);
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _797 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1919 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1923 = _1882 | 1u;
    float _1934 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_633, _634, _635));
    float _1937 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_633, _634, _635));
    float _4169 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _4180 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1942 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1944 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _1951 = ((cbLight._m0[_1899].x * _1905) * _1944) + (((cbLight._m0[_1909].x * _1874) * _1919) * _1942);
    float _1952 = ((_1905 * cbLight._m0[_1899].y) * _1944) + (((cbLight._m0[_1909].y * _1875) * _1919) * _1942);
    float _1953 = ((_1905 * cbLight._m0[_1899].z) * _1944) + (((cbLight._m0[_1909].z * _1876) * _1919) * _1942);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1960)
    {
        _1971 = _1951;
        _1973 = _1952;
        _1975 = _1953;
    }
    else
    {
        uint _1979 = _1882 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4191 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1998 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1951;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1952;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1953;
    }
    bool _1978 = _1958.y == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1978)
    {
        _2016 = _1971;
        _2018 = _1973;
        _2020 = _1975;
    }
    else
    {
        uint _2178 = _1882 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4207 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2197 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2016 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1971;
        _2018 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1973;
        _2020 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1975;
    }
    uint _2023 = _1882 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _636) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1882].x + _711;
    float _2039 = cbLight._m0[_1882].y + _712;
    float _2040 = cbLight._m0[_1882].z + _713;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1882].xyz));
    float _4223 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2052 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2053 = dot(vec3(_633, _634, _635), vec3(_2045, _2046, _2047));
    float _4245 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2045, _2046, _2047));
    float _4256 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2037;
    float _2088 = (0.5 / (((_2052 * ((_2051 * _2077) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2077) + _2037) * _2051))) * _2051;
    float _4267 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2104 = _1882 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _636) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1923].x + _711;
    float _2118 = cbLight._m0[_1923].y + _712;
    float _2119 = cbLight._m0[_1923].z + _713;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1923].xyz));
    float _4278 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2131 = dot(vec3(_633, _634, _635), vec3(_2124, _2125, _2126));
    float _4289 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2124, _2125, _2126));
    float _4300 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2052 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2153) + _2116) * _2130))) * _2130;
    float _4311 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1905) + ((((cbLight._m0[_2023].x * _1874) * _2076) * _2090) * _1919);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1905) + ((((cbLight._m0[_2023].y * _1875) * _2076) * _2090) * _1919);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1905) + ((((cbLight._m0[_2023].z * _1876) * _2076) * _2090) * _1919);
    float _2239;
    float _2241;
    float _2243;
    if (_1960)
    {
        _2239 = _2175;
        _2241 = _2176;
        _2243 = _2177;
    }
    else
    {
        uint _2245 = _1882 + 2u;
        uint _2249 = _1882 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _636) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _711;
        float _2266 = cbLight._m0[_2245].y + _712;
        float _2267 = cbLight._m0[_2245].z + _713;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2245].xyz));
        float _4322 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2279 = dot(vec3(_633, _634, _635), vec3(_2272, _2273, _2274));
        float _4333 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4344 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_2052 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2301) + _2264) * _2278))) * _2278;
        float _4355 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2239 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2175;
        _2241 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2176;
        _2243 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2177;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1978)
    {
        _2349 = _2239;
        _2351 = _2241;
        _2353 = _2243;
    }
    else
    {
        uint _2360 = _1882 + 3u;
        uint _2364 = _1882 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _636) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _711;
        float _2381 = cbLight._m0[_2360].y + _712;
        float _2382 = cbLight._m0[_2360].z + _713;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2360].xyz));
        float _4371 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2394 = dot(vec3(_633, _634, _635), vec3(_2387, _2388, _2389));
        float _4382 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4393 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2052 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2416) + _2379) * _2393))) * _2393;
        float _4404 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2239;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2241;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2243;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1880.y == 0u)
    {
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2504;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2504;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2504;
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2520)));
        float _2541 = (log2(_2507 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2820)
                {
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2819;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2810 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2505;
                        float _3016 = _2975.y - _2506;
                        float _3017 = _2975.z - _2507;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_753, _756, _759), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4430 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2505;
                        float _3051 = (-0.0) - _2506;
                        float _3052 = (-0.0) - _2507;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _813;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_753, _756, _759), vec3(_3057, _3058, _3059));
                        float _4446 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3092 = dot(vec3(_753, _756, _759), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4457 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4468 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4479 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2879 = (_3046 * _2994.x) + _2952;
                        _2880 = (_3046 * _2994.y) + _2953;
                        _2881 = (_3046 * _2994.z) + _2954;
                        _2876 = (_3127 * _3011.x) + _2949;
                        _2877 = (_3127 * _3011.y) + _2950;
                        _2878 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                _2653 = frontier_phi_66_pred;
                _2663 = frontier_phi_66_pred_1;
                _2661 = frontier_phi_66_pred_2;
                _2659 = frontier_phi_66_pred_3;
                _2657 = frontier_phi_66_pred_4;
                _2655 = frontier_phi_66_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2653;
                    _2805 = _2655;
                    _2806 = _2657;
                    _2807 = _2659;
                    _2808 = _2661;
                    _2809 = _2663;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2669) & _2551) == 0u)
        {
            _2772 = _2652;
            _2774 = _2654;
            _2776 = _2656;
            _2778 = _2658;
            _2780 = _2660;
            _2782 = _2662;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
            float _2798 = _2797 * _2505;
            float _2799 = _2797 * _2506;
            float _2800 = _2797 * _2507;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2932 = _2652;
                float _2933 = _2654;
                float _2934 = _2656;
                float _2935 = _2658;
                float _2936 = _2660;
                float _2937 = _2662;
                uint _2938 = _2669;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2948)
                    {
                        frontier_phi_77_pred = _2937;
                        frontier_phi_77_pred_1 = _2936;
                        frontier_phi_77_pred_2 = _2935;
                        frontier_phi_77_pred_3 = _2934;
                        frontier_phi_77_pred_4 = _2933;
                        frontier_phi_77_pred_5 = _2932;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        uint _3160 = _2947;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3230;
                        vec4 _3245;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3171 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3217 = (_3171 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3171 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3171 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3171 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_2507, _3279.z, fma(_2506, _3279.y, _3279.x * _2505)) + _3279.w;
                            _3292 = !((fma(_2507, _3260.z, fma(_2506, _3260.y, _3260.x * _2505)) + _3260.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3186.x - _2505;
                                float _3320 = _3186.y - _2506;
                                float _3321 = _3186.z - _2507;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3187 * _3187));
                                float _4490 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3337 = sqrt(_3322) * _3202.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_753, _756, _759))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_2507, _3230.z, fma(_2506, _3230.y, _3230.x * _2505)) + _3230.w) / _3291;
                                float _3351 = (fma(_2507, _3245.z, fma(_2506, _3245.y, _3245.x * _2505)) + _3245.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4506 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _813;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2798;
                                float _3381 = _3327 - _2799;
                                float _3382 = _3328 - _2800;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4517 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3394 = dot(vec3(_753, _756, _759), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4528 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_753, _756, _759), vec3(_3326, _3327, _3328))) + _3403;
                                float _4539 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4550 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3357 * _3202.y;
                                frontier_phi_83_pred_1 = _3357 * _3202.x;
                                frontier_phi_83_pred_2 = _3431 * _3214.z;
                                frontier_phi_83_pred_3 = _3431 * _3214.y;
                                frontier_phi_83_pred_4 = _3431 * _3214.x;
                                frontier_phi_83_pred_5 = _3357 * _3202.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3439 = frontier_phi_83_pred;
                            _3438 = frontier_phi_83_pred_1;
                            _3437 = frontier_phi_83_pred_2;
                            _3436 = frontier_phi_83_pred_3;
                            _3435 = frontier_phi_83_pred_4;
                            _3440 = frontier_phi_83_pred_5;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3146 = _3440 + _3159;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    _2783 = frontier_phi_77_pred;
                    _2781 = frontier_phi_77_pred_1;
                    _2779 = frontier_phi_77_pred_2;
                    _2777 = frontier_phi_77_pred_3;
                    _2775 = frontier_phi_77_pred_4;
                    _2773 = frontier_phi_77_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2773;
                        _2933 = _2775;
                        _2934 = _2777;
                        _2935 = _2779;
                        _2936 = _2781;
                        _2937 = _2783;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2777;
                frontier_phi_58_59_ladder_1 = _2783;
                frontier_phi_58_59_ladder_2 = _2781;
                frontier_phi_58_59_ladder_3 = _2779;
                frontier_phi_58_59_ladder_4 = _2775;
                frontier_phi_58_59_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_58_59_ladder = _2656;
                frontier_phi_58_59_ladder_1 = _2662;
                frontier_phi_58_59_ladder_2 = _2660;
                frontier_phi_58_59_ladder_3 = _2658;
                frontier_phi_58_59_ladder_4 = _2654;
                frontier_phi_58_59_ladder_5 = _2652;
            }
            _2772 = frontier_phi_58_59_ladder_5;
            _2774 = frontier_phi_58_59_ladder_4;
            _2776 = frontier_phi_58_59_ladder;
            _2778 = frontier_phi_58_59_ladder_3;
            _2780 = frontier_phi_58_59_ladder_2;
            _2782 = frontier_phi_58_59_ladder_1;
        }
        float _2787 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2564 = (_2787 * _2778) + _2016;
        _2566 = (_2787 * _2780) + _2018;
        _2568 = (_2787 * _2782) + _2020;
        _2570 = ((_2772 * 0.039999999105930328369140625) * _2787) + _2349;
        _2572 = ((_2774 * 0.039999999105930328369140625) * _2787) + _2351;
        _2574 = ((_2776 * 0.039999999105930328369140625) * _2787) + _2353;
    }
    else
    {
        _2564 = _2016;
        _2566 = _2018;
        _2568 = _2020;
        _2570 = _2349;
        _2572 = _2351;
        _2574 = _2353;
    }
    float _4566 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4577 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4588 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2591 = ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2564 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _797))) + ((_2570 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2566 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _797))) + ((_2572 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2593 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2568 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _797))) + ((_2574 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    uint _2594 = _245 + 6u;
    float _2602 = _732 / cbSceneParam._m0[86u].x;
    float _2603 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2678 = _2677 / _654;
        float _2689 = _2678 * _704;
        float _2690 = _705 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2692 = _2678 * _706;
        float _2694 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2695 = _2694 + cbSceneParam._m0[79u].w;
        float _2696 = cbSceneParam._m0[79u].w - _2690;
        float _2702 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2692 * _2692));
        float _2705 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2702;
        float _2710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2691 - _2694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2695 > 0.0) ? exp2(_2710 * _2695) : (2.0 - exp2(_2712 * _2695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2705;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : max(_2695, _2696));
            float _2835 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : min(_2695, _2696));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2889 = ((abs(_2702 / _2691) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2710 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2710 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2712 * _2844) - exp2(_2712 * _2845)) * _2833))) + (_2705 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2622);
        _2714 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2716 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2718 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2720 = _2900 * _2622;
    }
    else
    {
        _2714 = _2619;
        _2716 = _2620;
        _2718 = _2621;
        _2720 = _2622;
    }
    bool _2927;
    vec4 _2730;
    vec4 _2752;
    float _2754;
    float _2758;
    float _2759;
    float _2760;
    float _2761;
    bool _2771;
    for (;;)
    {
        _2730 = cbMatDynParam._m0[0u];
        float _2732 = roundEven(_2730.y);
        bool _2733 = _2732 == 3.0;
        float _2734 = log2(_2720);
        float _2741 = exp2(_2734 * cbSceneParam._m0[78u].x) * _2591;
        float _2742 = exp2(_2734 * cbSceneParam._m0[78u].y) * _2592;
        float _2743 = exp2(_2734 * cbSceneParam._m0[78u].z) * _2593;
        float _2750 = _720 + (-0.5);
        _2752 = cbMtdParam._m0[1u];
        _2754 = _2752.y * _2750;
        float _2757 = (_2732 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2758 = _2757 * (_2733 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2714)));
        _2759 = _2757 * (_2733 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2716)));
        _2760 = _2757 * (_2733 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2718)));
        _2761 = _2750 * 0.999000012874603271484375;
        _2771 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2771)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2761) < 0.5)
            {
                _2927 = true;
                break;
            }
        }
        uint _2868 = _772 + uint(_2730.w);
        if ((cbInstanceData._m0[_2868].w < 1.0) && ((cbInstanceData._m0[_2868].w + _2761) < 0.5))
        {
            _2927 = true;
            break;
        }
        if ((_2754 + 1.0) < _2752.x)
        {
            _2927 = true;
            break;
        }
        _2927 = false;
        break;
    }
    float _3132;
    if (_2927)
    {
        discard_state = true;
        _3132 = 0.0;
    }
    else
    {
        _3132 = cbInstanceData._m0[_2594].w;
    }
    SV_Target.x = _2758;
    SV_Target.y = _2759;
    SV_Target.z = _2760;
    SV_Target.w = _3132;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
    discard_exit();
}


