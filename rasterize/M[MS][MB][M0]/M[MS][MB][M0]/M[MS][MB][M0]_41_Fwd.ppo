#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1081;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _325 = _321.z;
    float _330 = (_321.x * 2.0) + (-1.0);
    float _332 = (_321.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3389 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _358 = _356.x;
    float _359 = 1.0 - _358;
    float _368 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _371 = ((isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : min(_368, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _380 = (_371 - ((((((_358 - _359) * cbMtdParam._m0[24u].z) + _359) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _371))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3410 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _388 = (_381 * ((_301.x * cbMtdParam._m0[18u].x) - _280)) + _280;
    float _389 = (_381 * ((_301.y * cbMtdParam._m0[18u].y) - _281)) + _281;
    float _390 = (_381 * ((_301.z * cbMtdParam._m0[18u].z) - _282)) + _282;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _405 = _403.x;
    float _406 = 1.0 - _405;
    float _435 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_405 - _406) * cbMtdParam._m0[24u].w) + _406) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3421 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _444 = ((((cbMtdParam._m0[10u].x - _388) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _436) + _388;
    float _445 = ((((cbMtdParam._m0[10u].y - _389) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _436) + _389;
    float _446 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _390)) * _436) + _390;
    vec4 _460 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _467 = (_460.x * 2.0) + (-1.0);
    float _468 = (_460.y * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3432 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _477 = (_381 * (_460.z - _325)) + _325;
    float _480 = ((cbMtdParam._m0[23u].y - _477) * _436) + _477;
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _508 = (_502.x * 2.0) + (-1.0);
    float _509 = (_502.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3443 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _527 = (((_467 - _330) + (cbMtdParam._m0[21u].x * _330)) * _381) + _330;
    float _528 = (((_468 - _332) + (cbMtdParam._m0[21u].x * _332)) * _381) + _332;
    float _529 = (_381 * (sqrt(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) - _339)) + _339;
    float _540 = (((_508 - _527) + (_527 * cbMtdParam._m0[22u].z)) * _436) + _527;
    float _541 = (((_509 - _528) + (_528 * cbMtdParam._m0[22u].z)) * _436) + _528;
    float _542 = ((sqrt(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) - _529) * _436) + _529;
    float _544 = cbMtdParam._m0[22u].x + _321.w;
    float _547 = fma(_542, _222 * NORMAL.x, fma(_541, _229 * TANGENT.x, (_215 * _207) * _540));
    float _550 = fma(_542, _222 * NORMAL.y, fma(_541, _229 * TANGENT.y, (_215 * _208) * _540));
    float _553 = fma(_542, _222 * NORMAL.z, fma(_541, _229 * TANGENT.z, (_215 * _209) * _540));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3454 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _561 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3476 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3487 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3498 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _666 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _669 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _672 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    uint _686 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _692 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_686].x;
    float _693 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_686].y;
    float _694 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_686].z;
    float _3509 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _710 = ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * TEXCOORD_5.w) * _706.x;
    float _711 = dot(vec3(_558, _559, _560), vec3(_636, _637, _638));
    float _714 = _711 * 2.0;
    float _718 = (_714 * _558) - _636;
    float _719 = (_714 * _559) - _637;
    float _720 = (_714 * _560) - _638;
    float _724 = abs(dot(vec3(_636, _637, _638), vec3(_558, _559, _560)));
    float _3542 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _726 = sqrt(_561);
    float _739 = exp2((_726 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_726 * 3.0));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1080;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _809 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _813 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _838 = _771 + _558;
        float _839 = _775 + _559;
        float _840 = _779 + _560;
        float _850 = fma(_840, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838)) - _805;
        float _851 = fma(_840, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838)) - _809;
        float _852 = fma(_840, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838)) - _813;
        float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
        float _869 = ((_856 * _850) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_856 * _851) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_856 * _852) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _908 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_874.x + (-0.5));
        float _910 = _908 * (_874.y + (-0.5));
        float _911 = _908 * (_874.z + (-0.5));
        float _918 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_881.x + (-0.5));
        float _920 = _918 * (_881.y + (-0.5));
        float _921 = _918 * (_881.z + (-0.5));
        float _928 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_888.x + (-0.5));
        float _930 = _928 * (_888.y + (-0.5));
        float _931 = _928 * (_888.z + (-0.5));
        float _938 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_895.x + (-0.5));
        float _940 = _938 * (_895.y + (-0.5));
        float _941 = _938 * (_895.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _962 = (dot(vec3(_558, _559, _560), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _972 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3590 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_974 + 1.0))) + _979) * _942;
        float _989 = _910 * 0.5;
        float _990 = _920 * 0.5;
        float _991 = _930 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_558, _559, _560), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3623 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1016 + 1.0))) + _1021) * _943;
        float _1031 = _911 * 0.5;
        float _1032 = _921 * 0.5;
        float _1033 = _931 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_558, _559, _560), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3656 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1058 + 1.0))) + _1063) * _944;
        _1080 = _911;
        _1082 = _910;
        _1083 = _909;
        _1084 = _921;
        _1085 = _920;
        _1086 = _919;
        _1087 = _931;
        _1088 = _930;
        _1089 = _929;
        _1090 = _944;
        _1091 = _943;
        _1092 = _942;
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _1081;
        _1082 = _1081;
        _1083 = _1081;
        _1084 = _1081;
        _1085 = _1081;
        _1086 = _1081;
        _1087 = _1081;
        _1088 = _1081;
        _1089 = _1081;
        _1090 = _1081;
        _1091 = _1081;
        _1092 = _1081;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1124 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1128 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1151 = _771 + _558;
        float _1152 = _775 + _559;
        float _1153 = _779 + _560;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_558, _559, _560), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3719 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_558, _559, _560), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3752 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_558, _559, _560), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3785 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1081;
        _1390 = _1081;
        _1391 = _1081;
        _1392 = _1081;
        _1393 = _1081;
        _1394 = _1081;
        _1395 = _1081;
        _1396 = _1081;
        _1397 = _1081;
        _1398 = _1081;
        _1399 = _1081;
        _1400 = _1081;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1093)) + _1093;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1094)) + _1094;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1095)) + _1095;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _718 * 0.5;
    float _1458 = _719 * 0.5;
    float _1459 = _720 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1080, _1084, _1087, _1090));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _561);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1587 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1590 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1618 = frontier_phi_14_12_ladder;
        }
        float _1820;
        if (_1587 > 0.0)
        {
            _1820 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1820 = frontier_phi_23_19_ladder;
        }
        float _2063;
        if (_1590 > 0.0)
        {
            _2063 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2063 = frontier_phi_35_30_ladder;
        }
        float _2065 = isnan(_1820) ? _1618 : (isnan(_1618) ? _1820 : min(_1618, _1820));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1584) + _1573;
        float _2071 = (_2066 * _1587) + _1577;
        float _2072 = (_2066 * _1590) + _1581;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2073;
        float _2077 = _2073 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 > _2077) || ((_2071 < _2075) || ((_2070 < _2075) || (_2070 > _2077))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2072, cbModelParam._m0[9u].z, fma(_2071, cbModelParam._m0[9u].y, _2070 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2072, cbModelParam._m0[10u].z, fma(_2071, cbModelParam._m0[10u].y, _2070 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2072, cbModelParam._m0[11u].z, fma(_2071, cbModelParam._m0[11u].y, _2070 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_13_35_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_13_35_ladder_2;
        _1608 = frontier_phi_13_35_ladder_1;
        _1610 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1526);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _561);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1682 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1685 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1825;
        if (_1679 > 0.0)
        {
            _1825 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1825 = frontier_phi_25_21_ladder;
        }
        float _2090;
        if (_1682 > 0.0)
        {
            _2090 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2090 = frontier_phi_37_32_ladder;
        }
        float _2295;
        if (_1685 > 0.0)
        {
            _2295 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2295 = frontier_phi_46_43_ladder;
        }
        float _2297 = isnan(_2090) ? _1825 : (isnan(_1825) ? _2090 : min(_1825, _2090));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1679) + _1668;
        float _2303 = (_2298 * _1682) + _1672;
        float _2304 = (_2298 * _1685) + _1676;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2305;
        float _2308 = _2305 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2304 > _2308) || ((_2304 < _2306) || ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 < _2306) || (_2302 > _2308))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2304, cbModelParam._m0[17u].z, fma(_2303, cbModelParam._m0[17u].y, _2302 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2304, cbModelParam._m0[18u].z, fma(_2303, cbModelParam._m0[18u].y, _2302 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2304, cbModelParam._m0[19u].z, fma(_2303, cbModelParam._m0[19u].y, _2302 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_22_46_ladder = _2503.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2503.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2503.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_22_46_ladder_2;
        _1706 = frontier_phi_22_46_ladder_1;
        _1708 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1615);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1720 = ((((1.0 - _739) * ((_726 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_739 * _726)) * _710;
    float _1721 = _1720 * ((cbModelParam._m0[1u].w * (_1704 - _1606)) + _1606);
    float _1722 = _1720 * ((cbModelParam._m0[1u].w * (_1706 - _1608)) + _1608);
    float _1723 = _1720 * ((cbModelParam._m0[1u].w * (_1708 - _1610)) + _1610);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _710 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1778 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1782 = _1744 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_558, _559, _560));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_558, _559, _560));
    float _3921 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3932 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1761].x * _1767) * _1803) + ((cbLight._m0[_1771].x * _1778) * _1801);
    float _1811 = ((_1767 * cbLight._m0[_1761].y) * _1803) + ((_1778 * cbLight._m0[_1771].y) * _1801);
    float _1812 = ((_1767 * cbLight._m0[_1761].z) * _1803) + ((_1778 * cbLight._m0[_1771].z) * _1801);
    uvec4 _1817 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1819 = _1817.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1819)
    {
        _1830 = _1810;
        _1832 = _1811;
        _1834 = _1812;
    }
    else
    {
        uint _1838 = _1744 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3943 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1857 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1810;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1811;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1812;
    }
    bool _1837 = _1817.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1837)
    {
        _1875 = _1830;
        _1877 = _1832;
        _1879 = _1834;
    }
    else
    {
        uint _2034 = _1744 + 7u;
        float _2050 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _3959 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2053 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1875 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1830;
        _1877 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1832;
        _1879 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1834;
    }
    uint _1882 = _1744 + 8u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _561) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1744].x + _636;
    float _1898 = cbLight._m0[_1744].y + _637;
    float _1899 = cbLight._m0[_1744].z + _638;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1744].xyz));
    float _3975 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _1911 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1912 = dot(vec3(_558, _559, _560), vec3(_1904, _1905, _1906));
    float _3997 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1904, _1905, _1906));
    float _4008 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1896 * _1896;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = 1.0 - _1896;
    float _1947 = (0.5 / (((_1911 * ((_1910 * _1936) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _1936) + _1896) * _1910))) * _1910;
    float _4019 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    uint _1960 = _1744 + 9u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _561) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1782].x + _636;
    float _1974 = cbLight._m0[_1782].y + _637;
    float _1975 = cbLight._m0[_1782].z + _638;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1782].xyz));
    float _4030 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1987 = dot(vec3(_558, _559, _560), vec3(_1980, _1981, _1982));
    float _4041 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1991 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1980, _1981, _1982));
    float _4052 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = _1972 * _1972;
    float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
    float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2009 = 1.0 - _1972;
    float _2019 = (0.5 / (((_1911 * ((_1986 * _2009) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2009) + _1972) * _1986))) * _1986;
    float _4063 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
    float _2031 = (((_2008 * cbLight._m0[_1960].x) * _2021) * _1767) + (((_1935 * cbLight._m0[_1882].x) * _1949) * _1778);
    float _2032 = (((_2008 * cbLight._m0[_1960].y) * _2021) * _1767) + (((_1935 * cbLight._m0[_1882].y) * _1949) * _1778);
    float _2033 = (((_2008 * cbLight._m0[_1960].z) * _2021) * _1767) + (((_1935 * cbLight._m0[_1882].z) * _1949) * _1778);
    float _2095;
    float _2097;
    float _2099;
    if (_1819)
    {
        _2095 = _2031;
        _2097 = _2032;
        _2099 = _2033;
    }
    else
    {
        uint _2101 = _1744 + 2u;
        uint _2105 = _1744 + 10u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _561) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _636;
        float _2122 = cbLight._m0[_2101].y + _637;
        float _2123 = cbLight._m0[_2101].z + _638;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2101].xyz));
        float _4074 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2135 = dot(vec3(_558, _559, _560), vec3(_2128, _2129, _2130));
        float _4085 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4096 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = 1.0 - _2120;
        float _2167 = (0.5 / (((_1911 * ((_2134 * _2157) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2157) + _2120) * _2134))) * _2134;
        float _4107 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2095 = (((_2156 * cbLight._m0[_2105].x) * _2169) * _2170) + _2031;
        _2097 = (((_2156 * cbLight._m0[_2105].y) * _2169) * _2170) + _2032;
        _2099 = (((_2156 * cbLight._m0[_2105].z) * _2169) * _2170) + _2033;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1837)
    {
        _2205 = _2095;
        _2207 = _2097;
        _2209 = _2099;
    }
    else
    {
        uint _2216 = _1744 + 3u;
        uint _2220 = _1744 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _561) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _636;
        float _2237 = cbLight._m0[_2216].y + _637;
        float _2238 = cbLight._m0[_2216].z + _638;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2216].xyz));
        float _4123 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2250 = dot(vec3(_558, _559, _560), vec3(_2243, _2244, _2245));
        float _4134 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4145 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_1911 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2272) + _2235) * _2249))) * _2249;
        float _4156 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2205 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2095;
        _2207 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2097;
        _2209 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2099;
    }
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_1742.y == 0u)
    {
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2360;
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2360;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2360;
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.x;
        uint _2387 = uint((float(_2375.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2376))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2376)));
        float _2397 = (log2(_2363 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2398 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        uint _2401 = uint(isnan(14.0) ? _2398 : (isnan(_2398) ? 14.0 : min(_2398, 14.0)));
        uvec4 _2406 = texelFetch(g_lightClusterGridBuffer, int(((_2401 << 2u) + (_2387 << 6u)) >> 2u));
        uint _2407 = _2406.x;
        uint _2408 = _2375.z;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((((1u << ((_2408 >> 4u) & 15u)) + 4294967295u) & _2407) == 0u) || ((_2408 & 240u) == 0u))
        {
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
        }
        else
        {
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            uint _2659 = 0u;
            uint _2668;
            bool _2669;
            for (;;)
            {
                _2668 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                _2669 = _2668 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2669)
                {
                    frontier_phi_61_pred = _2653;
                    frontier_phi_61_pred_1 = _2658;
                    frontier_phi_61_pred_2 = _2657;
                    frontier_phi_61_pred_3 = _2656;
                    frontier_phi_61_pred_4 = _2655;
                    frontier_phi_61_pred_5 = _2654;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2668;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2659 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _2361;
                        float _2844 = _2803.y - _2362;
                        float _2845 = _2803.z - _2363;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2853 = dot(vec3(_666, _669, _672), vec3(_2850, _2851, _2852));
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4182 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2853) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _2361;
                        float _2879 = (-0.0) - _2362;
                        float _2880 = (-0.0) - _2363;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2870 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _726;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_666, _669, _672), vec3(_2885, _2886, _2887));
                        float _4198 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2920 = dot(vec3(_666, _669, _672), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4209 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2863 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2853) + _2929;
                        float _4220 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4231 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2927 * _2927) * ((_2870 * 2.1991131305694580078125) + 3.141590118408203125))) * _2859;
                        _2712 = (_2874 * _2822.x) + _2780;
                        _2713 = (_2874 * _2822.y) + _2781;
                        _2714 = (_2874 * _2822.z) + _2782;
                        _2709 = (_2955 * _2839.x) + _2777;
                        _2710 = (_2955 * _2839.y) + _2778;
                        _2711 = (_2955 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_61_pred = _2709;
                    frontier_phi_61_pred_1 = _2714;
                    frontier_phi_61_pred_2 = _2713;
                    frontier_phi_61_pred_3 = _2712;
                    frontier_phi_61_pred_4 = _2711;
                    frontier_phi_61_pred_5 = _2710;
                }
                _2509 = frontier_phi_61_pred;
                _2519 = frontier_phi_61_pred_1;
                _2517 = frontier_phi_61_pred_2;
                _2515 = frontier_phi_61_pred_3;
                _2513 = frontier_phi_61_pred_4;
                _2511 = frontier_phi_61_pred_5;
                uint _2660 = _2659 + 1u;
                if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2653 = _2509;
                    _2654 = _2511;
                    _2655 = _2513;
                    _2656 = _2515;
                    _2657 = _2517;
                    _2658 = _2519;
                    _2659 = _2660;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
        }
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.z;
        uint _2525 = (_2523 >> 8u) & 15u;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((4294967295u << _2525) & _2407) == 0u)
        {
            _2621 = _2508;
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
        }
        else
        {
            float _2646 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
            float _2647 = _2646 * _2361;
            float _2648 = _2646 * _2362;
            float _2649 = _2646 * _2363;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2525 < ((_2523 >> 12u) & 15u))
            {
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2760 = _2508;
                float _2761 = _2510;
                float _2762 = _2512;
                float _2763 = _2514;
                float _2764 = _2516;
                float _2765 = _2518;
                uint _2766 = _2525;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2776)
                    {
                        frontier_phi_67_pred = _2763;
                        frontier_phi_67_pred_1 = _2764;
                        frontier_phi_67_pred_2 = _2765;
                        frontier_phi_67_pred_3 = _2762;
                        frontier_phi_67_pred_4 = _2761;
                        frontier_phi_67_pred_5 = _2760;
                    }
                    else
                    {
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        uint _2979 = _2775;
                        uint _2980;
                        vec4 _3005;
                        float _3006;
                        vec4 _3021;
                        vec3 _3033;
                        vec4 _3049;
                        vec4 _3065;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2990 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2979));
                            _2980 = (_2979 + 4294967295u) & _2979;
                            uint _2992 = _2990 * 40u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3006 = _3005.w;
                            uint _3008 = (_2990 * 40u) + 4u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2990 * 40u) + 8u;
                            _3033 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x));
                            uint _3036 = (_2990 * 40u) + 16u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2990 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_2990 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2990 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2363, _3099.z, fma(_2362, _3099.y, _3099.x * _2361)) + _3099.w;
                            _3112 = !((fma(_2363, _3080.z, fma(_2362, _3080.y, _3080.x * _2361)) + _3080.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3005.x - _2361;
                                float _3140 = _3005.y - _2362;
                                float _3141 = _3005.z - _2363;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3006 * _3006));
                                float _4242 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3157 = sqrt(_3142) * _3021.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_666, _669, _672))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2363, _3049.z, fma(_2362, _3049.y, _3049.x * _2361)) + _3049.w) / _3111;
                                float _3171 = (fma(_2363, _3065.z, fma(_2362, _3065.y, _3065.x * _2361)) + _3065.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4258 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _726;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2647;
                                float _3201 = _3147 - _2648;
                                float _3202 = _3148 - _2649;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_666, _669, _672), vec3((-0.0) - _2647, (-0.0) - _2648, (-0.0) - _2649));
                                float _4269 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3214 = dot(vec3(_666, _669, _672), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4280 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_666, _669, _672), vec3(_3146, _3147, _3148))) + _3223;
                                float _4291 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4302 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3251 * _3033.x;
                                frontier_phi_73_pred_1 = _3251 * _3033.y;
                                frontier_phi_73_pred_2 = _3177 * _3021.z;
                                frontier_phi_73_pred_3 = _3177 * _3021.y;
                                frontier_phi_73_pred_4 = _3177 * _3021.x;
                                frontier_phi_73_pred_5 = _3251 * _3033.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_73_pred;
                            _3256 = frontier_phi_73_pred_1;
                            _3260 = frontier_phi_73_pred_2;
                            _3259 = frontier_phi_73_pred_3;
                            _3258 = frontier_phi_73_pred_4;
                            _3257 = frontier_phi_73_pred_5;
                            _2963 = _3258 + _2976;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2960 = _3255 + _2973;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            if (_2980 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2980;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2963;
                        frontier_phi_67_pred_1 = _2964;
                        frontier_phi_67_pred_2 = _2965;
                        frontier_phi_67_pred_3 = _2962;
                        frontier_phi_67_pred_4 = _2961;
                        frontier_phi_67_pred_5 = _2960;
                    }
                    _2628 = frontier_phi_67_pred;
                    _2630 = frontier_phi_67_pred_1;
                    _2632 = frontier_phi_67_pred_2;
                    _2626 = frontier_phi_67_pred_3;
                    _2624 = frontier_phi_67_pred_4;
                    _2622 = frontier_phi_67_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2622;
                        _2761 = _2624;
                        _2762 = _2626;
                        _2763 = _2628;
                        _2764 = _2630;
                        _2765 = _2632;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2630;
                frontier_phi_55_56_ladder_1 = _2632;
                frontier_phi_55_56_ladder_2 = _2628;
                frontier_phi_55_56_ladder_3 = _2626;
                frontier_phi_55_56_ladder_4 = _2624;
                frontier_phi_55_56_ladder_5 = _2622;
            }
            else
            {
                frontier_phi_55_56_ladder = _2516;
                frontier_phi_55_56_ladder_1 = _2518;
                frontier_phi_55_56_ladder_2 = _2514;
                frontier_phi_55_56_ladder_3 = _2512;
                frontier_phi_55_56_ladder_4 = _2510;
                frontier_phi_55_56_ladder_5 = _2508;
            }
            _2621 = frontier_phi_55_56_ladder_5;
            _2623 = frontier_phi_55_56_ladder_4;
            _2625 = frontier_phi_55_56_ladder_3;
            _2627 = frontier_phi_55_56_ladder_2;
            _2629 = frontier_phi_55_56_ladder;
            _2631 = frontier_phi_55_56_ladder_1;
        }
        float _2636 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2420 = (_2636 * _2627) + _1875;
        _2422 = (_2636 * _2629) + _1877;
        _2424 = (_2636 * _2631) + _1879;
        _2426 = ((_2621 * 0.039999999105930328369140625) * _2636) + _2205;
        _2428 = ((_2623 * 0.039999999105930328369140625) * _2636) + _2207;
        _2430 = ((_2625 * 0.039999999105930328369140625) * _2636) + _2209;
    }
    else
    {
        _2420 = _1875;
        _2422 = _1877;
        _2424 = _1879;
        _2426 = _2205;
        _2428 = _2207;
        _2430 = _2209;
    }
    float _4318 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4329 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4340 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    uint _2450 = _235 + 6u;
    float _2458 = _644 / cbSceneParam._m0[86u].x;
    float _2459 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2473 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2458, _2459, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2475 = _2473.x;
    float _2476 = _2473.y;
    float _2477 = _2473.z;
    float _2478 = _2473.w;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2533 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2534 = _2533 / _579;
        float _2545 = _2534 * _629;
        float _2546 = _630 * _2534;
        float _2547 = (-0.0) - _2546;
        float _2549 = _2534 * _631;
        float _2551 = (cbSceneParam._m0[77u].w * _2547) / _2533;
        float _2552 = _2551 + cbSceneParam._m0[79u].w;
        float _2553 = cbSceneParam._m0[79u].w - _2546;
        float _2559 = sqrt(((_2545 * _2545) + (_2546 * _2546)) + (_2549 * _2549));
        float _2562 = (1.0 - (cbSceneParam._m0[77u].w / _2533)) * _2559;
        float _2567 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2569 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2722;
        if (abs((_2547 - _2551) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2722 = ((((_2552 > 0.0) ? exp2(_2567 * _2552) : (2.0 - exp2(_2569 * _2552))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2562;
        }
        else
        {
            float _2682 = 1.0 / cbSceneParam._m0[80u].x;
            float _2683 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : max(_2552, _2553));
            float _2684 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : min(_2552, _2553));
            float _2693 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : min(_2683, 0.0));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            _2722 = ((abs(_2559 / _2547) * cbSceneParam._m0[80u].y) * ((((_2693 - _2694) * 2.0) - ((exp2(_2567 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0)))) - exp2(_2567 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))))) * _2682)) - ((exp2(_2569 * _2693) - exp2(_2569 * _2694)) * _2682))) + (_2562 * cbSceneParam._m0[80u].z);
        }
        vec4 _2724 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2458, _2459, 1.0), 0.0);
        float _2733 = exp2((_2722 * (-1.44269502162933349609375)) * (1.0 - _2724.w));
        float _2734 = log2(_2733);
        float _2750 = log2(_2478);
        _2571 = (exp2(_2750 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].x)) * _2724.x) / cbSceneParam._m0[78u].x)) + _2475;
        _2573 = (exp2(_2750 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].y)) * _2724.y) / cbSceneParam._m0[78u].y)) + _2476;
        _2575 = (exp2(_2750 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].z)) * _2724.z) / cbSceneParam._m0[78u].z)) + _2477;
        _2577 = _2733 * _2478;
    }
    else
    {
        _2571 = _2475;
        _2573 = _2476;
        _2575 = _2477;
        _2577 = _2478;
    }
    float _2589 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2590 = _2589 == 3.0;
    float _2591 = log2(_2577);
    float _2598 = exp2(_2591 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2420 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _710))) + ((_2426 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2599 = exp2(_2591 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2422 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _710))) + ((_2428 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2600 = exp2(_2591 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2424 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _710))) + ((_2430 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2609 = (_2589 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2609 * (_2590 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.y = _2609 * (_2590 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.z = _2609 * (_2590 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.w = cbInstanceData._m0[_2450].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2450].w;
}


