#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1215;
float _3599;
float _3600;
float _3601;
float _3602;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3611 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _376) + _451;
    float _463 = ((((_430.x - _449) * _376) + _449) * 2.0) + (-1.0);
    float _464 = ((((_430.y - _450) * _376) + _450) * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3622 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _502 = (_463 + ((((_403.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_490.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _503 = (_464 + ((((_403.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_490.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _506 = fma(_470, _228, fma(_503, _235, _502 * _221));
    float _509 = fma(_470, _229, fma(_503, _236, _502 * _222));
    float _512 = fma(_470, _230, fma(_503, _237, _502 * _223));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    vec4 _545 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _547 = _545.x;
    float _548 = 1.0 - _547;
    float _552 = ((_547 - _548) * cbMtdParam._m0[24u].z) + _548;
    float _554 = (cbMtdParam._m0[19u].x + dot(vec4(_516 * _506, _516 * _509, _516 * _512, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_552 * cbMtdParam._m0[21u].z);
    float _3633 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _570 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_552 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3644 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _575 = ((_555 * (cbMtdParam._m0[17u].x - _383)) * _571) + _383;
    float _576 = ((_555 * (cbMtdParam._m0[17u].y - _384)) * _571) + _384;
    float _577 = ((_555 * (cbMtdParam._m0[17u].z - _385)) * _571) + _385;
    float _582 = (((_403.z - _460) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _460;
    float _586 = ((_490.z - _582) * cbMtdParam._m0[19u].w) + _582;
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3655 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _617 = (((_599.z - _586) * _555) * _571) + _586;
    float _632 = (((cbMtdParam._m0[21u].x * _502) + ((_606 - _502) * _555)) * _571) + _502;
    float _633 = (((cbMtdParam._m0[21u].x * _503) + ((_607 - _503) * _555)) * _571) + _503;
    float _634 = (((sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) - _470) * _555) * _571) + _470;
    float _639 = cbMtdParam._m0[22u].x + _490.w;
    float _642 = fma(_634, _228, fma(_633, _235, _632 * _221));
    float _645 = fma(_634, _229, fma(_633, _236, _632 * _222));
    float _648 = fma(_634, _230, fma(_633, _237, _632 * _223));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3666 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _656 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3688 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3699 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3710 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    vec4 _740 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _742 = _740.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _896 = sqrt(((_726 * _726) + (_727 * _727)) + (_728 * _728));
        float _902 = (cbMatDynParam._m0[5u].x * _896) + cbMatDynParam._m0[5u].y;
        float _3721 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _907 = (cbMatDynParam._m0[5u].z * _896) + cbMatDynParam._m0[5u].w;
        float _3732 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) - _903)) + _903) < ((_742 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _772 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _775 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _778 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _791 = _240 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3743 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _816 = ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * TEXCOORD_5.w) * _812.x;
    float _817 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _820 = _817 * 2.0;
    float _824 = (_820 * _653) - _733;
    float _825 = (_820 * _654) - _734;
    float _826 = (_820 * _655) - _735;
    float _830 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _3776 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(_656);
    float _845 = exp2((_832 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1214;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _939 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _943 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _947 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _972 = _877 + _653;
        float _973 = _881 + _654;
        float _974 = _885 + _655;
        float _984 = fma(_974, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972)) - _939;
        float _985 = fma(_974, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972)) - _943;
        float _986 = fma(_974, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972)) - _947;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_939 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_943 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[34u].z) + ((((((_947 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1042 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1008.x + (-0.5));
        float _1044 = _1042 * (_1008.y + (-0.5));
        float _1045 = _1042 * (_1008.z + (-0.5));
        float _1052 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1015.x + (-0.5));
        float _1054 = _1052 * (_1015.y + (-0.5));
        float _1055 = _1052 * (_1015.z + (-0.5));
        float _1062 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1022.x + (-0.5));
        float _1064 = _1062 * (_1022.y + (-0.5));
        float _1065 = _1062 * (_1022.z + (-0.5));
        float _1072 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1029.x + (-0.5));
        float _1074 = _1072 * (_1029.y + (-0.5));
        float _1075 = _1072 * (_1029.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1096 = (dot(vec3(_653, _654, _655), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1106 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3824 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1108 + 1.0))) + _1113) * _1076;
        float _1123 = _1044 * 0.5;
        float _1124 = _1054 * 0.5;
        float _1125 = _1064 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_653, _654, _655), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3857 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1150 + 1.0))) + _1155) * _1077;
        float _1165 = _1045 * 0.5;
        float _1166 = _1055 * 0.5;
        float _1167 = _1065 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_653, _654, _655), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3890 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1192 + 1.0))) + _1197) * _1078;
        _1214 = _1045;
        _1216 = _1044;
        _1217 = _1043;
        _1218 = _1055;
        _1219 = _1054;
        _1220 = _1053;
        _1221 = _1065;
        _1222 = _1064;
        _1223 = _1063;
        _1224 = _1078;
        _1225 = _1077;
        _1226 = _1076;
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _1215;
        _1216 = _1215;
        _1217 = _1215;
        _1218 = _1215;
        _1219 = _1215;
        _1220 = _1215;
        _1221 = _1215;
        _1222 = _1215;
        _1223 = _1215;
        _1224 = _1215;
        _1225 = _1215;
        _1226 = _1215;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1261 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1265 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1288 = _877 + _653;
        float _1289 = _881 + _654;
        float _1290 = _885 + _655;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_653, _654, _655), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3953 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_653, _654, _655), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3986 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_653, _654, _655), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4019 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1215;
        _1527 = _1215;
        _1528 = _1215;
        _1529 = _1215;
        _1530 = _1215;
        _1531 = _1215;
        _1532 = _1215;
        _1533 = _1215;
        _1534 = _1215;
        _1535 = _1215;
        _1536 = _1215;
        _1537 = _1215;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1227)) + _1227;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1228)) + _1228;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1229)) + _1229;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _824 * 0.5;
    float _1595 = _825 * 0.5;
    float _1596 = _826 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1214, _1218, _1221, _1224));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_826, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824));
        float _1725 = fma(_826, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824));
        float _1728 = fma(_826, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1756 = frontier_phi_17_15_ladder;
        }
        float _1978;
        if (_1725 > 0.0)
        {
            _1978 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1978 = frontier_phi_26_22_ladder;
        }
        float _2224;
        if (_1728 > 0.0)
        {
            _2224 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2224 = frontier_phi_38_33_ladder;
        }
        float _2226 = isnan(_1978) ? _1756 : (isnan(_1756) ? _1978 : min(_1756, _1978));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1722) + _1711;
        float _2232 = (_2227 * _1725) + _1715;
        float _2233 = (_2227 * _1728) + _1719;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2234;
        float _2238 = _2234 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 > _2238) || ((_2232 < _2236) || ((_2231 < _2236) || (_2231 > _2238))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2233, cbModelParam._m0[9u].z, fma(_2232, cbModelParam._m0[9u].y, _2231 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2233, cbModelParam._m0[10u].z, fma(_2232, cbModelParam._m0[10u].y, _2231 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2233, cbModelParam._m0[11u].z, fma(_2232, cbModelParam._m0[11u].y, _2231 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_16_38_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_16_38_ladder_2;
        _1746 = frontier_phi_16_38_ladder_1;
        _1748 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_824, _825, _826), _1663);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_826, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824));
        float _1821 = fma(_826, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824));
        float _1824 = fma(_826, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824));
        float _1983;
        if (_1818 > 0.0)
        {
            _1983 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1983 = frontier_phi_28_24_ladder;
        }
        float _2251;
        if (_1821 > 0.0)
        {
            _2251 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2251 = frontier_phi_40_35_ladder;
        }
        float _2456;
        if (_1824 > 0.0)
        {
            _2456 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2456 = frontier_phi_49_46_ladder;
        }
        float _2458 = isnan(_2251) ? _1983 : (isnan(_1983) ? _2251 : min(_1983, _2251));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1818) + _1807;
        float _2464 = (_2459 * _1821) + _1811;
        float _2465 = (_2459 * _1824) + _1815;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_25_49_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_25_49_ladder_2;
        _1845 = frontier_phi_25_49_ladder_1;
        _1847 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_824, _825, _826), _1753);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1859 = ((((1.0 - _845) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_845 * _832)) * _816;
    float _1860 = _1859 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1861 = _1859 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1862 = _1859 * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    vec4 _1879 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_753, _754));
    float _1881 = _1879.w;
    float _1893 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1881);
    float _1894 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1881);
    float _1895 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1881);
    uvec4 _1899 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1901 = _1899.x * 14u;
    uint _1902 = _1901 + 13u;
    float _1909 = _816 + (-1.0);
    float _1914 = (cbLight._m0[_1902].x * _1909) + 1.0;
    float _1915 = (cbLight._m0[_1902].y * _1909) + 1.0;
    float _1916 = (cbLight._m0[_1902].z * _1909) + 1.0;
    float _1917 = (cbLight._m0[_1902].w * _1909) + 1.0;
    uint _1918 = _1901 + 5u;
    float _1924 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1928 = _1901 + 4u;
    float _1937 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1941 = _1901 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_653, _654, _655));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_653, _654, _655));
    float _4155 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _4166 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1918].x * _1924) * _1962) + (((cbLight._m0[_1928].x * _1893) * _1937) * _1960);
    float _1970 = ((_1924 * cbLight._m0[_1918].y) * _1962) + (((cbLight._m0[_1928].y * _1894) * _1937) * _1960);
    float _1971 = ((_1924 * cbLight._m0[_1918].z) * _1962) + (((cbLight._m0[_1928].z * _1895) * _1937) * _1960);
    uvec4 _1975 = floatBitsToUint(cbLight._m0[_1901 + 12u]);
    bool _1977 = _1975.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1977)
    {
        _1988 = _1969;
        _1990 = _1970;
        _1992 = _1971;
    }
    else
    {
        uint _1996 = _1901 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1901 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4177 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2015 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1969;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1970;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1971;
    }
    bool _1995 = _1975.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1995)
    {
        _2033 = _1988;
        _2035 = _1990;
        _2037 = _1992;
    }
    else
    {
        uint _2195 = _1901 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1901 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4193 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2214 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2033 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1988;
        _2035 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1990;
        _2037 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1992;
    }
    uint _2040 = _1901 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _656) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1901].x + _733;
    float _2056 = cbLight._m0[_1901].y + _734;
    float _2057 = cbLight._m0[_1901].z + _735;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1901].xyz));
    float _4209 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2069 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2070 = dot(vec3(_653, _654, _655), vec3(_2062, _2063, _2064));
    float _4231 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2062, _2063, _2064));
    float _4242 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2093 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2094 = 1.0 - _2054;
    float _2105 = (0.5 / (((_2069 * ((_2068 * _2094) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2094) + _2054) * _2068))) * _2068;
    float _4253 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2121 = _1901 + 9u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _656) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1941].x + _733;
    float _2135 = cbLight._m0[_1941].y + _734;
    float _2136 = cbLight._m0[_1941].z + _735;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1941].xyz));
    float _4264 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2148 = dot(vec3(_653, _654, _655), vec3(_2141, _2142, _2143));
    float _4275 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2141, _2142, _2143));
    float _4286 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2133 * _2133;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2170 = 1.0 - _2133;
    float _2180 = (0.5 / (((_2069 * ((_2147 * _2170) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2170) + _2133) * _2147))) * _2147;
    float _4297 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2192 = (((_2169 * cbLight._m0[_2121].x) * _2182) * _1924) + ((((cbLight._m0[_2040].x * _1893) * _2093) * _2107) * _1937);
    float _2193 = (((_2169 * cbLight._m0[_2121].y) * _2182) * _1924) + ((((cbLight._m0[_2040].y * _1894) * _2093) * _2107) * _1937);
    float _2194 = (((_2169 * cbLight._m0[_2121].z) * _2182) * _1924) + ((((cbLight._m0[_2040].z * _1895) * _2093) * _2107) * _1937);
    float _2256;
    float _2258;
    float _2260;
    if (_1977)
    {
        _2256 = _2192;
        _2258 = _2193;
        _2260 = _2194;
    }
    else
    {
        uint _2262 = _1901 + 2u;
        uint _2266 = _1901 + 10u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _656) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _733;
        float _2283 = cbLight._m0[_2262].y + _734;
        float _2284 = cbLight._m0[_2262].z + _735;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2262].xyz));
        float _4308 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2296 = dot(vec3(_653, _654, _655), vec3(_2289, _2290, _2291));
        float _4319 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4330 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2317 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2318 = 1.0 - _2281;
        float _2328 = (0.5 / (((_2069 * ((_2295 * _2318) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2318) + _2281) * _2295))) * _2295;
        float _4341 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2256 = (((_2317 * cbLight._m0[_2266].x) * _2330) * _2331) + _2192;
        _2258 = (((_2317 * cbLight._m0[_2266].y) * _2330) * _2331) + _2193;
        _2260 = (((_2317 * cbLight._m0[_2266].z) * _2330) * _2331) + _2194;
    }
    float _2366;
    float _2368;
    float _2370;
    if (_1995)
    {
        _2366 = _2256;
        _2368 = _2258;
        _2370 = _2260;
    }
    else
    {
        uint _2377 = _1901 + 3u;
        uint _2381 = _1901 + 11u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _656) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _733;
        float _2398 = cbLight._m0[_2377].y + _734;
        float _2399 = cbLight._m0[_2377].z + _735;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2377].xyz));
        float _4357 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2411 = dot(vec3(_653, _654, _655), vec3(_2404, _2405, _2406));
        float _4368 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4379 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2433 = 1.0 - _2396;
        float _2443 = (0.5 / (((_2069 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2433) + _2396) * _2410))) * _2410;
        float _4390 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2445 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2446 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2366 = (((_2432 * cbLight._m0[_2381].x) * _2445) * _2446) + _2256;
        _2368 = (((_2432 * cbLight._m0[_2381].y) * _2445) * _2446) + _2258;
        _2370 = (((_2432 * cbLight._m0[_2381].z) * _2445) * _2446) + _2260;
    }
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_1899.y == 0u)
    {
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2521;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2521;
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2521;
        uvec4 _2536 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2537 = _2536.x;
        uint _2548 = uint((float(_2536.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2537))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2537)));
        float _2558 = (log2(_2524 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2559 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        uint _2562 = uint(isnan(14.0) ? _2559 : (isnan(_2559) ? 14.0 : min(_2559, 14.0)));
        uvec4 _2567 = texelFetch(g_lightClusterGridBuffer, int(((_2562 << 2u) + (_2548 << 6u)) >> 2u));
        uint _2568 = _2567.x;
        uint _2569 = _2536.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2569 >> 4u) & 15u)) + 4294967295u) & _2568) == 0u) || ((_2569 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2562 << 5u) + (_2548 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2838)
                {
                    frontier_phi_66_pred = _2822;
                    frontier_phi_66_pred_1 = _2827;
                    frontier_phi_66_pred_2 = _2826;
                    frontier_phi_66_pred_3 = _2825;
                    frontier_phi_66_pred_4 = _2824;
                    frontier_phi_66_pred_5 = _2823;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2837;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2828 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _2522;
                        float _3034 = _2993.y - _2523;
                        float _3035 = _2993.z - _2524;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_772, _775, _778), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4416 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _2522;
                        float _3069 = (-0.0) - _2523;
                        float _3070 = (-0.0) - _2524;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3085 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3086 = 1.0 - _832;
                        float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                        float _3094 = _3093 * _3093;
                        float _3095 = _3094 * _3094;
                        float _3096 = _3075 + _3040;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3106 = dot(vec3(_772, _775, _778), vec3(_3075, _3076, _3077));
                        float _4432 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3110 = dot(vec3(_772, _775, _778), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                        float _4443 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                        float _3118 = _3053 * _3094;
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3043) + _3119;
                        float _4454 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3124 = 1.0 - _3094;
                        float _3134 = (0.5 / (((_3123 * ((_3109 * _3124) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3094) * _3109))) * _3123;
                        float _4465 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3145 = (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3117 * _3117) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2897 = (_3064 * _3012.x) + _2970;
                        _2898 = (_3064 * _3012.y) + _2971;
                        _2899 = (_3064 * _3012.z) + _2972;
                        _2894 = (_3145 * _3029.x) + _2967;
                        _2895 = (_3145 * _3029.y) + _2968;
                        _2896 = (_3145 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_66_pred = _2894;
                    frontier_phi_66_pred_1 = _2899;
                    frontier_phi_66_pred_2 = _2898;
                    frontier_phi_66_pred_3 = _2897;
                    frontier_phi_66_pred_4 = _2896;
                    frontier_phi_66_pred_5 = _2895;
                }
                _2670 = frontier_phi_66_pred;
                _2680 = frontier_phi_66_pred_1;
                _2678 = frontier_phi_66_pred_2;
                _2676 = frontier_phi_66_pred_3;
                _2674 = frontier_phi_66_pred_4;
                _2672 = frontier_phi_66_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2670;
                    _2823 = _2672;
                    _2824 = _2674;
                    _2825 = _2676;
                    _2826 = _2678;
                    _2827 = _2680;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2686) & _2568) == 0u)
        {
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
            float _2816 = _2815 * _2522;
            float _2817 = _2815 * _2523;
            float _2818 = _2815 * _2524;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2950 = _2669;
                float _2951 = _2671;
                float _2952 = _2673;
                float _2953 = _2675;
                float _2954 = _2677;
                float _2955 = _2679;
                uint _2956 = _2686;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2562 << 5u) + (_2548 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2966)
                    {
                        frontier_phi_77_pred = _2955;
                        frontier_phi_77_pred_1 = _2954;
                        frontier_phi_77_pred_2 = _2953;
                        frontier_phi_77_pred_3 = _2952;
                        frontier_phi_77_pred_4 = _2951;
                        frontier_phi_77_pred_5 = _2950;
                    }
                    else
                    {
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        uint _3178 = _2965;
                        uint _3179;
                        vec4 _3204;
                        float _3205;
                        vec4 _3220;
                        vec3 _3232;
                        vec4 _3247;
                        vec4 _3262;
                        float _3308;
                        bool _3309;
                        for (;;)
                        {
                            uint _3189 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3178));
                            _3179 = (_3178 + 4294967295u) & _3178;
                            uint _3191 = _3189 * 40u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3205 = _3204.w;
                            uint _3207 = (_3189 * 40u) + 4u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3189 * 40u) + 8u;
                            _3232 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x));
                            uint _3234 = (_3189 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3189 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3189 * 40u) + 24u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3283 = (_3189 * 40u) + 28u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3308 = fma(_2524, _3296.z, fma(_2523, _3296.y, _3296.x * _2522)) + _3296.w;
                            _3309 = !((fma(_2524, _3277.z, fma(_2523, _3277.y, _3277.x * _2522)) + _3277.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3309)
                            {
                                float _3336 = _3204.x - _2522;
                                float _3337 = _3204.y - _2523;
                                float _3338 = _3204.z - _2524;
                                float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                                float _3342 = inversesqrt(_3339);
                                float _3343 = _3342 * _3336;
                                float _3344 = _3342 * _3337;
                                float _3345 = _3342 * _3338;
                                float _3349 = 1.0 - (_3339 / (_3205 * _3205));
                                float _4476 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3354 = sqrt(_3339) * _3220.w;
                                float _3356 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                                float _3357 = _3356 * _3356;
                                float _3360 = ((1.0 - _3357) * dot(vec3(_3343, _3344, _3345), vec3(_772, _775, _778))) + _3357;
                                float _3363 = _3354 * _3354;
                                float _3367 = (fma(_2524, _3247.z, fma(_2523, _3247.y, _3247.x * _2522)) + _3247.w) / _3308;
                                float _3368 = (fma(_2524, _3262.z, fma(_2523, _3262.y, _3262.x * _2522)) + _3262.w) / _3308;
                                float _3372 = 1.0 - dot(vec2(_3367, _3368), vec2(_3367, _3368));
                                float _4492 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3374 = _3373 * (((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3350) / ((_3363 * 0.699999988079071044921875) + 1.0));
                                float _3386 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                                float _3387 = 1.0 - _832;
                                float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                                float _3395 = _3394 * _3394;
                                float _3396 = _3395 * _3395;
                                float _3397 = _3343 - _2816;
                                float _3398 = _3344 - _2817;
                                float _3399 = _3345 - _2818;
                                float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                                float _3407 = dot(vec3(_772, _775, _778), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4503 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3411 = dot(vec3(_772, _775, _778), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                                float _4514 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                                float _3419 = _3356 * _3395;
                                float _3420 = _3419 * _3419;
                                float _3426 = ((1.0 - _3420) * dot(vec3(_772, _775, _778), vec3(_3343, _3344, _3345))) + _3420;
                                float _4525 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3428 = 1.0 - _3395;
                                float _3438 = (0.5 / (((_3427 * ((_3410 * _3428) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3395) * _3410))) * _3427;
                                float _4536 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3448 = (_3373 * _3350) * (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3418 * _3418) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3374 * _3220.y;
                                frontier_phi_83_pred_1 = _3374 * _3220.x;
                                frontier_phi_83_pred_2 = _3448 * _3232.z;
                                frontier_phi_83_pred_3 = _3448 * _3232.y;
                                frontier_phi_83_pred_4 = _3448 * _3232.x;
                                frontier_phi_83_pred_5 = _3374 * _3220.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3456 = frontier_phi_83_pred;
                            _3455 = frontier_phi_83_pred_1;
                            _3454 = frontier_phi_83_pred_2;
                            _3453 = frontier_phi_83_pred_3;
                            _3452 = frontier_phi_83_pred_4;
                            _3457 = frontier_phi_83_pred_5;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3161 = _3454 + _3174;
                            if (_3179 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3179;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3164;
                        frontier_phi_77_pred_1 = _3163;
                        frontier_phi_77_pred_2 = _3162;
                        frontier_phi_77_pred_3 = _3161;
                        frontier_phi_77_pred_4 = _3160;
                        frontier_phi_77_pred_5 = _3159;
                    }
                    _2801 = frontier_phi_77_pred;
                    _2799 = frontier_phi_77_pred_1;
                    _2797 = frontier_phi_77_pred_2;
                    _2795 = frontier_phi_77_pred_3;
                    _2793 = frontier_phi_77_pred_4;
                    _2791 = frontier_phi_77_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2791;
                        _2951 = _2793;
                        _2952 = _2795;
                        _2953 = _2797;
                        _2954 = _2799;
                        _2955 = _2801;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2795;
                frontier_phi_58_59_ladder_1 = _2801;
                frontier_phi_58_59_ladder_2 = _2799;
                frontier_phi_58_59_ladder_3 = _2797;
                frontier_phi_58_59_ladder_4 = _2793;
                frontier_phi_58_59_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_58_59_ladder = _2673;
                frontier_phi_58_59_ladder_1 = _2679;
                frontier_phi_58_59_ladder_2 = _2677;
                frontier_phi_58_59_ladder_3 = _2675;
                frontier_phi_58_59_ladder_4 = _2671;
                frontier_phi_58_59_ladder_5 = _2669;
            }
            _2790 = frontier_phi_58_59_ladder_5;
            _2792 = frontier_phi_58_59_ladder_4;
            _2794 = frontier_phi_58_59_ladder;
            _2796 = frontier_phi_58_59_ladder_3;
            _2798 = frontier_phi_58_59_ladder_2;
            _2800 = frontier_phi_58_59_ladder_1;
        }
        float _2805 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2581 = (_2805 * _2796) + _2033;
        _2583 = (_2805 * _2798) + _2035;
        _2585 = (_2805 * _2800) + _2037;
        _2587 = ((_2790 * 0.039999999105930328369140625) * _2805) + _2366;
        _2589 = ((_2792 * 0.039999999105930328369140625) * _2805) + _2368;
        _2591 = ((_2794 * 0.039999999105930328369140625) * _2805) + _2370;
    }
    else
    {
        _2581 = _2033;
        _2583 = _2035;
        _2585 = _2037;
        _2587 = _2366;
        _2589 = _2368;
        _2591 = _2370;
    }
    float _4552 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4563 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4574 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2608 = ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2581 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _816))) + ((_2587 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1652)) * cbPerFrame._m0[3u].x);
    float _2609 = ((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2583 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _816))) + ((_2589 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1652)) * cbPerFrame._m0[3u].x);
    float _2610 = ((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2585 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _816))) + ((_2591 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1652)) * cbPerFrame._m0[3u].x);
    uint _2611 = _240 + 6u;
    float _2619 = _753 / cbSceneParam._m0[86u].x;
    float _2620 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2634 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2636 = _2634.x;
    float _2637 = _2634.y;
    float _2638 = _2634.z;
    float _2639 = _2634.w;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2695 = _2694 / _674;
        float _2706 = _2695 * _726;
        float _2707 = _727 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2710 = _2695 * _728;
        float _2712 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2713 = _2712 + cbSceneParam._m0[79u].w;
        float _2714 = cbSceneParam._m0[79u].w - _2707;
        float _2720 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2710 * _2710));
        float _2723 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2720;
        float _2728 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2730 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2708 - _2712) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2713 > 0.0) ? exp2(_2728 * _2713) : (2.0 - exp2(_2730 * _2713))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2723;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : max(_2713, _2714));
            float _2853 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : min(_2713, _2714));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2907 = ((abs(_2720 / _2708) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2728 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2728 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2730 * _2862) - exp2(_2730 * _2863)) * _2851))) + (_2723 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2639);
        _2732 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2636;
        _2734 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2637;
        _2736 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2638;
        _2738 = _2918 * _2639;
    }
    else
    {
        _2732 = _2636;
        _2734 = _2637;
        _2736 = _2638;
        _2738 = _2639;
    }
    bool _2945;
    vec4 _2748;
    vec4 _2770;
    float _2772;
    float _2776;
    float _2777;
    float _2778;
    float _2779;
    bool _2789;
    for (;;)
    {
        _2748 = cbMatDynParam._m0[0u];
        float _2750 = roundEven(_2748.y);
        bool _2751 = _2750 == 3.0;
        float _2752 = log2(_2738);
        float _2759 = exp2(_2752 * cbSceneParam._m0[78u].x) * _2608;
        float _2760 = exp2(_2752 * cbSceneParam._m0[78u].y) * _2609;
        float _2761 = exp2(_2752 * cbSceneParam._m0[78u].z) * _2610;
        float _2768 = _742 + (-0.5);
        _2770 = cbMtdParam._m0[1u];
        _2772 = _2770.y * _2768;
        float _2775 = (_2750 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2776 = _2775 * (_2751 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2732)));
        _2777 = _2775 * (_2751 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2734)));
        _2778 = _2775 * (_2751 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2736)));
        _2779 = _2768 * 0.999000012874603271484375;
        _2789 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2789)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2779) < 0.5)
            {
                _2945 = true;
                break;
            }
        }
        uint _2886 = _791 + uint(_2748.w);
        if ((cbInstanceData._m0[_2886].w < 1.0) && ((cbInstanceData._m0[_2886].w + _2779) < 0.5))
        {
            _2945 = true;
            break;
        }
        if ((_2772 + 1.0) < _2770.x)
        {
            _2945 = true;
            break;
        }
        _2945 = false;
        break;
    }
    float _3150;
    if (_2945)
    {
        discard_state = true;
        _3150 = 0.0;
    }
    else
    {
        _3150 = cbInstanceData._m0[_2611].w;
    }
    SV_Target.x = _2776;
    SV_Target.y = _2777;
    SV_Target.z = _2778;
    SV_Target.w = _3150;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2611].w;
    discard_exit();
}


