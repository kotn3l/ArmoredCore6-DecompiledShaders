#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1101;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3689 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3700 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _506 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_492 - _493) * cbMtdParam._m0[24u].z) + _493) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3711 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _514 = (_507 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) + _377;
    float _515 = (_507 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) + _378;
    float _516 = (_507 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) + _379;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3722 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _546 = (_507 * (_529.z - _448)) + _448;
    float _558 = (((_536 - _451) + (cbMtdParam._m0[21u].x * _451)) * _507) + _451;
    float _559 = (((_537 - _453) + (cbMtdParam._m0[21u].x * _453)) * _507) + _453;
    float _560 = (_507 * (sqrt(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) - _459)) + _459;
    float _565 = cbMtdParam._m0[22u].x + _472.w;
    float _568 = fma(_560, _221 * NORMAL.x, fma(_559, _228 * TANGENT.x, (_214 * _206) * _558));
    float _571 = fma(_560, _221 * NORMAL.y, fma(_559, _228 * TANGENT.y, (_214 * _207) * _558));
    float _574 = fma(_560, _221 * NORMAL.z, fma(_559, _228 * TANGENT.z, (_214 * _208) * _558));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3733 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _582 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3755 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3766 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3777 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _652 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _642);
    float _653 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _642);
    float _654 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _642);
    float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
    float _659 = _652 * _658;
    float _660 = _653 * _658;
    float _661 = _654 * _658;
    float _667 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _668 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _686 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _689 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _692 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _706 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3788 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _667, cbSceneParam._m0[86u].y * _668));
    float _730 = ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * TEXCOORD_5.w) * _726.x;
    float _731 = dot(vec3(_579, _580, _581), vec3(_659, _660, _661));
    float _734 = _731 * 2.0;
    float _738 = (_734 * _579) - _659;
    float _739 = (_734 * _580) - _660;
    float _740 = (_734 * _581) - _661;
    float _744 = abs(dot(vec3(_659, _660, _661), vec3(_579, _580, _581)));
    float _3821 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _746 = sqrt(_582);
    float _759 = exp2((_746 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_746 * 3.0));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1100;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _825 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _829 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _833 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _858 = _791 + _579;
        float _859 = _795 + _580;
        float _860 = _799 + _581;
        float _870 = fma(_860, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858)) - _825;
        float _871 = fma(_860, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858)) - _829;
        float _872 = fma(_860, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858)) - _833;
        float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
        float _889 = ((_876 * _870) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_825 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_876 * _871) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_829 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_876 * _872) / cbModelParam._m0[34u].z) + ((((((_833 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        float _928 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_894.x + (-0.5));
        float _930 = _928 * (_894.y + (-0.5));
        float _931 = _928 * (_894.z + (-0.5));
        float _938 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_901.x + (-0.5));
        float _940 = _938 * (_901.y + (-0.5));
        float _941 = _938 * (_901.z + (-0.5));
        float _948 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_908.x + (-0.5));
        float _950 = _948 * (_908.y + (-0.5));
        float _951 = _948 * (_908.z + (-0.5));
        float _958 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_915.x + (-0.5));
        float _960 = _958 * (_915.y + (-0.5));
        float _961 = _958 * (_915.z + (-0.5));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = _929 * 0.5;
        float _966 = _939 * 0.5;
        float _967 = _949 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _982 = (dot(vec3(_579, _580, _581), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _992 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3869 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_994 + 1.0))) + _999) * _962;
        float _1009 = _930 * 0.5;
        float _1010 = _940 * 0.5;
        float _1011 = _950 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_579, _580, _581), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3902 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1036 + 1.0))) + _1041) * _963;
        float _1051 = _931 * 0.5;
        float _1052 = _941 * 0.5;
        float _1053 = _951 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_579, _580, _581), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3935 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1078 + 1.0))) + _1083) * _964;
        _1100 = _931;
        _1102 = _930;
        _1103 = _929;
        _1104 = _941;
        _1105 = _940;
        _1106 = _939;
        _1107 = _951;
        _1108 = _950;
        _1109 = _949;
        _1110 = _964;
        _1111 = _963;
        _1112 = _962;
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
    }
    else
    {
        _1100 = _1101;
        _1102 = _1101;
        _1103 = _1101;
        _1104 = _1101;
        _1105 = _1101;
        _1106 = _1101;
        _1107 = _1101;
        _1108 = _1101;
        _1109 = _1101;
        _1110 = _1101;
        _1111 = _1101;
        _1112 = _1101;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1144 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1148 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1171 = _791 + _579;
        float _1172 = _795 + _580;
        float _1173 = _799 + _581;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_579, _580, _581), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3998 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_579, _580, _581), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4031 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_579, _580, _581), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4064 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1101;
        _1410 = _1101;
        _1411 = _1101;
        _1412 = _1101;
        _1413 = _1101;
        _1414 = _1101;
        _1415 = _1101;
        _1416 = _1101;
        _1417 = _1101;
        _1418 = _1101;
        _1419 = _1101;
        _1420 = _1101;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1113)) + _1113;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1114)) + _1114;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1115)) + _1115;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _738 * 0.5;
    float _1478 = _739 * 0.5;
    float _1479 = _740 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1520;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1100, _1104, _1107, _1110));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1531;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1522 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1535 = (_1531 * cbModelParam._m0[1u].x) + (_1520 * (1.0 - cbModelParam._m0[1u].x));
    float _1545 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1545 : min(cbModelParam._m0[25u].z, _1545));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_740, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738));
        float _1607 = fma(_740, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738));
        float _1610 = fma(_740, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1638 = frontier_phi_14_12_ladder;
        }
        float _1807;
        if (_1607 > 0.0)
        {
            _1807 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1807 = frontier_phi_23_19_ladder;
        }
        float _2102;
        if (_1610 > 0.0)
        {
            _2102 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2102 = frontier_phi_35_30_ladder;
        }
        float _2104 = isnan(_1807) ? _1638 : (isnan(_1638) ? _1807 : min(_1638, _1807));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1604) + _1593;
        float _2110 = (_2105 * _1607) + _1597;
        float _2111 = (_2105 * _1610) + _1601;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2112;
        float _2116 = _2112 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 > _2116) || ((_2110 < _2114) || ((_2109 < _2114) || (_2109 > _2116))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2256 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2111, cbModelParam._m0[9u].z, fma(_2110, cbModelParam._m0[9u].y, _2109 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2111, cbModelParam._m0[10u].z, fma(_2110, cbModelParam._m0[10u].y, _2109 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2111, cbModelParam._m0[11u].z, fma(_2110, cbModelParam._m0[11u].y, _2109 * cbModelParam._m0[11u].x))), _1546);
            frontier_phi_13_35_ladder = _2256.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2256.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2256.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_13_35_ladder_2;
        _1628 = frontier_phi_13_35_ladder_1;
        _1630 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_738, _739, _740), _1546);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1688 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1692 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1696 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1699 = fma(_740, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738));
        float _1702 = fma(_740, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738));
        float _1705 = fma(_740, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738));
        float _1812;
        if (_1699 > 0.0)
        {
            _1812 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1812 = frontier_phi_25_21_ladder;
        }
        float _2129;
        if (_1702 > 0.0)
        {
            _2129 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2129 = frontier_phi_37_32_ladder;
        }
        float _2456;
        if (_1705 > 0.0)
        {
            _2456 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2456 = frontier_phi_47_44_ladder;
        }
        float _2458 = isnan(_2129) ? _1812 : (isnan(_1812) ? _2129 : min(_1812, _2129));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1699) + _1688;
        float _2464 = (_2459 * _1702) + _1692;
        float _2465 = (_2459 * _1705) + _1696;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_22_47_ladder = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2583.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2583.x * cbModelParam._m0[1u].z;
        }
        _1724 = frontier_phi_22_47_ladder_2;
        _1726 = frontier_phi_22_47_ladder_1;
        _1728 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_738, _739, _740), _1635);
        _1724 = _1708.x * cbModelParam._m0[1u].z;
        _1726 = _1708.y * cbModelParam._m0[1u].z;
        _1728 = _1708.z * cbModelParam._m0[1u].z;
    }
    float _1740 = ((((1.0 - _759) * ((_746 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_759 * _746)) * _730;
    float _1741 = _1740 * ((cbModelParam._m0[1u].w * (_1724 - _1626)) + _1626);
    float _1742 = _1740 * ((cbModelParam._m0[1u].w * (_1726 - _1628)) + _1628);
    float _1743 = _1740 * ((cbModelParam._m0[1u].w * (_1728 - _1630)) + _1630);
    float _1746 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1741 * cbSceneParam._m0[91u].x));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1799 = _1786 / _1798;
    float _1800 = _1790 / _1798;
    float _1801 = _1794 / _1798;
    float _1948;
    float _1949;
    float _1950;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1828 = ((uint(_1801 > cbSceneParam._m0[59u].y) + uint(_1801 > cbSceneParam._m0[59u].x)) + uint(_1801 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1829 = _1828 + 43u;
        uint _1837 = _1828 + 44u;
        uint _1845 = _1828 + 45u;
        uint _1853 = _1828 + 46u;
        float _1864 = fma(_1798, cbSceneParam._m0[_1829].w, fma(_1794, cbSceneParam._m0[_1829].z, fma(_1790, cbSceneParam._m0[_1829].y, _1786 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1798, cbSceneParam._m0[_1837].w, fma(_1794, cbSceneParam._m0[_1837].z, fma(_1790, cbSceneParam._m0[_1837].y, _1786 * cbSceneParam._m0[_1837].x)));
        float _1876 = fma(_1798, cbSceneParam._m0[_1853].w, fma(_1794, cbSceneParam._m0[_1853].z, fma(_1790, cbSceneParam._m0[_1853].y, _1786 * cbSceneParam._m0[_1853].x)));
        float _1881 = cbSceneParam._m0[33u].z * _1876;
        float _1883 = cbSceneParam._m0[33u].w * _1876;
        float _1886 = fma(_1798, cbSceneParam._m0[_1845].w, fma(_1794, cbSceneParam._m0[_1845].z, fma(_1790, cbSceneParam._m0[_1845].y, _1786 * cbSceneParam._m0[_1845].x))) / _1876;
        float _1934 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
        float _4190 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1941 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 + _1864) / _1876, (_1883 + _1868) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1864) / _1876, (_1868 - _1881) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1881) / _1876, (_1868 - _1883) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1883) / _1876, (_1881 + _1868) / _1876), _1886), 0.0)).x), vec4(0.25)));
        _1948 = 1.0 - (_1941 * cbSceneParam._m0[34u].x);
        _1949 = 1.0 - (_1941 * cbSceneParam._m0[34u].y);
        _1950 = 1.0 - (_1941 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1948 = 1.0;
        _1949 = 1.0;
        _1950 = 1.0;
    }
    float _2014;
    float _2016;
    float _2018;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2002 = fma(_1798, cbSceneParam._m0[63u].w, fma(_1794, cbSceneParam._m0[63u].z, fma(_1790, cbSceneParam._m0[63u].y, _1786 * cbSceneParam._m0[63u].x)));
        float _2003 = fma(_1798, cbSceneParam._m0[60u].w, fma(_1794, cbSceneParam._m0[60u].z, fma(_1790, cbSceneParam._m0[60u].y, _1786 * cbSceneParam._m0[60u].x))) / _2002;
        float _2004 = fma(_1798, cbSceneParam._m0[61u].w, fma(_1794, cbSceneParam._m0[61u].z, fma(_1790, cbSceneParam._m0[61u].y, _1786 * cbSceneParam._m0[61u].x))) / _2002;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2003 >= cbSceneParam._m0[64u].x) && (_2004 >= cbSceneParam._m0[64u].y)) && (_2003 <= cbSceneParam._m0[64u].z)) && (_2004 <= cbSceneParam._m0[64u].w))
        {
            float _2142 = fma(_1798, cbSceneParam._m0[62u].w, fma(_1794, cbSceneParam._m0[62u].z, fma(_1790, cbSceneParam._m0[62u].y, _1786 * cbSceneParam._m0[62u].x))) / _2002;
            float _2146 = isnan(cbSceneParam._m0[41u].w) ? _2142 : (isnan(_2142) ? cbSceneParam._m0[41u].w : max(_2142, cbSceneParam._m0[41u].w));
            float _2189 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
            float _4206 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
            float _2196 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2003, cbSceneParam._m0[33u].w + _2004), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2003, _2004 - cbSceneParam._m0[33u].z), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].z, _2004 - cbSceneParam._m0[33u].w), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2004), _2146), 0.0)).x), vec4(0.25)));
            float _2200 = 1.0 - (_2196 * cbSceneParam._m0[34u].x);
            float _2201 = 1.0 - (_2196 * cbSceneParam._m0[34u].y);
            float _2202 = 1.0 - (_2196 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2202) ? _1950 : (isnan(_1950) ? _2202 : min(_1950, _2202));
            frontier_phi_34_33_ladder_1 = isnan(_2201) ? _1949 : (isnan(_1949) ? _2201 : min(_1949, _2201));
            frontier_phi_34_33_ladder_2 = isnan(_2200) ? _1948 : (isnan(_1948) ? _2200 : min(_1948, _2200));
        }
        else
        {
            frontier_phi_34_33_ladder = _1950;
            frontier_phi_34_33_ladder_1 = _1949;
            frontier_phi_34_33_ladder_2 = _1948;
        }
        _2014 = frontier_phi_34_33_ladder_2;
        _2016 = frontier_phi_34_33_ladder_1;
        _2018 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2014 = _1948;
        _2016 = _1949;
        _2018 = _1950;
    }
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _730 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2061 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2065 = _2025 | 1u;
    float _2076 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_579, _580, _581));
    float _2079 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_579, _580, _581));
    float _4242 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _4253 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2084 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2086 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2093 = ((cbLight._m0[_2042].x * _2048) * _2086) + (((cbLight._m0[_2052].x * _2014) * _2061) * _2084);
    float _2094 = ((_2048 * cbLight._m0[_2042].y) * _2086) + (((cbLight._m0[_2052].y * _2016) * _2061) * _2084);
    float _2095 = ((_2048 * cbLight._m0[_2042].z) * _2086) + (((cbLight._m0[_2052].z * _2018) * _2061) * _2084);
    uvec4 _2099 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2101 = _2099.x == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2101)
    {
        _2203 = _2093;
        _2205 = _2094;
        _2207 = _2095;
    }
    else
    {
        uint _2211 = _2025 + 6u;
        float _2227 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4264 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2230 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2203 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _2093;
        _2205 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _2094;
        _2207 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2095;
    }
    bool _2210 = _2099.y == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2210)
    {
        _2265 = _2203;
        _2267 = _2205;
        _2269 = _2207;
    }
    else
    {
        uint _2427 = _2025 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4280 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2446 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2265 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2203;
        _2267 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2205;
        _2269 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2207;
    }
    uint _2272 = _2025 + 8u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _582) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_2025].x + _659;
    float _2288 = cbLight._m0[_2025].y + _660;
    float _2289 = cbLight._m0[_2025].z + _661;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2025].xyz));
    float _4296 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2301 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2302 = dot(vec3(_579, _580, _581), vec3(_2294, _2295, _2296));
    float _4318 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2294, _2295, _2296));
    float _4329 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2286 * _2286;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2326 = 1.0 - _2286;
    float _2337 = (0.5 / (((_2301 * ((_2300 * _2326) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2326) + _2286) * _2300))) * _2300;
    float _4340 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    uint _2353 = _2025 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _582) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2065].x + _659;
    float _2367 = cbLight._m0[_2065].y + _660;
    float _2368 = cbLight._m0[_2065].z + _661;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2065].xyz));
    float _4351 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2380 = dot(vec3(_579, _580, _581), vec3(_2373, _2374, _2375));
    float _4362 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2373, _2374, _2375));
    float _4373 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2402 = 1.0 - _2365;
    float _2412 = (0.5 / (((_2301 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2402) + _2365) * _2379))) * _2379;
    float _4384 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2424 = (((_2401 * cbLight._m0[_2353].x) * _2414) * _2048) + ((((cbLight._m0[_2272].x * _2014) * _2325) * _2339) * _2061);
    float _2425 = (((_2401 * cbLight._m0[_2353].y) * _2414) * _2048) + ((((cbLight._m0[_2272].y * _2016) * _2325) * _2339) * _2061);
    float _2426 = (((_2401 * cbLight._m0[_2353].z) * _2414) * _2048) + ((((cbLight._m0[_2272].z * _2018) * _2325) * _2339) * _2061);
    float _2482;
    float _2484;
    float _2486;
    if (_2101)
    {
        _2482 = _2424;
        _2484 = _2425;
        _2486 = _2426;
    }
    else
    {
        uint _2488 = _2025 + 2u;
        uint _2492 = _2025 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _582) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _659;
        float _2509 = cbLight._m0[_2488].y + _660;
        float _2510 = cbLight._m0[_2488].z + _661;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2488].xyz));
        float _4395 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2522 = dot(vec3(_579, _580, _581), vec3(_2515, _2516, _2517));
        float _4406 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4417 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2544 = 1.0 - _2507;
        float _2554 = (0.5 / (((_2301 * ((_2521 * _2544) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2544) + _2507) * _2521))) * _2521;
        float _4428 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2482 = (((_2543 * cbLight._m0[_2492].x) * _2556) * _2557) + _2424;
        _2484 = (((_2543 * cbLight._m0[_2492].y) * _2556) * _2557) + _2425;
        _2486 = (((_2543 * cbLight._m0[_2492].z) * _2556) * _2557) + _2426;
    }
    float _2588;
    float _2590;
    float _2592;
    if (_2210)
    {
        _2588 = _2482;
        _2590 = _2484;
        _2592 = _2486;
    }
    else
    {
        uint _2599 = _2025 + 3u;
        uint _2603 = _2025 + 11u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _582) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _659;
        float _2620 = cbLight._m0[_2599].y + _660;
        float _2621 = cbLight._m0[_2599].z + _661;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2599].xyz));
        float _4444 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2633 = dot(vec3(_579, _580, _581), vec3(_2626, _2627, _2628));
        float _4455 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4466 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2654 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2655 = 1.0 - _2618;
        float _2665 = (0.5 / (((_2301 * ((_2632 * _2655) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2655) + _2618) * _2632))) * _2632;
        float _4477 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2588 = (((_2654 * cbLight._m0[_2603].x) * _2667) * _2668) + _2482;
        _2590 = (((_2654 * cbLight._m0[_2603].y) * _2667) * _2668) + _2484;
        _2592 = (((_2654 * cbLight._m0[_2603].z) * _2667) * _2668) + _2486;
    }
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_2023.y == 0u)
    {
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.x;
        uint _2701 = uint((float(_2689.y) * floor(float(uint(cbSceneParam._m0[85u].y * _668) / _2690))) + floor(float(uint(cbSceneParam._m0[85u].x * _667) / _2690)));
        float _2711 = (log2(_1801 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2712 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        uint _2715 = uint(isnan(14.0) ? _2712 : (isnan(_2712) ? 14.0 : min(_2712, 14.0)));
        uvec4 _2720 = texelFetch(g_lightClusterGridBuffer, int(((_2715 << 2u) + (_2701 << 6u)) >> 2u));
        uint _2721 = _2720.x;
        uint _2722 = _2689.z;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((((1u << ((_2722 >> 4u) & 15u)) + 4294967295u) & _2721) == 0u) || ((_2722 & 240u) == 0u))
        {
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
        }
        else
        {
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2962)
                {
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2950;
                    frontier_phi_66_pred_2 = _2949;
                    frontier_phi_66_pred_3 = _2948;
                    frontier_phi_66_pred_4 = _2947;
                    frontier_phi_66_pred_5 = _2946;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2961;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2952 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _1799;
                        float _3137 = _3096.y - _1800;
                        float _3138 = _3096.z - _1801;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_686, _689, _692), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4503 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _1799;
                        float _3172 = (-0.0) - _1800;
                        float _3173 = (-0.0) - _1801;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3187 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _746;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_686, _689, _692), vec3(_3178, _3179, _3180));
                        float _4519 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3212 = dot(vec3(_686, _689, _692), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4530 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3156 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3146) + _3221;
                        float _4541 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4552 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3219 * _3219) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3005 = (_3167 * _3115.x) + _3073;
                        _3006 = (_3167 * _3115.y) + _3074;
                        _3007 = (_3167 * _3115.z) + _3075;
                        _3002 = (_3247 * _3132.x) + _3070;
                        _3003 = (_3247 * _3132.y) + _3071;
                        _3004 = (_3247 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3006;
                    frontier_phi_66_pred_2 = _3005;
                    frontier_phi_66_pred_3 = _3004;
                    frontier_phi_66_pred_4 = _3003;
                    frontier_phi_66_pred_5 = _3002;
                }
                _2812 = frontier_phi_66_pred;
                _2810 = frontier_phi_66_pred_1;
                _2808 = frontier_phi_66_pred_2;
                _2806 = frontier_phi_66_pred_3;
                _2804 = frontier_phi_66_pred_4;
                _2802 = frontier_phi_66_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2802;
                    _2947 = _2804;
                    _2948 = _2806;
                    _2949 = _2808;
                    _2950 = _2810;
                    _2951 = _2812;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
        }
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.z;
        uint _2818 = (_2816 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2818) & _2721) == 0u)
        {
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
            float _2940 = _2939 * _1799;
            float _2941 = _2939 * _1800;
            float _2942 = _2939 * _1801;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2818 < ((_2816 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3053 = _2801;
                float _3054 = _2803;
                float _3055 = _2805;
                float _3056 = _2807;
                float _3057 = _2809;
                float _3058 = _2811;
                uint _3059 = _2818;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3069)
                    {
                        frontier_phi_72_pred = _3058;
                        frontier_phi_72_pred_1 = _3057;
                        frontier_phi_72_pred_2 = _3056;
                        frontier_phi_72_pred_3 = _3055;
                        frontier_phi_72_pred_4 = _3054;
                        frontier_phi_72_pred_5 = _3053;
                    }
                    else
                    {
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        uint _3271 = _3068;
                        uint _3272;
                        vec4 _3297;
                        float _3298;
                        vec4 _3313;
                        vec3 _3325;
                        vec4 _3340;
                        vec4 _3356;
                        float _3402;
                        bool _3403;
                        for (;;)
                        {
                            uint _3282 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3271));
                            _3272 = (_3271 + 4294967295u) & _3271;
                            uint _3284 = _3282 * 40u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3298 = _3297.w;
                            uint _3300 = (_3282 * 40u) + 4u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3282 * 40u) + 8u;
                            _3325 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x));
                            uint _3327 = (_3282 * 40u) + 16u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3282 * 40u) + 20u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3282 * 40u) + 24u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3377 = (_3282 * 40u) + 28u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3402 = fma(_1801, _3390.z, fma(_1800, _3390.y, _3390.x * _1799)) + _3390.w;
                            _3403 = !((fma(_1801, _3371.z, fma(_1800, _3371.y, _3371.x * _1799)) + _3371.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3403)
                            {
                                float _3430 = _3297.x - _1799;
                                float _3431 = _3297.y - _1800;
                                float _3432 = _3297.z - _1801;
                                float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                                float _3436 = inversesqrt(_3433);
                                float _3437 = _3436 * _3430;
                                float _3438 = _3436 * _3431;
                                float _3439 = _3436 * _3432;
                                float _3443 = 1.0 - (_3433 / (_3298 * _3298));
                                float _4563 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3448 = sqrt(_3433) * _3313.w;
                                float _3450 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                                float _3451 = _3450 * _3450;
                                float _3454 = ((1.0 - _3451) * dot(vec3(_3437, _3438, _3439), vec3(_686, _689, _692))) + _3451;
                                float _3457 = _3448 * _3448;
                                float _3461 = (fma(_1801, _3340.z, fma(_1800, _3340.y, _3340.x * _1799)) + _3340.w) / _3402;
                                float _3462 = (fma(_1801, _3356.z, fma(_1800, _3356.y, _3356.x * _1799)) + _3356.w) / _3402;
                                float _3466 = 1.0 - dot(vec2(_3461, _3462), vec2(_3461, _3462));
                                float _4579 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3468 = _3467 * (((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3444) / ((_3457 * 0.699999988079071044921875) + 1.0));
                                float _3480 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                                float _3481 = 1.0 - _746;
                                float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                                float _3489 = _3488 * _3488;
                                float _3490 = _3489 * _3489;
                                float _3491 = _3437 - _2940;
                                float _3492 = _3438 - _2941;
                                float _3493 = _3439 - _2942;
                                float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                                float _3501 = dot(vec3(_686, _689, _692), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4590 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3505 = dot(vec3(_686, _689, _692), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                                float _4601 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                                float _3513 = _3450 * _3489;
                                float _3514 = _3513 * _3513;
                                float _3520 = ((1.0 - _3514) * dot(vec3(_686, _689, _692), vec3(_3437, _3438, _3439))) + _3514;
                                float _4612 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3522 = 1.0 - _3489;
                                float _3532 = (0.5 / (((_3521 * ((_3504 * _3522) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3489) * _3504))) * _3521;
                                float _4623 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3542 = (_3467 * _3444) * (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3512 * _3512) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3468 * _3313.y;
                                frontier_phi_78_pred_1 = _3468 * _3313.x;
                                frontier_phi_78_pred_2 = _3542 * _3325.z;
                                frontier_phi_78_pred_3 = _3542 * _3325.y;
                                frontier_phi_78_pred_4 = _3542 * _3325.x;
                                frontier_phi_78_pred_5 = _3468 * _3313.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_78_pred;
                            _3549 = frontier_phi_78_pred_1;
                            _3548 = frontier_phi_78_pred_2;
                            _3547 = frontier_phi_78_pred_3;
                            _3546 = frontier_phi_78_pred_4;
                            _3551 = frontier_phi_78_pred_5;
                            _3255 = _3549 + _3268;
                            _3256 = _3550 + _3269;
                            _3257 = _3551 + _3270;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            _3254 = _3548 + _3267;
                            if (_3272 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3272;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3257;
                        frontier_phi_72_pred_1 = _3256;
                        frontier_phi_72_pred_2 = _3255;
                        frontier_phi_72_pred_3 = _3254;
                        frontier_phi_72_pred_4 = _3253;
                        frontier_phi_72_pred_5 = _3252;
                    }
                    _2925 = frontier_phi_72_pred;
                    _2923 = frontier_phi_72_pred_1;
                    _2921 = frontier_phi_72_pred_2;
                    _2919 = frontier_phi_72_pred_3;
                    _2917 = frontier_phi_72_pred_4;
                    _2915 = frontier_phi_72_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2915;
                        _3054 = _2917;
                        _3055 = _2919;
                        _3056 = _2921;
                        _3057 = _2923;
                        _3058 = _2925;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2923;
                frontier_phi_60_61_ladder_2 = _2919;
                frontier_phi_60_61_ladder_3 = _2917;
                frontier_phi_60_61_ladder_4 = _2915;
                frontier_phi_60_61_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_60_61_ladder = _2811;
                frontier_phi_60_61_ladder_1 = _2809;
                frontier_phi_60_61_ladder_2 = _2805;
                frontier_phi_60_61_ladder_3 = _2803;
                frontier_phi_60_61_ladder_4 = _2801;
                frontier_phi_60_61_ladder_5 = _2807;
            }
            _2914 = frontier_phi_60_61_ladder_4;
            _2916 = frontier_phi_60_61_ladder_3;
            _2918 = frontier_phi_60_61_ladder_2;
            _2920 = frontier_phi_60_61_ladder_5;
            _2922 = frontier_phi_60_61_ladder_1;
            _2924 = frontier_phi_60_61_ladder;
        }
        float _2929 = isnan(1.0) ? _730 : (isnan(_730) ? 1.0 : min(_730, 1.0));
        _2734 = (_2929 * _2920) + _2265;
        _2736 = (_2929 * _2922) + _2267;
        _2738 = (_2929 * _2924) + _2269;
        _2740 = ((_2914 * 0.039999999105930328369140625) * _2929) + _2588;
        _2742 = ((_2916 * 0.039999999105930328369140625) * _2929) + _2590;
        _2744 = ((_2918 * 0.039999999105930328369140625) * _2929) + _2592;
    }
    else
    {
        _2734 = _2265;
        _2736 = _2267;
        _2738 = _2269;
        _2740 = _2588;
        _2742 = _2590;
        _2744 = _2592;
    }
    float _4639 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4650 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4661 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    uint _2764 = _234 + 6u;
    float _2772 = _667 / cbSceneParam._m0[86u].x;
    float _2773 = _668 / cbSceneParam._m0[86u].y;
    vec4 _2787 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2789 = _2787.x;
    float _2790 = _2787.y;
    float _2791 = _2787.z;
    float _2792 = _2787.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2826 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2827 = _2826 / _600;
        float _2838 = _2827 * _652;
        float _2839 = _653 * _2827;
        float _2840 = (-0.0) - _2839;
        float _2842 = _2827 * _654;
        float _2844 = (cbSceneParam._m0[77u].w * _2840) / _2826;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2839;
        float _2852 = sqrt(((_2838 * _2838) + (_2839 * _2839)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2826)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2840 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2977 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3015 = ((abs(_2852 / _2840) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2862 * _2986) - exp2(_2862 * _2987)) * _2975))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2792);
        _2864 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2789;
        _2866 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2790;
        _2868 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2791;
        _2870 = _3026 * _2792;
    }
    else
    {
        _2864 = _2789;
        _2866 = _2790;
        _2868 = _2791;
        _2870 = _2792;
    }
    float _2882 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2883 = _2882 == 3.0;
    float _2884 = log2(_2870);
    float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2734 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _730))) + ((_2740 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2736 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _730))) + ((_2742 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2738 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _730))) + ((_2744 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2902 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2902 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.y = _2902 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.z = _2902 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.w = cbInstanceData._m0[_2764].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2764].w;
}


