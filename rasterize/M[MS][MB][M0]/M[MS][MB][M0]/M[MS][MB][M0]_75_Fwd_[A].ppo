#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1206;
float _3567;
float _3568;
float _3569;
float _3570;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3579 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3590 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))));
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _470 = _468.x;
    float _471 = 1.0 - _470;
    float _499 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_470 - _471) * cbMtdParam._m0[24u].w) + _471) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3601 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _508 = ((((cbMtdParam._m0[10u].x - _385) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _500) + _385;
    float _509 = ((((cbMtdParam._m0[10u].y - _386) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _500) + _386;
    float _510 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _387)) * _500) + _387;
    float _514 = ((cbMtdParam._m0[23u].y - _430) * _500) + _430;
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _542 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _559 = _557.x;
    float _564 = fract(_557.w + cbPerFrame._m0[22u].x);
    float _566 = (1.0 - _564) * _559;
    float _571 = ((_564 + (-1.0)) + _559) * 9.0;
    float _573 = ((_559 + (-1.0)) + _564) * 9.0;
    float _574 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _589 = (_566 * ((_557.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _574 : (isnan(_574) ? 3.0 : min(_574, 3.0))) * 3.1415927410125732421875);
    float _591 = (_566 * ((_557.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _575 : (isnan(_575) ? 3.0 : min(_575, 3.0))) * 3.1415927410125732421875);
    float _595 = inversesqrt(dot(vec3(_589, _591, 1.0), vec3(_589, _591, 1.0)));
    float _611 = (((((0.5 - _535) + ((_589 * 0.5) * _595)) * _542) + _535) * 2.0) + (-1.0);
    float _612 = (((((0.5 - _536) + ((_595 * 0.5) * _591)) * _542) + _536) * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _3632 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _629 = ((((cbMtdParam._m0[22u].z * _433) - _433) + _611) * _500) + _433;
    float _630 = ((((cbMtdParam._m0[22u].z * _435) - _435) + _612) * _500) + _435;
    float _631 = (_500 * (sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _441)) + _441;
    float _633 = cbMtdParam._m0[22u].x + _454.w;
    float _636 = fma(_631, _231, fma(_630, _237 * TANGENT.x, (_223 * _215) * _629));
    float _639 = fma(_631, _232, fma(_630, _237 * TANGENT.y, (_223 * _216) * _629));
    float _642 = fma(_631, _233, fma(_630, _237 * TANGENT.z, (_223 * _217) * _629));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3643 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _650 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3665 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3676 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3687 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _668 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _888 = sqrt(((_719 * _719) + (_720 * _720)) + (_721 * _721));
        float _894 = (cbMatDynParam._m0[5u].x * _888) + cbMatDynParam._m0[5u].y;
        float _3698 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _899 = (cbMatDynParam._m0[5u].z * _888) + cbMatDynParam._m0[5u].w;
        float _3709 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) - _895)) + _895) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _768 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _771 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _784 = _243 + 9u;
    uint _785 = _784 + uint(cbMatDynParam._m0[0u].w);
    float _791 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_785].x;
    float _792 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_785].y;
    float _793 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_785].z;
    float _3720 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    vec4 _805 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _809 = ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * TEXCOORD_5.w) * _805.x;
    float _810 = dot(vec3(_647, _648, _649), vec3(_726, _727, _728));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _647) - _726;
    float _818 = (_813 * _648) - _727;
    float _819 = (_813 * _649) - _728;
    float _823 = abs(dot(vec3(_726, _727, _728), vec3(_647, _648, _649)));
    float _3753 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_650);
    float _837 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_877, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869));
        float _935 = fma(_877, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869));
        float _939 = fma(_877, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869));
        float _963 = _869 + _647;
        float _964 = _873 + _648;
        float _965 = _877 + _649;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _931;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _935;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _939;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_647, _648, _649), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3801 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_647, _648, _649), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3834 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_647, _648, _649), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3867 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_877, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869));
        float _1252 = fma(_877, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869));
        float _1256 = fma(_877, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869));
        float _1279 = _869 + _647;
        float _1280 = _873 + _648;
        float _1281 = _877 + _649;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_647, _648, _649), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3930 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_647, _648, _649), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3963 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_647, _648, _649), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _3996 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = _1206;
        _1527 = _1206;
        _1528 = _1206;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1218)) + _1218;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1219)) + _1219;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1220)) + _1220;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _817 * 0.5;
    float _1586 = _818 * 0.5;
    float _1587 = _819 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1703 = fma(_877, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869)) + cbModelParam._m0[13u].w;
        float _1707 = fma(_877, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869)) + cbModelParam._m0[14u].w;
        float _1711 = fma(_877, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869)) + cbModelParam._m0[15u].w;
        float _1714 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1717 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1720 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1748;
        if (_1714 > 0.0)
        {
            _1748 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1748 = frontier_phi_17_15_ladder;
        }
        float _1949;
        if (_1717 > 0.0)
        {
            _1949 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1949 = frontier_phi_26_22_ladder;
        }
        float _2192;
        if (_1720 > 0.0)
        {
            _2192 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2192 = frontier_phi_38_33_ladder;
        }
        float _2194 = isnan(_1949) ? _1748 : (isnan(_1748) ? _1949 : min(_1748, _1949));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1714) + _1703;
        float _2200 = (_2195 * _1717) + _1707;
        float _2201 = (_2195 * _1720) + _1711;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2202;
        float _2206 = _2202 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 > _2206) || ((_2200 < _2204) || ((_2199 < _2204) || (_2199 > _2206))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_16_38_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1736 = frontier_phi_16_38_ladder_2;
        _1738 = frontier_phi_16_38_ladder_1;
        _1740 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1654);
        _1736 = _1724.x * cbModelParam._m0[1u].y;
        _1738 = _1724.y * cbModelParam._m0[1u].y;
        _1740 = _1724.z * cbModelParam._m0[1u].y;
    }
    float _1744 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1744 : min(cbModelParam._m0[25u].w, _1744));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1799 = fma(_877, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869)) + cbModelParam._m0[21u].w;
        float _1803 = fma(_877, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869)) + cbModelParam._m0[22u].w;
        float _1807 = fma(_877, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869)) + cbModelParam._m0[23u].w;
        float _1810 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1813 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1816 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1954;
        if (_1810 > 0.0)
        {
            _1954 = abs((1.0 - _1799) / _1810);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1799 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1954 = frontier_phi_28_24_ladder;
        }
        float _2219;
        if (_1813 > 0.0)
        {
            _2219 = abs((1.0 - _1803) / _1813);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1803 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2219 = frontier_phi_40_35_ladder;
        }
        float _2424;
        if (_1816 > 0.0)
        {
            _2424 = abs((1.0 - _1807) / _1816);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1807 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2424 = frontier_phi_49_46_ladder;
        }
        float _2426 = isnan(_2219) ? _1954 : (isnan(_1954) ? _2219 : min(_1954, _2219));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1810) + _1799;
        float _2432 = (_2427 * _1813) + _1803;
        float _2433 = (_2427 * _1816) + _1807;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1745);
            frontier_phi_25_49_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1835 = frontier_phi_25_49_ladder_2;
        _1837 = frontier_phi_25_49_ladder_1;
        _1839 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1745);
        _1835 = _1819.x * cbModelParam._m0[1u].z;
        _1837 = _1819.y * cbModelParam._m0[1u].z;
        _1839 = _1819.z * cbModelParam._m0[1u].z;
    }
    float _1851 = ((((1.0 - _837) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_837 * _825)) * _809;
    float _1852 = _1851 * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1853 = _1851 * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1854 = _1851 * ((cbModelParam._m0[1u].w * (_1839 - _1740)) + _1740);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, _1852 * cbSceneParam._m0[91u].x));
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _809 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1908 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1912 = _1875 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_647, _648, _649));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_647, _648, _649));
    float _4132 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4143 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1892].x * _1898) * _1933) + ((cbLight._m0[_1902].x * _1908) * _1931);
    float _1941 = ((_1898 * cbLight._m0[_1892].y) * _1933) + ((_1908 * cbLight._m0[_1902].y) * _1931);
    float _1942 = ((_1898 * cbLight._m0[_1892].z) * _1933) + ((_1908 * cbLight._m0[_1902].z) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1948)
    {
        _1959 = _1940;
        _1961 = _1941;
        _1963 = _1942;
    }
    else
    {
        uint _1967 = _1875 + 6u;
        float _1983 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _4154 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1986 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _1959 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1940;
        _1961 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1941;
        _1963 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1942;
    }
    bool _1966 = _1946.y == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1966)
    {
        _2004 = _1959;
        _2006 = _1961;
        _2008 = _1963;
    }
    else
    {
        uint _2163 = _1875 + 7u;
        float _2179 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4170 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2182 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2004 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _1959;
        _2006 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _1961;
        _2008 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _1963;
    }
    uint _2011 = _1875 + 8u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _650) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1875].x + _726;
    float _2027 = cbLight._m0[_1875].y + _727;
    float _2028 = cbLight._m0[_1875].z + _728;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1875].xyz));
    float _4186 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2040 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2041 = dot(vec3(_647, _648, _649), vec3(_2033, _2034, _2035));
    float _4208 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2033, _2034, _2035));
    float _4219 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2025 * _2025;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2025;
    float _2076 = (0.5 / (((_2040 * ((_2039 * _2065) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2065) + _2025) * _2039))) * _2039;
    float _4230 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    uint _2089 = _1875 + 9u;
    float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _650) * 0.949999988079071044921875);
    float _2101 = _2100 * _2100;
    float _2102 = cbLight._m0[_1912].x + _726;
    float _2103 = cbLight._m0[_1912].y + _727;
    float _2104 = cbLight._m0[_1912].z + _728;
    float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
    float _2109 = _2108 * _2102;
    float _2110 = _2108 * _2103;
    float _2111 = _2108 * _2104;
    float _2112 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1912].xyz));
    float _4241 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2116 = dot(vec3(_647, _648, _649), vec3(_2109, _2110, _2111));
    float _4252 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2109, _2110, _2111));
    float _4263 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2101 * _2101;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2101;
    float _2148 = (0.5 / (((_2040 * ((_2115 * _2138) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2138) + _2101) * _2115))) * _2115;
    float _4274 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    float _2160 = (((_2137 * cbLight._m0[_2089].x) * _2150) * _1898) + (((_2064 * cbLight._m0[_2011].x) * _2078) * _1908);
    float _2161 = (((_2137 * cbLight._m0[_2089].y) * _2150) * _1898) + (((_2064 * cbLight._m0[_2011].y) * _2078) * _1908);
    float _2162 = (((_2137 * cbLight._m0[_2089].z) * _2150) * _1898) + (((_2064 * cbLight._m0[_2011].z) * _2078) * _1908);
    float _2224;
    float _2226;
    float _2228;
    if (_1948)
    {
        _2224 = _2160;
        _2226 = _2161;
        _2228 = _2162;
    }
    else
    {
        uint _2230 = _1875 + 2u;
        uint _2234 = _1875 + 10u;
        float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _650) * 0.949999988079071044921875);
        float _2249 = _2248 * _2248;
        float _2250 = cbLight._m0[_2230].x + _726;
        float _2251 = cbLight._m0[_2230].y + _727;
        float _2252 = cbLight._m0[_2230].z + _728;
        float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
        float _2257 = _2256 * _2250;
        float _2258 = _2256 * _2251;
        float _2259 = _2256 * _2252;
        float _2260 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2230].xyz));
        float _4285 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2264 = dot(vec3(_647, _648, _649), vec3(_2257, _2258, _2259));
        float _4296 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2268 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2257, _2258, _2259));
        float _4307 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2272 = _2249 * _2249;
        float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
        float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2286 = 1.0 - _2249;
        float _2296 = (0.5 / (((_2040 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2286) + _2249) * _2263))) * _2263;
        float _4318 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2224 = (((_2285 * cbLight._m0[_2234].x) * _2298) * _2299) + _2160;
        _2226 = (((_2285 * cbLight._m0[_2234].y) * _2298) * _2299) + _2161;
        _2228 = (((_2285 * cbLight._m0[_2234].z) * _2298) * _2299) + _2162;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1966)
    {
        _2334 = _2224;
        _2336 = _2226;
        _2338 = _2228;
    }
    else
    {
        uint _2345 = _1875 + 3u;
        uint _2349 = _1875 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _650) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _726;
        float _2366 = cbLight._m0[_2345].y + _727;
        float _2367 = cbLight._m0[_2345].z + _728;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2345].xyz));
        float _4334 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2379 = dot(vec3(_647, _648, _649), vec3(_2372, _2373, _2374));
        float _4345 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4356 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2401 = 1.0 - _2364;
        float _2411 = (0.5 / (((_2040 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2401) + _2364) * _2378))) * _2378;
        float _4367 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2334 = (((_2400 * cbLight._m0[_2349].x) * _2413) * _2414) + _2224;
        _2336 = (((_2400 * cbLight._m0[_2349].y) * _2413) * _2414) + _2226;
        _2338 = (((_2400 * cbLight._m0[_2349].z) * _2413) * _2414) + _2228;
    }
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_1873.y == 0u)
    {
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2489;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2489;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2489;
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.x;
        uint _2516 = uint((float(_2504.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2505))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2505)));
        float _2526 = (log2(_2492 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2527 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        uint _2530 = uint(isnan(14.0) ? _2527 : (isnan(_2527) ? 14.0 : min(_2527, 14.0)));
        uvec4 _2535 = texelFetch(g_lightClusterGridBuffer, int(((_2530 << 2u) + (_2516 << 6u)) >> 2u));
        uint _2536 = _2535.x;
        uint _2537 = _2504.z;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((((1u << ((_2537 >> 4u) & 15u)) + 4294967295u) & _2536) == 0u) || ((_2537 & 240u) == 0u))
        {
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
        }
        else
        {
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            uint _2796 = 0u;
            uint _2805;
            bool _2806;
            for (;;)
            {
                _2805 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                _2806 = _2805 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2806)
                {
                    frontier_phi_66_pred = _2790;
                    frontier_phi_66_pred_1 = _2795;
                    frontier_phi_66_pred_2 = _2794;
                    frontier_phi_66_pred_3 = _2793;
                    frontier_phi_66_pred_4 = _2792;
                    frontier_phi_66_pred_5 = _2791;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2805;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2796 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _2490;
                        float _3002 = _2961.y - _2491;
                        float _3003 = _2961.z - _2492;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_765, _768, _771), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4393 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _2490;
                        float _3037 = (-0.0) - _2491;
                        float _3038 = (-0.0) - _2492;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3053 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _825;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_765, _768, _771), vec3(_3043, _3044, _3045));
                        float _4409 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3078 = dot(vec3(_765, _768, _771), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4420 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3021 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3011) + _3087;
                        float _4431 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4442 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3112 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3085 * _3085) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2865 = (_3032 * _2980.x) + _2938;
                        _2866 = (_3032 * _2980.y) + _2939;
                        _2867 = (_3032 * _2980.z) + _2940;
                        _2862 = (_3112 * _2997.x) + _2935;
                        _2863 = (_3112 * _2997.y) + _2936;
                        _2864 = (_3112 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_66_pred = _2862;
                    frontier_phi_66_pred_1 = _2867;
                    frontier_phi_66_pred_2 = _2866;
                    frontier_phi_66_pred_3 = _2865;
                    frontier_phi_66_pred_4 = _2864;
                    frontier_phi_66_pred_5 = _2863;
                }
                _2638 = frontier_phi_66_pred;
                _2648 = frontier_phi_66_pred_1;
                _2646 = frontier_phi_66_pred_2;
                _2644 = frontier_phi_66_pred_3;
                _2642 = frontier_phi_66_pred_4;
                _2640 = frontier_phi_66_pred_5;
                uint _2797 = _2796 + 1u;
                if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2790 = _2638;
                    _2791 = _2640;
                    _2792 = _2642;
                    _2793 = _2644;
                    _2794 = _2646;
                    _2795 = _2648;
                    _2796 = _2797;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
        }
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.z;
        uint _2654 = (_2652 >> 8u) & 15u;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((4294967295u << _2654) & _2536) == 0u)
        {
            _2758 = _2637;
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
            _2768 = _2647;
        }
        else
        {
            float _2783 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
            float _2784 = _2783 * _2490;
            float _2785 = _2783 * _2491;
            float _2786 = _2783 * _2492;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2654 < ((_2652 >> 12u) & 15u))
            {
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2918 = _2637;
                float _2919 = _2639;
                float _2920 = _2641;
                float _2921 = _2643;
                float _2922 = _2645;
                float _2923 = _2647;
                uint _2924 = _2654;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2934)
                    {
                        frontier_phi_77_pred = _2923;
                        frontier_phi_77_pred_1 = _2922;
                        frontier_phi_77_pred_2 = _2921;
                        frontier_phi_77_pred_3 = _2920;
                        frontier_phi_77_pred_4 = _2919;
                        frontier_phi_77_pred_5 = _2918;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        uint _3145 = _2933;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3230;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3156 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3156 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3156 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3156 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_2492, _3264.z, fma(_2491, _3264.y, _3264.x * _2490)) + _3264.w;
                            _3277 = !((fma(_2492, _3245.z, fma(_2491, _3245.y, _3245.x * _2490)) + _3245.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3171.x - _2490;
                                float _3305 = _3171.y - _2491;
                                float _3306 = _3171.z - _2492;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3172 * _3172));
                                float _4453 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3322 = sqrt(_3307) * _3187.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_765, _768, _771))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_2492, _3214.z, fma(_2491, _3214.y, _3214.x * _2490)) + _3214.w) / _3276;
                                float _3336 = (fma(_2492, _3230.z, fma(_2491, _3230.y, _3230.x * _2490)) + _3230.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4469 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _825;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2784;
                                float _3366 = _3312 - _2785;
                                float _3367 = _3313 - _2786;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_765, _768, _771), vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786));
                                float _4480 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3379 = dot(vec3(_765, _768, _771), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4491 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_765, _768, _771), vec3(_3311, _3312, _3313))) + _3388;
                                float _4502 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4513 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3342 * _3187.y;
                                frontier_phi_83_pred_1 = _3342 * _3187.x;
                                frontier_phi_83_pred_2 = _3416 * _3199.z;
                                frontier_phi_83_pred_3 = _3416 * _3199.y;
                                frontier_phi_83_pred_4 = _3416 * _3199.x;
                                frontier_phi_83_pred_5 = _3342 * _3187.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3424 = frontier_phi_83_pred;
                            _3423 = frontier_phi_83_pred_1;
                            _3422 = frontier_phi_83_pred_2;
                            _3421 = frontier_phi_83_pred_3;
                            _3420 = frontier_phi_83_pred_4;
                            _3425 = frontier_phi_83_pred_5;
                            _3129 = _3423 + _3142;
                            _3130 = _3424 + _3143;
                            _3131 = _3425 + _3144;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3131;
                        frontier_phi_77_pred_1 = _3130;
                        frontier_phi_77_pred_2 = _3129;
                        frontier_phi_77_pred_3 = _3128;
                        frontier_phi_77_pred_4 = _3127;
                        frontier_phi_77_pred_5 = _3126;
                    }
                    _2769 = frontier_phi_77_pred;
                    _2767 = frontier_phi_77_pred_1;
                    _2765 = frontier_phi_77_pred_2;
                    _2763 = frontier_phi_77_pred_3;
                    _2761 = frontier_phi_77_pred_4;
                    _2759 = frontier_phi_77_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2759;
                        _2919 = _2761;
                        _2920 = _2763;
                        _2921 = _2765;
                        _2922 = _2767;
                        _2923 = _2769;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2763;
                frontier_phi_58_59_ladder_1 = _2769;
                frontier_phi_58_59_ladder_2 = _2767;
                frontier_phi_58_59_ladder_3 = _2765;
                frontier_phi_58_59_ladder_4 = _2761;
                frontier_phi_58_59_ladder_5 = _2759;
            }
            else
            {
                frontier_phi_58_59_ladder = _2641;
                frontier_phi_58_59_ladder_1 = _2647;
                frontier_phi_58_59_ladder_2 = _2645;
                frontier_phi_58_59_ladder_3 = _2643;
                frontier_phi_58_59_ladder_4 = _2639;
                frontier_phi_58_59_ladder_5 = _2637;
            }
            _2758 = frontier_phi_58_59_ladder_5;
            _2760 = frontier_phi_58_59_ladder_4;
            _2762 = frontier_phi_58_59_ladder;
            _2764 = frontier_phi_58_59_ladder_3;
            _2766 = frontier_phi_58_59_ladder_2;
            _2768 = frontier_phi_58_59_ladder_1;
        }
        float _2773 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2549 = (_2773 * _2764) + _2004;
        _2551 = (_2773 * _2766) + _2006;
        _2553 = (_2773 * _2768) + _2008;
        _2555 = ((_2758 * 0.039999999105930328369140625) * _2773) + _2334;
        _2557 = ((_2760 * 0.039999999105930328369140625) * _2773) + _2336;
        _2559 = ((_2762 * 0.039999999105930328369140625) * _2773) + _2338;
    }
    else
    {
        _2549 = _2004;
        _2551 = _2006;
        _2553 = _2008;
        _2555 = _2334;
        _2557 = _2336;
        _2559 = _2338;
    }
    float _4529 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4540 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4551 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2576 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2549 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _809))) + ((_2555 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2551 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _809))) + ((_2557 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    float _2578 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2553 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _809))) + ((_2559 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    uint _2579 = _243 + 6u;
    float _2587 = _746 / cbSceneParam._m0[86u].x;
    float _2588 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2602 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, (log2((isnan(cbSceneParam._m0[77u].w) ? _668 : (isnan(_668) ? cbSceneParam._m0[77u].w : min(_668, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2604 = _2602.x;
    float _2605 = _2602.y;
    float _2606 = _2602.z;
    float _2607 = _2602.w;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_668 > cbSceneParam._m0[78u].w)
    {
        float _2662 = isnan(_668) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _668 : min(cbSceneParam._m0[80u].w, _668));
        float _2663 = _2662 / _668;
        float _2674 = _2663 * _719;
        float _2675 = _720 * _2663;
        float _2676 = (-0.0) - _2675;
        float _2678 = _2663 * _721;
        float _2680 = (cbSceneParam._m0[77u].w * _2676) / _2662;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2675;
        float _2688 = sqrt(((_2674 * _2674) + (_2675 * _2675)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2662)) * _2688;
        float _2696 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2698 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2676 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2681 > 0.0) ? exp2(_2696 * _2681) : (2.0 - exp2(_2698 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2819 = 1.0 / cbSceneParam._m0[80u].x;
            float _2820 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2821 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            _2875 = ((abs(_2688 / _2676) * cbSceneParam._m0[80u].y) * ((((_2830 - _2831) * 2.0) - ((exp2(_2696 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)))) - exp2(_2696 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))))) * _2819)) - ((exp2(_2698 * _2830) - exp2(_2698 * _2831)) * _2819))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2607);
        _2700 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2604;
        _2702 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2605;
        _2704 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2606;
        _2706 = _2886 * _2607;
    }
    else
    {
        _2700 = _2604;
        _2702 = _2605;
        _2704 = _2606;
        _2706 = _2607;
    }
    bool _2913;
    vec4 _2716;
    vec4 _2738;
    float _2740;
    float _2744;
    float _2745;
    float _2746;
    float _2747;
    bool _2757;
    for (;;)
    {
        _2716 = cbMatDynParam._m0[0u];
        float _2718 = roundEven(_2716.y);
        bool _2719 = _2718 == 3.0;
        float _2720 = log2(_2706);
        float _2727 = exp2(_2720 * cbSceneParam._m0[78u].x) * _2576;
        float _2728 = exp2(_2720 * cbSceneParam._m0[78u].y) * _2577;
        float _2729 = exp2(_2720 * cbSceneParam._m0[78u].z) * _2578;
        float _2736 = _735 + (-0.5);
        _2738 = cbMtdParam._m0[1u];
        _2740 = _2738.y * _2736;
        float _2743 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2744 = _2743 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2700)));
        _2745 = _2743 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
        _2746 = _2743 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
        _2747 = _2736 * 0.999000012874603271484375;
        _2757 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2757)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2747) < 0.5)
            {
                _2913 = true;
                break;
            }
        }
        uint _2854 = _784 + uint(_2716.w);
        if ((cbInstanceData._m0[_2854].w < 1.0) && ((cbInstanceData._m0[_2854].w + _2747) < 0.5))
        {
            _2913 = true;
            break;
        }
        if ((_2740 + 1.0) < _2738.x)
        {
            _2913 = true;
            break;
        }
        _2913 = false;
        break;
    }
    float _3117;
    if (_2913)
    {
        discard_state = true;
        _3117 = 0.0;
    }
    else
    {
        _3117 = cbInstanceData._m0[_2579].w;
    }
    SV_Target.x = _2744;
    SV_Target.y = _2745;
    SV_Target.z = _2746;
    SV_Target.w = _3117;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2579].w;
    discard_exit();
}


