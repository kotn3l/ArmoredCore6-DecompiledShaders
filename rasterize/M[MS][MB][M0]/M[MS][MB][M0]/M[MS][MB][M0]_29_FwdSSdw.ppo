#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _979;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3313 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))));
    float _307 = fma(_304, _208, fma(_297, _215, _295 * _201));
    float _310 = fma(_304, _209, fma(_297, _216, _295 * _202));
    float _313 = fma(_304, _210, fma(_297, _217, _295 * _203));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _355 = _353.x;
    float _356 = 1.0 - _355;
    float _363 = ((_355 - _356) * cbMtdParam._m0[24u].z) + _356;
    float _365 = (cbMtdParam._m0[19u].x + dot(vec4(_317 * _307, _317 * _310, _317 * _313, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_363 * cbMtdParam._m0[21u].z);
    float _3324 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _381 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_363 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3335 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _386 = ((_366 * (cbMtdParam._m0[17u].x - _266)) * _382) + _266;
    float _387 = ((_366 * (cbMtdParam._m0[17u].y - _267)) * _382) + _267;
    float _388 = ((_366 * (cbMtdParam._m0[17u].z - _268)) * _382) + _268;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _408 = (_401.x * 2.0) + (-1.0);
    float _409 = (_401.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_408, _409), vec2(_408, _409));
    float _3346 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _419 = (((_401.z - _290) * _366) * _382) + _290;
    float _434 = (((cbMtdParam._m0[21u].x * _295) + ((_408 - _295) * _366)) * _382) + _295;
    float _435 = (((cbMtdParam._m0[21u].x * _297) + ((_409 - _297) * _366)) * _382) + _297;
    float _436 = (((sqrt(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) - _304) * _366) * _382) + _304;
    float _441 = cbMtdParam._m0[22u].x + _286.w;
    float _444 = fma(_436, _208, fma(_435, _215, _434 * _201));
    float _447 = fma(_436, _209, fma(_435, _216, _434 * _202));
    float _450 = fma(_436, _210, fma(_435, _217, _434 * _203));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    float _3357 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _458 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3379 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3390 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3401 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _476 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _527 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _517);
    float _528 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _517);
    float _529 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _517);
    float _533 = inversesqrt(dot(vec3(_527, _528, _529), vec3(_527, _528, _529)));
    float _534 = _527 * _533;
    float _535 = _528 * _533;
    float _536 = _529 * _533;
    float _542 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _543 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _564 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _567 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _570 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    uint _584 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _590 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_584].x;
    float _591 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_584].y;
    float _592 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_584].z;
    float _3412 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    vec4 _604 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _542, cbSceneParam._m0[86u].y * _543));
    float _608 = ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * TEXCOORD_5.w) * _604.x;
    float _609 = dot(vec3(_455, _456, _457), vec3(_534, _535, _536));
    float _612 = _609 * 2.0;
    float _616 = (_612 * _455) - _534;
    float _617 = (_612 * _456) - _535;
    float _618 = (_612 * _457) - _536;
    float _622 = abs(dot(vec3(_534, _535, _536), vec3(_455, _456, _457)));
    float _3445 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _624 = sqrt(_458);
    float _637 = exp2((_624 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_624 * 3.0));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _978;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _707 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _711 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _736 = _669 + _455;
        float _737 = _673 + _456;
        float _738 = _677 + _457;
        float _748 = fma(_738, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736)) - _703;
        float _749 = fma(_738, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736)) - _707;
        float _750 = fma(_738, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736)) - _711;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_703 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_707 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[34u].z) + ((((((_711 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _806 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_772.x + (-0.5));
        float _808 = _806 * (_772.y + (-0.5));
        float _809 = _806 * (_772.z + (-0.5));
        float _816 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_779.x + (-0.5));
        float _818 = _816 * (_779.y + (-0.5));
        float _819 = _816 * (_779.z + (-0.5));
        float _826 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_786.x + (-0.5));
        float _828 = _826 * (_786.y + (-0.5));
        float _829 = _826 * (_786.z + (-0.5));
        float _836 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_793.x + (-0.5));
        float _838 = _836 * (_793.y + (-0.5));
        float _839 = _836 * (_793.z + (-0.5));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = _807 * 0.5;
        float _844 = _817 * 0.5;
        float _845 = _827 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _860 = (dot(vec3(_455, _456, _457), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _870 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3493 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_872 + 1.0))) + _877) * _840;
        float _887 = _808 * 0.5;
        float _888 = _818 * 0.5;
        float _889 = _828 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_455, _456, _457), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3526 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_914 + 1.0))) + _919) * _841;
        float _929 = _809 * 0.5;
        float _930 = _819 * 0.5;
        float _931 = _829 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_455, _456, _457), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3559 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_956 + 1.0))) + _961) * _842;
        _978 = _809;
        _980 = _808;
        _981 = _807;
        _982 = _819;
        _983 = _818;
        _984 = _817;
        _985 = _829;
        _986 = _828;
        _987 = _827;
        _988 = _842;
        _989 = _841;
        _990 = _840;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
    }
    else
    {
        _978 = _979;
        _980 = _979;
        _981 = _979;
        _982 = _979;
        _983 = _979;
        _984 = _979;
        _985 = _979;
        _986 = _979;
        _987 = _979;
        _988 = _979;
        _989 = _979;
        _990 = _979;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1022 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1026 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1049 = _669 + _455;
        float _1050 = _673 + _456;
        float _1051 = _677 + _457;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_455, _456, _457), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3622 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_455, _456, _457), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3655 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_455, _456, _457), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3688 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _979;
        _1288 = _979;
        _1289 = _979;
        _1290 = _979;
        _1291 = _979;
        _1292 = _979;
        _1293 = _979;
        _1294 = _979;
        _1295 = _979;
        _1296 = _979;
        _1297 = _979;
        _1298 = _979;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _991)) + _991;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _992)) + _992;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _993)) + _993;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _616 * 0.5;
    float _1356 = _617 * 0.5;
    float _1357 = _618 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_978, _982, _985, _988));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_980, _983, _986, _989));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_981, _984, _987, _990));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _458);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_618, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616));
        float _1486 = fma(_618, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616));
        float _1489 = fma(_618, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1517 = frontier_phi_14_12_ladder;
        }
        float _1741;
        if (_1486 > 0.0)
        {
            _1741 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1741 = frontier_phi_23_19_ladder;
        }
        float _1987;
        if (_1489 > 0.0)
        {
            _1987 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1987 = frontier_phi_35_30_ladder;
        }
        float _1989 = isnan(_1741) ? _1517 : (isnan(_1517) ? _1741 : min(_1517, _1741));
        float _1990 = isnan(_1987) ? _1989 : (isnan(_1989) ? _1987 : min(_1989, _1987));
        float _1994 = (_1990 * _1483) + _1472;
        float _1995 = (_1990 * _1486) + _1476;
        float _1996 = (_1990 * _1489) + _1480;
        float _1997 = _1990 * 9.9999997473787516355514526367188e-05;
        float _1999 = (-1.0) - _1997;
        float _2001 = _1997 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1996 > _2001) || ((_1996 < _1999) || ((_1995 > _2001) || ((_1995 < _1999) || ((_1994 < _1999) || (_1994 > _2001))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1996, cbModelParam._m0[9u].z, fma(_1995, cbModelParam._m0[9u].y, _1994 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1996, cbModelParam._m0[10u].z, fma(_1995, cbModelParam._m0[10u].y, _1994 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1996, cbModelParam._m0[11u].z, fma(_1995, cbModelParam._m0[11u].y, _1994 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_13_35_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_13_35_ladder_2;
        _1507 = frontier_phi_13_35_ladder_1;
        _1509 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_616, _617, _618), _1424);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _458);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_618, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616));
        float _1582 = fma(_618, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616));
        float _1585 = fma(_618, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616));
        float _1746;
        if (_1579 > 0.0)
        {
            _1746 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1746 = frontier_phi_25_21_ladder;
        }
        float _2014;
        if (_1582 > 0.0)
        {
            _2014 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2014 = frontier_phi_37_32_ladder;
        }
        float _2219;
        if (_1585 > 0.0)
        {
            _2219 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2219 = frontier_phi_46_43_ladder;
        }
        float _2221 = isnan(_2014) ? _1746 : (isnan(_1746) ? _2014 : min(_1746, _2014));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1579) + _1568;
        float _2227 = (_2222 * _1582) + _1572;
        float _2228 = (_2222 * _1585) + _1576;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2229;
        float _2232 = _2229 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2228 > _2232) || ((_2228 < _2230) || ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 < _2230) || (_2226 > _2232))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2228, cbModelParam._m0[17u].z, fma(_2227, cbModelParam._m0[17u].y, _2226 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2228, cbModelParam._m0[18u].z, fma(_2227, cbModelParam._m0[18u].y, _2226 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2228, cbModelParam._m0[19u].z, fma(_2227, cbModelParam._m0[19u].y, _2226 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_22_46_ladder = _2427.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2427.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2427.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_22_46_ladder_2;
        _1606 = frontier_phi_22_46_ladder_1;
        _1608 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_616, _617, _618), _1514);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1620 = ((((1.0 - _637) * ((_624 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_637 * _624)) * _608;
    float _1621 = _1620 * ((cbModelParam._m0[1u].w * (_1604 - _1505)) + _1505);
    float _1622 = _1620 * ((cbModelParam._m0[1u].w * (_1606 - _1507)) + _1507);
    float _1623 = _1620 * ((cbModelParam._m0[1u].w * (_1608 - _1509)) + _1509);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    vec4 _1640 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_542, _543));
    float _1642 = _1640.w;
    float _1654 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1642);
    float _1655 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1642);
    float _1656 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1642);
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _608 + (-1.0);
    float _1675 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1676 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1679 = _1662 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1662 + 4u;
    float _1699 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1703 = _1662 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_455, _456, _457));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_455, _456, _457));
    float _3824 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3835 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1654) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1655) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1656) * _1699) * _1722);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1740)
    {
        _1751 = _1731;
        _1753 = _1732;
        _1755 = _1733;
    }
    else
    {
        uint _1759 = _1662 + 6u;
        float _1775 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1776 = _1775 * _1775;
        float _3846 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1778 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1751 = (((cbLight._m0[_1759].x * 0.3183098733425140380859375) * _1777) * _1778) + _1731;
        _1753 = (((cbLight._m0[_1759].y * 0.3183098733425140380859375) * _1777) * _1778) + _1732;
        _1755 = (((cbLight._m0[_1759].z * 0.3183098733425140380859375) * _1777) * _1778) + _1733;
    }
    bool _1758 = _1738.y == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1758)
    {
        _1796 = _1751;
        _1798 = _1753;
        _1800 = _1755;
    }
    else
    {
        uint _1958 = _1662 + 7u;
        float _1974 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _3862 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1977 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1796 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1751;
        _1798 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1753;
        _1800 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1755;
    }
    uint _1803 = _1662 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _458) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1662].x + _534;
    float _1819 = cbLight._m0[_1662].y + _535;
    float _1820 = cbLight._m0[_1662].z + _536;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1662].xyz));
    float _3878 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _1832 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1833 = dot(vec3(_455, _456, _457), vec3(_1825, _1826, _1827));
    float _3900 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1825, _1826, _1827));
    float _3911 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1832 * ((_1831 * _1857) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1857) + _1817) * _1831))) * _1831;
    float _3922 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1884 = _1662 + 9u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _458) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1703].x + _534;
    float _1898 = cbLight._m0[_1703].y + _535;
    float _1899 = cbLight._m0[_1703].z + _536;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1703].xyz));
    float _3933 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1911 = dot(vec3(_455, _456, _457), vec3(_1904, _1905, _1906));
    float _3944 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1904, _1905, _1906));
    float _3955 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1896 * _1896;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1896;
    float _1943 = (0.5 / (((_1832 * ((_1910 * _1933) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1933) + _1896) * _1910))) * _1910;
    float _3966 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    float _1955 = (((_1932 * cbLight._m0[_1884].x) * _1945) * _1685) + ((((cbLight._m0[_1803].x * _1654) * _1856) * _1870) * _1699);
    float _1956 = (((_1932 * cbLight._m0[_1884].y) * _1945) * _1685) + ((((cbLight._m0[_1803].y * _1655) * _1856) * _1870) * _1699);
    float _1957 = (((_1932 * cbLight._m0[_1884].z) * _1945) * _1685) + ((((cbLight._m0[_1803].z * _1656) * _1856) * _1870) * _1699);
    float _2019;
    float _2021;
    float _2023;
    if (_1740)
    {
        _2019 = _1955;
        _2021 = _1956;
        _2023 = _1957;
    }
    else
    {
        uint _2025 = _1662 + 2u;
        uint _2029 = _1662 + 10u;
        float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _458) * 0.949999988079071044921875);
        float _2044 = _2043 * _2043;
        float _2045 = cbLight._m0[_2025].x + _534;
        float _2046 = cbLight._m0[_2025].y + _535;
        float _2047 = cbLight._m0[_2025].z + _536;
        float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
        float _2052 = _2051 * _2045;
        float _2053 = _2051 * _2046;
        float _2054 = _2051 * _2047;
        float _2055 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2025].xyz));
        float _3977 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2059 = dot(vec3(_455, _456, _457), vec3(_2052, _2053, _2054));
        float _3988 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2063 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2052, _2053, _2054));
        float _3999 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2067 = _2044 * _2044;
        float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
        float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2081 = 1.0 - _2044;
        float _2091 = (0.5 / (((_1832 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2081) + _2044) * _2058))) * _2058;
        float _4010 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2019 = (((_2080 * cbLight._m0[_2029].x) * _2093) * _2094) + _1955;
        _2021 = (((_2080 * cbLight._m0[_2029].y) * _2093) * _2094) + _1956;
        _2023 = (((_2080 * cbLight._m0[_2029].z) * _2093) * _2094) + _1957;
    }
    float _2129;
    float _2131;
    float _2133;
    if (_1758)
    {
        _2129 = _2019;
        _2131 = _2021;
        _2133 = _2023;
    }
    else
    {
        uint _2140 = _1662 + 3u;
        uint _2144 = _1662 + 11u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _458) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _534;
        float _2161 = cbLight._m0[_2140].y + _535;
        float _2162 = cbLight._m0[_2140].z + _536;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2140].xyz));
        float _4026 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2174 = dot(vec3(_455, _456, _457), vec3(_2167, _2168, _2169));
        float _4037 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4048 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2196 = 1.0 - _2159;
        float _2206 = (0.5 / (((_1832 * ((_2173 * _2196) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2196) + _2159) * _2173))) * _2173;
        float _4059 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2129 = (((_2195 * cbLight._m0[_2144].x) * _2208) * _2209) + _2019;
        _2131 = (((_2195 * cbLight._m0[_2144].y) * _2208) * _2209) + _2021;
        _2133 = (((_2195 * cbLight._m0[_2144].z) * _2208) * _2209) + _2023;
    }
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    if (_1660.y == 0u)
    {
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2284;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2284;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2284;
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.x;
        uint _2311 = uint((float(_2299.y) * floor(float(uint(cbSceneParam._m0[85u].y * _543) / _2300))) + floor(float(uint(cbSceneParam._m0[85u].x * _542) / _2300)));
        float _2321 = (log2(_2287 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2322 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        uint _2325 = uint(isnan(14.0) ? _2322 : (isnan(_2322) ? 14.0 : min(_2322, 14.0)));
        uvec4 _2330 = texelFetch(g_lightClusterGridBuffer, int(((_2325 << 2u) + (_2311 << 6u)) >> 2u));
        uint _2331 = _2330.x;
        uint _2332 = _2299.z;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((((1u << ((_2332 >> 4u) & 15u)) + 4294967295u) & _2331) == 0u) || ((_2332 & 240u) == 0u))
        {
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
        }
        else
        {
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2593)
                {
                    frontier_phi_61_pred = _2577;
                    frontier_phi_61_pred_1 = _2582;
                    frontier_phi_61_pred_2 = _2581;
                    frontier_phi_61_pred_3 = _2580;
                    frontier_phi_61_pred_4 = _2579;
                    frontier_phi_61_pred_5 = _2578;
                }
                else
                {
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    uint _2707;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2592;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    for (;;)
                    {
                        uint _2711 = uint(findLSB(_2707)) + (_2583 << 5u);
                        uint _2708 = (_2707 + 4294967295u) & _2707;
                        uint _2713 = _2711 * 48u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2733 = (_2711 * 48u) + 4u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2752 = (_2711 * 48u) + 8u;
                        vec3 _2763 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x));
                        float _2767 = _2727.x - _2285;
                        float _2768 = _2727.y - _2286;
                        float _2769 = _2727.z - _2287;
                        float _2770 = dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769));
                        float _2773 = inversesqrt(_2770);
                        float _2774 = _2773 * _2767;
                        float _2775 = _2773 * _2768;
                        float _2776 = _2773 * _2769;
                        float _2777 = dot(vec3(_564, _567, _570), vec3(_2774, _2775, _2776));
                        float _2782 = 1.0 - (_2770 * _2727.w);
                        float _4085 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2784 = sqrt(_2770) * _2746.w;
                        float _2787 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2777) + _2788;
                        float _2794 = _2784 * _2784;
                        float _2798 = ((isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))) * _2783) / ((_2794 * 0.699999988079071044921875) + 1.0);
                        float _2802 = (-0.0) - _2285;
                        float _2803 = (-0.0) - _2286;
                        float _2804 = (-0.0) - _2287;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2819 = exp2(log2(1.0 / ((_2794 * 3.5) + 5.0)) * 0.25);
                        float _2820 = 1.0 - _624;
                        float _2827 = sqrt(1.0 - ((1.0 - (_2820 * _2820)) * (1.0 - (_2819 * _2819))));
                        float _2828 = _2827 * _2827;
                        float _2829 = _2828 * _2828;
                        float _2830 = _2809 + _2774;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2840 = dot(vec3(_564, _567, _570), vec3(_2809, _2810, _2811));
                        float _4101 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2844 = dot(vec3(_564, _567, _570), vec3(_2836 * _2830, _2836 * _2831, _2836 * _2832));
                        float _4112 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2847 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2851 = ((_2847 * _2847) * (_2829 + (-1.0))) + 1.0;
                        float _2852 = _2787 * _2828;
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2777) + _2853;
                        float _4123 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2858 = 1.0 - _2828;
                        float _2868 = (0.5 / (((_2857 * ((_2843 * _2858) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _2858) + _2828) * _2843))) * _2857;
                        float _4134 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2879 = (((_2829 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_2851 * _2851) * ((_2794 * 2.1991131305694580078125) + 3.141590118408203125))) * _2783;
                        _2636 = (_2798 * _2746.x) + _2704;
                        _2637 = (_2798 * _2746.y) + _2705;
                        _2638 = (_2798 * _2746.z) + _2706;
                        _2633 = (_2879 * _2763.x) + _2701;
                        _2634 = (_2879 * _2763.y) + _2702;
                        _2635 = (_2879 * _2763.z) + _2703;
                        if (_2708 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2708;
                        }
                    }
                    frontier_phi_61_pred = _2633;
                    frontier_phi_61_pred_1 = _2638;
                    frontier_phi_61_pred_2 = _2637;
                    frontier_phi_61_pred_3 = _2636;
                    frontier_phi_61_pred_4 = _2635;
                    frontier_phi_61_pred_5 = _2634;
                }
                _2433 = frontier_phi_61_pred;
                _2443 = frontier_phi_61_pred_1;
                _2441 = frontier_phi_61_pred_2;
                _2439 = frontier_phi_61_pred_3;
                _2437 = frontier_phi_61_pred_4;
                _2435 = frontier_phi_61_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2433;
                    _2578 = _2435;
                    _2579 = _2437;
                    _2580 = _2439;
                    _2581 = _2441;
                    _2582 = _2443;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
        }
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.z;
        uint _2449 = (_2447 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2449) & _2331) == 0u)
        {
            _2545 = _2432;
            _2547 = _2434;
            _2549 = _2436;
            _2551 = _2438;
            _2553 = _2440;
            _2555 = _2442;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
            float _2571 = _2570 * _2285;
            float _2572 = _2570 * _2286;
            float _2573 = _2570 * _2287;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2449 < ((_2447 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2684 = _2432;
                float _2685 = _2434;
                float _2686 = _2436;
                float _2687 = _2438;
                float _2688 = _2440;
                float _2689 = _2442;
                uint _2690 = _2449;
                uint _2699;
                bool _2700;
                for (;;)
                {
                    _2699 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                    _2700 = _2699 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2700)
                    {
                        frontier_phi_67_pred = _2687;
                        frontier_phi_67_pred_1 = _2688;
                        frontier_phi_67_pred_2 = _2689;
                        frontier_phi_67_pred_3 = _2686;
                        frontier_phi_67_pred_4 = _2685;
                        frontier_phi_67_pred_5 = _2684;
                    }
                    else
                    {
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        uint _2903 = _2699;
                        uint _2904;
                        vec4 _2929;
                        float _2930;
                        vec4 _2945;
                        vec3 _2957;
                        vec4 _2973;
                        vec4 _2989;
                        float _3035;
                        bool _3036;
                        for (;;)
                        {
                            uint _2914 = ((_2690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2903));
                            _2904 = (_2903 + 4294967295u) & _2903;
                            uint _2916 = _2914 * 40u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2930 = _2929.w;
                            uint _2932 = (_2914 * 40u) + 4u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2914 * 40u) + 8u;
                            _2957 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x));
                            uint _2960 = (_2914 * 40u) + 16u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2914 * 40u) + 20u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2914 * 40u) + 24u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3010 = (_2914 * 40u) + 28u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3035 = fma(_2287, _3023.z, fma(_2286, _3023.y, _3023.x * _2285)) + _3023.w;
                            _3036 = !((fma(_2287, _3004.z, fma(_2286, _3004.y, _3004.x * _2285)) + _3004.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3036)
                            {
                                float _3063 = _2929.x - _2285;
                                float _3064 = _2929.y - _2286;
                                float _3065 = _2929.z - _2287;
                                float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                                float _3069 = inversesqrt(_3066);
                                float _3070 = _3069 * _3063;
                                float _3071 = _3069 * _3064;
                                float _3072 = _3069 * _3065;
                                float _3076 = 1.0 - (_3066 / (_2930 * _2930));
                                float _4145 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3081 = sqrt(_3066) * _2945.w;
                                float _3083 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                                float _3084 = _3083 * _3083;
                                float _3087 = ((1.0 - _3084) * dot(vec3(_3070, _3071, _3072), vec3(_564, _567, _570))) + _3084;
                                float _3090 = _3081 * _3081;
                                float _3094 = (fma(_2287, _2973.z, fma(_2286, _2973.y, _2973.x * _2285)) + _2973.w) / _3035;
                                float _3095 = (fma(_2287, _2989.z, fma(_2286, _2989.y, _2989.x * _2285)) + _2989.w) / _3035;
                                float _3099 = 1.0 - dot(vec2(_3094, _3095), vec2(_3094, _3095));
                                float _4161 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3101 = _3100 * (((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3077) / ((_3090 * 0.699999988079071044921875) + 1.0));
                                float _3113 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                                float _3114 = 1.0 - _624;
                                float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                                float _3122 = _3121 * _3121;
                                float _3123 = _3122 * _3122;
                                float _3124 = _3070 - _2571;
                                float _3125 = _3071 - _2572;
                                float _3126 = _3072 - _2573;
                                float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                                float _3134 = dot(vec3(_564, _567, _570), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4172 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3138 = dot(vec3(_564, _567, _570), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                                float _4183 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                                float _3146 = _3083 * _3122;
                                float _3147 = _3146 * _3146;
                                float _3153 = ((1.0 - _3147) * dot(vec3(_564, _567, _570), vec3(_3070, _3071, _3072))) + _3147;
                                float _4194 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3155 = 1.0 - _3122;
                                float _3165 = (0.5 / (((_3154 * ((_3137 * _3155) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3122) * _3137))) * _3154;
                                float _4205 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3175 = (_3100 * _3077) * (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_3145 * _3145) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3175 * _2957.x;
                                frontier_phi_73_pred_1 = _3175 * _2957.y;
                                frontier_phi_73_pred_2 = _3101 * _2945.z;
                                frontier_phi_73_pred_3 = _3101 * _2945.y;
                                frontier_phi_73_pred_4 = _3101 * _2945.x;
                                frontier_phi_73_pred_5 = _3175 * _2957.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_73_pred;
                            _3180 = frontier_phi_73_pred_1;
                            _3184 = frontier_phi_73_pred_2;
                            _3183 = frontier_phi_73_pred_3;
                            _3182 = frontier_phi_73_pred_4;
                            _3181 = frontier_phi_73_pred_5;
                            _2887 = _3182 + _2900;
                            _2888 = _3183 + _2901;
                            _2889 = _3184 + _2902;
                            _2884 = _3179 + _2897;
                            _2885 = _3180 + _2898;
                            _2886 = _3181 + _2899;
                            if (_2904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2904;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2887;
                        frontier_phi_67_pred_1 = _2888;
                        frontier_phi_67_pred_2 = _2889;
                        frontier_phi_67_pred_3 = _2886;
                        frontier_phi_67_pred_4 = _2885;
                        frontier_phi_67_pred_5 = _2884;
                    }
                    _2552 = frontier_phi_67_pred;
                    _2554 = frontier_phi_67_pred_1;
                    _2556 = frontier_phi_67_pred_2;
                    _2550 = frontier_phi_67_pred_3;
                    _2548 = frontier_phi_67_pred_4;
                    _2546 = frontier_phi_67_pred_5;
                    uint _2691 = _2690 + 1u;
                    if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2684 = _2546;
                        _2685 = _2548;
                        _2686 = _2550;
                        _2687 = _2552;
                        _2688 = _2554;
                        _2689 = _2556;
                        _2690 = _2691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2554;
                frontier_phi_55_56_ladder_1 = _2556;
                frontier_phi_55_56_ladder_2 = _2552;
                frontier_phi_55_56_ladder_3 = _2550;
                frontier_phi_55_56_ladder_4 = _2548;
                frontier_phi_55_56_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_55_56_ladder = _2440;
                frontier_phi_55_56_ladder_1 = _2442;
                frontier_phi_55_56_ladder_2 = _2438;
                frontier_phi_55_56_ladder_3 = _2436;
                frontier_phi_55_56_ladder_4 = _2434;
                frontier_phi_55_56_ladder_5 = _2432;
            }
            _2545 = frontier_phi_55_56_ladder_5;
            _2547 = frontier_phi_55_56_ladder_4;
            _2549 = frontier_phi_55_56_ladder_3;
            _2551 = frontier_phi_55_56_ladder_2;
            _2553 = frontier_phi_55_56_ladder;
            _2555 = frontier_phi_55_56_ladder_1;
        }
        float _2560 = isnan(1.0) ? _608 : (isnan(_608) ? 1.0 : min(_608, 1.0));
        _2344 = (_2560 * _2551) + _1796;
        _2346 = (_2560 * _2553) + _1798;
        _2348 = (_2560 * _2555) + _1800;
        _2350 = ((_2545 * 0.039999999105930328369140625) * _2560) + _2129;
        _2352 = ((_2547 * 0.039999999105930328369140625) * _2560) + _2131;
        _2354 = ((_2549 * 0.039999999105930328369140625) * _2560) + _2133;
    }
    else
    {
        _2344 = _1796;
        _2346 = _1798;
        _2348 = _1800;
        _2350 = _2129;
        _2352 = _2131;
        _2354 = _2133;
    }
    float _4221 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4232 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4243 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    uint _2374 = _220 + 6u;
    float _2382 = _542 / cbSceneParam._m0[86u].x;
    float _2383 = _543 / cbSceneParam._m0[86u].y;
    vec4 _2397 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, (log2((isnan(cbSceneParam._m0[77u].w) ? _476 : (isnan(_476) ? cbSceneParam._m0[77u].w : min(_476, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2399 = _2397.x;
    float _2400 = _2397.y;
    float _2401 = _2397.z;
    float _2402 = _2397.w;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_476 > cbSceneParam._m0[78u].w)
    {
        float _2457 = isnan(_476) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _476 : min(cbSceneParam._m0[80u].w, _476));
        float _2458 = _2457 / _476;
        float _2469 = _2458 * _527;
        float _2470 = _528 * _2458;
        float _2471 = (-0.0) - _2470;
        float _2473 = _2458 * _529;
        float _2475 = (cbSceneParam._m0[77u].w * _2471) / _2457;
        float _2476 = _2475 + cbSceneParam._m0[79u].w;
        float _2477 = cbSceneParam._m0[79u].w - _2470;
        float _2483 = sqrt(((_2469 * _2469) + (_2470 * _2470)) + (_2473 * _2473));
        float _2486 = (1.0 - (cbSceneParam._m0[77u].w / _2457)) * _2483;
        float _2491 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2493 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2646;
        if (abs((_2471 - _2475) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2646 = ((((_2476 > 0.0) ? exp2(_2491 * _2476) : (2.0 - exp2(_2493 * _2476))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2486;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : max(_2476, _2477));
            float _2608 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : min(_2476, _2477));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2646 = ((abs(_2483 / _2471) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2491 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2491 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2493 * _2617) - exp2(_2493 * _2618)) * _2606))) + (_2486 * cbSceneParam._m0[80u].z);
        }
        vec4 _2648 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, 1.0), 0.0);
        float _2657 = exp2((_2646 * (-1.44269502162933349609375)) * (1.0 - _2648.w));
        float _2658 = log2(_2657);
        float _2674 = log2(_2402);
        _2495 = (exp2(_2674 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].x)) * _2648.x) / cbSceneParam._m0[78u].x)) + _2399;
        _2497 = (exp2(_2674 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].y)) * _2648.y) / cbSceneParam._m0[78u].y)) + _2400;
        _2499 = (exp2(_2674 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].z)) * _2648.z) / cbSceneParam._m0[78u].z)) + _2401;
        _2501 = _2657 * _2402;
    }
    else
    {
        _2495 = _2399;
        _2497 = _2400;
        _2499 = _2401;
        _2501 = _2402;
    }
    float _2513 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2514 = _2513 == 3.0;
    float _2515 = log2(_2501);
    float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2344 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _608))) + ((_2350 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2346 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _608))) + ((_2352 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2348 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _608))) + ((_2354 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2533 = (_2513 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2533 * (_2514 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.y = _2533 * (_2514 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.z = _2533 * (_2514 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2499)));
    SV_Target.w = cbInstanceData._m0[_2374].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2374].w;
}


