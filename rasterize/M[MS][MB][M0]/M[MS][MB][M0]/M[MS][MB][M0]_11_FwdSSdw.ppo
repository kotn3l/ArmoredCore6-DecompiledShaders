#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1131;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3463 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3474 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3485 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _280) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _281) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _317.x * cbMtdParam._m0[9u].x;
    float _323 = _317.y * cbMtdParam._m0[9u].y;
    float _324 = _317.z * cbMtdParam._m0[9u].z;
    float _328 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _294.x) * _322;
    float _331 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _294.y) * _323;
    float _334 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _294.z) * _324;
    float _341 = ((_322 - _328) * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) + _328;
    float _342 = ((_323 - _331) * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) + _331;
    float _343 = ((_324 - _334) * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) + _334;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3496 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_418 - _419) * cbMtdParam._m0[24u].w) + _419) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3507 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _341) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _451) + _341;
    float _460 = ((((cbMtdParam._m0[10u].y - _342) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _451) + _342;
    float _461 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _343)) * _451) + _343;
    float _466 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    float _470 = ((cbMtdParam._m0[23u].y - _466) * _451) + _466;
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _504 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_230, _231, _232, 0.0));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _280) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _281) + cbTextureTilingScale._m0[18u].w));
    float _521 = _519.x;
    float _526 = fract(_519.w + cbPerFrame._m0[22u].x);
    float _528 = (1.0 - _526) * _521;
    float _533 = ((_526 + (-1.0)) + _521) * 9.0;
    float _535 = ((_521 + (-1.0)) + _526) * 9.0;
    float _536 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _537 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _551 = (_528 * ((_519.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _536 : (isnan(_536) ? 3.0 : min(_536, 3.0))) * 3.1415927410125732421875);
    float _553 = (_528 * ((_519.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _537 : (isnan(_537) ? 3.0 : min(_537, 3.0))) * 3.1415927410125732421875);
    float _557 = inversesqrt(dot(vec3(_551, _553, 1.0), vec3(_551, _553, 1.0)));
    float _573 = (((((0.5 - _494) + ((_551 * 0.5) * _557)) * _504) + _494) * 2.0) + (-1.0);
    float _574 = (((((0.5 - _495) + ((_557 * 0.5) * _553)) * _504) + _495) * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3538 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _591 = ((((cbMtdParam._m0[22u].z * _402) - _402) + _573) * _451) + _402;
    float _592 = ((((cbMtdParam._m0[22u].z * _403) - _403) + _574) * _451) + _403;
    float _593 = (_451 * (sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) - _397)) + _397;
    float _595 = cbMtdParam._m0[22u].x + _382.w;
    float _598 = fma(_593, _230, fma(_592, _236 * TANGENT.x, (_222 * _214) * _591));
    float _601 = fma(_593, _231, fma(_592, _236 * TANGENT.y, (_222 * _215) * _591));
    float _604 = fma(_593, _232, fma(_592, _236 * TANGENT.z, (_222 * _216) * _591));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3549 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _612 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3571 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3582 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3593 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _681 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _671);
    float _682 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _671);
    float _683 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _671);
    float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
    float _688 = _681 * _687;
    float _689 = _682 * _687;
    float _690 = _683 * _687;
    float _696 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _697 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _721 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _724 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _738 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3604 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _696, cbSceneParam._m0[86u].y * _697));
    float _762 = ((isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * TEXCOORD_5.w) * _758.x;
    float _763 = dot(vec3(_609, _610, _611), vec3(_688, _689, _690));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _609) - _688;
    float _771 = (_766 * _610) - _689;
    float _772 = (_766 * _611) - _690;
    float _776 = abs(dot(vec3(_688, _689, _690), vec3(_609, _610, _611)));
    float _3637 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_612);
    float _790 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _860 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _864 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _888 = _822 + _609;
        float _889 = _826 + _610;
        float _890 = _830 + _611;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _856;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _860;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _864;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_609, _610, _611), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3685 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_609, _610, _611), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3718 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_609, _610, _611), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3751 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1174 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1178 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1201 = _822 + _609;
        float _1202 = _826 + _610;
        float _1203 = _830 + _611;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_609, _610, _611), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3814 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_609, _610, _611), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3847 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_609, _610, _611), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3880 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1131;
        _1440 = _1131;
        _1441 = _1131;
        _1442 = _1131;
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _770 * 0.5;
    float _1508 = _771 * 0.5;
    float _1509 = _772 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1639 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1642 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1670 = frontier_phi_14_12_ladder;
        }
        float _1894;
        if (_1639 > 0.0)
        {
            _1894 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1894 = frontier_phi_23_19_ladder;
        }
        float _2140;
        if (_1642 > 0.0)
        {
            _2140 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2140 = frontier_phi_35_30_ladder;
        }
        float _2142 = isnan(_1894) ? _1670 : (isnan(_1670) ? _1894 : min(_1670, _1894));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1636) + _1625;
        float _2148 = (_2143 * _1639) + _1629;
        float _2149 = (_2143 * _1642) + _1633;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_13_35_ladder_2;
        _1660 = frontier_phi_13_35_ladder_1;
        _1662 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1576);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1735 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1738 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1899;
        if (_1732 > 0.0)
        {
            _1899 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1899 = frontier_phi_25_21_ladder;
        }
        float _2167;
        if (_1735 > 0.0)
        {
            _2167 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2167 = frontier_phi_37_32_ladder;
        }
        float _2372;
        if (_1738 > 0.0)
        {
            _2372 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2372 = frontier_phi_46_43_ladder;
        }
        float _2374 = isnan(_2167) ? _1899 : (isnan(_1899) ? _2167 : min(_1899, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1732) + _1721;
        float _2380 = (_2375 * _1735) + _1725;
        float _2381 = (_2375 * _1738) + _1729;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_22_46_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_22_46_ladder_2;
        _1759 = frontier_phi_22_46_ladder_1;
        _1761 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1667);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _790) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_790 * _778)) * _762;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    vec4 _1793 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_696, _697));
    float _1795 = _1793.w;
    float _1807 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1795);
    float _1808 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1795);
    float _1809 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1795);
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _762 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1852 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1856 = _1815 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_609, _610, _611));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_609, _610, _611));
    float _4016 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4027 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1832].x * _1838) * _1877) + (((cbLight._m0[_1842].x * _1807) * _1852) * _1875);
    float _1885 = ((_1838 * cbLight._m0[_1832].y) * _1877) + (((cbLight._m0[_1842].y * _1808) * _1852) * _1875);
    float _1886 = ((_1838 * cbLight._m0[_1832].z) * _1877) + (((cbLight._m0[_1842].z * _1809) * _1852) * _1875);
    uvec4 _1891 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1893 = _1891.x == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1893)
    {
        _1904 = _1884;
        _1906 = _1885;
        _1908 = _1886;
    }
    else
    {
        uint _1912 = _1815 + 6u;
        float _1928 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _4038 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1931 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1904 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1884;
        _1906 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1885;
        _1908 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1886;
    }
    bool _1911 = _1891.y == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1911)
    {
        _1949 = _1904;
        _1951 = _1906;
        _1953 = _1908;
    }
    else
    {
        uint _2111 = _1815 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4054 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2130 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1949 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1904;
        _1951 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1906;
        _1953 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1908;
    }
    uint _1956 = _1815 + 8u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _612) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1815].x + _688;
    float _1972 = cbLight._m0[_1815].y + _689;
    float _1973 = cbLight._m0[_1815].z + _690;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1815].xyz));
    float _4070 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _1985 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1986 = dot(vec3(_609, _610, _611), vec3(_1978, _1979, _1980));
    float _4092 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1978, _1979, _1980));
    float _4103 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1970 * _1970;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1985 * ((_1984 * _2010) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2010) + _1970) * _1984))) * _1984;
    float _4114 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    uint _2037 = _1815 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _612) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1856].x + _688;
    float _2051 = cbLight._m0[_1856].y + _689;
    float _2052 = cbLight._m0[_1856].z + _690;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1856].xyz));
    float _4125 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2064 = dot(vec3(_609, _610, _611), vec3(_2057, _2058, _2059));
    float _4136 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2057, _2058, _2059));
    float _4147 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1985 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2086) + _2049) * _2063))) * _2063;
    float _4158 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1838) + ((((cbLight._m0[_1956].x * _1807) * _2009) * _2023) * _1852);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1838) + ((((cbLight._m0[_1956].y * _1808) * _2009) * _2023) * _1852);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1838) + ((((cbLight._m0[_1956].z * _1809) * _2009) * _2023) * _1852);
    float _2172;
    float _2174;
    float _2176;
    if (_1893)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1815 + 2u;
        uint _2182 = _1815 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _612) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _688;
        float _2199 = cbLight._m0[_2178].y + _689;
        float _2200 = cbLight._m0[_2178].z + _690;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2178].xyz));
        float _4169 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2212 = dot(vec3(_609, _610, _611), vec3(_2205, _2206, _2207));
        float _4180 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4191 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1985 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2234) + _2197) * _2211))) * _2211;
        float _4202 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1911)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1815 + 3u;
        uint _2297 = _1815 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _612) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _688;
        float _2314 = cbLight._m0[_2293].y + _689;
        float _2315 = cbLight._m0[_2293].z + _690;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2293].xyz));
        float _4218 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2327 = dot(vec3(_609, _610, _611), vec3(_2320, _2321, _2322));
        float _4229 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4240 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1985 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2349) + _2312) * _2326))) * _2326;
        float _4251 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1813.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _697) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _696) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            uint _2736 = 0u;
            uint _2745;
            bool _2746;
            for (;;)
            {
                _2745 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                _2746 = _2745 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2746)
                {
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2745;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2736 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2438;
                        float _2921 = _2880.y - _2439;
                        float _2922 = _2880.z - _2440;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_718, _721, _724), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4277 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2438;
                        float _2956 = (-0.0) - _2439;
                        float _2957 = (-0.0) - _2440;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _778;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_718, _721, _724), vec3(_2962, _2963, _2964));
                        float _4293 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2997 = dot(vec3(_718, _721, _724), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4304 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4315 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4326 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3031 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2789 = (_2951 * _2899.x) + _2857;
                        _2790 = (_2951 * _2899.y) + _2858;
                        _2791 = (_2951 * _2899.z) + _2859;
                        _2786 = (_3031 * _2916.x) + _2854;
                        _2787 = (_3031 * _2916.y) + _2855;
                        _2788 = (_3031 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                _2586 = frontier_phi_61_pred;
                _2596 = frontier_phi_61_pred_1;
                _2594 = frontier_phi_61_pred_2;
                _2592 = frontier_phi_61_pred_3;
                _2590 = frontier_phi_61_pred_4;
                _2588 = frontier_phi_61_pred_5;
                uint _2737 = _2736 + 1u;
                if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2730 = _2586;
                    _2731 = _2588;
                    _2732 = _2590;
                    _2733 = _2592;
                    _2734 = _2594;
                    _2735 = _2596;
                    _2736 = _2737;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
        }
        else
        {
            float _2723 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2724 = _2723 * _2438;
            float _2725 = _2723 * _2439;
            float _2726 = _2723 * _2440;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2837 = _2585;
                float _2838 = _2587;
                float _2839 = _2589;
                float _2840 = _2591;
                float _2841 = _2593;
                float _2842 = _2595;
                uint _2843 = _2602;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2853)
                    {
                        frontier_phi_67_pred = _2840;
                        frontier_phi_67_pred_1 = _2841;
                        frontier_phi_67_pred_2 = _2842;
                        frontier_phi_67_pred_3 = _2839;
                        frontier_phi_67_pred_4 = _2838;
                        frontier_phi_67_pred_5 = _2837;
                    }
                    else
                    {
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        uint _3055 = _2852;
                        uint _3056;
                        vec4 _3081;
                        float _3082;
                        vec4 _3097;
                        vec3 _3109;
                        vec4 _3124;
                        vec4 _3139;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3066 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3055));
                            _3056 = (_3055 + 4294967295u) & _3055;
                            uint _3068 = _3066 * 40u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3082 = _3081.w;
                            uint _3084 = (_3066 * 40u) + 4u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3066 * 40u) + 8u;
                            _3109 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x));
                            uint _3111 = (_3066 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3066 * 40u) + 20u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3066 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3066 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2440, _3173.z, fma(_2439, _3173.y, _3173.x * _2438)) + _3173.w;
                            _3186 = !((fma(_2440, _3154.z, fma(_2439, _3154.y, _3154.x * _2438)) + _3154.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3081.x - _2438;
                                float _3214 = _3081.y - _2439;
                                float _3215 = _3081.z - _2440;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3082 * _3082));
                                float _4337 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3231 = sqrt(_3216) * _3097.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_718, _721, _724))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_2440, _3124.z, fma(_2439, _3124.y, _3124.x * _2438)) + _3124.w) / _3185;
                                float _3245 = (fma(_2440, _3139.z, fma(_2439, _3139.y, _3139.x * _2438)) + _3139.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4353 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _778;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2724;
                                float _3275 = _3221 - _2725;
                                float _3276 = _3222 - _2726;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_718, _721, _724), vec3((-0.0) - _2724, (-0.0) - _2725, (-0.0) - _2726));
                                float _4364 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3288 = dot(vec3(_718, _721, _724), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4375 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_718, _721, _724), vec3(_3220, _3221, _3222))) + _3297;
                                float _4386 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4397 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3325 * _3109.x;
                                frontier_phi_73_pred_1 = _3325 * _3109.y;
                                frontier_phi_73_pred_2 = _3251 * _3097.z;
                                frontier_phi_73_pred_3 = _3251 * _3097.y;
                                frontier_phi_73_pred_4 = _3251 * _3097.x;
                                frontier_phi_73_pred_5 = _3325 * _3109.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_73_pred;
                            _3330 = frontier_phi_73_pred_1;
                            _3334 = frontier_phi_73_pred_2;
                            _3333 = frontier_phi_73_pred_3;
                            _3332 = frontier_phi_73_pred_4;
                            _3331 = frontier_phi_73_pred_5;
                            _3039 = _3332 + _3052;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3036 = _3329 + _3049;
                            _3037 = _3330 + _3050;
                            _3038 = _3331 + _3051;
                            if (_3056 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3056;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3039;
                        frontier_phi_67_pred_1 = _3040;
                        frontier_phi_67_pred_2 = _3041;
                        frontier_phi_67_pred_3 = _3038;
                        frontier_phi_67_pred_4 = _3037;
                        frontier_phi_67_pred_5 = _3036;
                    }
                    _2705 = frontier_phi_67_pred;
                    _2707 = frontier_phi_67_pred_1;
                    _2709 = frontier_phi_67_pred_2;
                    _2703 = frontier_phi_67_pred_3;
                    _2701 = frontier_phi_67_pred_4;
                    _2699 = frontier_phi_67_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2699;
                        _2838 = _2701;
                        _2839 = _2703;
                        _2840 = _2705;
                        _2841 = _2707;
                        _2842 = _2709;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2707;
                frontier_phi_55_56_ladder_1 = _2709;
                frontier_phi_55_56_ladder_2 = _2705;
                frontier_phi_55_56_ladder_3 = _2703;
                frontier_phi_55_56_ladder_4 = _2701;
                frontier_phi_55_56_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_55_56_ladder = _2593;
                frontier_phi_55_56_ladder_1 = _2595;
                frontier_phi_55_56_ladder_2 = _2591;
                frontier_phi_55_56_ladder_3 = _2589;
                frontier_phi_55_56_ladder_4 = _2587;
                frontier_phi_55_56_ladder_5 = _2585;
            }
            _2698 = frontier_phi_55_56_ladder_5;
            _2700 = frontier_phi_55_56_ladder_4;
            _2702 = frontier_phi_55_56_ladder_3;
            _2704 = frontier_phi_55_56_ladder_2;
            _2706 = frontier_phi_55_56_ladder;
            _2708 = frontier_phi_55_56_ladder_1;
        }
        float _2713 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2497 = (_2713 * _2704) + _1949;
        _2499 = (_2713 * _2706) + _1951;
        _2501 = (_2713 * _2708) + _1953;
        _2503 = ((_2698 * 0.039999999105930328369140625) * _2713) + _2282;
        _2505 = ((_2700 * 0.039999999105930328369140625) * _2713) + _2284;
        _2507 = ((_2702 * 0.039999999105930328369140625) * _2713) + _2286;
    }
    else
    {
        _2497 = _1949;
        _2499 = _1951;
        _2501 = _1953;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    float _4413 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4424 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4435 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    uint _2527 = _261 + 6u;
    float _2535 = _696 / cbSceneParam._m0[86u].x;
    float _2536 = _697 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2611 = _2610 / _630;
        float _2622 = _2611 * _681;
        float _2623 = _682 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _683;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2759 = 1.0 / cbSceneParam._m0[80u].x;
            float _2760 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2761 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            _2799 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2770 - _2771) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))))) * _2759)) - ((exp2(_2646 * _2770) - exp2(_2646 * _2771)) * _2759))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2555);
        _2648 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2810 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    float _2666 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2667 = _2666 == 3.0;
    float _2668 = log2(_2654);
    float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2497 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _762))) + ((_2503 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2499 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _762))) + ((_2505 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2501 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _762))) + ((_2507 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2686 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2527].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
}


