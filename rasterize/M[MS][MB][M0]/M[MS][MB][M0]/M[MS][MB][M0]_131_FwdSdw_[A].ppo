#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3916 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3927 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _517 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _520 = ((isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : min(_517, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _529 = (_520 - ((((((_510 - _511) * cbMtdParam._m0[24u].z) + _511) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _520))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3948 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _537 = (_530 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _538 = (_530 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _539 = (_530 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_553 - _554) * cbMtdParam._m0[24u].w) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3959 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _537) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _582) + _537;
    float _591 = ((((cbMtdParam._m0[10u].y - _538) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _582) + _538;
    float _592 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _539)) * _582) + _539;
    vec4 _606 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _613 = (_606.x * 2.0) + (-1.0);
    float _614 = (_606.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3970 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _623 = (_530 * (_606.z - _466)) + _466;
    float _626 = ((cbMtdParam._m0[23u].y - _623) * _582) + _623;
    vec4 _645 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _651 = (_645.x * 2.0) + (-1.0);
    float _652 = (_645.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3981 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _670 = (((_613 - _469) + (cbMtdParam._m0[21u].x * _469)) * _530) + _469;
    float _671 = (((_614 - _471) + (cbMtdParam._m0[21u].x * _471)) * _530) + _471;
    float _672 = (_530 * (sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) - _477)) + _477;
    float _683 = (((_651 - _670) + (_670 * cbMtdParam._m0[22u].z)) * _582) + _670;
    float _684 = (((_652 - _671) + (_671 * cbMtdParam._m0[22u].z)) * _582) + _671;
    float _685 = ((sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _672) * _582) + _672;
    float _687 = cbMtdParam._m0[22u].x + _490.w;
    float _690 = fma(_685, _240 * NORMAL.x, fma(_684, _247 * TANGENT.x, (_233 * _225) * _683));
    float _693 = fma(_685, _240 * NORMAL.y, fma(_684, _247 * TANGENT.y, (_233 * _226) * _683));
    float _696 = fma(_685, _240 * NORMAL.z, fma(_684, _247 * TANGENT.z, (_233 * _227) * _683));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _3992 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _704 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4014 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4025 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4036 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _722 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _4047 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _4058 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) - _950)) + _950) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _822 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _825 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _838 = _253 + 9u;
    uint _839 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_839].z;
    float _4069 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _863 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _859.x;
    float _864 = dot(vec3(_701, _702, _703), vec3(_780, _781, _782));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _701) - _780;
    float _872 = (_867 * _702) - _781;
    float _873 = (_867 * _703) - _782;
    float _877 = abs(dot(vec3(_780, _781, _782), vec3(_701, _702, _703)));
    float _4102 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_704);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _990 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _994 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1019 = _924 + _701;
        float _1020 = _928 + _702;
        float _1021 = _932 + _703;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_701, _702, _703), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4150 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_701, _702, _703), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4183 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_701, _702, _703), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4216 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1308 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1312 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1335 = _924 + _701;
        float _1336 = _928 + _702;
        float _1337 = _932 + _703;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_701, _702, _703), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4279 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_701, _702, _703), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4312 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_701, _702, _703), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4345 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1275)) + _1275;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _871 * 0.5;
    float _1642 = _872 * 0.5;
    float _1643 = _873 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1771 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1774 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1802 = frontier_phi_17_15_ladder;
        }
        float _1971;
        if (_1771 > 0.0)
        {
            _1971 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1971 = frontier_phi_26_22_ladder;
        }
        float _2266;
        if (_1774 > 0.0)
        {
            _2266 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2266 = frontier_phi_38_33_ladder;
        }
        float _2268 = isnan(_1971) ? _1802 : (isnan(_1802) ? _1971 : min(_1802, _1971));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1768) + _1757;
        float _2274 = (_2269 * _1771) + _1761;
        float _2275 = (_2269 * _1774) + _1765;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_16_38_ladder_2;
        _1792 = frontier_phi_16_38_ladder_1;
        _1794 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1710);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1866 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1869 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _1976;
        if (_1863 > 0.0)
        {
            _1976 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1976 = frontier_phi_28_24_ladder;
        }
        float _2293;
        if (_1866 > 0.0)
        {
            _2293 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2293 = frontier_phi_40_35_ladder;
        }
        float _2620;
        if (_1869 > 0.0)
        {
            _2620 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2620 = frontier_phi_50_47_ladder;
        }
        float _2622 = isnan(_2293) ? _1976 : (isnan(_1976) ? _2293 : min(_1976, _2293));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1863) + _1852;
        float _2628 = (_2623 * _1866) + _1856;
        float _2629 = (_2623 * _1869) + _1860;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_25_50_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_25_50_ladder_2;
        _1890 = frontier_phi_25_50_ladder_1;
        _1892 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1799);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_892 * _879)) * _863;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1963 = _1950 / _1962;
    float _1964 = _1954 / _1962;
    float _1965 = _1958 / _1962;
    float _2112;
    float _2113;
    float _2114;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1992 = ((uint(_1965 > cbSceneParam._m0[59u].y) + uint(_1965 > cbSceneParam._m0[59u].x)) + uint(_1965 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1993 = _1992 + 43u;
        uint _2001 = _1992 + 44u;
        uint _2009 = _1992 + 45u;
        uint _2017 = _1992 + 46u;
        float _2028 = fma(_1962, cbSceneParam._m0[_1993].w, fma(_1958, cbSceneParam._m0[_1993].z, fma(_1954, cbSceneParam._m0[_1993].y, _1950 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1962, cbSceneParam._m0[_2001].w, fma(_1958, cbSceneParam._m0[_2001].z, fma(_1954, cbSceneParam._m0[_2001].y, _1950 * cbSceneParam._m0[_2001].x)));
        float _2040 = fma(_1962, cbSceneParam._m0[_2017].w, fma(_1958, cbSceneParam._m0[_2017].z, fma(_1954, cbSceneParam._m0[_2017].y, _1950 * cbSceneParam._m0[_2017].x)));
        float _2045 = cbSceneParam._m0[33u].z * _2040;
        float _2047 = cbSceneParam._m0[33u].w * _2040;
        float _2050 = fma(_1962, cbSceneParam._m0[_2009].w, fma(_1958, cbSceneParam._m0[_2009].z, fma(_1954, cbSceneParam._m0[_2009].y, _1950 * cbSceneParam._m0[_2009].x))) / _2040;
        float _2098 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
        float _4471 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2105 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2028) / _2040, (_2047 + _2032) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2028) / _2040, (_2032 - _2045) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2045) / _2040, (_2032 - _2047) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2047) / _2040, (_2045 + _2032) / _2040), _2050), 0.0)).x), vec4(0.25)));
        _2112 = 1.0 - (_2105 * cbSceneParam._m0[34u].x);
        _2113 = 1.0 - (_2105 * cbSceneParam._m0[34u].y);
        _2114 = 1.0 - (_2105 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2112 = 1.0;
        _2113 = 1.0;
        _2114 = 1.0;
    }
    float _2178;
    float _2180;
    float _2182;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2166 = fma(_1962, cbSceneParam._m0[63u].w, fma(_1958, cbSceneParam._m0[63u].z, fma(_1954, cbSceneParam._m0[63u].y, _1950 * cbSceneParam._m0[63u].x)));
        float _2167 = fma(_1962, cbSceneParam._m0[60u].w, fma(_1958, cbSceneParam._m0[60u].z, fma(_1954, cbSceneParam._m0[60u].y, _1950 * cbSceneParam._m0[60u].x))) / _2166;
        float _2168 = fma(_1962, cbSceneParam._m0[61u].w, fma(_1958, cbSceneParam._m0[61u].z, fma(_1954, cbSceneParam._m0[61u].y, _1950 * cbSceneParam._m0[61u].x))) / _2166;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2167 >= cbSceneParam._m0[64u].x) && (_2168 >= cbSceneParam._m0[64u].y)) && (_2167 <= cbSceneParam._m0[64u].z)) && (_2168 <= cbSceneParam._m0[64u].w))
        {
            float _2306 = fma(_1962, cbSceneParam._m0[62u].w, fma(_1958, cbSceneParam._m0[62u].z, fma(_1954, cbSceneParam._m0[62u].y, _1950 * cbSceneParam._m0[62u].x))) / _2166;
            float _2310 = isnan(cbSceneParam._m0[41u].w) ? _2306 : (isnan(_2306) ? cbSceneParam._m0[41u].w : max(_2306, cbSceneParam._m0[41u].w));
            float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
            float _4487 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
            float _2360 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2167, cbSceneParam._m0[33u].w + _2168), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2167, _2168 - cbSceneParam._m0[33u].z), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].z, _2168 - cbSceneParam._m0[33u].w), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2168), _2310), 0.0)).x), vec4(0.25)));
            float _2364 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
            float _2365 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
            float _2366 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
            frontier_phi_37_36_ladder_1 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_37_36_ladder_2 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
        }
        else
        {
            frontier_phi_37_36_ladder = _2114;
            frontier_phi_37_36_ladder_1 = _2113;
            frontier_phi_37_36_ladder_2 = _2112;
        }
        _2178 = frontier_phi_37_36_ladder_2;
        _2180 = frontier_phi_37_36_ladder_1;
        _2182 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2178 = _2112;
        _2180 = _2113;
        _2182 = _2114;
    }
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _863 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_701, _702, _703));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_701, _702, _703));
    float _4523 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4534 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2178) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2180) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2182) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2265)
    {
        _2367 = _2257;
        _2369 = _2258;
        _2371 = _2259;
    }
    else
    {
        uint _2375 = _2189 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4545 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2394 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2257;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2258;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2259;
    }
    bool _2374 = _2263.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2374)
    {
        _2429 = _2367;
        _2431 = _2369;
        _2433 = _2371;
    }
    else
    {
        uint _2591 = _2189 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4561 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2610 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2429 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2367;
        _2431 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2369;
        _2433 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2371;
    }
    uint _2436 = _2189 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _704) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2189].x + _780;
    float _2452 = cbLight._m0[_2189].y + _781;
    float _2453 = cbLight._m0[_2189].z + _782;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2189].xyz));
    float _4577 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2465 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2466 = dot(vec3(_701, _702, _703), vec3(_2458, _2459, _2460));
    float _4599 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2458, _2459, _2460));
    float _4610 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2490 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2465 * ((_2464 * _2490) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2490) + _2450) * _2464))) * _2464;
    float _4621 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2517 = _2189 + 9u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _704) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2229].x + _780;
    float _2531 = cbLight._m0[_2229].y + _781;
    float _2532 = cbLight._m0[_2229].z + _782;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2229].xyz));
    float _4632 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2544 = dot(vec3(_701, _702, _703), vec3(_2537, _2538, _2539));
    float _4643 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2537, _2538, _2539));
    float _4654 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2529 * _2529;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2566 = 1.0 - _2529;
    float _2576 = (0.5 / (((_2465 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2566) + _2529) * _2543))) * _2543;
    float _4665 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    float _2588 = (((_2565 * cbLight._m0[_2517].x) * _2578) * _2212) + ((((cbLight._m0[_2436].x * _2178) * _2489) * _2503) * _2225);
    float _2589 = (((_2565 * cbLight._m0[_2517].y) * _2578) * _2212) + ((((cbLight._m0[_2436].y * _2180) * _2489) * _2503) * _2225);
    float _2590 = (((_2565 * cbLight._m0[_2517].z) * _2578) * _2212) + ((((cbLight._m0[_2436].z * _2182) * _2489) * _2503) * _2225);
    float _2646;
    float _2648;
    float _2650;
    if (_2265)
    {
        _2646 = _2588;
        _2648 = _2589;
        _2650 = _2590;
    }
    else
    {
        uint _2652 = _2189 + 2u;
        uint _2656 = _2189 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _704) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _780;
        float _2673 = cbLight._m0[_2652].y + _781;
        float _2674 = cbLight._m0[_2652].z + _782;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2652].xyz));
        float _4676 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2686 = dot(vec3(_701, _702, _703), vec3(_2679, _2680, _2681));
        float _4687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4698 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2465 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2708) + _2671) * _2685))) * _2685;
        float _4709 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2646 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2588;
        _2648 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2589;
        _2650 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2590;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2374)
    {
        _2752 = _2646;
        _2754 = _2648;
        _2756 = _2650;
    }
    else
    {
        uint _2763 = _2189 + 3u;
        uint _2767 = _2189 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _704) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _780;
        float _2784 = cbLight._m0[_2763].y + _781;
        float _2785 = cbLight._m0[_2763].z + _782;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2763].xyz));
        float _4725 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2797 = dot(vec3(_701, _702, _703), vec3(_2790, _2791, _2792));
        float _4736 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4747 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2818 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2819 = 1.0 - _2782;
        float _2829 = (0.5 / (((_2465 * ((_2796 * _2819) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2819) + _2782) * _2796))) * _2796;
        float _4758 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2752 = (((_2818 * cbLight._m0[_2767].x) * _2831) * _2832) + _2646;
        _2754 = (((_2818 * cbLight._m0[_2767].y) * _2831) * _2832) + _2648;
        _2756 = (((_2818 * cbLight._m0[_2767].z) * _2831) * _2832) + _2650;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2187.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2854)));
        float _2875 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            uint _3124 = 0u;
            uint _3133;
            bool _3134;
            for (;;)
            {
                _3133 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                _3134 = _3133 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3134)
                {
                    frontier_phi_71_pred = _3123;
                    frontier_phi_71_pred_1 = _3122;
                    frontier_phi_71_pred_2 = _3121;
                    frontier_phi_71_pred_3 = _3120;
                    frontier_phi_71_pred_4 = _3119;
                    frontier_phi_71_pred_5 = _3118;
                }
                else
                {
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    uint _3269;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3133;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    for (;;)
                    {
                        uint _3273 = uint(findLSB(_3269)) + (_3124 << 5u);
                        uint _3270 = (_3269 + 4294967295u) & _3269;
                        uint _3275 = _3273 * 48u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3295 = (_3273 * 48u) + 4u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3314 = (_3273 * 48u) + 8u;
                        vec3 _3325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x));
                        float _3329 = _3289.x - _1963;
                        float _3330 = _3289.y - _1964;
                        float _3331 = _3289.z - _1965;
                        float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                        float _3335 = inversesqrt(_3332);
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3339 = dot(vec3(_819, _822, _825), vec3(_3336, _3337, _3338));
                        float _3344 = 1.0 - (_3332 * _3289.w);
                        float _4784 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3346 = sqrt(_3332) * _3308.w;
                        float _3349 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3339) + _3350;
                        float _3356 = _3346 * _3346;
                        float _3360 = ((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3345) / ((_3356 * 0.699999988079071044921875) + 1.0);
                        float _3364 = (-0.0) - _1963;
                        float _3365 = (-0.0) - _1964;
                        float _3366 = (-0.0) - _1965;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3380 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _879;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3371 + _3336;
                        float _3392 = _3372 + _3337;
                        float _3393 = _3373 + _3338;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_819, _822, _825), vec3(_3371, _3372, _3373));
                        float _4800 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3405 = dot(vec3(_819, _822, _825), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4811 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3349 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3339) + _3414;
                        float _4822 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4833 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3412 * _3412) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125))) * _3345;
                        _3193 = (_3360 * _3308.x) + _3266;
                        _3194 = (_3360 * _3308.y) + _3267;
                        _3195 = (_3360 * _3308.z) + _3268;
                        _3190 = (_3440 * _3325.x) + _3263;
                        _3191 = (_3440 * _3325.y) + _3264;
                        _3192 = (_3440 * _3325.z) + _3265;
                        if (_3270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3270;
                        }
                    }
                    frontier_phi_71_pred = _3195;
                    frontier_phi_71_pred_1 = _3194;
                    frontier_phi_71_pred_2 = _3193;
                    frontier_phi_71_pred_3 = _3192;
                    frontier_phi_71_pred_4 = _3191;
                    frontier_phi_71_pred_5 = _3190;
                }
                _2976 = frontier_phi_71_pred;
                _2974 = frontier_phi_71_pred_1;
                _2972 = frontier_phi_71_pred_2;
                _2970 = frontier_phi_71_pred_3;
                _2968 = frontier_phi_71_pred_4;
                _2966 = frontier_phi_71_pred_5;
                uint _3125 = _3124 + 1u;
                if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3118 = _2966;
                    _3119 = _2968;
                    _3120 = _2970;
                    _3121 = _2972;
                    _3122 = _2974;
                    _3123 = _2976;
                    _3124 = _3125;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((4294967295u << _2982) & _2885) == 0u)
        {
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
        }
        else
        {
            float _3111 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _3112 = _3111 * _1963;
            float _3113 = _3111 * _1964;
            float _3114 = _3111 * _1965;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3246 = _2965;
                float _3247 = _2967;
                float _3248 = _2969;
                float _3249 = _2971;
                float _3250 = _2973;
                float _3251 = _2975;
                uint _3252 = _2982;
                uint _3261;
                bool _3262;
                for (;;)
                {
                    _3261 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                    _3262 = _3261 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3262)
                    {
                        frontier_phi_82_pred = _3251;
                        frontier_phi_82_pred_1 = _3250;
                        frontier_phi_82_pred_2 = _3249;
                        frontier_phi_82_pred_3 = _3248;
                        frontier_phi_82_pred_4 = _3247;
                        frontier_phi_82_pred_5 = _3246;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        float _3470 = _3249;
                        float _3471 = _3250;
                        float _3472 = _3251;
                        uint _3473 = _3261;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3542;
                        vec4 _3558;
                        float _3604;
                        bool _3605;
                        for (;;)
                        {
                            uint _3484 = ((_3252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3529 = (_3484 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3545 = (_3484 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3484 * 40u) + 24u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3579 = (_3484 * 40u) + 28u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3604 = fma(_1965, _3592.z, fma(_1964, _3592.y, _3592.x * _1963)) + _3592.w;
                            _3605 = !((fma(_1965, _3573.z, fma(_1964, _3573.y, _3573.x * _1963)) + _3573.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3605)
                            {
                                float _3632 = _3499.x - _1963;
                                float _3633 = _3499.y - _1964;
                                float _3634 = _3499.z - _1965;
                                float _3635 = dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634));
                                float _3638 = inversesqrt(_3635);
                                float _3639 = _3638 * _3632;
                                float _3640 = _3638 * _3633;
                                float _3641 = _3638 * _3634;
                                float _3645 = 1.0 - (_3635 / (_3500 * _3500));
                                float _4844 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3650 = sqrt(_3635) * _3515.w;
                                float _3652 = 1.39999997615814208984375 / (_3650 + 1.39999997615814208984375);
                                float _3653 = _3652 * _3652;
                                float _3656 = ((1.0 - _3653) * dot(vec3(_3639, _3640, _3641), vec3(_819, _822, _825))) + _3653;
                                float _3659 = _3650 * _3650;
                                float _3663 = (fma(_1965, _3542.z, fma(_1964, _3542.y, _3542.x * _1963)) + _3542.w) / _3604;
                                float _3664 = (fma(_1965, _3558.z, fma(_1964, _3558.y, _3558.x * _1963)) + _3558.w) / _3604;
                                float _3668 = 1.0 - dot(vec2(_3663, _3664), vec2(_3663, _3664));
                                float _4860 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3670 = _3669 * (((isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0))) * _3646) / ((_3659 * 0.699999988079071044921875) + 1.0));
                                float _3682 = exp2(log2(1.0 / ((_3659 * 3.5) + 5.0)) * 0.25);
                                float _3683 = 1.0 - _879;
                                float _3690 = sqrt(1.0 - ((1.0 - (_3683 * _3683)) * (1.0 - (_3682 * _3682))));
                                float _3691 = _3690 * _3690;
                                float _3692 = _3691 * _3691;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3695 = _3641 - _3114;
                                float _3699 = inversesqrt(dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695)));
                                float _3703 = dot(vec3(_819, _822, _825), vec3((-0.0) - _3112, (-0.0) - _3113, (-0.0) - _3114));
                                float _4871 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3707 = dot(vec3(_819, _822, _825), vec3(_3699 * _3693, _3699 * _3694, _3699 * _3695));
                                float _4882 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3714 = ((_3710 * _3710) * (_3692 + (-1.0))) + 1.0;
                                float _3715 = _3652 * _3691;
                                float _3716 = _3715 * _3715;
                                float _3722 = ((1.0 - _3716) * dot(vec3(_819, _822, _825), vec3(_3639, _3640, _3641))) + _3716;
                                float _4893 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3724 = 1.0 - _3691;
                                float _3734 = (0.5 / (((_3723 * ((_3706 * _3724) + _3691)) + 9.9999999392252902907785028219223e-09) + (((_3723 * _3724) + _3691) * _3706))) * _3723;
                                float _4904 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3744 = (_3669 * _3646) * (((_3692 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3714 * _3714) * ((_3659 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3670 * _3515.z;
                                frontier_phi_88_pred_1 = _3670 * _3515.y;
                                frontier_phi_88_pred_2 = _3670 * _3515.x;
                                frontier_phi_88_pred_3 = _3744 * _3527.z;
                                frontier_phi_88_pred_4 = _3744 * _3527.y;
                                frontier_phi_88_pred_5 = _3744 * _3527.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3753 = frontier_phi_88_pred;
                            _3752 = frontier_phi_88_pred_1;
                            _3751 = frontier_phi_88_pred_2;
                            _3750 = frontier_phi_88_pred_3;
                            _3749 = frontier_phi_88_pred_4;
                            _3748 = frontier_phi_88_pred_5;
                            _3457 = _3751 + _3470;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3459;
                        frontier_phi_82_pred_1 = _3458;
                        frontier_phi_82_pred_2 = _3457;
                        frontier_phi_82_pred_3 = _3456;
                        frontier_phi_82_pred_4 = _3455;
                        frontier_phi_82_pred_5 = _3454;
                    }
                    _3097 = frontier_phi_82_pred;
                    _3095 = frontier_phi_82_pred_1;
                    _3093 = frontier_phi_82_pred_2;
                    _3091 = frontier_phi_82_pred_3;
                    _3089 = frontier_phi_82_pred_4;
                    _3087 = frontier_phi_82_pred_5;
                    uint _3253 = _3252 + 1u;
                    if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3246 = _3087;
                        _3247 = _3089;
                        _3248 = _3091;
                        _3249 = _3093;
                        _3250 = _3095;
                        _3251 = _3097;
                        _3252 = _3253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3093;
                frontier_phi_63_64_ladder_1 = _3097;
                frontier_phi_63_64_ladder_2 = _3095;
                frontier_phi_63_64_ladder_3 = _3091;
                frontier_phi_63_64_ladder_4 = _3089;
                frontier_phi_63_64_ladder_5 = _3087;
            }
            else
            {
                frontier_phi_63_64_ladder = _2971;
                frontier_phi_63_64_ladder_1 = _2975;
                frontier_phi_63_64_ladder_2 = _2973;
                frontier_phi_63_64_ladder_3 = _2969;
                frontier_phi_63_64_ladder_4 = _2967;
                frontier_phi_63_64_ladder_5 = _2965;
            }
            _3086 = frontier_phi_63_64_ladder_5;
            _3088 = frontier_phi_63_64_ladder_4;
            _3090 = frontier_phi_63_64_ladder_3;
            _3092 = frontier_phi_63_64_ladder;
            _3094 = frontier_phi_63_64_ladder_2;
            _3096 = frontier_phi_63_64_ladder_1;
        }
        float _3101 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2898 = (_3101 * _3092) + _2429;
        _2900 = (_3101 * _3094) + _2431;
        _2902 = (_3101 * _3096) + _2433;
        _2904 = ((_3086 * 0.039999999105930328369140625) * _3101) + _2752;
        _2906 = ((_3088 * 0.039999999105930328369140625) * _3101) + _2754;
        _2908 = ((_3090 * 0.039999999105930328369140625) * _3101) + _2756;
    }
    else
    {
        _2898 = _2429;
        _2900 = _2431;
        _2902 = _2433;
        _2904 = _2752;
        _2906 = _2754;
        _2908 = _2756;
    }
    float _4920 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4931 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4942 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2925 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2898 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _863))) + ((_2904 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2926 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2900 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _863))) + ((_2906 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2927 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2902 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _863))) + ((_2908 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2928 = _253 + 6u;
    float _2936 = _800 / cbSceneParam._m0[86u].x;
    float _2937 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2951 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, (log2((isnan(cbSceneParam._m0[77u].w) ? _722 : (isnan(_722) ? cbSceneParam._m0[77u].w : min(_722, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2953 = _2951.x;
    float _2954 = _2951.y;
    float _2955 = _2951.z;
    float _2956 = _2951.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_722 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_722) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _722 : min(cbSceneParam._m0[80u].w, _722));
        float _2991 = _2990 / _722;
        float _3002 = _2991 * _773;
        float _3003 = _774 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3006 = _2991 * _775;
        float _3008 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3003;
        float _3016 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3203;
        if (abs((_3004 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3203 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3147 = 1.0 / cbSceneParam._m0[80u].x;
            float _3148 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3149 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            _3203 = ((abs(_3016 / _3004) * cbSceneParam._m0[80u].y) * ((((_3158 - _3159) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))))) * _3147)) - ((exp2(_3026 * _3158) - exp2(_3026 * _3159)) * _3147))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3205 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, 1.0), 0.0);
        float _3214 = exp2((_3203 * (-1.44269502162933349609375)) * (1.0 - _3205.w));
        float _3215 = log2(_3214);
        float _3231 = log2(_2956);
        _3028 = (exp2(_3231 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].x)) * _3205.x) / cbSceneParam._m0[78u].x)) + _2953;
        _3030 = (exp2(_3231 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].y)) * _3205.y) / cbSceneParam._m0[78u].y)) + _2954;
        _3032 = (exp2(_3231 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].z)) * _3205.z) / cbSceneParam._m0[78u].z)) + _2955;
        _3034 = _3214 * _2956;
    }
    else
    {
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
        _3034 = _2956;
    }
    bool _3241;
    vec4 _3044;
    vec4 _3066;
    float _3068;
    float _3072;
    float _3073;
    float _3074;
    float _3075;
    bool _3085;
    for (;;)
    {
        _3044 = cbMatDynParam._m0[0u];
        float _3046 = roundEven(_3044.y);
        bool _3047 = _3046 == 3.0;
        float _3048 = log2(_3034);
        float _3055 = exp2(_3048 * cbSceneParam._m0[78u].x) * _2925;
        float _3056 = exp2(_3048 * cbSceneParam._m0[78u].y) * _2926;
        float _3057 = exp2(_3048 * cbSceneParam._m0[78u].z) * _2927;
        float _3064 = _789 + (-0.5);
        _3066 = cbMtdParam._m0[1u];
        _3068 = _3066.y * _3064;
        float _3071 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3072 = _3071 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = _3071 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
        _3074 = _3071 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
        _3075 = _3064 * 0.999000012874603271484375;
        _3085 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3085)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3075) < 0.5)
            {
                _3241 = true;
                break;
            }
        }
        uint _3182 = _838 + uint(_3044.w);
        if ((cbInstanceData._m0[_3182].w < 1.0) && ((cbInstanceData._m0[_3182].w + _3075) < 0.5))
        {
            _3241 = true;
            break;
        }
        if ((_3068 + 1.0) < _3066.x)
        {
            _3241 = true;
            break;
        }
        _3241 = false;
        break;
    }
    float _3445;
    if (_3241)
    {
        discard_state = true;
        _3445 = 0.0;
    }
    else
    {
        _3445 = cbInstanceData._m0[_2928].w;
    }
    SV_Target.x = _3072;
    SV_Target.y = _3073;
    SV_Target.z = _3074;
    SV_Target.w = _3445;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2928].w;
    discard_exit();
}


