#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3530;
float _3531;
float _3532;
float _3533;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _343 = _341.x;
    float _353 = dot(vec4(_343, _341.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _370 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_343 - _353) * cbMtdParam._m0[24u].x) + _353) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3542 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _378 = (_371 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _379 = (_371 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _380 = (_371 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _429 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _443 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_419 - _429) * cbMtdParam._m0[24u].x) + _429) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3553 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _451 = (_444 * ((_397.x * cbMtdParam._m0[13u].x) - _378)) + _378;
    float _452 = (_444 * ((_397.y * cbMtdParam._m0[13u].y) - _379)) + _379;
    float _453 = (_444 * ((_397.z * cbMtdParam._m0[13u].z) - _380)) + _380;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _487 = _483.z;
    float _494 = ((_466.x - _485) * _371) + _485;
    float _495 = ((_466.y - _486) * _371) + _486;
    float _496 = ((_466.z - _487) * _371) + _487;
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _521 = ((_508.z - _496) * _444) + _496;
    float _524 = ((((_508.x - _494) * _444) + _494) * 2.0) + (-1.0);
    float _526 = ((((_508.y - _495) * _444) + _495) * 2.0) + (-1.0);
    float _527 = dot(vec2(_524, _526), vec2(_524, _526));
    float _3564 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _558 = (((_546.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _524;
    float _559 = (((_546.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _526;
    float _563 = (cbMtdParam._m0[19u].w * (_546.z - _521)) + _521;
    float _568 = cbMtdParam._m0[22u].x + _546.w;
    float _571 = fma(_532, _221 * NORMAL.x, fma(_559, _228 * TANGENT.x, (_214 * _206) * _558));
    float _574 = fma(_532, _221 * NORMAL.y, fma(_559, _228 * TANGENT.y, (_214 * _207) * _558));
    float _577 = fma(_532, _221 * NORMAL.z, fma(_559, _228 * TANGENT.z, (_214 * _208) * _558));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3575 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _585 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3597 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3608 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3619 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _825 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _831 = (cbMatDynParam._m0[5u].x * _825) + cbMatDynParam._m0[5u].y;
        float _3630 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _836 = (cbMatDynParam._m0[5u].z * _825) + cbMatDynParam._m0[5u].w;
        float _3641 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) - _832)) + _832) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _701 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _704 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _707 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    uint _720 = _234 + 9u;
    uint _721 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3652 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _745 = ((isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * TEXCOORD_5.w) * _741.x;
    float _746 = dot(vec3(_582, _583, _584), vec3(_662, _663, _664));
    float _749 = _746 * 2.0;
    float _753 = (_749 * _582) - _662;
    float _754 = (_749 * _583) - _663;
    float _755 = (_749 * _584) - _664;
    float _759 = abs(dot(vec3(_662, _663, _664), vec3(_582, _583, _584)));
    float _3685 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _761 = sqrt(_585);
    float _774 = exp2((_761 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_814, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806));
        float _873 = fma(_814, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806));
        float _877 = fma(_814, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806));
        float _902 = _806 + _582;
        float _903 = _810 + _583;
        float _904 = _814 + _584;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_582, _583, _584), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3733 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_582, _583, _584), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3766 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_582, _583, _584), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3799 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1186 = fma(_814, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _806));
        float _1190 = fma(_814, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _806));
        float _1194 = fma(_814, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _806));
        float _1217 = _806 + _582;
        float _1218 = _810 + _583;
        float _1219 = _814 + _584;
        float _1229 = fma(_1219, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217)) - _1186;
        float _1230 = fma(_1219, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217)) - _1190;
        float _1231 = fma(_1219, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217)) - _1194;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1186 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1190 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[35u].z) + ((((((_1194 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1285 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1252.x + (-0.5));
        float _1287 = _1285 * (_1252.y + (-0.5));
        float _1288 = _1285 * (_1252.z + (-0.5));
        float _1295 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1259.x + (-0.5));
        float _1297 = _1295 * (_1259.y + (-0.5));
        float _1298 = _1295 * (_1259.z + (-0.5));
        float _1305 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1266.x + (-0.5));
        float _1307 = _1305 * (_1266.y + (-0.5));
        float _1308 = _1305 * (_1266.z + (-0.5));
        float _1315 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1273.x + (-0.5));
        float _1317 = _1315 * (_1273.y + (-0.5));
        float _1318 = _1315 * (_1273.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_582, _583, _584), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3862 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1349 + 1.0))) + _1354) * _1319;
        float _1364 = _1287 * 0.5;
        float _1365 = _1297 * 0.5;
        float _1366 = _1307 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_582, _583, _584), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3895 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1391 + 1.0))) + _1396) * _1320;
        float _1406 = _1288 * 0.5;
        float _1407 = _1298 * 0.5;
        float _1408 = _1308 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_582, _583, _584), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3928 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1433 + 1.0))) + _1438) * _1321;
        _1455 = _1288;
        _1456 = _1287;
        _1457 = _1286;
        _1458 = _1298;
        _1459 = _1297;
        _1460 = _1296;
        _1461 = _1308;
        _1462 = _1307;
        _1463 = _1306;
        _1464 = _1321;
        _1465 = _1320;
        _1466 = _1319;
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1145;
        _1456 = _1145;
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1157)) + _1157;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1158)) + _1158;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1159)) + _1159;
    float _1502 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1479));
    float _1523 = _753 * 0.5;
    float _1524 = _754 * 0.5;
    float _1525 = _755 * 0.5;
    float _1526 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1529 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1532 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1566;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1539 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1543 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1547 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1554 = dot(vec4(cbModelParam._m0[39u]), vec4(_1523, _1524, _1525, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1577;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1568 = dot(vec4(cbModelParam._m0[40u]), vec4(_1523, _1524, _1525, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1581 = (_1577 * cbModelParam._m0[1u].x) + (_1566 * (1.0 - cbModelParam._m0[1u].x));
    float _1591 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _585);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1591 : min(cbModelParam._m0[25u].z, _1591));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_814, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_814, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_814, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_755, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753));
        float _1655 = fma(_755, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753));
        float _1658 = fma(_755, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1686 = frontier_phi_17_15_ladder;
        }
        float _1909;
        if (_1655 > 0.0)
        {
            _1909 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1909 = frontier_phi_26_22_ladder;
        }
        float _2155;
        if (_1658 > 0.0)
        {
            _2155 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2155 = frontier_phi_38_33_ladder;
        }
        float _2157 = isnan(_1909) ? _1686 : (isnan(_1686) ? _1909 : min(_1686, _1909));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1652) + _1641;
        float _2163 = (_2158 * _1655) + _1645;
        float _2164 = (_2158 * _1658) + _1649;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1592);
            frontier_phi_16_38_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_16_38_ladder_2;
        _1676 = frontier_phi_16_38_ladder_1;
        _1678 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_753, _754, _755), _1592);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _585);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1738 = fma(_814, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806)) + cbModelParam._m0[21u].w;
        float _1742 = fma(_814, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806)) + cbModelParam._m0[22u].w;
        float _1746 = fma(_814, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806)) + cbModelParam._m0[23u].w;
        float _1749 = fma(_755, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753));
        float _1752 = fma(_755, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753));
        float _1755 = fma(_755, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753));
        float _1914;
        if (_1749 > 0.0)
        {
            _1914 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1914 = frontier_phi_28_24_ladder;
        }
        float _2182;
        if (_1752 > 0.0)
        {
            _2182 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2182 = frontier_phi_40_35_ladder;
        }
        float _2387;
        if (_1755 > 0.0)
        {
            _2387 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2387 = frontier_phi_49_46_ladder;
        }
        float _2389 = isnan(_2182) ? _1914 : (isnan(_1914) ? _2182 : min(_1914, _2182));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1749) + _1738;
        float _2395 = (_2390 * _1752) + _1742;
        float _2396 = (_2390 * _1755) + _1746;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_25_49_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1774 = frontier_phi_25_49_ladder_2;
        _1776 = frontier_phi_25_49_ladder_1;
        _1778 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_753, _754, _755), _1683);
        _1774 = _1758.x * cbModelParam._m0[1u].z;
        _1776 = _1758.y * cbModelParam._m0[1u].z;
        _1778 = _1758.z * cbModelParam._m0[1u].z;
    }
    float _1790 = ((((1.0 - _774) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_774 * _761)) * _745;
    float _1791 = _1790 * ((cbModelParam._m0[1u].w * (_1774 - _1674)) + _1674);
    float _1792 = _1790 * ((cbModelParam._m0[1u].w * (_1776 - _1676)) + _1676);
    float _1793 = _1790 * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1796 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1791 * cbSceneParam._m0[91u].x));
    vec4 _1810 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_682, _683));
    float _1812 = _1810.w;
    float _1824 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1812);
    float _1825 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1812);
    float _1826 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1812);
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _745 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1868 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1872 = _1832 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_582, _583, _584));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_582, _583, _584));
    float _4064 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4075 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1849].x * _1855) * _1893) + (((cbLight._m0[_1859].x * _1824) * _1868) * _1891);
    float _1901 = ((_1855 * cbLight._m0[_1849].y) * _1893) + (((cbLight._m0[_1859].y * _1825) * _1868) * _1891);
    float _1902 = ((_1855 * cbLight._m0[_1849].z) * _1893) + (((cbLight._m0[_1859].z * _1826) * _1868) * _1891);
    uvec4 _1906 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1908 = _1906.x == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1908)
    {
        _1919 = _1900;
        _1921 = _1901;
        _1923 = _1902;
    }
    else
    {
        uint _1927 = _1832 + 6u;
        float _1943 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4086 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1946 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1919 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1900;
        _1921 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1901;
        _1923 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1902;
    }
    bool _1926 = _1906.y == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1926)
    {
        _1964 = _1919;
        _1966 = _1921;
        _1968 = _1923;
    }
    else
    {
        uint _2126 = _1832 + 7u;
        float _2142 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4102 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2145 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1964 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _1919;
        _1966 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _1921;
        _1968 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _1923;
    }
    uint _1971 = _1832 + 8u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _585) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1832].x + _662;
    float _1987 = cbLight._m0[_1832].y + _663;
    float _1988 = cbLight._m0[_1832].z + _664;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1832].xyz));
    float _4118 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2000 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2001 = dot(vec3(_582, _583, _584), vec3(_1993, _1994, _1995));
    float _4140 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1993, _1994, _1995));
    float _4151 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1985 * _1985;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1985;
    float _2036 = (0.5 / (((_2000 * ((_1999 * _2025) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2025) + _1985) * _1999))) * _1999;
    float _4162 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    uint _2052 = _1832 + 9u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _585) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1872].x + _662;
    float _2066 = cbLight._m0[_1872].y + _663;
    float _2067 = cbLight._m0[_1872].z + _664;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1872].xyz));
    float _4173 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2079 = dot(vec3(_582, _583, _584), vec3(_2072, _2073, _2074));
    float _4184 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2072, _2073, _2074));
    float _4195 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2064 * _2064;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = 1.0 - _2064;
    float _2111 = (0.5 / (((_2000 * ((_2078 * _2101) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2101) + _2064) * _2078))) * _2078;
    float _4206 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    float _2123 = (((_2100 * cbLight._m0[_2052].x) * _2113) * _1855) + ((((cbLight._m0[_1971].x * _1824) * _2024) * _2038) * _1868);
    float _2124 = (((_2100 * cbLight._m0[_2052].y) * _2113) * _1855) + ((((cbLight._m0[_1971].y * _1825) * _2024) * _2038) * _1868);
    float _2125 = (((_2100 * cbLight._m0[_2052].z) * _2113) * _1855) + ((((cbLight._m0[_1971].z * _1826) * _2024) * _2038) * _1868);
    float _2187;
    float _2189;
    float _2191;
    if (_1908)
    {
        _2187 = _2123;
        _2189 = _2124;
        _2191 = _2125;
    }
    else
    {
        uint _2193 = _1832 + 2u;
        uint _2197 = _1832 + 10u;
        float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _585) * 0.949999988079071044921875);
        float _2212 = _2211 * _2211;
        float _2213 = cbLight._m0[_2193].x + _662;
        float _2214 = cbLight._m0[_2193].y + _663;
        float _2215 = cbLight._m0[_2193].z + _664;
        float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
        float _2220 = _2219 * _2213;
        float _2221 = _2219 * _2214;
        float _2222 = _2219 * _2215;
        float _2223 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2193].xyz));
        float _4217 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2227 = dot(vec3(_582, _583, _584), vec3(_2220, _2221, _2222));
        float _4228 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2220, _2221, _2222));
        float _4239 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2235 = _2212 * _2212;
        float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
        float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2249 = 1.0 - _2212;
        float _2259 = (0.5 / (((_2000 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2249) + _2212) * _2226))) * _2226;
        float _4250 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2187 = (((_2248 * cbLight._m0[_2197].x) * _2261) * _2262) + _2123;
        _2189 = (((_2248 * cbLight._m0[_2197].y) * _2261) * _2262) + _2124;
        _2191 = (((_2248 * cbLight._m0[_2197].z) * _2261) * _2262) + _2125;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1926)
    {
        _2297 = _2187;
        _2299 = _2189;
        _2301 = _2191;
    }
    else
    {
        uint _2308 = _1832 + 3u;
        uint _2312 = _1832 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _585) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _662;
        float _2329 = cbLight._m0[_2308].y + _663;
        float _2330 = cbLight._m0[_2308].z + _664;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2308].xyz));
        float _4266 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2342 = dot(vec3(_582, _583, _584), vec3(_2335, _2336, _2337));
        float _4277 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4288 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2000 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2364) + _2327) * _2341))) * _2341;
        float _4299 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2297 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2187;
        _2299 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2189;
        _2301 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2191;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1830.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            uint _2759 = 0u;
            uint _2768;
            bool _2769;
            for (;;)
            {
                _2768 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                _2769 = _2768 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2769)
                {
                    frontier_phi_66_pred = _2753;
                    frontier_phi_66_pred_1 = _2758;
                    frontier_phi_66_pred_2 = _2757;
                    frontier_phi_66_pred_3 = _2756;
                    frontier_phi_66_pred_4 = _2755;
                    frontier_phi_66_pred_5 = _2754;
                }
                else
                {
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    uint _2904;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2768;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2908 = uint(findLSB(_2904)) + (_2759 << 5u);
                        uint _2905 = (_2904 + 4294967295u) & _2904;
                        uint _2910 = _2908 * 48u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2930 = (_2908 * 48u) + 4u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2949 = (_2908 * 48u) + 8u;
                        vec3 _2960 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x));
                        float _2964 = _2924.x - _2453;
                        float _2965 = _2924.y - _2454;
                        float _2966 = _2924.z - _2455;
                        float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                        float _2970 = inversesqrt(_2967);
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2974 = dot(vec3(_701, _704, _707), vec3(_2971, _2972, _2973));
                        float _2979 = 1.0 - (_2967 * _2924.w);
                        float _4325 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _2981 = sqrt(_2967) * _2943.w;
                        float _2984 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2974) + _2985;
                        float _2991 = _2981 * _2981;
                        float _2995 = ((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2980) / ((_2991 * 0.699999988079071044921875) + 1.0);
                        float _2999 = (-0.0) - _2453;
                        float _3000 = (-0.0) - _2454;
                        float _3001 = (-0.0) - _2455;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3016 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                        float _3017 = 1.0 - _761;
                        float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                        float _3025 = _3024 * _3024;
                        float _3026 = _3025 * _3025;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3037 = dot(vec3(_701, _704, _707), vec3(_3006, _3007, _3008));
                        float _4341 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3041 = dot(vec3(_701, _704, _707), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                        float _4352 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                        float _3049 = _2984 * _3025;
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _2974) + _3050;
                        float _4363 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3055 = 1.0 - _3025;
                        float _3065 = (0.5 / (((_3054 * ((_3040 * _3055) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3025) * _3040))) * _3054;
                        float _4374 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3076 = (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3048 * _3048) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125))) * _2980;
                        _2828 = (_2995 * _2943.x) + _2901;
                        _2829 = (_2995 * _2943.y) + _2902;
                        _2830 = (_2995 * _2943.z) + _2903;
                        _2825 = (_3076 * _2960.x) + _2898;
                        _2826 = (_3076 * _2960.y) + _2899;
                        _2827 = (_3076 * _2960.z) + _2900;
                        if (_2905 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2905;
                        }
                    }
                    frontier_phi_66_pred = _2825;
                    frontier_phi_66_pred_1 = _2830;
                    frontier_phi_66_pred_2 = _2829;
                    frontier_phi_66_pred_3 = _2828;
                    frontier_phi_66_pred_4 = _2827;
                    frontier_phi_66_pred_5 = _2826;
                }
                _2601 = frontier_phi_66_pred;
                _2611 = frontier_phi_66_pred_1;
                _2609 = frontier_phi_66_pred_2;
                _2607 = frontier_phi_66_pred_3;
                _2605 = frontier_phi_66_pred_4;
                _2603 = frontier_phi_66_pred_5;
                uint _2760 = _2759 + 1u;
                if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2753 = _2601;
                    _2754 = _2603;
                    _2755 = _2605;
                    _2756 = _2607;
                    _2757 = _2609;
                    _2758 = _2611;
                    _2759 = _2760;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
        }
        else
        {
            float _2746 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2747 = _2746 * _2453;
            float _2748 = _2746 * _2454;
            float _2749 = _2746 * _2455;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2881 = _2600;
                float _2882 = _2602;
                float _2883 = _2604;
                float _2884 = _2606;
                float _2885 = _2608;
                float _2886 = _2610;
                uint _2887 = _2617;
                uint _2896;
                bool _2897;
                for (;;)
                {
                    _2896 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                    _2897 = _2896 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2897)
                    {
                        frontier_phi_77_pred = _2886;
                        frontier_phi_77_pred_1 = _2885;
                        frontier_phi_77_pred_2 = _2884;
                        frontier_phi_77_pred_3 = _2883;
                        frontier_phi_77_pred_4 = _2882;
                        frontier_phi_77_pred_5 = _2881;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        uint _3109 = _2896;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3193;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3120 = ((_2887 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3120 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3120 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3120 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2455, _3227.z, fma(_2454, _3227.y, _3227.x * _2453)) + _3227.w;
                            _3240 = !((fma(_2455, _3208.z, fma(_2454, _3208.y, _3208.x * _2453)) + _3208.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3135.x - _2453;
                                float _3268 = _3135.y - _2454;
                                float _3269 = _3135.z - _2455;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3136 * _3136));
                                float _4385 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3285 = sqrt(_3270) * _3151.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_701, _704, _707))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2455, _3178.z, fma(_2454, _3178.y, _3178.x * _2453)) + _3178.w) / _3239;
                                float _3299 = (fma(_2455, _3193.z, fma(_2454, _3193.y, _3193.x * _2453)) + _3193.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4401 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _761;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2747;
                                float _3329 = _3275 - _2748;
                                float _3330 = _3276 - _2749;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_701, _704, _707), vec3((-0.0) - _2747, (-0.0) - _2748, (-0.0) - _2749));
                                float _4412 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3342 = dot(vec3(_701, _704, _707), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4423 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_701, _704, _707), vec3(_3274, _3275, _3276))) + _3351;
                                float _4434 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4445 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3305 * _3151.y;
                                frontier_phi_83_pred_1 = _3305 * _3151.x;
                                frontier_phi_83_pred_2 = _3379 * _3163.z;
                                frontier_phi_83_pred_3 = _3379 * _3163.y;
                                frontier_phi_83_pred_4 = _3379 * _3163.x;
                                frontier_phi_83_pred_5 = _3305 * _3151.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_83_pred;
                            _3386 = frontier_phi_83_pred_1;
                            _3385 = frontier_phi_83_pred_2;
                            _3384 = frontier_phi_83_pred_3;
                            _3383 = frontier_phi_83_pred_4;
                            _3388 = frontier_phi_83_pred_5;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3095;
                        frontier_phi_77_pred_1 = _3094;
                        frontier_phi_77_pred_2 = _3093;
                        frontier_phi_77_pred_3 = _3092;
                        frontier_phi_77_pred_4 = _3091;
                        frontier_phi_77_pred_5 = _3090;
                    }
                    _2732 = frontier_phi_77_pred;
                    _2730 = frontier_phi_77_pred_1;
                    _2728 = frontier_phi_77_pred_2;
                    _2726 = frontier_phi_77_pred_3;
                    _2724 = frontier_phi_77_pred_4;
                    _2722 = frontier_phi_77_pred_5;
                    uint _2888 = _2887 + 1u;
                    if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2881 = _2722;
                        _2882 = _2724;
                        _2883 = _2726;
                        _2884 = _2728;
                        _2885 = _2730;
                        _2886 = _2732;
                        _2887 = _2888;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2726;
                frontier_phi_58_59_ladder_1 = _2732;
                frontier_phi_58_59_ladder_2 = _2730;
                frontier_phi_58_59_ladder_3 = _2728;
                frontier_phi_58_59_ladder_4 = _2724;
                frontier_phi_58_59_ladder_5 = _2722;
            }
            else
            {
                frontier_phi_58_59_ladder = _2604;
                frontier_phi_58_59_ladder_1 = _2610;
                frontier_phi_58_59_ladder_2 = _2608;
                frontier_phi_58_59_ladder_3 = _2606;
                frontier_phi_58_59_ladder_4 = _2602;
                frontier_phi_58_59_ladder_5 = _2600;
            }
            _2721 = frontier_phi_58_59_ladder_5;
            _2723 = frontier_phi_58_59_ladder_4;
            _2725 = frontier_phi_58_59_ladder;
            _2727 = frontier_phi_58_59_ladder_3;
            _2729 = frontier_phi_58_59_ladder_2;
            _2731 = frontier_phi_58_59_ladder_1;
        }
        float _2736 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
        _2512 = (_2736 * _2727) + _1964;
        _2514 = (_2736 * _2729) + _1966;
        _2516 = (_2736 * _2731) + _1968;
        _2518 = ((_2721 * 0.039999999105930328369140625) * _2736) + _2297;
        _2520 = ((_2723 * 0.039999999105930328369140625) * _2736) + _2299;
        _2522 = ((_2725 * 0.039999999105930328369140625) * _2736) + _2301;
    }
    else
    {
        _2512 = _1964;
        _2514 = _1966;
        _2516 = _1968;
        _2518 = _2297;
        _2520 = _2299;
        _2522 = _2301;
    }
    float _4461 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4472 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4483 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2539 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2512 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _745))) + ((_2518 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2514 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _745))) + ((_2520 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2516 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _745))) + ((_2522 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    uint _2542 = _234 + 6u;
    float _2550 = _682 / cbSceneParam._m0[86u].x;
    float _2551 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2626 = _2625 / _603;
        float _2637 = _2626 * _655;
        float _2638 = _656 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2641 = _2626 * _657;
        float _2643 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2638;
        float _2651 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2639 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2782 = 1.0 / cbSceneParam._m0[80u].x;
            float _2783 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2784 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            _2838 = ((abs(_2651 / _2639) * cbSceneParam._m0[80u].y) * ((((_2793 - _2794) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))))) * _2782)) - ((exp2(_2661 * _2793) - exp2(_2661 * _2794)) * _2782))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2570);
        _2663 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2665 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2667 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2669 = _2849 * _2570;
    }
    else
    {
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
        _2669 = _2570;
    }
    bool _2876;
    vec4 _2679;
    vec4 _2701;
    float _2703;
    float _2707;
    float _2708;
    float _2709;
    float _2710;
    bool _2720;
    for (;;)
    {
        _2679 = cbMatDynParam._m0[0u];
        float _2681 = roundEven(_2679.y);
        bool _2682 = _2681 == 3.0;
        float _2683 = log2(_2669);
        float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * _2539;
        float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * _2540;
        float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * _2541;
        float _2699 = _671 + (-0.5);
        _2701 = cbMtdParam._m0[1u];
        _2703 = _2701.y * _2699;
        float _2706 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2707 = _2706 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
        _2708 = _2706 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
        _2709 = _2706 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
        _2710 = _2699 * 0.999000012874603271484375;
        _2720 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2720)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2710) < 0.5)
            {
                _2876 = true;
                break;
            }
        }
        uint _2817 = _720 + uint(_2679.w);
        if ((cbInstanceData._m0[_2817].w < 1.0) && ((cbInstanceData._m0[_2817].w + _2710) < 0.5))
        {
            _2876 = true;
            break;
        }
        if ((_2703 + 1.0) < _2701.x)
        {
            _2876 = true;
            break;
        }
        _2876 = false;
        break;
    }
    float _3081;
    if (_2876)
    {
        discard_state = true;
        _3081 = 0.0;
    }
    else
    {
        _3081 = cbInstanceData._m0[_2542].w;
    }
    SV_Target.x = _2707;
    SV_Target.y = _2708;
    SV_Target.z = _2709;
    SV_Target.w = _3081;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
    discard_exit();
}


