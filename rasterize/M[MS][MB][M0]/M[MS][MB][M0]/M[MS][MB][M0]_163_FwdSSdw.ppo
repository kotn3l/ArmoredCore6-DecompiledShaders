#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1324;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3651 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _388) + _484;
    float _496 = ((((_463.x - _482) * _388) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _388) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3662 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _535 = (_496 + ((((_436.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_523.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _536 = (_497 + ((((_436.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_523.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _539 = fma(_503, _241, fma(_536, _248, _535 * _234));
    float _542 = fma(_503, _242, fma(_536, _249, _535 * _235));
    float _545 = fma(_503, _243, fma(_536, _250, _535 * _236));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _585 = ((_580 - _581) * cbMtdParam._m0[24u].z) + _581;
    float _587 = (cbMtdParam._m0[19u].x + dot(vec4(_549 * _539, _549 * _542, _549 * _545, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_585 * cbMtdParam._m0[21u].z);
    float _3673 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _590 = (-0.0) - cbMtdParam._m0[24u].y;
    float _592 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
    float _600 = _588 - ((_588 * TEXCOORD_8.x) * _593);
    float _601 = _588 - ((_588 * TEXCOORD_8.y) * _593);
    float _602 = _588 - ((_588 * TEXCOORD_8.z) * _593);
    float _609 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _613 = ((isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : min(_609, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _621 = (_613 - (((_585 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _613))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3704 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _626 = ((_600 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) * _622) + _395;
    float _627 = ((_601 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) * _622) + _396;
    float _628 = ((_602 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) * _622) + _397;
    vec4 _640 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _670 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_642 - _643) * cbMtdParam._m0[24u].w) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3715 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _679 = ((((cbMtdParam._m0[10u].x - _626) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _671) + _626;
    float _680 = ((((cbMtdParam._m0[10u].y - _627) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _671) + _627;
    float _681 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _628)) * _671) + _628;
    float _686 = (((_436.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    float _690 = ((_523.z - _686) * cbMtdParam._m0[19u].w) + _686;
    vec4 _704 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _711 = (_704.x * 2.0) + (-1.0);
    float _712 = (_704.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3726 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _722 = (((_704.z - _690) * _600) * _622) + _690;
    float _725 = ((cbMtdParam._m0[23u].y - _722) * _671) + _722;
    vec4 _744 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _750 = (_744.x * 2.0) + (-1.0);
    float _751 = (_744.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3737 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _772 = (((cbMtdParam._m0[21u].x * _535) + ((_711 - _535) * _600)) * _622) + _535;
    float _773 = (((cbMtdParam._m0[21u].x * _536) + ((_712 - _536) * _601)) * _622) + _536;
    float _774 = (((sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _503) * _602) * _622) + _503;
    float _785 = (((_750 - _772) + (_772 * cbMtdParam._m0[22u].z)) * _671) + _772;
    float _786 = (((_751 - _773) + (_773 * cbMtdParam._m0[22u].z)) * _671) + _773;
    float _787 = ((sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) - _774) * _671) + _774;
    float _789 = cbMtdParam._m0[22u].x + _523.w;
    float _792 = fma(_787, _241, fma(_786, _248, _785 * _234));
    float _795 = fma(_787, _242, fma(_786, _249, _785 * _235));
    float _798 = fma(_787, _243, fma(_786, _250, _785 * _236));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _3748 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _806 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3770 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3781 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3792 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _875 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _865);
    float _876 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _865);
    float _877 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _865);
    float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
    float _882 = _875 * _881;
    float _883 = _876 * _881;
    float _884 = _877 * _881;
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _912 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _915 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    uint _929 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_929].z;
    float _3803 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    vec4 _949 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _953 = ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * TEXCOORD_5.w) * _949.x;
    float _954 = dot(vec3(_803, _804, _805), vec3(_882, _883, _884));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _803) - _882;
    float _962 = (_957 * _804) - _883;
    float _963 = (_957 * _805) - _884;
    float _967 = abs(dot(vec3(_882, _883, _884), vec3(_803, _804, _805)));
    float _3836 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_806);
    float _982 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1323;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1048 = fma(_1022, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014));
        float _1052 = fma(_1022, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014));
        float _1056 = fma(_1022, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014));
        float _1081 = _1014 + _803;
        float _1082 = _1018 + _804;
        float _1083 = _1022 + _805;
        float _1093 = fma(_1083, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081)) - _1048;
        float _1094 = fma(_1083, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081)) - _1052;
        float _1095 = fma(_1083, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081)) - _1056;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1048 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1052 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[34u].z) + ((((((_1056 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1151 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1117.x + (-0.5));
        float _1153 = _1151 * (_1117.y + (-0.5));
        float _1154 = _1151 * (_1117.z + (-0.5));
        float _1161 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1124.x + (-0.5));
        float _1163 = _1161 * (_1124.y + (-0.5));
        float _1164 = _1161 * (_1124.z + (-0.5));
        float _1171 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1131.x + (-0.5));
        float _1173 = _1171 * (_1131.y + (-0.5));
        float _1174 = _1171 * (_1131.z + (-0.5));
        float _1181 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1138.x + (-0.5));
        float _1183 = _1181 * (_1138.y + (-0.5));
        float _1184 = _1181 * (_1138.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1205 = (dot(vec3(_803, _804, _805), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1215 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3884 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1217 + 1.0))) + _1222) * _1185;
        float _1232 = _1153 * 0.5;
        float _1233 = _1163 * 0.5;
        float _1234 = _1173 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_803, _804, _805), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3917 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1259 + 1.0))) + _1264) * _1186;
        float _1274 = _1154 * 0.5;
        float _1275 = _1164 * 0.5;
        float _1276 = _1174 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_803, _804, _805), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3950 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1301 + 1.0))) + _1306) * _1187;
        _1323 = _1154;
        _1325 = _1153;
        _1326 = _1152;
        _1327 = _1164;
        _1328 = _1163;
        _1329 = _1162;
        _1330 = _1174;
        _1331 = _1173;
        _1332 = _1172;
        _1333 = _1187;
        _1334 = _1186;
        _1335 = _1185;
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1324;
        _1325 = _1324;
        _1326 = _1324;
        _1327 = _1324;
        _1328 = _1324;
        _1329 = _1324;
        _1330 = _1324;
        _1331 = _1324;
        _1332 = _1324;
        _1333 = _1324;
        _1334 = _1324;
        _1335 = _1324;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1363 = fma(_1022, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014));
        float _1367 = fma(_1022, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014));
        float _1371 = fma(_1022, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014));
        float _1394 = _1014 + _803;
        float _1395 = _1018 + _804;
        float _1396 = _1022 + _805;
        float _1406 = fma(_1396, cbModelParam._m0[30u].z, fma(_1395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394)) - _1363;
        float _1407 = fma(_1396, cbModelParam._m0[31u].z, fma(_1395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394)) - _1367;
        float _1408 = fma(_1396, cbModelParam._m0[32u].z, fma(_1395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394)) - _1371;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1363 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1367 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[35u].z) + ((((((_1371 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1462 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1429.x + (-0.5));
        float _1464 = _1462 * (_1429.y + (-0.5));
        float _1465 = _1462 * (_1429.z + (-0.5));
        float _1472 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1436.x + (-0.5));
        float _1474 = _1472 * (_1436.y + (-0.5));
        float _1475 = _1472 * (_1436.z + (-0.5));
        float _1482 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1443.x + (-0.5));
        float _1484 = _1482 * (_1443.y + (-0.5));
        float _1485 = _1482 * (_1443.z + (-0.5));
        float _1492 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1450.x + (-0.5));
        float _1494 = _1492 * (_1450.y + (-0.5));
        float _1495 = _1492 * (_1450.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_803, _804, _805), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4013 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1526 + 1.0))) + _1531) * _1496;
        float _1541 = _1464 * 0.5;
        float _1542 = _1474 * 0.5;
        float _1543 = _1484 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_803, _804, _805), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4046 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1568 + 1.0))) + _1573) * _1497;
        float _1583 = _1465 * 0.5;
        float _1584 = _1475 * 0.5;
        float _1585 = _1485 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_803, _804, _805), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4079 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1610 + 1.0))) + _1615) * _1498;
        _1632 = _1465;
        _1633 = _1464;
        _1634 = _1463;
        _1635 = _1475;
        _1636 = _1474;
        _1637 = _1473;
        _1638 = _1485;
        _1639 = _1484;
        _1640 = _1483;
        _1641 = _1498;
        _1642 = _1497;
        _1643 = _1496;
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1324;
        _1633 = _1324;
        _1634 = _1324;
        _1635 = _1324;
        _1636 = _1324;
        _1637 = _1324;
        _1638 = _1324;
        _1639 = _1324;
        _1640 = _1324;
        _1641 = _1324;
        _1642 = _1324;
        _1643 = _1324;
        _1644 = 0.0;
        _1645 = 0.0;
        _1646 = 0.0;
    }
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1336)) + _1336;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1337)) + _1337;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1338)) + _1338;
    float _1679 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1656));
    float _1700 = _961 * 0.5;
    float _1701 = _962 * 0.5;
    float _1702 = _963 * 0.5;
    float _1703 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1706 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1709 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1716 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1323, _1327, _1330, _1333));
        float _1720 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1724 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1731 = dot(vec4(cbModelParam._m0[39u]), vec4(_1700, _1701, _1702, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1700, _1701, _1702, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _806);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_1022, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_1022, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_1022, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1830 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1833 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1861 = frontier_phi_14_12_ladder;
        }
        float _2082;
        if (_1830 > 0.0)
        {
            _2082 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2082 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1833 > 0.0)
        {
            _2328 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_35_30_ladder;
        }
        float _2330 = isnan(_2082) ? _1861 : (isnan(_1861) ? _2082 : min(_1861, _2082));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1827) + _1816;
        float _2336 = (_2331 * _1830) + _1820;
        float _2337 = (_2331 * _1833) + _1824;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_13_35_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_13_35_ladder_2;
        _1851 = frontier_phi_13_35_ladder_1;
        _1853 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1769);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _806);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1911 = fma(_1022, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014)) + cbModelParam._m0[21u].w;
        float _1915 = fma(_1022, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014)) + cbModelParam._m0[22u].w;
        float _1919 = fma(_1022, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014)) + cbModelParam._m0[23u].w;
        float _1922 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1925 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1928 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2087;
        if (_1922 > 0.0)
        {
            _2087 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2087 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1925 > 0.0)
        {
            _2355 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2560;
        if (_1928 > 0.0)
        {
            _2560 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2560 = frontier_phi_46_43_ladder;
        }
        float _2562 = isnan(_2355) ? _2087 : (isnan(_2087) ? _2355 : min(_2087, _2355));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1922) + _1911;
        float _2568 = (_2563 * _1925) + _1915;
        float _2569 = (_2563 * _1928) + _1919;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_22_46_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1947 = frontier_phi_22_46_ladder_2;
        _1949 = frontier_phi_22_46_ladder_1;
        _1951 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1858);
        _1947 = _1931.x * cbModelParam._m0[1u].z;
        _1949 = _1931.y * cbModelParam._m0[1u].z;
        _1951 = _1931.z * cbModelParam._m0[1u].z;
    }
    float _1963 = ((((1.0 - _982) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_982 * _969)) * _953;
    float _1964 = _1963 * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1965 = _1963 * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1966 = _1963 * ((cbModelParam._m0[1u].w * (_1951 - _1853)) + _1853);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, _1964 * cbSceneParam._m0[91u].x));
    vec4 _1983 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_890, _891));
    float _1985 = _1983.w;
    float _1997 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1985);
    float _1998 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1985);
    float _1999 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1985);
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _953 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2041 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2045 = _2005 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_803, _804, _805));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_803, _804, _805));
    float _4215 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4226 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2022].x * _2028) * _2066) + (((cbLight._m0[_2032].x * _1997) * _2041) * _2064);
    float _2074 = ((_2028 * cbLight._m0[_2022].y) * _2066) + (((cbLight._m0[_2032].y * _1998) * _2041) * _2064);
    float _2075 = ((_2028 * cbLight._m0[_2022].z) * _2066) + (((cbLight._m0[_2032].z * _1999) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2081)
    {
        _2092 = _2073;
        _2094 = _2074;
        _2096 = _2075;
    }
    else
    {
        uint _2100 = _2005 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4237 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2119 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _2073;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _2074;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _2075;
    }
    bool _2099 = _2079.y == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2099)
    {
        _2137 = _2092;
        _2139 = _2094;
        _2141 = _2096;
    }
    else
    {
        uint _2299 = _2005 + 7u;
        float _2315 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4253 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2318 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2137 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2092;
        _2139 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2094;
        _2141 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2096;
    }
    uint _2144 = _2005 + 8u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _806) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_2005].x + _882;
    float _2160 = cbLight._m0[_2005].y + _883;
    float _2161 = cbLight._m0[_2005].z + _884;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2005].xyz));
    float _4269 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2173 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2174 = dot(vec3(_803, _804, _805), vec3(_2166, _2167, _2168));
    float _4291 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2166, _2167, _2168));
    float _4302 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2158 * _2158;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2198 = 1.0 - _2158;
    float _2209 = (0.5 / (((_2173 * ((_2172 * _2198) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2198) + _2158) * _2172))) * _2172;
    float _4313 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    uint _2225 = _2005 + 9u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _806) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2045].x + _882;
    float _2239 = cbLight._m0[_2045].y + _883;
    float _2240 = cbLight._m0[_2045].z + _884;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2045].xyz));
    float _4324 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2252 = dot(vec3(_803, _804, _805), vec3(_2245, _2246, _2247));
    float _4335 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2245, _2246, _2247));
    float _4346 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2237 * _2237;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2237;
    float _2284 = (0.5 / (((_2173 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2274) + _2237) * _2251))) * _2251;
    float _4357 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    float _2296 = (((_2273 * cbLight._m0[_2225].x) * _2286) * _2028) + ((((cbLight._m0[_2144].x * _1997) * _2197) * _2211) * _2041);
    float _2297 = (((_2273 * cbLight._m0[_2225].y) * _2286) * _2028) + ((((cbLight._m0[_2144].y * _1998) * _2197) * _2211) * _2041);
    float _2298 = (((_2273 * cbLight._m0[_2225].z) * _2286) * _2028) + ((((cbLight._m0[_2144].z * _1999) * _2197) * _2211) * _2041);
    float _2360;
    float _2362;
    float _2364;
    if (_2081)
    {
        _2360 = _2296;
        _2362 = _2297;
        _2364 = _2298;
    }
    else
    {
        uint _2366 = _2005 + 2u;
        uint _2370 = _2005 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _806) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _882;
        float _2387 = cbLight._m0[_2366].y + _883;
        float _2388 = cbLight._m0[_2366].z + _884;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2366].xyz));
        float _4368 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2400 = dot(vec3(_803, _804, _805), vec3(_2393, _2394, _2395));
        float _4379 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4390 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2422 = 1.0 - _2385;
        float _2432 = (0.5 / (((_2173 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2422) + _2385) * _2399))) * _2399;
        float _4401 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2360 = (((_2421 * cbLight._m0[_2370].x) * _2434) * _2435) + _2296;
        _2362 = (((_2421 * cbLight._m0[_2370].y) * _2434) * _2435) + _2297;
        _2364 = (((_2421 * cbLight._m0[_2370].z) * _2434) * _2435) + _2298;
    }
    float _2470;
    float _2472;
    float _2474;
    if (_2099)
    {
        _2470 = _2360;
        _2472 = _2362;
        _2474 = _2364;
    }
    else
    {
        uint _2481 = _2005 + 3u;
        uint _2485 = _2005 + 11u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _806) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _882;
        float _2502 = cbLight._m0[_2481].y + _883;
        float _2503 = cbLight._m0[_2481].z + _884;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2481].xyz));
        float _4417 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2515 = dot(vec3(_803, _804, _805), vec3(_2508, _2509, _2510));
        float _4428 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4439 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2537 = 1.0 - _2500;
        float _2547 = (0.5 / (((_2173 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2537) + _2500) * _2514))) * _2514;
        float _4450 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2470 = (((_2536 * cbLight._m0[_2485].x) * _2549) * _2550) + _2360;
        _2472 = (((_2536 * cbLight._m0[_2485].y) * _2549) * _2550) + _2362;
        _2474 = (((_2536 * cbLight._m0[_2485].z) * _2549) * _2550) + _2364;
    }
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_2003.y == 0u)
    {
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2625;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2625;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2625;
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.x;
        uint _2652 = uint((float(_2640.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2641))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2641)));
        float _2662 = (log2(_2628 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2663 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        uint _2666 = uint(isnan(14.0) ? _2663 : (isnan(_2663) ? 14.0 : min(_2663, 14.0)));
        uvec4 _2671 = texelFetch(g_lightClusterGridBuffer, int(((_2666 << 2u) + (_2652 << 6u)) >> 2u));
        uint _2672 = _2671.x;
        uint _2673 = _2640.z;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((((1u << ((_2673 >> 4u) & 15u)) + 4294967295u) & _2672) == 0u) || ((_2673 & 240u) == 0u))
        {
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
        }
        else
        {
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2933)
                {
                    frontier_phi_61_pred = _2917;
                    frontier_phi_61_pred_1 = _2922;
                    frontier_phi_61_pred_2 = _2921;
                    frontier_phi_61_pred_3 = _2920;
                    frontier_phi_61_pred_4 = _2919;
                    frontier_phi_61_pred_5 = _2918;
                }
                else
                {
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    uint _3047;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2932;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    for (;;)
                    {
                        uint _3051 = uint(findLSB(_3047)) + (_2923 << 5u);
                        uint _3048 = (_3047 + 4294967295u) & _3047;
                        uint _3053 = _3051 * 48u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3073 = (_3051 * 48u) + 4u;
                        vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3092 = (_3051 * 48u) + 8u;
                        vec3 _3103 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x));
                        float _3107 = _3067.x - _2626;
                        float _3108 = _3067.y - _2627;
                        float _3109 = _3067.z - _2628;
                        float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                        float _3113 = inversesqrt(_3110);
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3117 = dot(vec3(_909, _912, _915), vec3(_3114, _3115, _3116));
                        float _3122 = 1.0 - (_3110 * _3067.w);
                        float _4476 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3124 = sqrt(_3110) * _3086.w;
                        float _3127 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3117) + _3128;
                        float _3134 = _3124 * _3124;
                        float _3138 = ((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3123) / ((_3134 * 0.699999988079071044921875) + 1.0);
                        float _3142 = (-0.0) - _2626;
                        float _3143 = (-0.0) - _2627;
                        float _3144 = (-0.0) - _2628;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3159 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                        float _3160 = 1.0 - _969;
                        float _3167 = sqrt(1.0 - ((1.0 - (_3160 * _3160)) * (1.0 - (_3159 * _3159))));
                        float _3168 = _3167 * _3167;
                        float _3169 = _3168 * _3168;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3180 = dot(vec3(_909, _912, _915), vec3(_3149, _3150, _3151));
                        float _4492 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3183 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3184 = dot(vec3(_909, _912, _915), vec3(_3176 * _3170, _3176 * _3171, _3176 * _3172));
                        float _4503 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3191 = ((_3187 * _3187) * (_3169 + (-1.0))) + 1.0;
                        float _3192 = _3127 * _3168;
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3117) + _3193;
                        float _4514 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3198 = 1.0 - _3168;
                        float _3208 = (0.5 / (((_3197 * ((_3183 * _3198) + _3168)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3168) * _3183))) * _3197;
                        float _4525 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3219 = (((_3169 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3191 * _3191) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125))) * _3123;
                        _2976 = (_3138 * _3086.x) + _3044;
                        _2977 = (_3138 * _3086.y) + _3045;
                        _2978 = (_3138 * _3086.z) + _3046;
                        _2973 = (_3219 * _3103.x) + _3041;
                        _2974 = (_3219 * _3103.y) + _3042;
                        _2975 = (_3219 * _3103.z) + _3043;
                        if (_3048 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _3048;
                        }
                    }
                    frontier_phi_61_pred = _2973;
                    frontier_phi_61_pred_1 = _2978;
                    frontier_phi_61_pred_2 = _2977;
                    frontier_phi_61_pred_3 = _2976;
                    frontier_phi_61_pred_4 = _2975;
                    frontier_phi_61_pred_5 = _2974;
                }
                _2774 = frontier_phi_61_pred;
                _2784 = frontier_phi_61_pred_1;
                _2782 = frontier_phi_61_pred_2;
                _2780 = frontier_phi_61_pred_3;
                _2778 = frontier_phi_61_pred_4;
                _2776 = frontier_phi_61_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2774;
                    _2918 = _2776;
                    _2919 = _2778;
                    _2920 = _2780;
                    _2921 = _2782;
                    _2922 = _2784;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
        }
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.z;
        uint _2790 = (_2788 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2790) & _2672) == 0u)
        {
            _2885 = _2773;
            _2887 = _2775;
            _2889 = _2777;
            _2891 = _2779;
            _2893 = _2781;
            _2895 = _2783;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
            float _2911 = _2910 * _2626;
            float _2912 = _2910 * _2627;
            float _2913 = _2910 * _2628;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2790 < ((_2788 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3024 = _2773;
                float _3025 = _2775;
                float _3026 = _2777;
                float _3027 = _2779;
                float _3028 = _2781;
                float _3029 = _2783;
                uint _3030 = _2790;
                uint _3039;
                bool _3040;
                for (;;)
                {
                    _3039 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                    _3040 = _3039 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3040)
                    {
                        frontier_phi_67_pred = _3027;
                        frontier_phi_67_pred_1 = _3028;
                        frontier_phi_67_pred_2 = _3029;
                        frontier_phi_67_pred_3 = _3026;
                        frontier_phi_67_pred_4 = _3025;
                        frontier_phi_67_pred_5 = _3024;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        uint _3243 = _3039;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        vec3 _3297;
                        vec4 _3312;
                        vec4 _3327;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3254 = ((_3030 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3254 * 40u) + 8u;
                            _3297 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x));
                            uint _3299 = (_3254 * 40u) + 16u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3254 * 40u) + 20u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3254 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3254 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_2628, _3361.z, fma(_2627, _3361.y, _3361.x * _2626)) + _3361.w;
                            _3374 = !((fma(_2628, _3342.z, fma(_2627, _3342.y, _3342.x * _2626)) + _3342.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3269.x - _2626;
                                float _3402 = _3269.y - _2627;
                                float _3403 = _3269.z - _2628;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3270 * _3270));
                                float _4536 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3419 = sqrt(_3404) * _3285.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_909, _912, _915))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_2628, _3312.z, fma(_2627, _3312.y, _3312.x * _2626)) + _3312.w) / _3373;
                                float _3433 = (fma(_2628, _3327.z, fma(_2627, _3327.y, _3327.x * _2626)) + _3327.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4552 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _969;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2911;
                                float _3463 = _3409 - _2912;
                                float _3464 = _3410 - _2913;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_909, _912, _915), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4563 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3476 = dot(vec3(_909, _912, _915), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4574 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_909, _912, _915), vec3(_3408, _3409, _3410))) + _3485;
                                float _4585 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4596 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3513 * _3297.x;
                                frontier_phi_73_pred_1 = _3513 * _3297.y;
                                frontier_phi_73_pred_2 = _3439 * _3285.z;
                                frontier_phi_73_pred_3 = _3439 * _3285.y;
                                frontier_phi_73_pred_4 = _3439 * _3285.x;
                                frontier_phi_73_pred_5 = _3513 * _3297.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_73_pred;
                            _3518 = frontier_phi_73_pred_1;
                            _3522 = frontier_phi_73_pred_2;
                            _3521 = frontier_phi_73_pred_3;
                            _3520 = frontier_phi_73_pred_4;
                            _3519 = frontier_phi_73_pred_5;
                            _3227 = _3520 + _3240;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3224 = _3517 + _3237;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3227;
                        frontier_phi_67_pred_1 = _3228;
                        frontier_phi_67_pred_2 = _3229;
                        frontier_phi_67_pred_3 = _3226;
                        frontier_phi_67_pred_4 = _3225;
                        frontier_phi_67_pred_5 = _3224;
                    }
                    _2892 = frontier_phi_67_pred;
                    _2894 = frontier_phi_67_pred_1;
                    _2896 = frontier_phi_67_pred_2;
                    _2890 = frontier_phi_67_pred_3;
                    _2888 = frontier_phi_67_pred_4;
                    _2886 = frontier_phi_67_pred_5;
                    uint _3031 = _3030 + 1u;
                    if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3024 = _2886;
                        _3025 = _2888;
                        _3026 = _2890;
                        _3027 = _2892;
                        _3028 = _2894;
                        _3029 = _2896;
                        _3030 = _3031;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2894;
                frontier_phi_55_56_ladder_1 = _2896;
                frontier_phi_55_56_ladder_2 = _2892;
                frontier_phi_55_56_ladder_3 = _2890;
                frontier_phi_55_56_ladder_4 = _2888;
                frontier_phi_55_56_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_55_56_ladder = _2781;
                frontier_phi_55_56_ladder_1 = _2783;
                frontier_phi_55_56_ladder_2 = _2779;
                frontier_phi_55_56_ladder_3 = _2777;
                frontier_phi_55_56_ladder_4 = _2775;
                frontier_phi_55_56_ladder_5 = _2773;
            }
            _2885 = frontier_phi_55_56_ladder_5;
            _2887 = frontier_phi_55_56_ladder_4;
            _2889 = frontier_phi_55_56_ladder_3;
            _2891 = frontier_phi_55_56_ladder_2;
            _2893 = frontier_phi_55_56_ladder;
            _2895 = frontier_phi_55_56_ladder_1;
        }
        float _2900 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2685 = (_2900 * _2891) + _2137;
        _2687 = (_2900 * _2893) + _2139;
        _2689 = (_2900 * _2895) + _2141;
        _2691 = ((_2885 * 0.039999999105930328369140625) * _2900) + _2470;
        _2693 = ((_2887 * 0.039999999105930328369140625) * _2900) + _2472;
        _2695 = ((_2889 * 0.039999999105930328369140625) * _2900) + _2474;
    }
    else
    {
        _2685 = _2137;
        _2687 = _2139;
        _2689 = _2141;
        _2691 = _2470;
        _2693 = _2472;
        _2695 = _2474;
    }
    float _4612 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4623 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4634 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    uint _2715 = _253 + 6u;
    float _2723 = _890 / cbSceneParam._m0[86u].x;
    float _2724 = _891 / cbSceneParam._m0[86u].y;
    vec4 _2738 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2740 = _2738.x;
    float _2741 = _2738.y;
    float _2742 = _2738.z;
    float _2743 = _2738.w;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _2798 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _2799 = _2798 / _824;
        float _2810 = _2799 * _875;
        float _2811 = _876 * _2799;
        float _2812 = (-0.0) - _2811;
        float _2813 = _2799 * _877;
        float _2815 = (cbSceneParam._m0[77u].w * _2812) / _2798;
        float _2816 = _2815 + cbSceneParam._m0[79u].w;
        float _2817 = cbSceneParam._m0[79u].w - _2811;
        float _2823 = sqrt(((_2810 * _2810) + (_2811 * _2811)) + (_2813 * _2813));
        float _2826 = (1.0 - (cbSceneParam._m0[77u].w / _2798)) * _2823;
        float _2831 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2833 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2986;
        if (abs((_2812 - _2815) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2986 = ((((_2816 > 0.0) ? exp2(_2831 * _2816) : (2.0 - exp2(_2833 * _2816))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2826;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : max(_2816, _2817));
            float _2948 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : min(_2816, _2817));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _2986 = ((abs(_2823 / _2812) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2831 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2831 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2833 * _2957) - exp2(_2833 * _2958)) * _2946))) + (_2826 * cbSceneParam._m0[80u].z);
        }
        vec4 _2988 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, 1.0), 0.0);
        float _2997 = exp2((_2986 * (-1.44269502162933349609375)) * (1.0 - _2988.w));
        float _2998 = log2(_2997);
        float _3014 = log2(_2743);
        _2835 = (exp2(_3014 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].x)) * _2988.x) / cbSceneParam._m0[78u].x)) + _2740;
        _2837 = (exp2(_3014 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].y)) * _2988.y) / cbSceneParam._m0[78u].y)) + _2741;
        _2839 = (exp2(_3014 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].z)) * _2988.z) / cbSceneParam._m0[78u].z)) + _2742;
        _2841 = _2997 * _2743;
    }
    else
    {
        _2835 = _2740;
        _2837 = _2741;
        _2839 = _2742;
        _2841 = _2743;
    }
    float _2853 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2854 = _2853 == 3.0;
    float _2855 = log2(_2841);
    float _2862 = exp2(_2855 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2685 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _953))) + ((_2691 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2863 = exp2(_2855 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2687 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _953))) + ((_2693 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2864 = exp2(_2855 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2689 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _953))) + ((_2695 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2873 = (_2853 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2873 * (_2854 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2835)));
    SV_Target.y = _2873 * (_2854 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2837)));
    SV_Target.z = _2873 * (_2854 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.w = cbInstanceData._m0[_2715].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2715].w;
}


