#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1411;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3999 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4010 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4021 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _415 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_405 - _415) * cbMtdParam._m0[24u].x) + _415) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4032 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _440 = (_433 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _441 = (_433 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _442 = (_433 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[24u].x) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4043 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    float _519 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _513;
    float _522 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _514;
    float _525 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _515;
    float _532 = ((_513 - _519) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) + _519;
    float _533 = ((_514 - _522) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _522;
    float _534 = ((_515 - _525) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) + _525;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _433) + _593;
    float _603 = ((_574.y - _594) * _433) + _594;
    float _604 = ((_574.z - _595) * _433) + _595;
    vec4 _616 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_616.z - _604) * _506) + _604;
    float _632 = ((((_616.x - _602) * _506) + _602) * 2.0) + (-1.0);
    float _633 = ((((_616.y - _603) * _506) + _603) * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _4054 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _639 = sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))));
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _687 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _690 = ((isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : min(_687, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _699 = (_690 - ((((((_680 - _681) * cbMtdParam._m0[24u].z) + _681) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _690))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4075 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _707 = (_700 * (cbMtdParam._m0[17u].x - _532)) + _532;
    float _708 = (_700 * (cbMtdParam._m0[17u].y - _533)) + _533;
    float _709 = (_700 * (cbMtdParam._m0[17u].z - _534)) + _534;
    vec4 _721 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _723 = _721.x;
    float _724 = 1.0 - _723;
    float _749 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_723 - _724) * cbMtdParam._m0[24u].w) + _724) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4086 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _758 = ((((cbMtdParam._m0[10u].x - _707) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _750) + _707;
    float _759 = ((((cbMtdParam._m0[10u].y - _708) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _750) + _708;
    float _760 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _709)) * _750) + _709;
    float _765 = (((_551.z - _629) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _629;
    float _769 = ((_653.z - _765) * cbMtdParam._m0[19u].w) + _765;
    vec4 _783 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _790 = (_783.x * 2.0) + (-1.0);
    float _791 = (_783.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4097 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _800 = (_700 * (_783.z - _769)) + _769;
    float _803 = ((cbMtdParam._m0[23u].y - _800) * _750) + _800;
    vec4 _822 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _828 = (_822.x * 2.0) + (-1.0);
    float _829 = (_822.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _4108 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _844 = (_632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_551.x * 2.0) + (-1.0)))) + (((_653.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _845 = (_633 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_551.y * 2.0) + (-1.0)))) + (((_653.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _857 = (((_790 - _844) + (cbMtdParam._m0[21u].x * _844)) * _700) + _844;
    float _858 = (((_791 - _845) + (cbMtdParam._m0[21u].x * _845)) * _700) + _845;
    float _859 = (_700 * (sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) - _639)) + _639;
    float _870 = (((_828 - _857) + (_857 * cbMtdParam._m0[22u].z)) * _750) + _857;
    float _871 = (((_829 - _858) + (_858 * cbMtdParam._m0[22u].z)) * _750) + _858;
    float _872 = ((sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) - _859) * _750) + _859;
    float _876 = cbMtdParam._m0[22u].x + _653.w;
    float _879 = fma(_872, _251 * NORMAL.x, fma(_871, _258 * TANGENT.x, (_244 * _236) * _870));
    float _882 = fma(_872, _251 * NORMAL.y, fma(_871, _258 * TANGENT.y, (_244 * _237) * _870));
    float _885 = fma(_872, _251 * NORMAL.z, fma(_871, _258 * TANGENT.z, (_244 * _238) * _870));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _4119 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _893 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4141 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4152 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4163 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _996 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _999 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1002 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1016 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _4174 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1040 = ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_890, _891, _892), vec3(_969, _970, _971));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _890) - _969;
    float _1049 = (_1044 * _891) - _970;
    float _1050 = (_1044 * _892) - _971;
    float _1054 = abs(dot(vec3(_969, _970, _971), vec3(_890, _891, _892)));
    float _4207 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_893);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1139 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1143 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1168 = _1101 + _890;
        float _1169 = _1105 + _891;
        float _1170 = _1109 + _892;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_890, _891, _892), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4255 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_890, _891, _892), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4288 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_890, _891, _892), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4321 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1453 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1457 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1480 = _1101 + _890;
        float _1481 = _1105 + _891;
        float _1482 = _1109 + _892;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_890, _891, _892), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4384 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_890, _891, _892), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4417 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_890, _891, _892), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4450 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1411;
        _1719 = _1411;
        _1720 = _1411;
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1423)) + _1423;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1424)) + _1424;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1425)) + _1425;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1048 * 0.5;
    float _1787 = _1049 * 0.5;
    float _1788 = _1050 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1917 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1920 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1948 = frontier_phi_14_12_ladder;
        }
        float _2118;
        if (_1917 > 0.0)
        {
            _2118 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2118 = frontier_phi_23_19_ladder;
        }
        float _2413;
        if (_1920 > 0.0)
        {
            _2413 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2413 = frontier_phi_35_30_ladder;
        }
        float _2415 = isnan(_2118) ? _1948 : (isnan(_1948) ? _2118 : min(_1948, _2118));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1914) + _1903;
        float _2421 = (_2416 * _1917) + _1907;
        float _2422 = (_2416 * _1920) + _1911;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_13_35_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_13_35_ladder_2;
        _1938 = frontier_phi_13_35_ladder_1;
        _1940 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1855);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2013 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2016 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2123;
        if (_2010 > 0.0)
        {
            _2123 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2123 = frontier_phi_25_21_ladder;
        }
        float _2440;
        if (_2013 > 0.0)
        {
            _2440 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2440 = frontier_phi_37_32_ladder;
        }
        float _2767;
        if (_2016 > 0.0)
        {
            _2767 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2767 = frontier_phi_47_44_ladder;
        }
        float _2769 = isnan(_2440) ? _2123 : (isnan(_2123) ? _2440 : min(_2123, _2440));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2010) + _1999;
        float _2775 = (_2770 * _2013) + _2003;
        float _2776 = (_2770 * _2016) + _2007;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_22_47_ladder = _2894.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2894.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2894.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_22_47_ladder_2;
        _2037 = frontier_phi_22_47_ladder_1;
        _2039 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1945);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2051 = ((((1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1069 * _1056)) * _1040;
    float _2052 = _2051 * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2053 = _2051 * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2054 = _2051 * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2110 = _2097 / _2109;
    float _2111 = _2101 / _2109;
    float _2112 = _2105 / _2109;
    float _2259;
    float _2260;
    float _2261;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2139 = ((uint(_2112 > cbSceneParam._m0[59u].y) + uint(_2112 > cbSceneParam._m0[59u].x)) + uint(_2112 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2140 = _2139 + 43u;
        uint _2148 = _2139 + 44u;
        uint _2156 = _2139 + 45u;
        uint _2164 = _2139 + 46u;
        float _2175 = fma(_2109, cbSceneParam._m0[_2140].w, fma(_2105, cbSceneParam._m0[_2140].z, fma(_2101, cbSceneParam._m0[_2140].y, _2097 * cbSceneParam._m0[_2140].x)));
        float _2179 = fma(_2109, cbSceneParam._m0[_2148].w, fma(_2105, cbSceneParam._m0[_2148].z, fma(_2101, cbSceneParam._m0[_2148].y, _2097 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2109, cbSceneParam._m0[_2164].w, fma(_2105, cbSceneParam._m0[_2164].z, fma(_2101, cbSceneParam._m0[_2164].y, _2097 * cbSceneParam._m0[_2164].x)));
        float _2192 = cbSceneParam._m0[33u].z * _2187;
        float _2194 = cbSceneParam._m0[33u].w * _2187;
        float _2197 = fma(_2109, cbSceneParam._m0[_2156].w, fma(_2105, cbSceneParam._m0[_2156].z, fma(_2101, cbSceneParam._m0[_2156].y, _2097 * cbSceneParam._m0[_2156].x))) / _2187;
        float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
        float _4576 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2252 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2175) / _2187, (_2194 + _2179) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2175) / _2187, (_2179 - _2192) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2192) / _2187, (_2179 - _2194) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2194) / _2187, (_2192 + _2179) / _2187), _2197), 0.0)).x), vec4(0.25)));
        _2259 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
        _2260 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
        _2261 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2259 = 1.0;
        _2260 = 1.0;
        _2261 = 1.0;
    }
    float _2325;
    float _2327;
    float _2329;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2313 = fma(_2109, cbSceneParam._m0[63u].w, fma(_2105, cbSceneParam._m0[63u].z, fma(_2101, cbSceneParam._m0[63u].y, _2097 * cbSceneParam._m0[63u].x)));
        float _2314 = fma(_2109, cbSceneParam._m0[60u].w, fma(_2105, cbSceneParam._m0[60u].z, fma(_2101, cbSceneParam._m0[60u].y, _2097 * cbSceneParam._m0[60u].x))) / _2313;
        float _2315 = fma(_2109, cbSceneParam._m0[61u].w, fma(_2105, cbSceneParam._m0[61u].z, fma(_2101, cbSceneParam._m0[61u].y, _2097 * cbSceneParam._m0[61u].x))) / _2313;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2314 >= cbSceneParam._m0[64u].x) && (_2315 >= cbSceneParam._m0[64u].y)) && (_2314 <= cbSceneParam._m0[64u].z)) && (_2315 <= cbSceneParam._m0[64u].w))
        {
            float _2453 = fma(_2109, cbSceneParam._m0[62u].w, fma(_2105, cbSceneParam._m0[62u].z, fma(_2101, cbSceneParam._m0[62u].y, _2097 * cbSceneParam._m0[62u].x))) / _2313;
            float _2457 = isnan(cbSceneParam._m0[41u].w) ? _2453 : (isnan(_2453) ? cbSceneParam._m0[41u].w : max(_2453, cbSceneParam._m0[41u].w));
            float _2500 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
            float _4592 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
            float _2507 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2314, cbSceneParam._m0[33u].w + _2315), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2314, _2315 - cbSceneParam._m0[33u].z), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].z, _2315 - cbSceneParam._m0[33u].w), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2315), _2457), 0.0)).x), vec4(0.25)));
            float _2511 = 1.0 - (_2507 * cbSceneParam._m0[34u].x);
            float _2512 = 1.0 - (_2507 * cbSceneParam._m0[34u].y);
            float _2513 = 1.0 - (_2507 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_34_33_ladder_1 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_34_33_ladder_2 = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
        }
        else
        {
            frontier_phi_34_33_ladder = _2261;
            frontier_phi_34_33_ladder_1 = _2260;
            frontier_phi_34_33_ladder_2 = _2259;
        }
        _2325 = frontier_phi_34_33_ladder_2;
        _2327 = frontier_phi_34_33_ladder_1;
        _2329 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2325 = _2259;
        _2327 = _2260;
        _2329 = _2261;
    }
    uvec4 _2334 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2336 = _2334.x * 14u;
    uint _2337 = _2336 + 13u;
    float _2344 = _1040 + (-1.0);
    float _2349 = (cbLight._m0[_2337].x * _2344) + 1.0;
    float _2350 = (cbLight._m0[_2337].y * _2344) + 1.0;
    float _2351 = (cbLight._m0[_2337].z * _2344) + 1.0;
    float _2352 = (cbLight._m0[_2337].w * _2344) + 1.0;
    uint _2353 = _2336 + 5u;
    float _2359 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2363 = _2336 + 4u;
    float _2372 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2376 = _2336 | 1u;
    float _2387 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_890, _891, _892));
    float _2390 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_890, _891, _892));
    float _4628 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _4639 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2395 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2397 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2404 = ((cbLight._m0[_2353].x * _2359) * _2397) + (((cbLight._m0[_2363].x * _2325) * _2372) * _2395);
    float _2405 = ((_2359 * cbLight._m0[_2353].y) * _2397) + (((cbLight._m0[_2363].y * _2327) * _2372) * _2395);
    float _2406 = ((_2359 * cbLight._m0[_2353].z) * _2397) + (((cbLight._m0[_2363].z * _2329) * _2372) * _2395);
    uvec4 _2410 = floatBitsToUint(cbLight._m0[_2336 + 12u]);
    bool _2412 = _2410.x == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2412)
    {
        _2514 = _2404;
        _2516 = _2405;
        _2518 = _2406;
    }
    else
    {
        uint _2522 = _2336 + 6u;
        float _2538 = (dot(vec3(cbLight._m0[_2336 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4650 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2541 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2514 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2404;
        _2516 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2405;
        _2518 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2406;
    }
    bool _2521 = _2410.y == 0u;
    float _2576;
    float _2578;
    float _2580;
    if (_2521)
    {
        _2576 = _2514;
        _2578 = _2516;
        _2580 = _2518;
    }
    else
    {
        uint _2738 = _2336 + 7u;
        float _2754 = (dot(vec3(cbLight._m0[_2336 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2755 = _2754 * _2754;
        float _4666 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2756 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2757 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2576 = (((cbLight._m0[_2738].x * 0.3183098733425140380859375) * _2756) * _2757) + _2514;
        _2578 = (((cbLight._m0[_2738].y * 0.3183098733425140380859375) * _2756) * _2757) + _2516;
        _2580 = (((cbLight._m0[_2738].z * 0.3183098733425140380859375) * _2756) * _2757) + _2518;
    }
    uint _2583 = _2336 + 8u;
    float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _893) * 0.949999988079071044921875);
    float _2597 = _2596 * _2596;
    float _2598 = cbLight._m0[_2336].x + _969;
    float _2599 = cbLight._m0[_2336].y + _970;
    float _2600 = cbLight._m0[_2336].z + _971;
    float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
    float _2605 = _2604 * _2598;
    float _2606 = _2604 * _2599;
    float _2607 = _2604 * _2600;
    float _2608 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2336].xyz));
    float _4682 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _4693 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2612 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2613 = dot(vec3(_890, _891, _892), vec3(_2605, _2606, _2607));
    float _4704 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2605, _2606, _2607));
    float _4715 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2597 * _2597;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2636 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2637 = 1.0 - _2597;
    float _2648 = (0.5 / (((_2612 * ((_2611 * _2637) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2637) + _2597) * _2611))) * _2611;
    float _4726 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    uint _2664 = _2336 + 9u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _893) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2376].x + _969;
    float _2678 = cbLight._m0[_2376].y + _970;
    float _2679 = cbLight._m0[_2376].z + _971;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2376].xyz));
    float _4737 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2691 = dot(vec3(_890, _891, _892), vec3(_2684, _2685, _2686));
    float _4748 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2684, _2685, _2686));
    float _4759 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2676 * _2676;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2712 = (exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2713 = 1.0 - _2676;
    float _2723 = (0.5 / (((_2612 * ((_2690 * _2713) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2713) + _2676) * _2690))) * _2690;
    float _4770 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2725 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    float _2735 = (((_2712 * cbLight._m0[_2664].x) * _2725) * _2359) + ((((cbLight._m0[_2583].x * _2325) * _2636) * _2650) * _2372);
    float _2736 = (((_2712 * cbLight._m0[_2664].y) * _2725) * _2359) + ((((cbLight._m0[_2583].y * _2327) * _2636) * _2650) * _2372);
    float _2737 = (((_2712 * cbLight._m0[_2664].z) * _2725) * _2359) + ((((cbLight._m0[_2583].z * _2329) * _2636) * _2650) * _2372);
    float _2793;
    float _2795;
    float _2797;
    if (_2412)
    {
        _2793 = _2735;
        _2795 = _2736;
        _2797 = _2737;
    }
    else
    {
        uint _2799 = _2336 + 2u;
        uint _2803 = _2336 + 10u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _893) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _969;
        float _2820 = cbLight._m0[_2799].y + _970;
        float _2821 = cbLight._m0[_2799].z + _971;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2799].xyz));
        float _4781 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2833 = dot(vec3(_890, _891, _892), vec3(_2826, _2827, _2828));
        float _4792 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4803 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2854 = (exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2855 = 1.0 - _2818;
        float _2865 = (0.5 / (((_2612 * ((_2832 * _2855) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2855) + _2818) * _2832))) * _2832;
        float _4814 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2793 = (((_2854 * cbLight._m0[_2803].x) * _2867) * _2868) + _2735;
        _2795 = (((_2854 * cbLight._m0[_2803].y) * _2867) * _2868) + _2736;
        _2797 = (((_2854 * cbLight._m0[_2803].z) * _2867) * _2868) + _2737;
    }
    float _2899;
    float _2901;
    float _2903;
    if (_2521)
    {
        _2899 = _2793;
        _2901 = _2795;
        _2903 = _2797;
    }
    else
    {
        uint _2910 = _2336 + 3u;
        uint _2914 = _2336 + 11u;
        float _2928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2910].w)) * _893) * 0.949999988079071044921875);
        float _2929 = _2928 * _2928;
        float _2930 = cbLight._m0[_2910].x + _969;
        float _2931 = cbLight._m0[_2910].y + _970;
        float _2932 = cbLight._m0[_2910].z + _971;
        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
        float _2937 = _2936 * _2930;
        float _2938 = _2936 * _2931;
        float _2939 = _2936 * _2932;
        float _2940 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2910].xyz));
        float _4830 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2944 = dot(vec3(_890, _891, _892), vec3(_2937, _2938, _2939));
        float _4841 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2948 = dot(vec3(cbLight._m0[_2910].xyz), vec3(_2937, _2938, _2939));
        float _4852 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2952 = _2929 * _2929;
        float _2956 = ((_2947 * _2947) * (_2952 + (-1.0))) + 1.0;
        float _2965 = (exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2966 = 1.0 - _2929;
        float _2976 = (0.5 / (((_2612 * ((_2943 * _2966) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2966) + _2929) * _2943))) * _2943;
        float _4863 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2978 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2952 / ((_2956 * _2956) * 3.141590118408203125));
        float _2979 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2899 = (((_2965 * cbLight._m0[_2914].x) * _2978) * _2979) + _2793;
        _2901 = (((_2965 * cbLight._m0[_2914].y) * _2978) * _2979) + _2795;
        _2903 = (((_2965 * cbLight._m0[_2914].z) * _2978) * _2979) + _2797;
    }
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_2334.y == 0u)
    {
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.x;
        uint _3012 = uint((float(_3000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _3001))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _3001)));
        float _3022 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3023 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        uint _3026 = uint(isnan(14.0) ? _3023 : (isnan(_3023) ? 14.0 : min(_3023, 14.0)));
        uvec4 _3031 = texelFetch(g_lightClusterGridBuffer, int(((_3026 << 2u) + (_3012 << 6u)) >> 2u));
        uint _3032 = _3031.x;
        uint _3033 = _3000.z;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((((1u << ((_3033 >> 4u) & 15u)) + 4294967295u) & _3032) == 0u) || ((_3033 & 240u) == 0u))
        {
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
        }
        else
        {
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            uint _3263 = 0u;
            uint _3272;
            bool _3273;
            for (;;)
            {
                _3272 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                _3273 = _3272 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3273)
                {
                    frontier_phi_66_pred = _3262;
                    frontier_phi_66_pred_1 = _3261;
                    frontier_phi_66_pred_2 = _3260;
                    frontier_phi_66_pred_3 = _3259;
                    frontier_phi_66_pred_4 = _3258;
                    frontier_phi_66_pred_5 = _3257;
                }
                else
                {
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    uint _3387;
                    _3381 = _3257;
                    _3382 = _3258;
                    _3383 = _3259;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3272;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    for (;;)
                    {
                        uint _3391 = uint(findLSB(_3387)) + (_3263 << 5u);
                        uint _3388 = (_3387 + 4294967295u) & _3387;
                        uint _3393 = _3391 * 48u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 3u)).x));
                        uint _3413 = (_3391 * 48u) + 4u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3432 = (_3391 * 48u) + 8u;
                        vec3 _3443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x));
                        float _3447 = _3407.x - _2110;
                        float _3448 = _3407.y - _2111;
                        float _3449 = _3407.z - _2112;
                        float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                        float _3453 = inversesqrt(_3450);
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3457 = dot(vec3(_996, _999, _1002), vec3(_3454, _3455, _3456));
                        float _3462 = 1.0 - (_3450 * _3407.w);
                        float _4889 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3464 = sqrt(_3450) * _3426.w;
                        float _3467 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3457) + _3468;
                        float _3474 = _3464 * _3464;
                        float _3478 = ((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3463) / ((_3474 * 0.699999988079071044921875) + 1.0);
                        float _3482 = (-0.0) - _2110;
                        float _3483 = (-0.0) - _2111;
                        float _3484 = (-0.0) - _2112;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3498 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                        float _3499 = 1.0 - _1056;
                        float _3506 = sqrt(1.0 - ((1.0 - (_3499 * _3499)) * (1.0 - (_3498 * _3498))));
                        float _3507 = _3506 * _3506;
                        float _3508 = _3507 * _3507;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3511 = _3491 + _3456;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3519 = dot(vec3(_996, _999, _1002), vec3(_3489, _3490, _3491));
                        float _4905 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3523 = dot(vec3(_996, _999, _1002), vec3(_3515 * _3509, _3515 * _3510, _3515 * _3511));
                        float _4916 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3530 = ((_3526 * _3526) * (_3508 + (-1.0))) + 1.0;
                        float _3531 = _3467 * _3507;
                        float _3532 = _3531 * _3531;
                        float _3535 = ((1.0 - _3532) * _3457) + _3532;
                        float _4927 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3536 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3537 = 1.0 - _3507;
                        float _3547 = (0.5 / (((_3536 * ((_3522 * _3537) + _3507)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3507) * _3522))) * _3536;
                        float _4938 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3558 = (((_3508 * 3.1415927410125732421875) * (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) / ((_3530 * _3530) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125))) * _3463;
                        _3316 = (_3478 * _3426.x) + _3384;
                        _3317 = (_3478 * _3426.y) + _3385;
                        _3318 = (_3478 * _3426.z) + _3386;
                        _3313 = (_3558 * _3443.x) + _3381;
                        _3314 = (_3558 * _3443.y) + _3382;
                        _3315 = (_3558 * _3443.z) + _3383;
                        if (_3388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3381 = _3313;
                            _3382 = _3314;
                            _3383 = _3315;
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3388;
                        }
                    }
                    frontier_phi_66_pred = _3318;
                    frontier_phi_66_pred_1 = _3317;
                    frontier_phi_66_pred_2 = _3316;
                    frontier_phi_66_pred_3 = _3315;
                    frontier_phi_66_pred_4 = _3314;
                    frontier_phi_66_pred_5 = _3313;
                }
                _3123 = frontier_phi_66_pred;
                _3121 = frontier_phi_66_pred_1;
                _3119 = frontier_phi_66_pred_2;
                _3117 = frontier_phi_66_pred_3;
                _3115 = frontier_phi_66_pred_4;
                _3113 = frontier_phi_66_pred_5;
                uint _3264 = _3263 + 1u;
                if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3257 = _3113;
                    _3258 = _3115;
                    _3259 = _3117;
                    _3260 = _3119;
                    _3261 = _3121;
                    _3262 = _3123;
                    _3263 = _3264;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
        }
        uvec4 _3126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3127 = _3126.z;
        uint _3129 = (_3127 >> 8u) & 15u;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        if (((4294967295u << _3129) & _3032) == 0u)
        {
            _3225 = _3112;
            _3227 = _3114;
            _3229 = _3116;
            _3231 = _3118;
            _3233 = _3120;
            _3235 = _3122;
        }
        else
        {
            float _3250 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _3251 = _3250 * _2110;
            float _3252 = _3250 * _2111;
            float _3253 = _3250 * _2112;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3129 < ((_3127 >> 12u) & 15u))
            {
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3364 = _3112;
                float _3365 = _3114;
                float _3366 = _3116;
                float _3367 = _3118;
                float _3368 = _3120;
                float _3369 = _3122;
                uint _3370 = _3129;
                uint _3379;
                bool _3380;
                for (;;)
                {
                    _3379 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                    _3380 = _3379 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3380)
                    {
                        frontier_phi_72_pred = _3369;
                        frontier_phi_72_pred_1 = _3368;
                        frontier_phi_72_pred_2 = _3367;
                        frontier_phi_72_pred_3 = _3366;
                        frontier_phi_72_pred_4 = _3365;
                        frontier_phi_72_pred_5 = _3364;
                    }
                    else
                    {
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3576 = _3364;
                        float _3577 = _3365;
                        float _3578 = _3366;
                        float _3579 = _3367;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        uint _3582 = _3379;
                        uint _3583;
                        vec4 _3608;
                        float _3609;
                        vec4 _3624;
                        vec3 _3636;
                        vec4 _3651;
                        vec4 _3666;
                        float _3712;
                        bool _3713;
                        for (;;)
                        {
                            uint _3593 = ((_3370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3582));
                            _3583 = (_3582 + 4294967295u) & _3582;
                            uint _3595 = _3593 * 40u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3609 = _3608.w;
                            uint _3611 = (_3593 * 40u) + 4u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3593 * 40u) + 8u;
                            _3636 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x));
                            uint _3638 = (_3593 * 40u) + 16u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3593 * 40u) + 20u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3593 * 40u) + 24u;
                            vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3687 = (_3593 * 40u) + 28u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            _3712 = fma(_2112, _3700.z, fma(_2111, _3700.y, _3700.x * _2110)) + _3700.w;
                            _3713 = !((fma(_2112, _3681.z, fma(_2111, _3681.y, _3681.x * _2110)) + _3681.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3713)
                            {
                                float _3740 = _3608.x - _2110;
                                float _3741 = _3608.y - _2111;
                                float _3742 = _3608.z - _2112;
                                float _3743 = dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742));
                                float _3746 = inversesqrt(_3743);
                                float _3747 = _3746 * _3740;
                                float _3748 = _3746 * _3741;
                                float _3749 = _3746 * _3742;
                                float _3753 = 1.0 - (_3743 / (_3609 * _3609));
                                float _4949 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3758 = sqrt(_3743) * _3624.w;
                                float _3760 = 1.39999997615814208984375 / (_3758 + 1.39999997615814208984375);
                                float _3761 = _3760 * _3760;
                                float _3764 = ((1.0 - _3761) * dot(vec3(_3747, _3748, _3749), vec3(_996, _999, _1002))) + _3761;
                                float _3767 = _3758 * _3758;
                                float _3771 = (fma(_2112, _3651.z, fma(_2111, _3651.y, _3651.x * _2110)) + _3651.w) / _3712;
                                float _3772 = (fma(_2112, _3666.z, fma(_2111, _3666.y, _3666.x * _2110)) + _3666.w) / _3712;
                                float _3776 = 1.0 - dot(vec2(_3771, _3772), vec2(_3771, _3772));
                                float _4965 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3778 = _3777 * (((isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0))) * _3754) / ((_3767 * 0.699999988079071044921875) + 1.0));
                                float _3790 = exp2(log2(1.0 / ((_3767 * 3.5) + 5.0)) * 0.25);
                                float _3791 = 1.0 - _1056;
                                float _3798 = sqrt(1.0 - ((1.0 - (_3791 * _3791)) * (1.0 - (_3790 * _3790))));
                                float _3799 = _3798 * _3798;
                                float _3800 = _3799 * _3799;
                                float _3801 = _3747 - _3251;
                                float _3802 = _3748 - _3252;
                                float _3803 = _3749 - _3253;
                                float _3807 = inversesqrt(dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803)));
                                float _3811 = dot(vec3(_996, _999, _1002), vec3((-0.0) - _3251, (-0.0) - _3252, (-0.0) - _3253));
                                float _4976 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3815 = dot(vec3(_996, _999, _1002), vec3(_3807 * _3801, _3807 * _3802, _3807 * _3803));
                                float _4987 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3822 = ((_3818 * _3818) * (_3800 + (-1.0))) + 1.0;
                                float _3823 = _3760 * _3799;
                                float _3824 = _3823 * _3823;
                                float _3830 = ((1.0 - _3824) * dot(vec3(_996, _999, _1002), vec3(_3747, _3748, _3749))) + _3824;
                                float _4998 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3832 = 1.0 - _3799;
                                float _3842 = (0.5 / (((_3831 * ((_3814 * _3832) + _3799)) + 9.9999999392252902907785028219223e-09) + (((_3831 * _3832) + _3799) * _3814))) * _3831;
                                float _5009 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3852 = (_3777 * _3754) * (((_3800 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3822 * _3822) * ((_3767 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3778 * _3624.y;
                                frontier_phi_78_pred_1 = _3778 * _3624.x;
                                frontier_phi_78_pred_2 = _3852 * _3636.z;
                                frontier_phi_78_pred_3 = _3852 * _3636.y;
                                frontier_phi_78_pred_4 = _3852 * _3636.x;
                                frontier_phi_78_pred_5 = _3778 * _3624.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_78_pred;
                            _3859 = frontier_phi_78_pred_1;
                            _3858 = frontier_phi_78_pred_2;
                            _3857 = frontier_phi_78_pred_3;
                            _3856 = frontier_phi_78_pred_4;
                            _3861 = frontier_phi_78_pred_5;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            if (_3583 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3583;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3568;
                        frontier_phi_72_pred_1 = _3567;
                        frontier_phi_72_pred_2 = _3566;
                        frontier_phi_72_pred_3 = _3565;
                        frontier_phi_72_pred_4 = _3564;
                        frontier_phi_72_pred_5 = _3563;
                    }
                    _3236 = frontier_phi_72_pred;
                    _3234 = frontier_phi_72_pred_1;
                    _3232 = frontier_phi_72_pred_2;
                    _3230 = frontier_phi_72_pred_3;
                    _3228 = frontier_phi_72_pred_4;
                    _3226 = frontier_phi_72_pred_5;
                    uint _3371 = _3370 + 1u;
                    if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3364 = _3226;
                        _3365 = _3228;
                        _3366 = _3230;
                        _3367 = _3232;
                        _3368 = _3234;
                        _3369 = _3236;
                        _3370 = _3371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3236;
                frontier_phi_60_61_ladder_1 = _3234;
                frontier_phi_60_61_ladder_2 = _3230;
                frontier_phi_60_61_ladder_3 = _3228;
                frontier_phi_60_61_ladder_4 = _3226;
                frontier_phi_60_61_ladder_5 = _3232;
            }
            else
            {
                frontier_phi_60_61_ladder = _3122;
                frontier_phi_60_61_ladder_1 = _3120;
                frontier_phi_60_61_ladder_2 = _3116;
                frontier_phi_60_61_ladder_3 = _3114;
                frontier_phi_60_61_ladder_4 = _3112;
                frontier_phi_60_61_ladder_5 = _3118;
            }
            _3225 = frontier_phi_60_61_ladder_4;
            _3227 = frontier_phi_60_61_ladder_3;
            _3229 = frontier_phi_60_61_ladder_2;
            _3231 = frontier_phi_60_61_ladder_5;
            _3233 = frontier_phi_60_61_ladder_1;
            _3235 = frontier_phi_60_61_ladder;
        }
        float _3240 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3045 = (_3240 * _3231) + _2576;
        _3047 = (_3240 * _3233) + _2578;
        _3049 = (_3240 * _3235) + _2580;
        _3051 = ((_3225 * 0.039999999105930328369140625) * _3240) + _2899;
        _3053 = ((_3227 * 0.039999999105930328369140625) * _3240) + _2901;
        _3055 = ((_3229 * 0.039999999105930328369140625) * _3240) + _2903;
    }
    else
    {
        _3045 = _2576;
        _3047 = _2578;
        _3049 = _2580;
        _3051 = _2899;
        _3053 = _2901;
        _3055 = _2903;
    }
    float _5025 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5036 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _5047 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    uint _3075 = _283 + 6u;
    float _3083 = _977 / cbSceneParam._m0[86u].x;
    float _3084 = _978 / cbSceneParam._m0[86u].y;
    vec4 _3098 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3100 = _3098.x;
    float _3101 = _3098.y;
    float _3102 = _3098.z;
    float _3103 = _3098.w;
    float _3175;
    float _3177;
    float _3179;
    float _3181;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _3137 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _3138 = _3137 / _911;
        float _3149 = _3138 * _962;
        float _3150 = _963 * _3138;
        float _3151 = (-0.0) - _3150;
        float _3153 = _3138 * _964;
        float _3155 = (cbSceneParam._m0[77u].w * _3151) / _3137;
        float _3156 = _3155 + cbSceneParam._m0[79u].w;
        float _3157 = cbSceneParam._m0[79u].w - _3150;
        float _3163 = sqrt(((_3149 * _3149) + (_3150 * _3150)) + (_3153 * _3153));
        float _3166 = (1.0 - (cbSceneParam._m0[77u].w / _3137)) * _3163;
        float _3171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3326;
        if (abs((_3151 - _3155) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3326 = ((((_3156 > 0.0) ? exp2(_3171 * _3156) : (2.0 - exp2(_3173 * _3156))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3166;
        }
        else
        {
            float _3286 = 1.0 / cbSceneParam._m0[80u].x;
            float _3287 = isnan(_3157) ? _3156 : (isnan(_3156) ? _3157 : max(_3156, _3157));
            float _3288 = isnan(_3157) ? _3156 : (isnan(_3156) ? _3157 : min(_3156, _3157));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            _3326 = ((abs(_3163 / _3151) * cbSceneParam._m0[80u].y) * ((((_3297 - _3298) * 2.0) - ((exp2(_3171 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0)))) - exp2(_3171 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))))) * _3286)) - ((exp2(_3173 * _3297) - exp2(_3173 * _3298)) * _3286))) + (_3166 * cbSceneParam._m0[80u].z);
        }
        vec4 _3328 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, 1.0), 0.0);
        float _3337 = exp2((_3326 * (-1.44269502162933349609375)) * (1.0 - _3328.w));
        float _3338 = log2(_3337);
        float _3354 = log2(_3103);
        _3175 = (exp2(_3354 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].x)) * _3328.x) / cbSceneParam._m0[78u].x)) + _3100;
        _3177 = (exp2(_3354 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].y)) * _3328.y) / cbSceneParam._m0[78u].y)) + _3101;
        _3179 = (exp2(_3354 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].z)) * _3328.z) / cbSceneParam._m0[78u].z)) + _3102;
        _3181 = _3337 * _3103;
    }
    else
    {
        _3175 = _3100;
        _3177 = _3101;
        _3179 = _3102;
        _3181 = _3103;
    }
    float _3193 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3194 = _3193 == 3.0;
    float _3195 = log2(_3181);
    float _3202 = exp2(_3195 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3045 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1040))) + ((_3051 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3203 = exp2(_3195 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3047 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1040))) + ((_3053 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3204 = exp2(_3195 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3049 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1040))) + ((_3055 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _3213 = (_3193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3213 * (_3194 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3175)));
    SV_Target.y = _3213 * (_3194 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3177)));
    SV_Target.z = _3213 * (_3194 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3179)));
    SV_Target.w = cbInstanceData._m0[_3075].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3075].w;
}


