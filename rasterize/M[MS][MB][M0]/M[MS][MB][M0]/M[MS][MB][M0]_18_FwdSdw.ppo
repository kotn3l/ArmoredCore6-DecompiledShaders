#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1103;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3695 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _375 = _373.x;
    float _376 = 1.0 - _375;
    float _385 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _388 = ((isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : min(_385, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _397 = (_388 - ((((((_375 - _376) * cbMtdParam._m0[24u].z) + _376) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _388))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3716 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _405 = (_398 * (cbMtdParam._m0[17u].x - _288)) + _288;
    float _406 = (_398 * (cbMtdParam._m0[17u].y - _289)) + _289;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _290)) + _290;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3727 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _453) + _405;
    float _462 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _453) + _406;
    float _463 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _453) + _407;
    float _468 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3738 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _499 = (_398 * (_482.z - _468)) + _468;
    float _502 = ((cbMtdParam._m0[23u].y - _499) * _453) + _499;
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _530 = (_524.x * 2.0) + (-1.0);
    float _531 = (_524.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3749 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _549 = (((_489 - _355) + (cbMtdParam._m0[21u].x * _355)) * _398) + _355;
    float _550 = (((_490 - _356) + (cbMtdParam._m0[21u].x * _356)) * _398) + _356;
    float _551 = (_398 * (sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) - _350)) + _350;
    float _562 = (((_530 - _549) + (_549 * cbMtdParam._m0[22u].z)) * _453) + _549;
    float _563 = (((_531 - _550) + (_550 * cbMtdParam._m0[22u].z)) * _453) + _550;
    float _564 = ((sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _551) * _453) + _551;
    float _566 = cbMtdParam._m0[22u].x + _334.w;
    float _569 = fma(_564, _230 * NORMAL.x, fma(_563, _237 * TANGENT.x, (_223 * _215) * _562));
    float _572 = fma(_564, _230 * NORMAL.y, fma(_563, _237 * TANGENT.y, (_223 * _216) * _562));
    float _575 = fma(_564, _230 * NORMAL.z, fma(_563, _237 * TANGENT.z, (_223 * _217) * _562));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3760 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _583 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3782 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3793 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3804 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _688 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _691 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _694 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    uint _708 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_708].z;
    float _3815 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    vec4 _728 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _732 = ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * TEXCOORD_5.w) * _728.x;
    float _733 = dot(vec3(_580, _581, _582), vec3(_658, _659, _660));
    float _736 = _733 * 2.0;
    float _740 = (_736 * _580) - _658;
    float _741 = (_736 * _581) - _659;
    float _742 = (_736 * _582) - _660;
    float _746 = abs(dot(vec3(_658, _659, _660), vec3(_580, _581, _582)));
    float _3848 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _748 = sqrt(_583);
    float _761 = exp2((_748 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_748 * 3.0));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1102;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _827 = fma(_801, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793));
        float _831 = fma(_801, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793));
        float _835 = fma(_801, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793));
        float _860 = _793 + _580;
        float _861 = _797 + _581;
        float _862 = _801 + _582;
        float _872 = fma(_862, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860)) - _827;
        float _873 = fma(_862, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860)) - _831;
        float _874 = fma(_862, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860)) - _835;
        float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
        float _891 = ((_878 * _872) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_827 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_878 * _873) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_831 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_878 * _874) / cbModelParam._m0[34u].z) + ((((((_835 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        float _930 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_896.x + (-0.5));
        float _932 = _930 * (_896.y + (-0.5));
        float _933 = _930 * (_896.z + (-0.5));
        float _940 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_903.x + (-0.5));
        float _942 = _940 * (_903.y + (-0.5));
        float _943 = _940 * (_903.z + (-0.5));
        float _950 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_910.x + (-0.5));
        float _952 = _950 * (_910.y + (-0.5));
        float _953 = _950 * (_910.z + (-0.5));
        float _960 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_917.x + (-0.5));
        float _962 = _960 * (_917.y + (-0.5));
        float _963 = _960 * (_917.z + (-0.5));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = _931 * 0.5;
        float _968 = _941 * 0.5;
        float _969 = _951 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _984 = (dot(vec3(_580, _581, _582), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _994 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3896 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_996 + 1.0))) + _1001) * _964;
        float _1011 = _932 * 0.5;
        float _1012 = _942 * 0.5;
        float _1013 = _952 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_580, _581, _582), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3929 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1038 + 1.0))) + _1043) * _965;
        float _1053 = _933 * 0.5;
        float _1054 = _943 * 0.5;
        float _1055 = _953 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_580, _581, _582), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3962 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1080 + 1.0))) + _1085) * _966;
        _1102 = _933;
        _1104 = _932;
        _1105 = _931;
        _1106 = _943;
        _1107 = _942;
        _1108 = _941;
        _1109 = _953;
        _1110 = _952;
        _1111 = _951;
        _1112 = _966;
        _1113 = _965;
        _1114 = _964;
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
    }
    else
    {
        _1102 = _1103;
        _1104 = _1103;
        _1105 = _1103;
        _1106 = _1103;
        _1107 = _1103;
        _1108 = _1103;
        _1109 = _1103;
        _1110 = _1103;
        _1111 = _1103;
        _1112 = _1103;
        _1113 = _1103;
        _1114 = _1103;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1142 = fma(_801, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793));
        float _1146 = fma(_801, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793));
        float _1150 = fma(_801, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793));
        float _1173 = _793 + _580;
        float _1174 = _797 + _581;
        float _1175 = _801 + _582;
        float _1185 = fma(_1175, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173)) - _1142;
        float _1186 = fma(_1175, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173)) - _1146;
        float _1187 = fma(_1175, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173)) - _1150;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1142 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1146 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[35u].z) + ((((((_1150 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1241 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1208.x + (-0.5));
        float _1243 = _1241 * (_1208.y + (-0.5));
        float _1244 = _1241 * (_1208.z + (-0.5));
        float _1251 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1215.x + (-0.5));
        float _1253 = _1251 * (_1215.y + (-0.5));
        float _1254 = _1251 * (_1215.z + (-0.5));
        float _1261 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1222.x + (-0.5));
        float _1263 = _1261 * (_1222.y + (-0.5));
        float _1264 = _1261 * (_1222.z + (-0.5));
        float _1271 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1229.x + (-0.5));
        float _1273 = _1271 * (_1229.y + (-0.5));
        float _1274 = _1271 * (_1229.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_580, _581, _582), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4025 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1305 + 1.0))) + _1310) * _1275;
        float _1320 = _1243 * 0.5;
        float _1321 = _1253 * 0.5;
        float _1322 = _1263 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_580, _581, _582), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4058 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1347 + 1.0))) + _1352) * _1276;
        float _1362 = _1244 * 0.5;
        float _1363 = _1254 * 0.5;
        float _1364 = _1264 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_580, _581, _582), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4091 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1389 + 1.0))) + _1394) * _1277;
        _1411 = _1244;
        _1412 = _1243;
        _1413 = _1242;
        _1414 = _1254;
        _1415 = _1253;
        _1416 = _1252;
        _1417 = _1264;
        _1418 = _1263;
        _1419 = _1262;
        _1420 = _1277;
        _1421 = _1276;
        _1422 = _1275;
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1103;
        _1412 = _1103;
        _1413 = _1103;
        _1414 = _1103;
        _1415 = _1103;
        _1416 = _1103;
        _1417 = _1103;
        _1418 = _1103;
        _1419 = _1103;
        _1420 = _1103;
        _1421 = _1103;
        _1422 = _1103;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1115)) + _1115;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1116)) + _1116;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1117)) + _1117;
    float _1458 = fma(_1437, cbSceneParam._m0[89u].z, fma(_1436, cbSceneParam._m0[89u].y, _1435 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1437, cbSceneParam._m0[90u].z, fma(_1436, cbSceneParam._m0[90u].y, _1435 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1437, cbSceneParam._m0[91u].z, fma(_1436, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1435));
    float _1479 = _740 * 0.5;
    float _1480 = _741 * 0.5;
    float _1481 = _742 * 0.5;
    float _1482 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1485 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1488 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1522;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1495 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1102, _1106, _1109, _1112));
        float _1499 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1503 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1510 = dot(vec4(cbModelParam._m0[39u]), vec4(_1479, _1480, _1481, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1533;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1524 = dot(vec4(cbModelParam._m0[40u]), vec4(_1479, _1480, _1481, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1537 = (_1533 * cbModelParam._m0[1u].x) + (_1522 * (1.0 - cbModelParam._m0[1u].x));
    float _1547 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1547 : min(cbModelParam._m0[25u].z, _1547));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1596 = fma(_801, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793)) + cbModelParam._m0[13u].w;
        float _1600 = fma(_801, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793)) + cbModelParam._m0[14u].w;
        float _1604 = fma(_801, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793)) + cbModelParam._m0[15u].w;
        float _1607 = fma(_742, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740));
        float _1610 = fma(_742, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740));
        float _1613 = fma(_742, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740));
        float _1641;
        if (_1607 > 0.0)
        {
            _1641 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1641 = frontier_phi_14_12_ladder;
        }
        float _1812;
        if (_1610 > 0.0)
        {
            _1812 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1812 = frontier_phi_23_19_ladder;
        }
        float _2108;
        if (_1613 > 0.0)
        {
            _2108 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2108 = frontier_phi_35_30_ladder;
        }
        float _2110 = isnan(_1812) ? _1641 : (isnan(_1641) ? _1812 : min(_1641, _1812));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1607) + _1596;
        float _2116 = (_2111 * _1610) + _1600;
        float _2117 = (_2111 * _1613) + _1604;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1548);
            frontier_phi_13_35_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1629 = frontier_phi_13_35_ladder_2;
        _1631 = frontier_phi_13_35_ladder_1;
        _1633 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_740, _741, _742), _1548);
        _1629 = _1617.x * cbModelParam._m0[1u].y;
        _1631 = _1617.y * cbModelParam._m0[1u].y;
        _1633 = _1617.z * cbModelParam._m0[1u].y;
    }
    float _1637 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1637 : min(cbModelParam._m0[25u].w, _1637));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_801, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_801, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_801, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_742, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740));
        float _1706 = fma(_742, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740));
        float _1709 = fma(_742, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740));
        float _1817;
        if (_1703 > 0.0)
        {
            _1817 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1817 = frontier_phi_25_21_ladder;
        }
        float _2135;
        if (_1706 > 0.0)
        {
            _2135 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2135 = frontier_phi_37_32_ladder;
        }
        float _2462;
        if (_1709 > 0.0)
        {
            _2462 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2462 = frontier_phi_47_44_ladder;
        }
        float _2464 = isnan(_2135) ? _1817 : (isnan(_1817) ? _2135 : min(_1817, _2135));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1703) + _1692;
        float _2470 = (_2465 * _1706) + _1696;
        float _2471 = (_2465 * _1709) + _1700;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2472;
        float _2475 = _2472 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2471 > _2475) || ((_2471 < _2473) || ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 < _2473) || (_2469 > _2475))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2471, cbModelParam._m0[17u].z, fma(_2470, cbModelParam._m0[17u].y, _2469 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2471, cbModelParam._m0[18u].z, fma(_2470, cbModelParam._m0[18u].y, _2469 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2471, cbModelParam._m0[19u].z, fma(_2470, cbModelParam._m0[19u].y, _2469 * cbModelParam._m0[19u].x))), _1638);
            frontier_phi_22_47_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_22_47_ladder_2;
        _1730 = frontier_phi_22_47_ladder_1;
        _1732 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_740, _741, _742), _1638);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1744 = ((((1.0 - _761) * ((_748 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_761 * _748)) * _732;
    float _1745 = _1744 * ((cbModelParam._m0[1u].w * (_1728 - _1629)) + _1629);
    float _1746 = _1744 * ((cbModelParam._m0[1u].w * (_1730 - _1631)) + _1631);
    float _1747 = _1744 * ((cbModelParam._m0[1u].w * (_1732 - _1633)) + _1633);
    float _1750 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1804 = _1791 / _1803;
    float _1805 = _1795 / _1803;
    float _1806 = _1799 / _1803;
    float _1953;
    float _1954;
    float _1955;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1833 = ((uint(_1806 > cbSceneParam._m0[59u].y) + uint(_1806 > cbSceneParam._m0[59u].x)) + uint(_1806 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1834 = _1833 + 43u;
        uint _1842 = _1833 + 44u;
        uint _1850 = _1833 + 45u;
        uint _1858 = _1833 + 46u;
        float _1869 = fma(_1803, cbSceneParam._m0[_1834].w, fma(_1799, cbSceneParam._m0[_1834].z, fma(_1795, cbSceneParam._m0[_1834].y, _1791 * cbSceneParam._m0[_1834].x)));
        float _1873 = fma(_1803, cbSceneParam._m0[_1842].w, fma(_1799, cbSceneParam._m0[_1842].z, fma(_1795, cbSceneParam._m0[_1842].y, _1791 * cbSceneParam._m0[_1842].x)));
        float _1881 = fma(_1803, cbSceneParam._m0[_1858].w, fma(_1799, cbSceneParam._m0[_1858].z, fma(_1795, cbSceneParam._m0[_1858].y, _1791 * cbSceneParam._m0[_1858].x)));
        float _1886 = cbSceneParam._m0[33u].z * _1881;
        float _1888 = cbSceneParam._m0[33u].w * _1881;
        float _1891 = fma(_1803, cbSceneParam._m0[_1850].w, fma(_1799, cbSceneParam._m0[_1850].z, fma(_1795, cbSceneParam._m0[_1850].y, _1791 * cbSceneParam._m0[_1850].x))) / _1881;
        float _1939 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
        float _4217 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1946 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 + _1869) / _1881, (_1888 + _1873) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1888 + _1869) / _1881, (_1873 - _1886) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1886) / _1881, (_1873 - _1888) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1888) / _1881, (_1886 + _1873) / _1881), _1891), 0.0)).x), vec4(0.25)));
        _1953 = 1.0 - (_1946 * cbSceneParam._m0[34u].x);
        _1954 = 1.0 - (_1946 * cbSceneParam._m0[34u].y);
        _1955 = 1.0 - (_1946 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1953 = 1.0;
        _1954 = 1.0;
        _1955 = 1.0;
    }
    float _2019;
    float _2021;
    float _2023;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2007 = fma(_1803, cbSceneParam._m0[63u].w, fma(_1799, cbSceneParam._m0[63u].z, fma(_1795, cbSceneParam._m0[63u].y, _1791 * cbSceneParam._m0[63u].x)));
        float _2008 = fma(_1803, cbSceneParam._m0[60u].w, fma(_1799, cbSceneParam._m0[60u].z, fma(_1795, cbSceneParam._m0[60u].y, _1791 * cbSceneParam._m0[60u].x))) / _2007;
        float _2009 = fma(_1803, cbSceneParam._m0[61u].w, fma(_1799, cbSceneParam._m0[61u].z, fma(_1795, cbSceneParam._m0[61u].y, _1791 * cbSceneParam._m0[61u].x))) / _2007;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2008 >= cbSceneParam._m0[64u].x) && (_2009 >= cbSceneParam._m0[64u].y)) && (_2008 <= cbSceneParam._m0[64u].z)) && (_2009 <= cbSceneParam._m0[64u].w))
        {
            float _2148 = fma(_1803, cbSceneParam._m0[62u].w, fma(_1799, cbSceneParam._m0[62u].z, fma(_1795, cbSceneParam._m0[62u].y, _1791 * cbSceneParam._m0[62u].x))) / _2007;
            float _2152 = isnan(cbSceneParam._m0[41u].w) ? _2148 : (isnan(_2148) ? cbSceneParam._m0[41u].w : max(_2148, cbSceneParam._m0[41u].w));
            float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
            float _4233 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
            float _2202 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2008, cbSceneParam._m0[33u].w + _2009), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2008, _2009 - cbSceneParam._m0[33u].z), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].z, _2009 - cbSceneParam._m0[33u].w), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2009), _2152), 0.0)).x), vec4(0.25)));
            float _2206 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
            float _2207 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
            float _2208 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2208) ? _1955 : (isnan(_1955) ? _2208 : min(_1955, _2208));
            frontier_phi_34_33_ladder_1 = isnan(_2207) ? _1954 : (isnan(_1954) ? _2207 : min(_1954, _2207));
            frontier_phi_34_33_ladder_2 = isnan(_2206) ? _1953 : (isnan(_1953) ? _2206 : min(_1953, _2206));
        }
        else
        {
            frontier_phi_34_33_ladder = _1955;
            frontier_phi_34_33_ladder_1 = _1954;
            frontier_phi_34_33_ladder_2 = _1953;
        }
        _2019 = frontier_phi_34_33_ladder_2;
        _2021 = frontier_phi_34_33_ladder_1;
        _2023 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2019 = _1953;
        _2021 = _1954;
        _2023 = _1955;
    }
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _732 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2067 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2071 = _2030 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_580, _581, _582));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_580, _581, _582));
    float _4269 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4280 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2047].x * _2053) * _2092) + (((cbLight._m0[_2057].x * _2019) * _2067) * _2090);
    float _2100 = ((_2053 * cbLight._m0[_2047].y) * _2092) + (((cbLight._m0[_2057].y * _2021) * _2067) * _2090);
    float _2101 = ((_2053 * cbLight._m0[_2047].z) * _2092) + (((cbLight._m0[_2057].z * _2023) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2107)
    {
        _2209 = _2099;
        _2211 = _2100;
        _2213 = _2101;
    }
    else
    {
        uint _2217 = _2030 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4291 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2236 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2099;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2100;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2101;
    }
    bool _2216 = _2105.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2216)
    {
        _2271 = _2209;
        _2273 = _2211;
        _2275 = _2213;
    }
    else
    {
        uint _2433 = _2030 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4307 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2452 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2271 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2209;
        _2273 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2211;
        _2275 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2213;
    }
    uint _2278 = _2030 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _583) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2030].x + _658;
    float _2294 = cbLight._m0[_2030].y + _659;
    float _2295 = cbLight._m0[_2030].z + _660;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2030].xyz));
    float _4323 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2307 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2308 = dot(vec3(_580, _581, _582), vec3(_2300, _2301, _2302));
    float _4345 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2300, _2301, _2302));
    float _4356 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2331 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2332 = 1.0 - _2292;
    float _2343 = (0.5 / (((_2307 * ((_2306 * _2332) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2332) + _2292) * _2306))) * _2306;
    float _4367 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2359 = _2030 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _583) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2071].x + _658;
    float _2373 = cbLight._m0[_2071].y + _659;
    float _2374 = cbLight._m0[_2071].z + _660;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2071].xyz));
    float _4378 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2386 = dot(vec3(_580, _581, _582), vec3(_2379, _2380, _2381));
    float _4389 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2379, _2380, _2381));
    float _4400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2408 = 1.0 - _2371;
    float _2418 = (0.5 / (((_2307 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2408) + _2371) * _2385))) * _2385;
    float _4411 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2430 = (((_2407 * cbLight._m0[_2359].x) * _2420) * _2053) + ((((cbLight._m0[_2278].x * _2019) * _2331) * _2345) * _2067);
    float _2431 = (((_2407 * cbLight._m0[_2359].y) * _2420) * _2053) + ((((cbLight._m0[_2278].y * _2021) * _2331) * _2345) * _2067);
    float _2432 = (((_2407 * cbLight._m0[_2359].z) * _2420) * _2053) + ((((cbLight._m0[_2278].z * _2023) * _2331) * _2345) * _2067);
    float _2488;
    float _2490;
    float _2492;
    if (_2107)
    {
        _2488 = _2430;
        _2490 = _2431;
        _2492 = _2432;
    }
    else
    {
        uint _2494 = _2030 + 2u;
        uint _2498 = _2030 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _583) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _658;
        float _2515 = cbLight._m0[_2494].y + _659;
        float _2516 = cbLight._m0[_2494].z + _660;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2494].xyz));
        float _4422 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2528 = dot(vec3(_580, _581, _582), vec3(_2521, _2522, _2523));
        float _4433 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4444 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2549 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2550 = 1.0 - _2513;
        float _2560 = (0.5 / (((_2307 * ((_2527 * _2550) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2550) + _2513) * _2527))) * _2527;
        float _4455 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2488 = (((_2549 * cbLight._m0[_2498].x) * _2562) * _2563) + _2430;
        _2490 = (((_2549 * cbLight._m0[_2498].y) * _2562) * _2563) + _2431;
        _2492 = (((_2549 * cbLight._m0[_2498].z) * _2562) * _2563) + _2432;
    }
    float _2594;
    float _2596;
    float _2598;
    if (_2216)
    {
        _2594 = _2488;
        _2596 = _2490;
        _2598 = _2492;
    }
    else
    {
        uint _2605 = _2030 + 3u;
        uint _2609 = _2030 + 11u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _583) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _658;
        float _2626 = cbLight._m0[_2605].y + _659;
        float _2627 = cbLight._m0[_2605].z + _660;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2605].xyz));
        float _4471 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2639 = dot(vec3(_580, _581, _582), vec3(_2632, _2633, _2634));
        float _4482 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4493 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2661 = 1.0 - _2624;
        float _2671 = (0.5 / (((_2307 * ((_2638 * _2661) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2661) + _2624) * _2638))) * _2638;
        float _4504 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2594 = (((_2660 * cbLight._m0[_2609].x) * _2673) * _2674) + _2488;
        _2596 = (((_2660 * cbLight._m0[_2609].y) * _2673) * _2674) + _2490;
        _2598 = (((_2660 * cbLight._m0[_2609].z) * _2673) * _2674) + _2492;
    }
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_2028.y == 0u)
    {
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2696)));
        float _2717 = (log2(_1806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
        }
        else
        {
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2968)
                {
                    frontier_phi_66_pred = _2957;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2967;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2958 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _1804;
                        float _3143 = _3102.y - _1805;
                        float _3144 = _3102.z - _1806;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_688, _691, _694), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4530 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _1804;
                        float _3178 = (-0.0) - _1805;
                        float _3179 = (-0.0) - _1806;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3193 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _748;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3206 = _3186 + _3151;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_688, _691, _694), vec3(_3184, _3185, _3186));
                        float _4546 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3218 = dot(vec3(_688, _691, _694), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4557 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3162 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3152) + _3227;
                        float _4568 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4579 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3225 * _3225) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3011 = (_3173 * _3121.x) + _3079;
                        _3012 = (_3173 * _3121.y) + _3080;
                        _3013 = (_3173 * _3121.z) + _3081;
                        _3008 = (_3253 * _3138.x) + _3076;
                        _3009 = (_3253 * _3138.y) + _3077;
                        _3010 = (_3253 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                _2818 = frontier_phi_66_pred;
                _2816 = frontier_phi_66_pred_1;
                _2814 = frontier_phi_66_pred_2;
                _2812 = frontier_phi_66_pred_3;
                _2810 = frontier_phi_66_pred_4;
                _2808 = frontier_phi_66_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2808;
                    _2953 = _2810;
                    _2954 = _2812;
                    _2955 = _2814;
                    _2956 = _2816;
                    _2957 = _2818;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
        }
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.z;
        uint _2824 = (_2822 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2824) & _2727) == 0u)
        {
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
            _2926 = _2813;
            _2928 = _2815;
            _2930 = _2817;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
            float _2946 = _2945 * _1804;
            float _2947 = _2945 * _1805;
            float _2948 = _2945 * _1806;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2824 < ((_2822 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3059 = _2807;
                float _3060 = _2809;
                float _3061 = _2811;
                float _3062 = _2813;
                float _3063 = _2815;
                float _3064 = _2817;
                uint _3065 = _2824;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3075)
                    {
                        frontier_phi_72_pred = _3064;
                        frontier_phi_72_pred_1 = _3063;
                        frontier_phi_72_pred_2 = _3062;
                        frontier_phi_72_pred_3 = _3061;
                        frontier_phi_72_pred_4 = _3060;
                        frontier_phi_72_pred_5 = _3059;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        uint _3277 = _3074;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3347;
                        vec4 _3362;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3288 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3334 = (_3288 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3288 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3288 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3288 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_1806, _3396.z, fma(_1805, _3396.y, _3396.x * _1804)) + _3396.w;
                            _3409 = !((fma(_1806, _3377.z, fma(_1805, _3377.y, _3377.x * _1804)) + _3377.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3303.x - _1804;
                                float _3437 = _3303.y - _1805;
                                float _3438 = _3303.z - _1806;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3304 * _3304));
                                float _4590 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3454 = sqrt(_3439) * _3319.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_688, _691, _694))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_1806, _3347.z, fma(_1805, _3347.y, _3347.x * _1804)) + _3347.w) / _3408;
                                float _3468 = (fma(_1806, _3362.z, fma(_1805, _3362.y, _3362.x * _1804)) + _3362.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4606 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _748;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3499 = _3445 - _2948;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_688, _691, _694), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4617 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3511 = dot(vec3(_688, _691, _694), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4628 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_688, _691, _694), vec3(_3443, _3444, _3445))) + _3520;
                                float _4639 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4650 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3474 * _3319.y;
                                frontier_phi_78_pred_1 = _3474 * _3319.x;
                                frontier_phi_78_pred_2 = _3548 * _3331.z;
                                frontier_phi_78_pred_3 = _3548 * _3331.y;
                                frontier_phi_78_pred_4 = _3548 * _3331.x;
                                frontier_phi_78_pred_5 = _3474 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_78_pred;
                            _3555 = frontier_phi_78_pred_1;
                            _3554 = frontier_phi_78_pred_2;
                            _3553 = frontier_phi_78_pred_3;
                            _3552 = frontier_phi_78_pred_4;
                            _3557 = frontier_phi_78_pred_5;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3263;
                        frontier_phi_72_pred_1 = _3262;
                        frontier_phi_72_pred_2 = _3261;
                        frontier_phi_72_pred_3 = _3260;
                        frontier_phi_72_pred_4 = _3259;
                        frontier_phi_72_pred_5 = _3258;
                    }
                    _2931 = frontier_phi_72_pred;
                    _2929 = frontier_phi_72_pred_1;
                    _2927 = frontier_phi_72_pred_2;
                    _2925 = frontier_phi_72_pred_3;
                    _2923 = frontier_phi_72_pred_4;
                    _2921 = frontier_phi_72_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2921;
                        _3060 = _2923;
                        _3061 = _2925;
                        _3062 = _2927;
                        _3063 = _2929;
                        _3064 = _2931;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2929;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2923;
                frontier_phi_60_61_ladder_4 = _2921;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_60_61_ladder = _2817;
                frontier_phi_60_61_ladder_1 = _2815;
                frontier_phi_60_61_ladder_2 = _2811;
                frontier_phi_60_61_ladder_3 = _2809;
                frontier_phi_60_61_ladder_4 = _2807;
                frontier_phi_60_61_ladder_5 = _2813;
            }
            _2920 = frontier_phi_60_61_ladder_4;
            _2922 = frontier_phi_60_61_ladder_3;
            _2924 = frontier_phi_60_61_ladder_2;
            _2926 = frontier_phi_60_61_ladder_5;
            _2928 = frontier_phi_60_61_ladder_1;
            _2930 = frontier_phi_60_61_ladder;
        }
        float _2935 = isnan(1.0) ? _732 : (isnan(_732) ? 1.0 : min(_732, 1.0));
        _2740 = (_2935 * _2926) + _2271;
        _2742 = (_2935 * _2928) + _2273;
        _2744 = (_2935 * _2930) + _2275;
        _2746 = ((_2920 * 0.039999999105930328369140625) * _2935) + _2594;
        _2748 = ((_2922 * 0.039999999105930328369140625) * _2935) + _2596;
        _2750 = ((_2924 * 0.039999999105930328369140625) * _2935) + _2598;
    }
    else
    {
        _2740 = _2271;
        _2742 = _2273;
        _2744 = _2275;
        _2746 = _2594;
        _2748 = _2596;
        _2750 = _2598;
    }
    float _4666 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4677 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4688 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    uint _2770 = _243 + 6u;
    float _2778 = _666 / cbSceneParam._m0[86u].x;
    float _2779 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2793 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2778, _2779, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2795 = _2793.x;
    float _2796 = _2793.y;
    float _2797 = _2793.z;
    float _2798 = _2793.w;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2832 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2833 = _2832 / _601;
        float _2844 = _2833 * _651;
        float _2845 = _652 * _2833;
        float _2846 = (-0.0) - _2845;
        float _2848 = _2833 * _653;
        float _2850 = (cbSceneParam._m0[77u].w * _2846) / _2832;
        float _2851 = _2850 + cbSceneParam._m0[79u].w;
        float _2852 = cbSceneParam._m0[79u].w - _2845;
        float _2858 = sqrt(((_2844 * _2844) + (_2845 * _2845)) + (_2848 * _2848));
        float _2861 = (1.0 - (cbSceneParam._m0[77u].w / _2832)) * _2858;
        float _2866 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2868 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2846 - _2850) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2851 > 0.0) ? exp2(_2866 * _2851) : (2.0 - exp2(_2868 * _2851))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2861;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : max(_2851, _2852));
            float _2983 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : min(_2851, _2852));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3021 = ((abs(_2858 / _2846) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2866 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2866 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2868 * _2992) - exp2(_2868 * _2993)) * _2981))) + (_2861 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2778, _2779, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2798);
        _2870 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2795;
        _2872 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2796;
        _2874 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2797;
        _2876 = _3032 * _2798;
    }
    else
    {
        _2870 = _2795;
        _2872 = _2796;
        _2874 = _2797;
        _2876 = _2798;
    }
    float _2888 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2889 = _2888 == 3.0;
    float _2890 = log2(_2876);
    float _2897 = exp2(_2890 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2740 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _732))) + ((_2746 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1537)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2890 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2742 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _732))) + ((_2748 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1537)) * cbPerFrame._m0[3u].x));
    float _2899 = exp2(_2890 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2744 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _732))) + ((_2750 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1537)) * cbPerFrame._m0[3u].x));
    float _2908 = (_2888 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2908 * (_2889 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.y = _2908 * (_2889 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.z = _2908 * (_2889 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.w = cbInstanceData._m0[_2770].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2770].w;
}


