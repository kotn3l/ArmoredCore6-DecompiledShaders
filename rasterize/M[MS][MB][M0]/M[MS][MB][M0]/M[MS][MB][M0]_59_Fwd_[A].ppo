#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1273;
float _3632;
float _3633;
float _3634;
float _3635;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3644 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3655 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3666 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3677 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    float _440 = fma(_431, _238, fma(_437, _245, _436 * _231));
    float _443 = fma(_431, _239, fma(_437, _246, _436 * _232));
    float _446 = fma(_431, _240, fma(_437, _247, _436 * _233));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _496 = ((_488 - _489) * cbMtdParam._m0[24u].z) + _489;
    float _498 = (cbMtdParam._m0[19u].x + dot(vec4(_450 * _440, _450 * _443, _450 * _446, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_496 * cbMtdParam._m0[21u].z);
    float _3688 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _501 = (-0.0) - cbMtdParam._m0[24u].y;
    float _503 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
    float _511 = _499 - ((_499 * TEXCOORD_8.x) * _504);
    float _512 = _499 - ((_499 * TEXCOORD_8.y) * _504);
    float _513 = _499 - ((_499 * TEXCOORD_8.z) * _504);
    float _520 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _524 = ((isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : min(_520, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _532 = (_524 - (((_496 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _524))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3719 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _537 = ((_511 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) * _533) + _349;
    float _538 = ((_512 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) * _533) + _350;
    float _539 = ((_513 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) * _533) + _351;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_553 - _554) * cbMtdParam._m0[24u].w) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3730 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _537) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _582) + _537;
    float _591 = ((((cbMtdParam._m0[10u].y - _538) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _582) + _538;
    float _592 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _539)) * _582) + _539;
    float _597 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _611 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _618 = (_611.x * 2.0) + (-1.0);
    float _619 = (_611.y * 2.0) + (-1.0);
    float _620 = dot(vec2(_618, _619), vec2(_618, _619));
    float _3741 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _629 = (((_611.z - _597) * _511) * _533) + _597;
    float _632 = ((cbMtdParam._m0[23u].y - _629) * _582) + _629;
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _657 = (_651.x * 2.0) + (-1.0);
    float _658 = (_651.y * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _3752 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _679 = (((cbMtdParam._m0[21u].x * _436) + ((_618 - _436) * _511)) * _533) + _436;
    float _680 = (((cbMtdParam._m0[21u].x * _437) + ((_619 - _437) * _512)) * _533) + _437;
    float _681 = (((sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) - _431) * _513) * _533) + _431;
    float _692 = (((_657 - _679) + (_679 * cbMtdParam._m0[22u].z)) * _582) + _679;
    float _693 = (((_658 - _680) + (_680 * cbMtdParam._m0[22u].z)) * _582) + _680;
    float _694 = ((sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) - _681) * _582) + _681;
    float _696 = cbMtdParam._m0[22u].x + _416.w;
    float _699 = fma(_694, _238, fma(_693, _245, _692 * _231));
    float _702 = fma(_694, _239, fma(_693, _246, _692 * _232));
    float _705 = fma(_694, _240, fma(_693, _247, _692 * _233));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _3763 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _713 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3785 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3796 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3807 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _954 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _960 = (cbMatDynParam._m0[5u].x * _954) + cbMatDynParam._m0[5u].y;
        float _3818 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _965 = (cbMatDynParam._m0[5u].z * _954) + cbMatDynParam._m0[5u].w;
        float _3829 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) - _961)) + _961) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _830 = fma(_712, cbSceneParam._m0[5u].z, fma(_711, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _710));
    float _833 = fma(_712, cbSceneParam._m0[6u].z, fma(_711, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _710));
    float _836 = fma(_712, cbSceneParam._m0[7u].z, fma(_711, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _710));
    uint _849 = _269 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_850].z;
    float _3840 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _874 = ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * TEXCOORD_5.w) * _870.x;
    float _875 = dot(vec3(_710, _711, _712), vec3(_788, _789, _790));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _710) - _788;
    float _883 = (_878 * _711) - _789;
    float _884 = (_878 * _712) - _790;
    float _888 = abs(dot(vec3(_788, _789, _790), vec3(_710, _711, _712)));
    float _3873 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_713);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _1001 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _1005 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1030 = _935 + _710;
        float _1031 = _939 + _711;
        float _1032 = _943 + _712;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_710, _711, _712), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3921 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_710, _711, _712), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3954 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_710, _711, _712), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3987 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1315 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1319 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1323 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1346 = _935 + _710;
        float _1347 = _939 + _711;
        float _1348 = _943 + _712;
        float _1358 = fma(_1348, cbModelParam._m0[30u].z, fma(_1347, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1346)) - _1315;
        float _1359 = fma(_1348, cbModelParam._m0[31u].z, fma(_1347, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1346)) - _1319;
        float _1360 = fma(_1348, cbModelParam._m0[32u].z, fma(_1347, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1346)) - _1323;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1315 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1319 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[35u].z) + ((((((_1323 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1414 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1381.x + (-0.5));
        float _1416 = _1414 * (_1381.y + (-0.5));
        float _1417 = _1414 * (_1381.z + (-0.5));
        float _1424 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1388.x + (-0.5));
        float _1426 = _1424 * (_1388.y + (-0.5));
        float _1427 = _1424 * (_1388.z + (-0.5));
        float _1434 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1395.x + (-0.5));
        float _1436 = _1434 * (_1395.y + (-0.5));
        float _1437 = _1434 * (_1395.z + (-0.5));
        float _1444 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1402.x + (-0.5));
        float _1446 = _1444 * (_1402.y + (-0.5));
        float _1447 = _1444 * (_1402.z + (-0.5));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = _1415 * 0.5;
        float _1452 = _1425 * 0.5;
        float _1453 = _1435 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_710, _711, _712), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4050 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1478 + 1.0))) + _1483) * _1448;
        float _1493 = _1416 * 0.5;
        float _1494 = _1426 * 0.5;
        float _1495 = _1436 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_710, _711, _712), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4083 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1520 + 1.0))) + _1525) * _1449;
        float _1535 = _1417 * 0.5;
        float _1536 = _1427 * 0.5;
        float _1537 = _1437 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_710, _711, _712), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4116 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1562 + 1.0))) + _1567) * _1450;
        _1584 = _1417;
        _1585 = _1416;
        _1586 = _1415;
        _1587 = _1427;
        _1588 = _1426;
        _1589 = _1425;
        _1590 = _1437;
        _1591 = _1436;
        _1592 = _1435;
        _1593 = _1450;
        _1594 = _1449;
        _1595 = _1448;
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
    }
    else
    {
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = _1273;
        _1594 = _1273;
        _1595 = _1273;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1631 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1608));
    float _1652 = _882 * 0.5;
    float _1653 = _883 * 0.5;
    float _1654 = _884 * 0.5;
    float _1655 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1658 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1661 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1695;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1668 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1672 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1676 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1683 = dot(vec4(cbModelParam._m0[39u]), vec4(_1652, _1653, _1654, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1706;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1697 = dot(vec4(cbModelParam._m0[40u]), vec4(_1652, _1653, _1654, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1710 = (_1706 * cbModelParam._m0[1u].x) + (_1695 * (1.0 - cbModelParam._m0[1u].x));
    float _1720 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _713);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1720 : min(cbModelParam._m0[25u].z, _1720));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1782 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1785 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1813 = frontier_phi_17_15_ladder;
        }
        float _2015;
        if (_1782 > 0.0)
        {
            _2015 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2015 = frontier_phi_26_22_ladder;
        }
        float _2258;
        if (_1785 > 0.0)
        {
            _2258 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2258 = frontier_phi_38_33_ladder;
        }
        float _2260 = isnan(_2015) ? _1813 : (isnan(_1813) ? _2015 : min(_1813, _2015));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1779) + _1768;
        float _2266 = (_2261 * _1782) + _1772;
        float _2267 = (_2261 * _1785) + _1776;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1721);
            frontier_phi_16_38_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_16_38_ladder_2;
        _1803 = frontier_phi_16_38_ladder_1;
        _1805 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1721);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _713);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1863 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1867 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1871 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1874 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1877 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1880 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _2020;
        if (_1874 > 0.0)
        {
            _2020 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2020 = frontier_phi_28_24_ladder;
        }
        float _2285;
        if (_1877 > 0.0)
        {
            _2285 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2285 = frontier_phi_40_35_ladder;
        }
        float _2490;
        if (_1880 > 0.0)
        {
            _2490 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2490 = frontier_phi_49_46_ladder;
        }
        float _2492 = isnan(_2285) ? _2020 : (isnan(_2020) ? _2285 : min(_2020, _2285));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1874) + _1863;
        float _2498 = (_2493 * _1877) + _1867;
        float _2499 = (_2493 * _1880) + _1871;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_25_49_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1899 = frontier_phi_25_49_ladder_2;
        _1901 = frontier_phi_25_49_ladder_1;
        _1903 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1810);
        _1899 = _1883.x * cbModelParam._m0[1u].z;
        _1901 = _1883.y * cbModelParam._m0[1u].z;
        _1903 = _1883.z * cbModelParam._m0[1u].z;
    }
    float _1915 = ((((1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_903 * _890)) * _874;
    float _1916 = _1915 * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1917 = _1915 * ((cbModelParam._m0[1u].w * (_1901 - _1803)) + _1803);
    float _1918 = _1915 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1916 * cbSceneParam._m0[91u].x));
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _874 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1973 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1977 = _1939 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_710, _711, _712));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_710, _711, _712));
    float _4252 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4263 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1956].x * _1962) * _1998) + ((cbLight._m0[_1966].x * _1973) * _1996);
    float _2006 = ((_1962 * cbLight._m0[_1956].y) * _1998) + ((_1973 * cbLight._m0[_1966].y) * _1996);
    float _2007 = ((_1962 * cbLight._m0[_1956].z) * _1998) + ((_1973 * cbLight._m0[_1966].z) * _1996);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_2014)
    {
        _2025 = _2005;
        _2027 = _2006;
        _2029 = _2007;
    }
    else
    {
        uint _2033 = _1939 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4274 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2052 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _2005;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _2006;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _2007;
    }
    bool _2032 = _2012.y == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2032)
    {
        _2070 = _2025;
        _2072 = _2027;
        _2074 = _2029;
    }
    else
    {
        uint _2229 = _1939 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4290 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2248 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2070 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2025;
        _2072 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2027;
        _2074 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2029;
    }
    uint _2077 = _1939 + 8u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _713) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1939].x + _788;
    float _2093 = cbLight._m0[_1939].y + _789;
    float _2094 = cbLight._m0[_1939].z + _790;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_1939].xyz));
    float _4306 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2106 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2107 = dot(vec3(_710, _711, _712), vec3(_2099, _2100, _2101));
    float _4328 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2099, _2100, _2101));
    float _4339 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2091 * _2091;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2130 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2131 = 1.0 - _2091;
    float _2142 = (0.5 / (((_2106 * ((_2105 * _2131) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2131) + _2091) * _2105))) * _2105;
    float _4350 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    uint _2155 = _1939 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _713) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1977].x + _788;
    float _2169 = cbLight._m0[_1977].y + _789;
    float _2170 = cbLight._m0[_1977].z + _790;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_1977].xyz));
    float _4361 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2182 = dot(vec3(_710, _711, _712), vec3(_2175, _2176, _2177));
    float _4372 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2175, _2176, _2177));
    float _4383 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2167;
    float _2214 = (0.5 / (((_2106 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2204) + _2167) * _2181))) * _2181;
    float _4394 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2226 = (((_2203 * cbLight._m0[_2155].x) * _2216) * _1962) + (((_2130 * cbLight._m0[_2077].x) * _2144) * _1973);
    float _2227 = (((_2203 * cbLight._m0[_2155].y) * _2216) * _1962) + (((_2130 * cbLight._m0[_2077].y) * _2144) * _1973);
    float _2228 = (((_2203 * cbLight._m0[_2155].z) * _2216) * _1962) + (((_2130 * cbLight._m0[_2077].z) * _2144) * _1973);
    float _2290;
    float _2292;
    float _2294;
    if (_2014)
    {
        _2290 = _2226;
        _2292 = _2227;
        _2294 = _2228;
    }
    else
    {
        uint _2296 = _1939 + 2u;
        uint _2300 = _1939 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _713) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _788;
        float _2317 = cbLight._m0[_2296].y + _789;
        float _2318 = cbLight._m0[_2296].z + _790;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2296].xyz));
        float _4405 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2330 = dot(vec3(_710, _711, _712), vec3(_2323, _2324, _2325));
        float _4416 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4427 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2352 = 1.0 - _2315;
        float _2362 = (0.5 / (((_2106 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2352) + _2315) * _2329))) * _2329;
        float _4438 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2290 = (((_2351 * cbLight._m0[_2300].x) * _2364) * _2365) + _2226;
        _2292 = (((_2351 * cbLight._m0[_2300].y) * _2364) * _2365) + _2227;
        _2294 = (((_2351 * cbLight._m0[_2300].z) * _2364) * _2365) + _2228;
    }
    float _2400;
    float _2402;
    float _2404;
    if (_2032)
    {
        _2400 = _2290;
        _2402 = _2292;
        _2404 = _2294;
    }
    else
    {
        uint _2411 = _1939 + 3u;
        uint _2415 = _1939 + 11u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _713) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _788;
        float _2432 = cbLight._m0[_2411].y + _789;
        float _2433 = cbLight._m0[_2411].z + _790;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2411].xyz));
        float _4454 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2445 = dot(vec3(_710, _711, _712), vec3(_2438, _2439, _2440));
        float _4465 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4476 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2467 = 1.0 - _2430;
        float _2477 = (0.5 / (((_2106 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2467) + _2430) * _2444))) * _2444;
        float _4487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2400 = (((_2466 * cbLight._m0[_2415].x) * _2479) * _2480) + _2290;
        _2402 = (((_2466 * cbLight._m0[_2415].y) * _2479) * _2480) + _2292;
        _2404 = (((_2466 * cbLight._m0[_2415].z) * _2479) * _2480) + _2294;
    }
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_1937.y == 0u)
    {
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2555;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2555;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2555;
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.x;
        uint _2582 = uint((float(_2570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2571))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2571)));
        float _2592 = (log2(_2558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        uint _2596 = uint(isnan(14.0) ? _2593 : (isnan(_2593) ? 14.0 : min(_2593, 14.0)));
        uvec4 _2601 = texelFetch(g_lightClusterGridBuffer, int(((_2596 << 2u) + (_2582 << 6u)) >> 2u));
        uint _2602 = _2601.x;
        uint _2603 = _2570.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2603 >> 4u) & 15u)) + 4294967295u) & _2602) == 0u) || ((_2603 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2871)
                {
                    frontier_phi_66_pred = _2855;
                    frontier_phi_66_pred_1 = _2860;
                    frontier_phi_66_pred_2 = _2859;
                    frontier_phi_66_pred_3 = _2858;
                    frontier_phi_66_pred_4 = _2857;
                    frontier_phi_66_pred_5 = _2856;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2870;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2861 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _2556;
                        float _3067 = _3026.y - _2557;
                        float _3068 = _3026.z - _2558;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_830, _833, _836), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4513 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _2556;
                        float _3102 = (-0.0) - _2557;
                        float _3103 = (-0.0) - _2558;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3118 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _890;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_830, _833, _836), vec3(_3108, _3109, _3110));
                        float _4529 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3143 = dot(vec3(_830, _833, _836), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4540 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3086 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3076) + _3152;
                        float _4551 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4562 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3150 * _3150) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2930 = (_3097 * _3045.x) + _3003;
                        _2931 = (_3097 * _3045.y) + _3004;
                        _2932 = (_3097 * _3045.z) + _3005;
                        _2927 = (_3178 * _3062.x) + _3000;
                        _2928 = (_3178 * _3062.y) + _3001;
                        _2929 = (_3178 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_66_pred = _2927;
                    frontier_phi_66_pred_1 = _2932;
                    frontier_phi_66_pred_2 = _2931;
                    frontier_phi_66_pred_3 = _2930;
                    frontier_phi_66_pred_4 = _2929;
                    frontier_phi_66_pred_5 = _2928;
                }
                _2704 = frontier_phi_66_pred;
                _2714 = frontier_phi_66_pred_1;
                _2712 = frontier_phi_66_pred_2;
                _2710 = frontier_phi_66_pred_3;
                _2708 = frontier_phi_66_pred_4;
                _2706 = frontier_phi_66_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2704;
                    _2856 = _2706;
                    _2857 = _2708;
                    _2858 = _2710;
                    _2859 = _2712;
                    _2860 = _2714;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2720) & _2602) == 0u)
        {
            _2823 = _2703;
            _2825 = _2705;
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
            float _2849 = _2848 * _2556;
            float _2850 = _2848 * _2557;
            float _2851 = _2848 * _2558;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2983 = _2703;
                float _2984 = _2705;
                float _2985 = _2707;
                float _2986 = _2709;
                float _2987 = _2711;
                float _2988 = _2713;
                uint _2989 = _2720;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2999)
                    {
                        frontier_phi_77_pred = _2988;
                        frontier_phi_77_pred_1 = _2987;
                        frontier_phi_77_pred_2 = _2986;
                        frontier_phi_77_pred_3 = _2985;
                        frontier_phi_77_pred_4 = _2984;
                        frontier_phi_77_pred_5 = _2983;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        uint _3211 = _2998;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2558, _3329.z, fma(_2557, _3329.y, _3329.x * _2556)) + _3329.w;
                            _3342 = !((fma(_2558, _3310.z, fma(_2557, _3310.y, _3310.x * _2556)) + _3310.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _2556;
                                float _3370 = _3237.y - _2557;
                                float _3371 = _3237.z - _2558;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4573 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_830, _833, _836))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2558, _3280.z, fma(_2557, _3280.y, _3280.x * _2556)) + _3280.w) / _3341;
                                float _3401 = (fma(_2558, _3295.z, fma(_2557, _3295.y, _3295.x * _2556)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4589 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _890;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2849;
                                float _3431 = _3377 - _2850;
                                float _3432 = _3378 - _2851;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_830, _833, _836), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4600 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3444 = dot(vec3(_830, _833, _836), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4611 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_830, _833, _836), vec3(_3376, _3377, _3378))) + _3453;
                                float _4622 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4633 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3407 * _3253.y;
                                frontier_phi_83_pred_1 = _3407 * _3253.x;
                                frontier_phi_83_pred_2 = _3481 * _3265.z;
                                frontier_phi_83_pred_3 = _3481 * _3265.y;
                                frontier_phi_83_pred_4 = _3481 * _3265.x;
                                frontier_phi_83_pred_5 = _3407 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3489 = frontier_phi_83_pred;
                            _3488 = frontier_phi_83_pred_1;
                            _3487 = frontier_phi_83_pred_2;
                            _3486 = frontier_phi_83_pred_3;
                            _3485 = frontier_phi_83_pred_4;
                            _3490 = frontier_phi_83_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3197;
                        frontier_phi_77_pred_1 = _3196;
                        frontier_phi_77_pred_2 = _3195;
                        frontier_phi_77_pred_3 = _3194;
                        frontier_phi_77_pred_4 = _3193;
                        frontier_phi_77_pred_5 = _3192;
                    }
                    _2834 = frontier_phi_77_pred;
                    _2832 = frontier_phi_77_pred_1;
                    _2830 = frontier_phi_77_pred_2;
                    _2828 = frontier_phi_77_pred_3;
                    _2826 = frontier_phi_77_pred_4;
                    _2824 = frontier_phi_77_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2824;
                        _2984 = _2826;
                        _2985 = _2828;
                        _2986 = _2830;
                        _2987 = _2832;
                        _2988 = _2834;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2828;
                frontier_phi_58_59_ladder_1 = _2834;
                frontier_phi_58_59_ladder_2 = _2832;
                frontier_phi_58_59_ladder_3 = _2830;
                frontier_phi_58_59_ladder_4 = _2826;
                frontier_phi_58_59_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_58_59_ladder = _2707;
                frontier_phi_58_59_ladder_1 = _2713;
                frontier_phi_58_59_ladder_2 = _2711;
                frontier_phi_58_59_ladder_3 = _2709;
                frontier_phi_58_59_ladder_4 = _2705;
                frontier_phi_58_59_ladder_5 = _2703;
            }
            _2823 = frontier_phi_58_59_ladder_5;
            _2825 = frontier_phi_58_59_ladder_4;
            _2827 = frontier_phi_58_59_ladder;
            _2829 = frontier_phi_58_59_ladder_3;
            _2831 = frontier_phi_58_59_ladder_2;
            _2833 = frontier_phi_58_59_ladder_1;
        }
        float _2838 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2615 = (_2838 * _2829) + _2070;
        _2617 = (_2838 * _2831) + _2072;
        _2619 = (_2838 * _2833) + _2074;
        _2621 = ((_2823 * 0.039999999105930328369140625) * _2838) + _2400;
        _2623 = ((_2825 * 0.039999999105930328369140625) * _2838) + _2402;
        _2625 = ((_2827 * 0.039999999105930328369140625) * _2838) + _2404;
    }
    else
    {
        _2615 = _2070;
        _2617 = _2072;
        _2619 = _2074;
        _2621 = _2400;
        _2623 = _2402;
        _2625 = _2404;
    }
    float _4649 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4660 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4671 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2642 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2615 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _874))) + ((_2621 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    float _2643 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2617 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _874))) + ((_2623 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    float _2644 = ((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2619 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _874))) + ((_2625 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    uint _2645 = _269 + 6u;
    float _2653 = _809 / cbSceneParam._m0[86u].x;
    float _2654 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2729 = _2728 / _731;
        float _2740 = _2729 * _781;
        float _2741 = _782 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2743 = _2729 * _783;
        float _2745 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2741;
        float _2753 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2742 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2886 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2940 = ((abs(_2753 / _2742) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2763 * _2895) - exp2(_2763 * _2896)) * _2884))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2673);
        _2765 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2767 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2769 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2771 = _2951 * _2673;
    }
    else
    {
        _2765 = _2670;
        _2767 = _2671;
        _2769 = _2672;
        _2771 = _2673;
    }
    bool _2978;
    vec4 _2781;
    vec4 _2803;
    float _2805;
    float _2809;
    float _2810;
    float _2811;
    float _2812;
    bool _2822;
    for (;;)
    {
        _2781 = cbMatDynParam._m0[0u];
        float _2783 = roundEven(_2781.y);
        bool _2784 = _2783 == 3.0;
        float _2785 = log2(_2771);
        float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * _2642;
        float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * _2643;
        float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * _2644;
        float _2801 = _797 + (-0.5);
        _2803 = cbMtdParam._m0[1u];
        _2805 = _2803.y * _2801;
        float _2808 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2809 = _2808 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
        _2810 = _2808 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
        _2811 = _2808 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
        _2812 = _2801 * 0.999000012874603271484375;
        _2822 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2822)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2812) < 0.5)
            {
                _2978 = true;
                break;
            }
        }
        uint _2919 = _849 + uint(_2781.w);
        if ((cbInstanceData._m0[_2919].w < 1.0) && ((cbInstanceData._m0[_2919].w + _2812) < 0.5))
        {
            _2978 = true;
            break;
        }
        if ((_2805 + 1.0) < _2803.x)
        {
            _2978 = true;
            break;
        }
        _2978 = false;
        break;
    }
    float _3183;
    if (_2978)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = cbInstanceData._m0[_2645].w;
    }
    SV_Target.x = _2809;
    SV_Target.y = _2810;
    SV_Target.z = _2811;
    SV_Target.w = _3183;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
    discard_exit();
}


