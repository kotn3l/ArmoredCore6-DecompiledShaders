#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1241;
float _3882;
float _3883;
float _3884;
float _3885;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3894 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3905 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3916 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _401 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _401) * cbMtdParam._m0[24u].x) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3927 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _426 = (_419 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _427 = (_419 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _428 = (_419 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _438;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _532 = _528.z;
    float _541 = ((_511.z - _532) * _419) + _532;
    float _544 = ((((_511.x - _530) * _419) + _530) * 2.0) + (-1.0);
    float _545 = ((((_511.y - _531) * _419) + _531) * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3938 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))));
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _598 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_584 - _585) * cbMtdParam._m0[24u].z) + _585) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3949 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _606 = (_599 * ((_466.x * cbMtdParam._m0[18u].x) - _445)) + _445;
    float _607 = (_599 * ((_466.y * cbMtdParam._m0[18u].y) - _446)) + _446;
    float _608 = (_599 * ((_466.z * cbMtdParam._m0[18u].z) - _447)) + _447;
    float _613 = (((_486.z - _541) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _541;
    vec4 _626 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3960 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _643 = (_599 * (_626.z - _613)) + _613;
    float _648 = _544 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_486.x * 2.0) + (-1.0)));
    float _649 = _545 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_486.y * 2.0) + (-1.0)));
    float _661 = (((_633 - _648) + (cbMtdParam._m0[21u].x * _648)) * _599) + _648;
    float _662 = (((_634 - _649) + (cbMtdParam._m0[21u].x * _649)) * _599) + _649;
    float _663 = (_599 * (sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) - _551)) + _551;
    float _665 = cbMtdParam._m0[22u].x + _564.w;
    float _668 = fma(_663, _236 * NORMAL.x, fma(_662, _243 * TANGENT.x, (_229 * _221) * _661));
    float _671 = fma(_663, _236 * NORMAL.y, fma(_662, _243 * TANGENT.y, (_229 * _222) * _661));
    float _674 = fma(_663, _236 * NORMAL.z, fma(_662, _243 * TANGENT.z, (_229 * _223) * _661));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3971 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _682 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3993 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4004 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4015 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _922 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _928 = (cbMatDynParam._m0[5u].x * _922) + cbMatDynParam._m0[5u].y;
        float _4026 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _933 = (cbMatDynParam._m0[5u].z * _922) + cbMatDynParam._m0[5u].w;
        float _4037 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) - _929)) + _929) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _801 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _804 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _817 = _270 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_818].z;
    float _4048 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    vec4 _838 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _842 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * TEXCOORD_5.w) * _838.x;
    float _843 = dot(vec3(_679, _680, _681), vec3(_759, _760, _761));
    float _846 = _843 * 2.0;
    float _850 = (_846 * _679) - _759;
    float _851 = (_846 * _680) - _760;
    float _852 = (_846 * _681) - _761;
    float _856 = abs(dot(vec3(_759, _760, _761), vec3(_679, _680, _681)));
    float _4081 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _858 = sqrt(_682);
    float _871 = exp2((_858 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_858 * 3.0));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _969 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _973 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _998 = _903 + _679;
        float _999 = _907 + _680;
        float _1000 = _911 + _681;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_679, _680, _681), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4129 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_679, _680, _681), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4162 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_679, _680, _681), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4195 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1287 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1291 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1314 = _903 + _679;
        float _1315 = _907 + _680;
        float _1316 = _911 + _681;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_679, _680, _681), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4258 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_679, _680, _681), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4291 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_679, _680, _681), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4324 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = _1241;
        _1563 = _1241;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1254)) + _1254;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1255)) + _1255;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _850 * 0.5;
    float _1621 = _851 * 0.5;
    float _1622 = _852 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_852, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850));
        float _1750 = fma(_852, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850));
        float _1753 = fma(_852, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1781 = frontier_phi_17_15_ladder;
        }
        float _1950;
        if (_1750 > 0.0)
        {
            _1950 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1950 = frontier_phi_26_22_ladder;
        }
        float _2245;
        if (_1753 > 0.0)
        {
            _2245 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2245 = frontier_phi_38_33_ladder;
        }
        float _2247 = isnan(_1950) ? _1781 : (isnan(_1781) ? _1950 : min(_1781, _1950));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1747) + _1736;
        float _2253 = (_2248 * _1750) + _1740;
        float _2254 = (_2248 * _1753) + _1744;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2255;
        float _2259 = _2255 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 > _2259) || ((_2253 < _2257) || ((_2252 < _2257) || (_2252 > _2259))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_16_38_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_16_38_ladder_2;
        _1771 = frontier_phi_16_38_ladder_1;
        _1773 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_850, _851, _852), _1689);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_852, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850));
        float _1845 = fma(_852, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850));
        float _1848 = fma(_852, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850));
        float _1955;
        if (_1842 > 0.0)
        {
            _1955 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1955 = frontier_phi_28_24_ladder;
        }
        float _2272;
        if (_1845 > 0.0)
        {
            _2272 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2272 = frontier_phi_40_35_ladder;
        }
        float _2599;
        if (_1848 > 0.0)
        {
            _2599 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2599 = frontier_phi_50_47_ladder;
        }
        float _2601 = isnan(_2272) ? _1955 : (isnan(_1955) ? _2272 : min(_1955, _2272));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1842) + _1831;
        float _2607 = (_2602 * _1845) + _1835;
        float _2608 = (_2602 * _1848) + _1839;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_25_50_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_25_50_ladder_2;
        _1869 = frontier_phi_25_50_ladder_1;
        _1871 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_850, _851, _852), _1778);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1883 = ((((1.0 - _871) * ((_858 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_871 * _858)) * _842;
    float _1884 = _1883 * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1885 = _1883 * ((cbModelParam._m0[1u].w * (_1869 - _1771)) + _1771);
    float _1886 = _1883 * ((cbModelParam._m0[1u].w * (_1871 - _1773)) + _1773);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1937 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1942 = _1929 / _1941;
    float _1943 = _1933 / _1941;
    float _1944 = _1937 / _1941;
    float _2091;
    float _2092;
    float _2093;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1971 = ((uint(_1944 > cbSceneParam._m0[59u].y) + uint(_1944 > cbSceneParam._m0[59u].x)) + uint(_1944 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1972 = _1971 + 43u;
        uint _1980 = _1971 + 44u;
        uint _1988 = _1971 + 45u;
        uint _1996 = _1971 + 46u;
        float _2007 = fma(_1941, cbSceneParam._m0[_1972].w, fma(_1937, cbSceneParam._m0[_1972].z, fma(_1933, cbSceneParam._m0[_1972].y, _1929 * cbSceneParam._m0[_1972].x)));
        float _2011 = fma(_1941, cbSceneParam._m0[_1980].w, fma(_1937, cbSceneParam._m0[_1980].z, fma(_1933, cbSceneParam._m0[_1980].y, _1929 * cbSceneParam._m0[_1980].x)));
        float _2019 = fma(_1941, cbSceneParam._m0[_1996].w, fma(_1937, cbSceneParam._m0[_1996].z, fma(_1933, cbSceneParam._m0[_1996].y, _1929 * cbSceneParam._m0[_1996].x)));
        float _2024 = cbSceneParam._m0[33u].z * _2019;
        float _2026 = cbSceneParam._m0[33u].w * _2019;
        float _2029 = fma(_1941, cbSceneParam._m0[_1988].w, fma(_1937, cbSceneParam._m0[_1988].z, fma(_1933, cbSceneParam._m0[_1988].y, _1929 * cbSceneParam._m0[_1988].x))) / _2019;
        float _2077 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
        float _4450 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2084 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2007) / _2019, (_2026 + _2011) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2007) / _2019, (_2011 - _2024) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2024) / _2019, (_2011 - _2026) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2026) / _2019, (_2024 + _2011) / _2019), _2029), 0.0)).x), vec4(0.25)));
        _2091 = 1.0 - (_2084 * cbSceneParam._m0[34u].x);
        _2092 = 1.0 - (_2084 * cbSceneParam._m0[34u].y);
        _2093 = 1.0 - (_2084 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2091 = 1.0;
        _2092 = 1.0;
        _2093 = 1.0;
    }
    float _2157;
    float _2159;
    float _2161;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2145 = fma(_1941, cbSceneParam._m0[63u].w, fma(_1937, cbSceneParam._m0[63u].z, fma(_1933, cbSceneParam._m0[63u].y, _1929 * cbSceneParam._m0[63u].x)));
        float _2146 = fma(_1941, cbSceneParam._m0[60u].w, fma(_1937, cbSceneParam._m0[60u].z, fma(_1933, cbSceneParam._m0[60u].y, _1929 * cbSceneParam._m0[60u].x))) / _2145;
        float _2147 = fma(_1941, cbSceneParam._m0[61u].w, fma(_1937, cbSceneParam._m0[61u].z, fma(_1933, cbSceneParam._m0[61u].y, _1929 * cbSceneParam._m0[61u].x))) / _2145;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2146 >= cbSceneParam._m0[64u].x) && (_2147 >= cbSceneParam._m0[64u].y)) && (_2146 <= cbSceneParam._m0[64u].z)) && (_2147 <= cbSceneParam._m0[64u].w))
        {
            float _2285 = fma(_1941, cbSceneParam._m0[62u].w, fma(_1937, cbSceneParam._m0[62u].z, fma(_1933, cbSceneParam._m0[62u].y, _1929 * cbSceneParam._m0[62u].x))) / _2145;
            float _2289 = isnan(cbSceneParam._m0[41u].w) ? _2285 : (isnan(_2285) ? cbSceneParam._m0[41u].w : max(_2285, cbSceneParam._m0[41u].w));
            float _2332 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
            float _4466 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
            float _2339 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2146, cbSceneParam._m0[33u].w + _2147), _2289), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2146, _2147 - cbSceneParam._m0[33u].z), _2289), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].z, _2147 - cbSceneParam._m0[33u].w), _2289), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2147), _2289), 0.0)).x), vec4(0.25)));
            float _2343 = 1.0 - (_2339 * cbSceneParam._m0[34u].x);
            float _2344 = 1.0 - (_2339 * cbSceneParam._m0[34u].y);
            float _2345 = 1.0 - (_2339 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2345) ? _2093 : (isnan(_2093) ? _2345 : min(_2093, _2345));
            frontier_phi_37_36_ladder_1 = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
            frontier_phi_37_36_ladder_2 = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
        }
        else
        {
            frontier_phi_37_36_ladder = _2093;
            frontier_phi_37_36_ladder_1 = _2092;
            frontier_phi_37_36_ladder_2 = _2091;
        }
        _2157 = frontier_phi_37_36_ladder_2;
        _2159 = frontier_phi_37_36_ladder_1;
        _2161 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2157 = _2091;
        _2159 = _2092;
        _2161 = _2093;
    }
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _842 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2204 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2208 = _2168 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_679, _680, _681));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_679, _680, _681));
    float _4502 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4513 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2185].x * _2191) * _2229) + (((cbLight._m0[_2195].x * _2157) * _2204) * _2227);
    float _2237 = ((_2191 * cbLight._m0[_2185].y) * _2229) + (((cbLight._m0[_2195].y * _2159) * _2204) * _2227);
    float _2238 = ((_2191 * cbLight._m0[_2185].z) * _2229) + (((cbLight._m0[_2195].z * _2161) * _2204) * _2227);
    uvec4 _2242 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2244 = _2242.x == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2244)
    {
        _2346 = _2236;
        _2348 = _2237;
        _2350 = _2238;
    }
    else
    {
        uint _2354 = _2168 + 6u;
        float _2370 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4524 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2373 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2346 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2236;
        _2348 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2237;
        _2350 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2238;
    }
    bool _2353 = _2242.y == 0u;
    float _2408;
    float _2410;
    float _2412;
    if (_2353)
    {
        _2408 = _2346;
        _2410 = _2348;
        _2412 = _2350;
    }
    else
    {
        uint _2570 = _2168 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4540 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2589 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2408 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2346;
        _2410 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2348;
        _2412 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2350;
    }
    uint _2415 = _2168 + 8u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _682) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2168].x + _759;
    float _2431 = cbLight._m0[_2168].y + _760;
    float _2432 = cbLight._m0[_2168].z + _761;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2168].xyz));
    float _4556 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2444 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2445 = dot(vec3(_679, _680, _681), vec3(_2437, _2438, _2439));
    float _4578 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2437, _2438, _2439));
    float _4589 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2429 * _2429;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2469 = 1.0 - _2429;
    float _2480 = (0.5 / (((_2444 * ((_2443 * _2469) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2469) + _2429) * _2443))) * _2443;
    float _4600 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    uint _2496 = _2168 + 9u;
    float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _682) * 0.949999988079071044921875);
    float _2508 = _2507 * _2507;
    float _2509 = cbLight._m0[_2208].x + _759;
    float _2510 = cbLight._m0[_2208].y + _760;
    float _2511 = cbLight._m0[_2208].z + _761;
    float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
    float _2516 = _2515 * _2509;
    float _2517 = _2515 * _2510;
    float _2518 = _2515 * _2511;
    float _2519 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2208].xyz));
    float _4611 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2523 = dot(vec3(_679, _680, _681), vec3(_2516, _2517, _2518));
    float _4622 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2516, _2517, _2518));
    float _4633 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2508 * _2508;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2545 = 1.0 - _2508;
    float _2555 = (0.5 / (((_2444 * ((_2522 * _2545) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2545) + _2508) * _2522))) * _2522;
    float _4644 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    float _2567 = (((_2544 * cbLight._m0[_2496].x) * _2557) * _2191) + ((((cbLight._m0[_2415].x * _2157) * _2468) * _2482) * _2204);
    float _2568 = (((_2544 * cbLight._m0[_2496].y) * _2557) * _2191) + ((((cbLight._m0[_2415].y * _2159) * _2468) * _2482) * _2204);
    float _2569 = (((_2544 * cbLight._m0[_2496].z) * _2557) * _2191) + ((((cbLight._m0[_2415].z * _2161) * _2468) * _2482) * _2204);
    float _2625;
    float _2627;
    float _2629;
    if (_2244)
    {
        _2625 = _2567;
        _2627 = _2568;
        _2629 = _2569;
    }
    else
    {
        uint _2631 = _2168 + 2u;
        uint _2635 = _2168 + 10u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _682) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _759;
        float _2652 = cbLight._m0[_2631].y + _760;
        float _2653 = cbLight._m0[_2631].z + _761;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2631].xyz));
        float _4655 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2665 = dot(vec3(_679, _680, _681), vec3(_2658, _2659, _2660));
        float _4666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4677 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2686 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2687 = 1.0 - _2650;
        float _2697 = (0.5 / (((_2444 * ((_2664 * _2687) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2687) + _2650) * _2664))) * _2664;
        float _4688 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2699 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2700 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2625 = (((_2686 * cbLight._m0[_2635].x) * _2699) * _2700) + _2567;
        _2627 = (((_2686 * cbLight._m0[_2635].y) * _2699) * _2700) + _2568;
        _2629 = (((_2686 * cbLight._m0[_2635].z) * _2699) * _2700) + _2569;
    }
    float _2731;
    float _2733;
    float _2735;
    if (_2353)
    {
        _2731 = _2625;
        _2733 = _2627;
        _2735 = _2629;
    }
    else
    {
        uint _2742 = _2168 + 3u;
        uint _2746 = _2168 + 11u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _682) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _759;
        float _2763 = cbLight._m0[_2742].y + _760;
        float _2764 = cbLight._m0[_2742].z + _761;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2742].xyz));
        float _4704 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2776 = dot(vec3(_679, _680, _681), vec3(_2769, _2770, _2771));
        float _4715 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4726 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2797 = (exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2798 = 1.0 - _2761;
        float _2808 = (0.5 / (((_2444 * ((_2775 * _2798) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2798) + _2761) * _2775))) * _2775;
        float _4737 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2731 = (((_2797 * cbLight._m0[_2746].x) * _2810) * _2811) + _2625;
        _2733 = (((_2797 * cbLight._m0[_2746].y) * _2810) * _2811) + _2627;
        _2735 = (((_2797 * cbLight._m0[_2746].z) * _2810) * _2811) + _2629;
    }
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_2166.y == 0u)
    {
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.x;
        uint _2844 = uint((float(_2832.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2833))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2833)));
        float _2854 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2855 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        uint _2858 = uint(isnan(14.0) ? _2855 : (isnan(_2855) ? 14.0 : min(_2855, 14.0)));
        uvec4 _2863 = texelFetch(g_lightClusterGridBuffer, int(((_2858 << 2u) + (_2844 << 6u)) >> 2u));
        uint _2864 = _2863.x;
        uint _2865 = _2832.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2865 >> 4u) & 15u)) + 4294967295u) & _2864) == 0u) || ((_2865 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            uint _3103 = 0u;
            uint _3112;
            bool _3113;
            for (;;)
            {
                _3112 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                _3113 = _3112 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3113)
                {
                    frontier_phi_71_pred = _3102;
                    frontier_phi_71_pred_1 = _3101;
                    frontier_phi_71_pred_2 = _3100;
                    frontier_phi_71_pred_3 = _3099;
                    frontier_phi_71_pred_4 = _3098;
                    frontier_phi_71_pred_5 = _3097;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3112;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3103 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _1942;
                        float _3309 = _3268.y - _1943;
                        float _3310 = _3268.z - _1944;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_798, _801, _804), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4763 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _1942;
                        float _3344 = (-0.0) - _1943;
                        float _3345 = (-0.0) - _1944;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3359 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _858;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3372 = _3352 + _3317;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_798, _801, _804), vec3(_3350, _3351, _3352));
                        float _4779 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3384 = dot(vec3(_798, _801, _804), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4790 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3328 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3318) + _3393;
                        float _4801 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4812 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3391 * _3391) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3172 = (_3339 * _3287.x) + _3245;
                        _3173 = (_3339 * _3287.y) + _3246;
                        _3174 = (_3339 * _3287.z) + _3247;
                        _3169 = (_3419 * _3304.x) + _3242;
                        _3170 = (_3419 * _3304.y) + _3243;
                        _3171 = (_3419 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_71_pred = _3174;
                    frontier_phi_71_pred_1 = _3173;
                    frontier_phi_71_pred_2 = _3172;
                    frontier_phi_71_pred_3 = _3171;
                    frontier_phi_71_pred_4 = _3170;
                    frontier_phi_71_pred_5 = _3169;
                }
                _2955 = frontier_phi_71_pred;
                _2953 = frontier_phi_71_pred_1;
                _2951 = frontier_phi_71_pred_2;
                _2949 = frontier_phi_71_pred_3;
                _2947 = frontier_phi_71_pred_4;
                _2945 = frontier_phi_71_pred_5;
                uint _3104 = _3103 + 1u;
                if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3097 = _2945;
                    _3098 = _2947;
                    _3099 = _2949;
                    _3100 = _2951;
                    _3101 = _2953;
                    _3102 = _2955;
                    _3103 = _3104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((4294967295u << _2961) & _2864) == 0u)
        {
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
        }
        else
        {
            float _3090 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float _3091 = _3090 * _1942;
            float _3092 = _3090 * _1943;
            float _3093 = _3090 * _1944;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3225 = _2944;
                float _3226 = _2946;
                float _3227 = _2948;
                float _3228 = _2950;
                float _3229 = _2952;
                float _3230 = _2954;
                uint _3231 = _2961;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3241)
                    {
                        frontier_phi_82_pred = _3230;
                        frontier_phi_82_pred_1 = _3229;
                        frontier_phi_82_pred_2 = _3228;
                        frontier_phi_82_pred_3 = _3227;
                        frontier_phi_82_pred_4 = _3226;
                        frontier_phi_82_pred_5 = _3225;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3225;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        float _3451 = _3230;
                        uint _3452 = _3240;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_1944, _3570.z, fma(_1943, _3570.y, _3570.x * _1942)) + _3570.w;
                            _3583 = !((fma(_1944, _3551.z, fma(_1943, _3551.y, _3551.x * _1942)) + _3551.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _1942;
                                float _3611 = _3478.y - _1943;
                                float _3612 = _3478.z - _1944;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4823 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_798, _801, _804))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_1944, _3521.z, fma(_1943, _3521.y, _3521.x * _1942)) + _3521.w) / _3582;
                                float _3642 = (fma(_1944, _3536.z, fma(_1943, _3536.y, _3536.x * _1942)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4839 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _858;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _3091;
                                float _3672 = _3618 - _3092;
                                float _3673 = _3619 - _3093;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_798, _801, _804), vec3((-0.0) - _3091, (-0.0) - _3092, (-0.0) - _3093));
                                float _4850 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3685 = dot(vec3(_798, _801, _804), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4861 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_798, _801, _804), vec3(_3617, _3618, _3619))) + _3694;
                                float _4872 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4883 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3648 * _3494.z;
                                frontier_phi_88_pred_1 = _3648 * _3494.y;
                                frontier_phi_88_pred_2 = _3648 * _3494.x;
                                frontier_phi_88_pred_3 = _3722 * _3506.z;
                                frontier_phi_88_pred_4 = _3722 * _3506.y;
                                frontier_phi_88_pred_5 = _3722 * _3506.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3731 = frontier_phi_88_pred;
                            _3730 = frontier_phi_88_pred_1;
                            _3729 = frontier_phi_88_pred_2;
                            _3728 = frontier_phi_88_pred_3;
                            _3727 = frontier_phi_88_pred_4;
                            _3726 = frontier_phi_88_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3438;
                        frontier_phi_82_pred_1 = _3437;
                        frontier_phi_82_pred_2 = _3436;
                        frontier_phi_82_pred_3 = _3435;
                        frontier_phi_82_pred_4 = _3434;
                        frontier_phi_82_pred_5 = _3433;
                    }
                    _3076 = frontier_phi_82_pred;
                    _3074 = frontier_phi_82_pred_1;
                    _3072 = frontier_phi_82_pred_2;
                    _3070 = frontier_phi_82_pred_3;
                    _3068 = frontier_phi_82_pred_4;
                    _3066 = frontier_phi_82_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3066;
                        _3226 = _3068;
                        _3227 = _3070;
                        _3228 = _3072;
                        _3229 = _3074;
                        _3230 = _3076;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3072;
                frontier_phi_63_64_ladder_1 = _3076;
                frontier_phi_63_64_ladder_2 = _3074;
                frontier_phi_63_64_ladder_3 = _3070;
                frontier_phi_63_64_ladder_4 = _3068;
                frontier_phi_63_64_ladder_5 = _3066;
            }
            else
            {
                frontier_phi_63_64_ladder = _2950;
                frontier_phi_63_64_ladder_1 = _2954;
                frontier_phi_63_64_ladder_2 = _2952;
                frontier_phi_63_64_ladder_3 = _2948;
                frontier_phi_63_64_ladder_4 = _2946;
                frontier_phi_63_64_ladder_5 = _2944;
            }
            _3065 = frontier_phi_63_64_ladder_5;
            _3067 = frontier_phi_63_64_ladder_4;
            _3069 = frontier_phi_63_64_ladder_3;
            _3071 = frontier_phi_63_64_ladder;
            _3073 = frontier_phi_63_64_ladder_2;
            _3075 = frontier_phi_63_64_ladder_1;
        }
        float _3080 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        _2877 = (_3080 * _3071) + _2408;
        _2879 = (_3080 * _3073) + _2410;
        _2881 = (_3080 * _3075) + _2412;
        _2883 = ((_3065 * 0.039999999105930328369140625) * _3080) + _2731;
        _2885 = ((_3067 * 0.039999999105930328369140625) * _3080) + _2733;
        _2887 = ((_3069 * 0.039999999105930328369140625) * _3080) + _2735;
    }
    else
    {
        _2877 = _2408;
        _2879 = _2410;
        _2881 = _2412;
        _2883 = _2731;
        _2885 = _2733;
        _2887 = _2735;
    }
    float _4899 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4910 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4921 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2904 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2877 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _842))) + ((_2883 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    float _2905 = ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2879 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _842))) + ((_2885 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    float _2906 = ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2881 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _842))) + ((_2887 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    uint _2907 = _270 + 6u;
    float _2915 = _779 / cbSceneParam._m0[86u].x;
    float _2916 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2930 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2932 = _2930.x;
    float _2933 = _2930.y;
    float _2934 = _2930.z;
    float _2935 = _2930.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2970 = _2969 / _700;
        float _2981 = _2970 * _752;
        float _2982 = _753 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2985 = _2970 * _754;
        float _2987 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2982;
        float _2995 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2995;
        float _3003 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3182;
        if (abs((_2983 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3182 = ((((_2988 > 0.0) ? exp2(_3003 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3126 = 1.0 / cbSceneParam._m0[80u].x;
            float _3127 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3128 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            _3182 = ((abs(_2995 / _2983) * cbSceneParam._m0[80u].y) * ((((_3137 - _3138) * 2.0) - ((exp2(_3003 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)))) - exp2(_3003 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))))) * _3126)) - ((exp2(_3005 * _3137) - exp2(_3005 * _3138)) * _3126))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, 1.0), 0.0);
        float _3193 = exp2((_3182 * (-1.44269502162933349609375)) * (1.0 - _3184.w));
        float _3194 = log2(_3193);
        float _3210 = log2(_2935);
        _3007 = (exp2(_3210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].x)) * _3184.x) / cbSceneParam._m0[78u].x)) + _2932;
        _3009 = (exp2(_3210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].y)) * _3184.y) / cbSceneParam._m0[78u].y)) + _2933;
        _3011 = (exp2(_3210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].z)) * _3184.z) / cbSceneParam._m0[78u].z)) + _2934;
        _3013 = _3193 * _2935;
    }
    else
    {
        _3007 = _2932;
        _3009 = _2933;
        _3011 = _2934;
        _3013 = _2935;
    }
    bool _3220;
    vec4 _3023;
    vec4 _3045;
    float _3047;
    float _3051;
    float _3052;
    float _3053;
    float _3054;
    bool _3064;
    for (;;)
    {
        _3023 = cbMatDynParam._m0[0u];
        float _3025 = roundEven(_3023.y);
        bool _3026 = _3025 == 3.0;
        float _3027 = log2(_3013);
        float _3034 = exp2(_3027 * cbSceneParam._m0[78u].x) * _2904;
        float _3035 = exp2(_3027 * cbSceneParam._m0[78u].y) * _2905;
        float _3036 = exp2(_3027 * cbSceneParam._m0[78u].z) * _2906;
        float _3043 = _768 + (-0.5);
        _3045 = cbMtdParam._m0[1u];
        _3047 = _3045.y * _3043;
        float _3050 = (_3025 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3051 = _3050 * (_3026 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3007)));
        _3052 = _3050 * (_3026 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = _3050 * (_3026 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
        _3054 = _3043 * 0.999000012874603271484375;
        _3064 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3064)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _3054) < 0.5)
            {
                _3220 = true;
                break;
            }
        }
        uint _3161 = _817 + uint(_3023.w);
        if ((cbInstanceData._m0[_3161].w < 1.0) && ((cbInstanceData._m0[_3161].w + _3054) < 0.5))
        {
            _3220 = true;
            break;
        }
        if ((_3047 + 1.0) < _3045.x)
        {
            _3220 = true;
            break;
        }
        _3220 = false;
        break;
    }
    float _3424;
    if (_3220)
    {
        discard_state = true;
        _3424 = 0.0;
    }
    else
    {
        _3424 = cbInstanceData._m0[_2907].w;
    }
    SV_Target.x = _3051;
    SV_Target.y = _3052;
    SV_Target.z = _3053;
    SV_Target.w = _3424;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2907].w;
    discard_exit();
}


