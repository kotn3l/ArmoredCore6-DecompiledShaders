#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1304;
float _3688;
float _3689;
float _3690;
float _3691;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3700 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3711 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3722 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3733 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _431 = (_424 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _432 = (_424 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _433 = (_424 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) + _443;
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _520 = ((_490.z - _511) * _424) + _511;
    float _523 = ((((_490.x - _509) * _424) + _509) * 2.0) + (-1.0);
    float _524 = ((((_490.y - _510) * _424) + _510) * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3744 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _535 = _523 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_465.x * 2.0) + (-1.0)));
    float _536 = _524 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_465.y * 2.0) + (-1.0)));
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _592 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3755 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _601 = ((((cbMtdParam._m0[10u].x - _450) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _593) + _450;
    float _602 = ((((cbMtdParam._m0[10u].y - _451) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _593) + _451;
    float _603 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _452)) * _593) + _452;
    float _608 = (((_465.z - _520) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _520;
    float _612 = ((cbMtdParam._m0[23u].y - _608) * _593) + _608;
    vec4 _631 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _640 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_244, _245, _246, 0.0));
    vec4 _655 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _294) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _295) + cbTextureTilingScale._m0[18u].w));
    float _657 = _655.x;
    float _662 = fract(_655.w + cbPerFrame._m0[22u].x);
    float _664 = (1.0 - _662) * _657;
    float _669 = ((_662 + (-1.0)) + _657) * 9.0;
    float _671 = ((_657 + (-1.0)) + _662) * 9.0;
    float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _673 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _687 = (_664 * ((_655.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _672 : (isnan(_672) ? 3.0 : min(_672, 3.0))) * 3.1415927410125732421875);
    float _689 = (_664 * ((_655.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _673 : (isnan(_673) ? 3.0 : min(_673, 3.0))) * 3.1415927410125732421875);
    float _693 = inversesqrt(dot(vec3(_687, _689, 1.0), vec3(_687, _689, 1.0)));
    float _709 = (((((0.5 - _633) + ((_687 * 0.5) * _693)) * _640) + _633) * 2.0) + (-1.0);
    float _710 = (((((0.5 - _634) + ((_693 * 0.5) * _689)) * _640) + _634) * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3786 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _727 = ((((cbMtdParam._m0[22u].z * _535) - _535) + _709) * _593) + _535;
    float _728 = ((((cbMtdParam._m0[22u].z * _536) - _536) + _710) * _593) + _536;
    float _729 = (_593 * (sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _530)) + _530;
    float _731 = cbMtdParam._m0[22u].x + _549.w;
    float _734 = fma(_729, _244, fma(_728, _250 * TANGENT.x, (_236 * _228) * _727));
    float _737 = fma(_729, _245, fma(_728, _250 * TANGENT.y, (_236 * _229) * _727));
    float _740 = fma(_729, _246, fma(_728, _250 * TANGENT.z, (_236 * _230) * _727));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3797 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _748 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3819 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3830 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3841 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    vec4 _831 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _833 = _831.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _986 = sqrt(((_817 * _817) + (_818 * _818)) + (_819 * _819));
        float _992 = (cbMatDynParam._m0[5u].x * _986) + cbMatDynParam._m0[5u].y;
        float _3852 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _997 = (cbMatDynParam._m0[5u].z * _986) + cbMatDynParam._m0[5u].w;
        float _3863 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) - _993)) + _993) < ((_833 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _866 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _869 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _882 = _275 + 9u;
    uint _883 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_883].z;
    float _3874 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _907 = ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * TEXCOORD_5.w) * _903.x;
    float _908 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _745) - _824;
    float _916 = (_911 * _746) - _825;
    float _917 = (_911 * _747) - _826;
    float _921 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _3907 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_748);
    float _935 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1033 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1037 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1061 = _967 + _745;
        float _1062 = _971 + _746;
        float _1063 = _975 + _747;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1029;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1033;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1037;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_745, _746, _747), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3955 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_745, _746, _747), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3988 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_745, _746, _747), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4021 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1346 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1350 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1354 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1377 = _967 + _745;
        float _1378 = _971 + _746;
        float _1379 = _975 + _747;
        float _1389 = fma(_1379, cbModelParam._m0[30u].z, fma(_1378, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1377)) - _1346;
        float _1390 = fma(_1379, cbModelParam._m0[31u].z, fma(_1378, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1377)) - _1350;
        float _1391 = fma(_1379, cbModelParam._m0[32u].z, fma(_1378, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1377)) - _1354;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1346 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1350 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[35u].z) + ((((((_1354 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1445 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1412.x + (-0.5));
        float _1447 = _1445 * (_1412.y + (-0.5));
        float _1448 = _1445 * (_1412.z + (-0.5));
        float _1455 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1419.x + (-0.5));
        float _1457 = _1455 * (_1419.y + (-0.5));
        float _1458 = _1455 * (_1419.z + (-0.5));
        float _1465 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1426.x + (-0.5));
        float _1467 = _1465 * (_1426.y + (-0.5));
        float _1468 = _1465 * (_1426.z + (-0.5));
        float _1475 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1433.x + (-0.5));
        float _1477 = _1475 * (_1433.y + (-0.5));
        float _1478 = _1475 * (_1433.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_745, _746, _747), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4084 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1509 + 1.0))) + _1514) * _1479;
        float _1524 = _1447 * 0.5;
        float _1525 = _1457 * 0.5;
        float _1526 = _1467 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_745, _746, _747), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4117 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1551 + 1.0))) + _1556) * _1480;
        float _1566 = _1448 * 0.5;
        float _1567 = _1458 * 0.5;
        float _1568 = _1468 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_745, _746, _747), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4150 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1593 + 1.0))) + _1598) * _1481;
        _1615 = _1448;
        _1616 = _1447;
        _1617 = _1446;
        _1618 = _1458;
        _1619 = _1457;
        _1620 = _1456;
        _1621 = _1468;
        _1622 = _1467;
        _1623 = _1466;
        _1624 = _1481;
        _1625 = _1480;
        _1626 = _1479;
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1304;
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = _1304;
        _1626 = _1304;
        _1627 = 0.0;
        _1628 = 0.0;
        _1629 = 0.0;
    }
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1316)) + _1316;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1662 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1639));
    float _1683 = _915 * 0.5;
    float _1684 = _916 * 0.5;
    float _1685 = _917 * 0.5;
    float _1686 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1689 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1692 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1726;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1699 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1703 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1707 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1714 = dot(vec4(cbModelParam._m0[39u]), vec4(_1683, _1684, _1685, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1737;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1728 = dot(vec4(cbModelParam._m0[40u]), vec4(_1683, _1684, _1685, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1741 = (_1737 * cbModelParam._m0[1u].x) + (_1726 * (1.0 - cbModelParam._m0[1u].x));
    float _1751 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1751 : min(cbModelParam._m0[25u].z, _1751));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1815 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1818 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1846 = frontier_phi_17_15_ladder;
        }
        float _2068;
        if (_1815 > 0.0)
        {
            _2068 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2068 = frontier_phi_26_22_ladder;
        }
        float _2314;
        if (_1818 > 0.0)
        {
            _2314 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2314 = frontier_phi_38_33_ladder;
        }
        float _2316 = isnan(_2068) ? _1846 : (isnan(_1846) ? _2068 : min(_1846, _2068));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1812) + _1801;
        float _2322 = (_2317 * _1815) + _1805;
        float _2323 = (_2317 * _1818) + _1809;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1752);
            frontier_phi_16_38_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_16_38_ladder_2;
        _1836 = frontier_phi_16_38_ladder_1;
        _1838 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1752);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1911 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1914 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2073;
        if (_1908 > 0.0)
        {
            _2073 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2073 = frontier_phi_28_24_ladder;
        }
        float _2341;
        if (_1911 > 0.0)
        {
            _2341 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2341 = frontier_phi_40_35_ladder;
        }
        float _2546;
        if (_1914 > 0.0)
        {
            _2546 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2546 = frontier_phi_49_46_ladder;
        }
        float _2548 = isnan(_2341) ? _2073 : (isnan(_2073) ? _2341 : min(_2073, _2341));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1908) + _1897;
        float _2554 = (_2549 * _1911) + _1901;
        float _2555 = (_2549 * _1914) + _1905;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_25_49_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_25_49_ladder_2;
        _1935 = frontier_phi_25_49_ladder_1;
        _1937 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1843);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _935) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _923)) * _907;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1834)) + _1834);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    vec4 _1969 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_844, _845));
    float _1971 = _1969.w;
    float _1983 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1971);
    float _1984 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1971);
    float _1985 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1971);
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1999 = _907 + (-1.0);
    float _2004 = (cbLight._m0[_1992].x * _1999) + 1.0;
    float _2005 = (cbLight._m0[_1992].y * _1999) + 1.0;
    float _2006 = (cbLight._m0[_1992].z * _1999) + 1.0;
    float _2007 = (cbLight._m0[_1992].w * _1999) + 1.0;
    uint _2008 = _1991 + 5u;
    float _2014 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2018 = _1991 + 4u;
    float _2027 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2031 = _1991 | 1u;
    float _2042 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_745, _746, _747));
    float _2045 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_745, _746, _747));
    float _4286 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _4297 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2050 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.3183098733425140380859375;
    float _2052 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * 0.3183098733425140380859375;
    float _2059 = ((cbLight._m0[_2008].x * _2014) * _2052) + (((cbLight._m0[_2018].x * _1983) * _2027) * _2050);
    float _2060 = ((_2014 * cbLight._m0[_2008].y) * _2052) + (((cbLight._m0[_2018].y * _1984) * _2027) * _2050);
    float _2061 = ((_2014 * cbLight._m0[_2008].z) * _2052) + (((cbLight._m0[_2018].z * _1985) * _2027) * _2050);
    uvec4 _2065 = floatBitsToUint(cbLight._m0[_1991 + 12u]);
    bool _2067 = _2065.x == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2067)
    {
        _2078 = _2059;
        _2080 = _2060;
        _2082 = _2061;
    }
    else
    {
        uint _2086 = _1991 + 6u;
        float _2102 = (dot(vec3(cbLight._m0[_1991 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4308 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2105 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2078 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _2059;
        _2080 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _2060;
        _2082 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _2061;
    }
    bool _2085 = _2065.y == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2085)
    {
        _2123 = _2078;
        _2125 = _2080;
        _2127 = _2082;
    }
    else
    {
        uint _2285 = _1991 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1991 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4324 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2304 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2123 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2078;
        _2125 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2080;
        _2127 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2082;
    }
    uint _2130 = _1991 + 8u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _748) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1991].x + _824;
    float _2146 = cbLight._m0[_1991].y + _825;
    float _2147 = cbLight._m0[_1991].z + _826;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1991].xyz));
    float _4340 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2159 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2160 = dot(vec3(_745, _746, _747), vec3(_2152, _2153, _2154));
    float _4362 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2152, _2153, _2154));
    float _4373 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2144 * _2144;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2144;
    float _2195 = (0.5 / (((_2159 * ((_2158 * _2184) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2184) + _2144) * _2158))) * _2158;
    float _4384 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    uint _2211 = _1991 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _748) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2031].x + _824;
    float _2225 = cbLight._m0[_2031].y + _825;
    float _2226 = cbLight._m0[_2031].z + _826;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2031].xyz));
    float _4395 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2238 = dot(vec3(_745, _746, _747), vec3(_2231, _2232, _2233));
    float _4406 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2231, _2232, _2233));
    float _4417 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2223;
    float _2270 = (0.5 / (((_2159 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2260) + _2223) * _2237))) * _2237;
    float _4428 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2282 = (((_2259 * cbLight._m0[_2211].x) * _2272) * _2014) + ((((cbLight._m0[_2130].x * _1983) * _2183) * _2197) * _2027);
    float _2283 = (((_2259 * cbLight._m0[_2211].y) * _2272) * _2014) + ((((cbLight._m0[_2130].y * _1984) * _2183) * _2197) * _2027);
    float _2284 = (((_2259 * cbLight._m0[_2211].z) * _2272) * _2014) + ((((cbLight._m0[_2130].z * _1985) * _2183) * _2197) * _2027);
    float _2346;
    float _2348;
    float _2350;
    if (_2067)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1991 + 2u;
        uint _2356 = _1991 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _748) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _824;
        float _2373 = cbLight._m0[_2352].y + _825;
        float _2374 = cbLight._m0[_2352].z + _826;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2352].xyz));
        float _4439 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2386 = dot(vec3(_745, _746, _747), vec3(_2379, _2380, _2381));
        float _4450 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4461 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2159 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2408) + _2371) * _2385))) * _2385;
        float _4472 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2346 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2282;
        _2348 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2283;
        _2350 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2284;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2085)
    {
        _2456 = _2346;
        _2458 = _2348;
        _2460 = _2350;
    }
    else
    {
        uint _2467 = _1991 + 3u;
        uint _2471 = _1991 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _748) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _824;
        float _2488 = cbLight._m0[_2467].y + _825;
        float _2489 = cbLight._m0[_2467].z + _826;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2467].xyz));
        float _4488 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2501 = dot(vec3(_745, _746, _747), vec3(_2494, _2495, _2496));
        float _4499 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4510 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2159 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2523) + _2486) * _2500))) * _2500;
        float _4521 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2346;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2348;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2350;
    }
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_1989.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2928)
                {
                    frontier_phi_66_pred = _2912;
                    frontier_phi_66_pred_1 = _2917;
                    frontier_phi_66_pred_2 = _2916;
                    frontier_phi_66_pred_3 = _2915;
                    frontier_phi_66_pred_4 = _2914;
                    frontier_phi_66_pred_5 = _2913;
                }
                else
                {
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    uint _3063;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2927;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3067 = uint(findLSB(_3063)) + (_2918 << 5u);
                        uint _3064 = (_3063 + 4294967295u) & _3063;
                        uint _3069 = _3067 * 48u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3089 = (_3067 * 48u) + 4u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3108 = (_3067 * 48u) + 8u;
                        vec3 _3119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x));
                        float _3123 = _3083.x - _2612;
                        float _3124 = _3083.y - _2613;
                        float _3125 = _3083.z - _2614;
                        float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                        float _3129 = inversesqrt(_3126);
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3133 = dot(vec3(_863, _866, _869), vec3(_3130, _3131, _3132));
                        float _3138 = 1.0 - (_3126 * _3083.w);
                        float _4547 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3140 = sqrt(_3126) * _3102.w;
                        float _3143 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3133) + _3144;
                        float _3150 = _3140 * _3140;
                        float _3154 = ((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3139) / ((_3150 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _2612;
                        float _3159 = (-0.0) - _2613;
                        float _3160 = (-0.0) - _2614;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3175 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                        float _3176 = 1.0 - _923;
                        float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                        float _3184 = _3183 * _3183;
                        float _3185 = _3184 * _3184;
                        float _3186 = _3165 + _3130;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3196 = dot(vec3(_863, _866, _869), vec3(_3165, _3166, _3167));
                        float _4563 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3200 = dot(vec3(_863, _866, _869), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                        float _4574 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                        float _3208 = _3143 * _3184;
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3133) + _3209;
                        float _4585 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3214 = 1.0 - _3184;
                        float _3224 = (0.5 / (((_3213 * ((_3199 * _3214) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3184) * _3199))) * _3213;
                        float _4596 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3234 = (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3207 * _3207) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125))) * _3139;
                        _2987 = (_3154 * _3102.x) + _3060;
                        _2988 = (_3154 * _3102.y) + _3061;
                        _2989 = (_3154 * _3102.z) + _3062;
                        _2984 = (_3234 * _3119.x) + _3057;
                        _2985 = (_3234 * _3119.y) + _3058;
                        _2986 = (_3234 * _3119.z) + _3059;
                        if (_3064 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _3064;
                        }
                    }
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                _2760 = frontier_phi_66_pred;
                _2770 = frontier_phi_66_pred_1;
                _2768 = frontier_phi_66_pred_2;
                _2766 = frontier_phi_66_pred_3;
                _2764 = frontier_phi_66_pred_4;
                _2762 = frontier_phi_66_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2760;
                    _2913 = _2762;
                    _2914 = _2764;
                    _2915 = _2766;
                    _2916 = _2768;
                    _2917 = _2770;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2776) & _2658) == 0u)
        {
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2906 = _2905 * _2612;
            float _2907 = _2905 * _2613;
            float _2908 = _2905 * _2614;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3040 = _2759;
                float _3041 = _2761;
                float _3042 = _2763;
                float _3043 = _2765;
                float _3044 = _2767;
                float _3045 = _2769;
                uint _3046 = _2776;
                uint _3055;
                bool _3056;
                for (;;)
                {
                    _3055 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                    _3056 = _3055 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3056)
                    {
                        frontier_phi_77_pred = _3045;
                        frontier_phi_77_pred_1 = _3044;
                        frontier_phi_77_pred_2 = _3043;
                        frontier_phi_77_pred_3 = _3042;
                        frontier_phi_77_pred_4 = _3041;
                        frontier_phi_77_pred_5 = _3040;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3261 = _3040;
                        float _3262 = _3041;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        float _3266 = _3045;
                        uint _3267 = _3055;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        vec3 _3321;
                        vec4 _3336;
                        vec4 _3351;
                        float _3397;
                        bool _3398;
                        for (;;)
                        {
                            uint _3278 = ((_3046 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3278 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3278 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3278 * 40u) + 20u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3278 * 40u) + 24u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3372 = (_3278 * 40u) + 28u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3397 = fma(_2614, _3385.z, fma(_2613, _3385.y, _3385.x * _2612)) + _3385.w;
                            _3398 = !((fma(_2614, _3366.z, fma(_2613, _3366.y, _3366.x * _2612)) + _3366.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3398)
                            {
                                float _3425 = _3293.x - _2612;
                                float _3426 = _3293.y - _2613;
                                float _3427 = _3293.z - _2614;
                                float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                                float _3431 = inversesqrt(_3428);
                                float _3432 = _3431 * _3425;
                                float _3433 = _3431 * _3426;
                                float _3434 = _3431 * _3427;
                                float _3438 = 1.0 - (_3428 / (_3294 * _3294));
                                float _4607 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3443 = sqrt(_3428) * _3309.w;
                                float _3445 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                                float _3446 = _3445 * _3445;
                                float _3449 = ((1.0 - _3446) * dot(vec3(_3432, _3433, _3434), vec3(_863, _866, _869))) + _3446;
                                float _3452 = _3443 * _3443;
                                float _3456 = (fma(_2614, _3336.z, fma(_2613, _3336.y, _3336.x * _2612)) + _3336.w) / _3397;
                                float _3457 = (fma(_2614, _3351.z, fma(_2613, _3351.y, _3351.x * _2612)) + _3351.w) / _3397;
                                float _3461 = 1.0 - dot(vec2(_3456, _3457), vec2(_3456, _3457));
                                float _4623 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3463 = _3462 * (((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3439) / ((_3452 * 0.699999988079071044921875) + 1.0));
                                float _3475 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                                float _3476 = 1.0 - _923;
                                float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                                float _3484 = _3483 * _3483;
                                float _3485 = _3484 * _3484;
                                float _3486 = _3432 - _2906;
                                float _3487 = _3433 - _2907;
                                float _3488 = _3434 - _2908;
                                float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                                float _3496 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4634 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3500 = dot(vec3(_863, _866, _869), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                                float _4645 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                                float _3508 = _3445 * _3484;
                                float _3509 = _3508 * _3508;
                                float _3515 = ((1.0 - _3509) * dot(vec3(_863, _866, _869), vec3(_3432, _3433, _3434))) + _3509;
                                float _4656 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3517 = 1.0 - _3484;
                                float _3527 = (0.5 / (((_3516 * ((_3499 * _3517) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3484) * _3499))) * _3516;
                                float _4667 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3537 = (_3462 * _3439) * (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3507 * _3507) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3463 * _3309.y;
                                frontier_phi_83_pred_1 = _3463 * _3309.x;
                                frontier_phi_83_pred_2 = _3537 * _3321.z;
                                frontier_phi_83_pred_3 = _3537 * _3321.y;
                                frontier_phi_83_pred_4 = _3537 * _3321.x;
                                frontier_phi_83_pred_5 = _3463 * _3309.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3545 = frontier_phi_83_pred;
                            _3544 = frontier_phi_83_pred_1;
                            _3543 = frontier_phi_83_pred_2;
                            _3542 = frontier_phi_83_pred_3;
                            _3541 = frontier_phi_83_pred_4;
                            _3546 = frontier_phi_83_pred_5;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3253;
                        frontier_phi_77_pred_1 = _3252;
                        frontier_phi_77_pred_2 = _3251;
                        frontier_phi_77_pred_3 = _3250;
                        frontier_phi_77_pred_4 = _3249;
                        frontier_phi_77_pred_5 = _3248;
                    }
                    _2891 = frontier_phi_77_pred;
                    _2889 = frontier_phi_77_pred_1;
                    _2887 = frontier_phi_77_pred_2;
                    _2885 = frontier_phi_77_pred_3;
                    _2883 = frontier_phi_77_pred_4;
                    _2881 = frontier_phi_77_pred_5;
                    uint _3047 = _3046 + 1u;
                    if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3040 = _2881;
                        _3041 = _2883;
                        _3042 = _2885;
                        _3043 = _2887;
                        _3044 = _2889;
                        _3045 = _2891;
                        _3046 = _3047;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2885;
                frontier_phi_58_59_ladder_1 = _2891;
                frontier_phi_58_59_ladder_2 = _2889;
                frontier_phi_58_59_ladder_3 = _2887;
                frontier_phi_58_59_ladder_4 = _2883;
                frontier_phi_58_59_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_58_59_ladder = _2763;
                frontier_phi_58_59_ladder_1 = _2769;
                frontier_phi_58_59_ladder_2 = _2767;
                frontier_phi_58_59_ladder_3 = _2765;
                frontier_phi_58_59_ladder_4 = _2761;
                frontier_phi_58_59_ladder_5 = _2759;
            }
            _2880 = frontier_phi_58_59_ladder_5;
            _2882 = frontier_phi_58_59_ladder_4;
            _2884 = frontier_phi_58_59_ladder;
            _2886 = frontier_phi_58_59_ladder_3;
            _2888 = frontier_phi_58_59_ladder_2;
            _2890 = frontier_phi_58_59_ladder_1;
        }
        float _2895 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2671 = (_2895 * _2886) + _2123;
        _2673 = (_2895 * _2888) + _2125;
        _2675 = (_2895 * _2890) + _2127;
        _2677 = ((_2880 * 0.039999999105930328369140625) * _2895) + _2456;
        _2679 = ((_2882 * 0.039999999105930328369140625) * _2895) + _2458;
        _2681 = ((_2884 * 0.039999999105930328369140625) * _2895) + _2460;
    }
    else
    {
        _2671 = _2123;
        _2673 = _2125;
        _2675 = _2127;
        _2677 = _2456;
        _2679 = _2458;
        _2681 = _2460;
    }
    float _4683 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4694 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4705 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2698 = ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2671 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _907))) + ((_2677 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    float _2699 = ((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2673 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _907))) + ((_2679 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    float _2700 = ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2675 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _907))) + ((_2681 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    uint _2701 = _275 + 6u;
    float _2709 = _844 / cbSceneParam._m0[86u].x;
    float _2710 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _2785 = _2784 / _766;
        float _2796 = _2785 * _817;
        float _2797 = _818 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2800 = _2785 * _819;
        float _2802 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2803 = _2802 + cbSceneParam._m0[79u].w;
        float _2804 = cbSceneParam._m0[79u].w - _2797;
        float _2810 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2800 * _2800));
        float _2813 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2810;
        float _2818 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2820 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2798 - _2802) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2803 > 0.0) ? exp2(_2818 * _2803) : (2.0 - exp2(_2820 * _2803))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2813;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : max(_2803, _2804));
            float _2943 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : min(_2803, _2804));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2997 = ((abs(_2810 / _2798) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2818 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2818 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2820 * _2952) - exp2(_2820 * _2953)) * _2941))) + (_2813 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2729);
        _2822 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2824 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2826 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2828 = _3008 * _2729;
    }
    else
    {
        _2822 = _2726;
        _2824 = _2727;
        _2826 = _2728;
        _2828 = _2729;
    }
    bool _3035;
    vec4 _2838;
    vec4 _2860;
    float _2862;
    float _2866;
    float _2867;
    float _2868;
    float _2869;
    bool _2879;
    for (;;)
    {
        _2838 = cbMatDynParam._m0[0u];
        float _2840 = roundEven(_2838.y);
        bool _2841 = _2840 == 3.0;
        float _2842 = log2(_2828);
        float _2849 = exp2(_2842 * cbSceneParam._m0[78u].x) * _2698;
        float _2850 = exp2(_2842 * cbSceneParam._m0[78u].y) * _2699;
        float _2851 = exp2(_2842 * cbSceneParam._m0[78u].z) * _2700;
        float _2858 = _833 + (-0.5);
        _2860 = cbMtdParam._m0[1u];
        _2862 = _2860.y * _2858;
        float _2865 = (_2840 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2866 = _2865 * (_2841 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2822)));
        _2867 = _2865 * (_2841 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2824)));
        _2868 = _2865 * (_2841 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2826)));
        _2869 = _2858 * 0.999000012874603271484375;
        _2879 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2879)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _2869) < 0.5)
            {
                _3035 = true;
                break;
            }
        }
        uint _2976 = _882 + uint(_2838.w);
        if ((cbInstanceData._m0[_2976].w < 1.0) && ((cbInstanceData._m0[_2976].w + _2869) < 0.5))
        {
            _3035 = true;
            break;
        }
        if ((_2862 + 1.0) < _2860.x)
        {
            _3035 = true;
            break;
        }
        _3035 = false;
        break;
    }
    float _3239;
    if (_3035)
    {
        discard_state = true;
        _3239 = 0.0;
    }
    else
    {
        _3239 = cbInstanceData._m0[_2701].w;
    }
    SV_Target.x = _2866;
    SV_Target.y = _2867;
    SV_Target.z = _2868;
    SV_Target.w = _3239;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2701].w;
    discard_exit();
}


