#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3948 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3959 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3970 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3981 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _426) + _520;
    float _532 = ((((_499.x - _518) * _426) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _426) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3992 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _571 = (_532 + ((((_472.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_559.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = (_533 + ((((_472.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_559.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _575 = fma(_539, _246, fma(_572, _253, _571 * _239));
    float _578 = fma(_539, _247, fma(_572, _254, _571 * _240));
    float _581 = fma(_539, _248, fma(_572, _255, _571 * _241));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _621 = ((_616 - _617) * cbMtdParam._m0[24u].z) + _617;
    float _623 = (cbMtdParam._m0[19u].x + dot(vec4(_585 * _575, _585 * _578, _585 * _581, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_621 * cbMtdParam._m0[21u].z);
    float _4003 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _626 = (-0.0) - cbMtdParam._m0[24u].y;
    float _628 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
    float _636 = _624 - ((_624 * TEXCOORD_8.x) * _629);
    float _637 = _624 - ((_624 * TEXCOORD_8.y) * _629);
    float _638 = _624 - ((_624 * TEXCOORD_8.z) * _629);
    float _645 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _649 = ((isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : min(_645, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _657 = (_649 - (((_621 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _649))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4034 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _662 = ((_636 * (cbMtdParam._m0[17u].x - _452)) * _658) + _452;
    float _663 = ((_637 * (cbMtdParam._m0[17u].y - _453)) * _658) + _453;
    float _664 = ((_638 * (cbMtdParam._m0[17u].z - _454)) * _658) + _454;
    vec4 _676 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _704 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4045 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _713 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _705) + _662;
    float _714 = ((((cbMtdParam._m0[10u].y - _663) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _705) + _663;
    float _715 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _705) + _664;
    float _720 = (((_472.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    float _724 = ((_559.z - _720) * cbMtdParam._m0[19u].w) + _720;
    vec4 _738 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _4056 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _756 = (((_738.z - _724) * _636) * _658) + _724;
    float _759 = ((cbMtdParam._m0[23u].y - _756) * _705) + _756;
    vec4 _778 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _784 = (_778.x * 2.0) + (-1.0);
    float _785 = (_778.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4067 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _806 = (((cbMtdParam._m0[21u].x * _571) + ((_745 - _571) * _636)) * _658) + _571;
    float _807 = (((cbMtdParam._m0[21u].x * _572) + ((_746 - _572) * _637)) * _658) + _572;
    float _808 = (((sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) - _539) * _638) * _658) + _539;
    float _819 = (((_784 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _705) + _806;
    float _820 = (((_785 - _807) + (_807 * cbMtdParam._m0[22u].z)) * _705) + _807;
    float _821 = ((sqrt(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) - _808) * _705) + _808;
    float _825 = cbMtdParam._m0[22u].x + _559.w;
    float _828 = fma(_821, _246, fma(_820, _253, _819 * _239));
    float _831 = fma(_821, _247, fma(_820, _254, _819 * _240));
    float _834 = fma(_821, _248, fma(_820, _255, _819 * _241));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _4078 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _842 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4100 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4111 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4122 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _860 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    float _926 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _927 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _945 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _948 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _951 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _965 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _971 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_965].x;
    float _972 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_965].y;
    float _973 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_965].z;
    float _4133 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _926, cbSceneParam._m0[86u].y * _927));
    float _989 = ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_839, _840, _841), vec3(_918, _919, _920));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _839) - _918;
    float _998 = (_993 * _840) - _919;
    float _999 = (_993 * _841) - _920;
    float _1003 = abs(dot(vec3(_918, _919, _920), vec3(_839, _840, _841)));
    float _4166 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_842);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1088 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1092 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1117 = _1050 + _839;
        float _1118 = _1054 + _840;
        float _1119 = _1058 + _841;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_839, _840, _841), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4214 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_839, _840, _841), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4247 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_839, _840, _841), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4280 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1403 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1407 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1430 = _1050 + _839;
        float _1431 = _1054 + _840;
        float _1432 = _1058 + _841;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_839, _840, _841), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4343 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_839, _840, _841), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4376 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_839, _840, _841), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4409 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1360;
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1373)) + _1373;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1374)) + _1374;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _997 * 0.5;
    float _1737 = _998 * 0.5;
    float _1738 = _999 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1867 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1870 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1898 = frontier_phi_14_12_ladder;
        }
        float _2068;
        if (_1867 > 0.0)
        {
            _2068 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2068 = frontier_phi_23_19_ladder;
        }
        float _2363;
        if (_1870 > 0.0)
        {
            _2363 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2363 = frontier_phi_35_30_ladder;
        }
        float _2365 = isnan(_2068) ? _1898 : (isnan(_1898) ? _2068 : min(_1898, _2068));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1864) + _1853;
        float _2371 = (_2366 * _1867) + _1857;
        float _2372 = (_2366 * _1870) + _1861;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_13_35_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_13_35_ladder_2;
        _1888 = frontier_phi_13_35_ladder_1;
        _1890 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1805);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1963 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1966 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2073;
        if (_1960 > 0.0)
        {
            _2073 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2073 = frontier_phi_25_21_ladder;
        }
        float _2390;
        if (_1963 > 0.0)
        {
            _2390 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2390 = frontier_phi_37_32_ladder;
        }
        float _2717;
        if (_1966 > 0.0)
        {
            _2717 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2717 = frontier_phi_47_44_ladder;
        }
        float _2719 = isnan(_2390) ? _2073 : (isnan(_2073) ? _2390 : min(_2073, _2390));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1960) + _1949;
        float _2725 = (_2720 * _1963) + _1953;
        float _2726 = (_2720 * _1966) + _1957;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_22_47_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_22_47_ladder_2;
        _1987 = frontier_phi_22_47_ladder_1;
        _1989 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1895);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2001 = ((((1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1018 * _1005)) * _989;
    float _2002 = _2001 * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2003 = _2001 * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2004 = _2001 * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2060 = _2047 / _2059;
    float _2061 = _2051 / _2059;
    float _2062 = _2055 / _2059;
    float _2209;
    float _2210;
    float _2211;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2089 = ((uint(_2062 > cbSceneParam._m0[59u].y) + uint(_2062 > cbSceneParam._m0[59u].x)) + uint(_2062 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2090 = _2089 + 43u;
        uint _2098 = _2089 + 44u;
        uint _2106 = _2089 + 45u;
        uint _2114 = _2089 + 46u;
        float _2125 = fma(_2059, cbSceneParam._m0[_2090].w, fma(_2055, cbSceneParam._m0[_2090].z, fma(_2051, cbSceneParam._m0[_2090].y, _2047 * cbSceneParam._m0[_2090].x)));
        float _2129 = fma(_2059, cbSceneParam._m0[_2098].w, fma(_2055, cbSceneParam._m0[_2098].z, fma(_2051, cbSceneParam._m0[_2098].y, _2047 * cbSceneParam._m0[_2098].x)));
        float _2137 = fma(_2059, cbSceneParam._m0[_2114].w, fma(_2055, cbSceneParam._m0[_2114].z, fma(_2051, cbSceneParam._m0[_2114].y, _2047 * cbSceneParam._m0[_2114].x)));
        float _2142 = cbSceneParam._m0[33u].z * _2137;
        float _2144 = cbSceneParam._m0[33u].w * _2137;
        float _2147 = fma(_2059, cbSceneParam._m0[_2106].w, fma(_2055, cbSceneParam._m0[_2106].z, fma(_2051, cbSceneParam._m0[_2106].y, _2047 * cbSceneParam._m0[_2106].x))) / _2137;
        float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
        float _4535 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2202 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2125) / _2137, (_2144 + _2129) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2125) / _2137, (_2129 - _2142) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2142) / _2137, (_2129 - _2144) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2144) / _2137, (_2142 + _2129) / _2137), _2147), 0.0)).x), vec4(0.25)));
        _2209 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
        _2210 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
        _2211 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2209 = 1.0;
        _2210 = 1.0;
        _2211 = 1.0;
    }
    float _2275;
    float _2277;
    float _2279;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2263 = fma(_2059, cbSceneParam._m0[63u].w, fma(_2055, cbSceneParam._m0[63u].z, fma(_2051, cbSceneParam._m0[63u].y, _2047 * cbSceneParam._m0[63u].x)));
        float _2264 = fma(_2059, cbSceneParam._m0[60u].w, fma(_2055, cbSceneParam._m0[60u].z, fma(_2051, cbSceneParam._m0[60u].y, _2047 * cbSceneParam._m0[60u].x))) / _2263;
        float _2265 = fma(_2059, cbSceneParam._m0[61u].w, fma(_2055, cbSceneParam._m0[61u].z, fma(_2051, cbSceneParam._m0[61u].y, _2047 * cbSceneParam._m0[61u].x))) / _2263;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2264 >= cbSceneParam._m0[64u].x) && (_2265 >= cbSceneParam._m0[64u].y)) && (_2264 <= cbSceneParam._m0[64u].z)) && (_2265 <= cbSceneParam._m0[64u].w))
        {
            float _2403 = fma(_2059, cbSceneParam._m0[62u].w, fma(_2055, cbSceneParam._m0[62u].z, fma(_2051, cbSceneParam._m0[62u].y, _2047 * cbSceneParam._m0[62u].x))) / _2263;
            float _2407 = isnan(cbSceneParam._m0[41u].w) ? _2403 : (isnan(_2403) ? cbSceneParam._m0[41u].w : max(_2403, cbSceneParam._m0[41u].w));
            float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
            float _4551 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
            float _2457 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2264, cbSceneParam._m0[33u].w + _2265), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2264, _2265 - cbSceneParam._m0[33u].z), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].z, _2265 - cbSceneParam._m0[33u].w), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2265), _2407), 0.0)).x), vec4(0.25)));
            float _2461 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
            float _2462 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
            float _2463 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
            frontier_phi_34_33_ladder_1 = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_34_33_ladder_2 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
        }
        else
        {
            frontier_phi_34_33_ladder = _2211;
            frontier_phi_34_33_ladder_1 = _2210;
            frontier_phi_34_33_ladder_2 = _2209;
        }
        _2275 = frontier_phi_34_33_ladder_2;
        _2277 = frontier_phi_34_33_ladder_1;
        _2279 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2275 = _2209;
        _2277 = _2210;
        _2279 = _2211;
    }
    uvec4 _2284 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2286 = _2284.x * 14u;
    uint _2287 = _2286 + 13u;
    float _2294 = _989 + (-1.0);
    float _2299 = (cbLight._m0[_2287].x * _2294) + 1.0;
    float _2300 = (cbLight._m0[_2287].y * _2294) + 1.0;
    float _2301 = (cbLight._m0[_2287].z * _2294) + 1.0;
    float _2302 = (cbLight._m0[_2287].w * _2294) + 1.0;
    uint _2303 = _2286 + 5u;
    float _2309 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2313 = _2286 + 4u;
    float _2322 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2326 = _2286 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_839, _840, _841));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_839, _840, _841));
    float _4587 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4598 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2303].x * _2309) * _2347) + (((cbLight._m0[_2313].x * _2275) * _2322) * _2345);
    float _2355 = ((_2309 * cbLight._m0[_2303].y) * _2347) + (((cbLight._m0[_2313].y * _2277) * _2322) * _2345);
    float _2356 = ((_2309 * cbLight._m0[_2303].z) * _2347) + (((cbLight._m0[_2313].z * _2279) * _2322) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2286 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2362)
    {
        _2464 = _2354;
        _2466 = _2355;
        _2468 = _2356;
    }
    else
    {
        uint _2472 = _2286 + 6u;
        float _2488 = (dot(vec3(cbLight._m0[_2286 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4609 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2491 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2464 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2354;
        _2466 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2355;
        _2468 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2356;
    }
    bool _2471 = _2360.y == 0u;
    float _2526;
    float _2528;
    float _2530;
    if (_2471)
    {
        _2526 = _2464;
        _2528 = _2466;
        _2530 = _2468;
    }
    else
    {
        uint _2688 = _2286 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2286 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4625 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2707 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2526 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2464;
        _2528 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2466;
        _2530 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2468;
    }
    uint _2533 = _2286 + 8u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _842) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2286].x + _918;
    float _2549 = cbLight._m0[_2286].y + _919;
    float _2550 = cbLight._m0[_2286].z + _920;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2286].xyz));
    float _4641 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _4652 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2562 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2563 = dot(vec3(_839, _840, _841), vec3(_2555, _2556, _2557));
    float _4663 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2555, _2556, _2557));
    float _4674 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2547 * _2547;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2587 = 1.0 - _2547;
    float _2598 = (0.5 / (((_2562 * ((_2561 * _2587) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2587) + _2547) * _2561))) * _2561;
    float _4685 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    uint _2614 = _2286 + 9u;
    float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _842) * 0.949999988079071044921875);
    float _2626 = _2625 * _2625;
    float _2627 = cbLight._m0[_2326].x + _918;
    float _2628 = cbLight._m0[_2326].y + _919;
    float _2629 = cbLight._m0[_2326].z + _920;
    float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
    float _2634 = _2633 * _2627;
    float _2635 = _2633 * _2628;
    float _2636 = _2633 * _2629;
    float _2637 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2326].xyz));
    float _4696 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2641 = dot(vec3(_839, _840, _841), vec3(_2634, _2635, _2636));
    float _4707 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2634, _2635, _2636));
    float _4718 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = _2626 * _2626;
    float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
    float _2662 = (exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2663 = 1.0 - _2626;
    float _2673 = (0.5 / (((_2562 * ((_2640 * _2663) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2663) + _2626) * _2640))) * _2640;
    float _4729 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
    float _2685 = (((_2662 * cbLight._m0[_2614].x) * _2675) * _2309) + ((((cbLight._m0[_2533].x * _2275) * _2586) * _2600) * _2322);
    float _2686 = (((_2662 * cbLight._m0[_2614].y) * _2675) * _2309) + ((((cbLight._m0[_2533].y * _2277) * _2586) * _2600) * _2322);
    float _2687 = (((_2662 * cbLight._m0[_2614].z) * _2675) * _2309) + ((((cbLight._m0[_2533].z * _2279) * _2586) * _2600) * _2322);
    float _2743;
    float _2745;
    float _2747;
    if (_2362)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2286 + 2u;
        uint _2753 = _2286 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _842) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _918;
        float _2770 = cbLight._m0[_2749].y + _919;
        float _2771 = cbLight._m0[_2749].z + _920;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2749].xyz));
        float _4740 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2783 = dot(vec3(_839, _840, _841), vec3(_2776, _2777, _2778));
        float _4751 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4762 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2804 = (exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2805 = 1.0 - _2768;
        float _2815 = (0.5 / (((_2562 * ((_2782 * _2805) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2805) + _2768) * _2782))) * _2782;
        float _4773 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2743 = (((_2804 * cbLight._m0[_2753].x) * _2817) * _2818) + _2685;
        _2745 = (((_2804 * cbLight._m0[_2753].y) * _2817) * _2818) + _2686;
        _2747 = (((_2804 * cbLight._m0[_2753].z) * _2817) * _2818) + _2687;
    }
    float _2849;
    float _2851;
    float _2853;
    if (_2471)
    {
        _2849 = _2743;
        _2851 = _2745;
        _2853 = _2747;
    }
    else
    {
        uint _2860 = _2286 + 3u;
        uint _2864 = _2286 + 11u;
        float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _842) * 0.949999988079071044921875);
        float _2879 = _2878 * _2878;
        float _2880 = cbLight._m0[_2860].x + _918;
        float _2881 = cbLight._m0[_2860].y + _919;
        float _2882 = cbLight._m0[_2860].z + _920;
        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
        float _2887 = _2886 * _2880;
        float _2888 = _2886 * _2881;
        float _2889 = _2886 * _2882;
        float _2890 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2860].xyz));
        float _4789 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2894 = dot(vec3(_839, _840, _841), vec3(_2887, _2888, _2889));
        float _4800 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2898 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2887, _2888, _2889));
        float _4811 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2902 = _2879 * _2879;
        float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
        float _2915 = (exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2916 = 1.0 - _2879;
        float _2926 = (0.5 / (((_2562 * ((_2893 * _2916) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2916) + _2879) * _2893))) * _2893;
        float _4822 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2849 = (((_2915 * cbLight._m0[_2864].x) * _2928) * _2929) + _2743;
        _2851 = (((_2915 * cbLight._m0[_2864].y) * _2928) * _2929) + _2745;
        _2853 = (((_2915 * cbLight._m0[_2864].z) * _2928) * _2929) + _2747;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2284.y == 0u)
    {
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _927) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _926) / _2951)));
        float _2972 = (log2(_2062 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
        }
        else
        {
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            uint _3212 = 0u;
            uint _3221;
            bool _3222;
            for (;;)
            {
                _3221 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                _3222 = _3221 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3222)
                {
                    frontier_phi_66_pred = _3211;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                else
                {
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    uint _3336;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3221;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    for (;;)
                    {
                        uint _3340 = uint(findLSB(_3336)) + (_3212 << 5u);
                        uint _3337 = (_3336 + 4294967295u) & _3336;
                        uint _3342 = _3340 * 48u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3362 = (_3340 * 48u) + 4u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3381 = (_3340 * 48u) + 8u;
                        vec3 _3392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x));
                        float _3396 = _3356.x - _2060;
                        float _3397 = _3356.y - _2061;
                        float _3398 = _3356.z - _2062;
                        float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                        float _3402 = inversesqrt(_3399);
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3406 = dot(vec3(_945, _948, _951), vec3(_3403, _3404, _3405));
                        float _3411 = 1.0 - (_3399 * _3356.w);
                        float _4848 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3413 = sqrt(_3399) * _3375.w;
                        float _3416 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3406) + _3417;
                        float _3423 = _3413 * _3413;
                        float _3427 = ((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3412) / ((_3423 * 0.699999988079071044921875) + 1.0);
                        float _3431 = (-0.0) - _2060;
                        float _3432 = (-0.0) - _2061;
                        float _3433 = (-0.0) - _2062;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3447 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _1005;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_945, _948, _951), vec3(_3438, _3439, _3440));
                        float _4864 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3472 = dot(vec3(_945, _948, _951), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4875 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3416 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3406) + _3481;
                        float _4886 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4897 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3479 * _3479) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125))) * _3412;
                        _3265 = (_3427 * _3375.x) + _3333;
                        _3266 = (_3427 * _3375.y) + _3334;
                        _3267 = (_3427 * _3375.z) + _3335;
                        _3262 = (_3507 * _3392.x) + _3330;
                        _3263 = (_3507 * _3392.y) + _3331;
                        _3264 = (_3507 * _3392.z) + _3332;
                        if (_3337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3337;
                        }
                    }
                    frontier_phi_66_pred = _3267;
                    frontier_phi_66_pred_1 = _3266;
                    frontier_phi_66_pred_2 = _3265;
                    frontier_phi_66_pred_3 = _3264;
                    frontier_phi_66_pred_4 = _3263;
                    frontier_phi_66_pred_5 = _3262;
                }
                _3073 = frontier_phi_66_pred;
                _3071 = frontier_phi_66_pred_1;
                _3069 = frontier_phi_66_pred_2;
                _3067 = frontier_phi_66_pred_3;
                _3065 = frontier_phi_66_pred_4;
                _3063 = frontier_phi_66_pred_5;
                uint _3213 = _3212 + 1u;
                if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3206 = _3063;
                    _3207 = _3065;
                    _3208 = _3067;
                    _3209 = _3069;
                    _3210 = _3071;
                    _3211 = _3073;
                    _3212 = _3213;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
        }
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.z;
        uint _3079 = (_3077 >> 8u) & 15u;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        if (((4294967295u << _3079) & _2982) == 0u)
        {
            _3174 = _3062;
            _3176 = _3064;
            _3178 = _3066;
            _3180 = _3068;
            _3182 = _3070;
            _3184 = _3072;
        }
        else
        {
            float _3199 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
            float _3200 = _3199 * _2060;
            float _3201 = _3199 * _2061;
            float _3202 = _3199 * _2062;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3079 < ((_3077 >> 12u) & 15u))
            {
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3313 = _3062;
                float _3314 = _3064;
                float _3315 = _3066;
                float _3316 = _3068;
                float _3317 = _3070;
                float _3318 = _3072;
                uint _3319 = _3079;
                uint _3328;
                bool _3329;
                for (;;)
                {
                    _3328 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                    _3329 = _3328 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3329)
                    {
                        frontier_phi_72_pred = _3318;
                        frontier_phi_72_pred_1 = _3317;
                        frontier_phi_72_pred_2 = _3316;
                        frontier_phi_72_pred_3 = _3315;
                        frontier_phi_72_pred_4 = _3314;
                        frontier_phi_72_pred_5 = _3313;
                    }
                    else
                    {
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        uint _3531 = _3328;
                        uint _3532;
                        vec4 _3557;
                        float _3558;
                        vec4 _3573;
                        vec3 _3585;
                        vec4 _3600;
                        vec4 _3615;
                        float _3661;
                        bool _3662;
                        for (;;)
                        {
                            uint _3542 = ((_3319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3531));
                            _3532 = (_3531 + 4294967295u) & _3531;
                            uint _3544 = _3542 * 40u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3558 = _3557.w;
                            uint _3560 = (_3542 * 40u) + 4u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3542 * 40u) + 8u;
                            _3585 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x));
                            uint _3587 = (_3542 * 40u) + 16u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3542 * 40u) + 20u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3542 * 40u) + 24u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3636 = (_3542 * 40u) + 28u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3661 = fma(_2062, _3649.z, fma(_2061, _3649.y, _3649.x * _2060)) + _3649.w;
                            _3662 = !((fma(_2062, _3630.z, fma(_2061, _3630.y, _3630.x * _2060)) + _3630.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3662)
                            {
                                float _3689 = _3557.x - _2060;
                                float _3690 = _3557.y - _2061;
                                float _3691 = _3557.z - _2062;
                                float _3692 = dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691));
                                float _3695 = inversesqrt(_3692);
                                float _3696 = _3695 * _3689;
                                float _3697 = _3695 * _3690;
                                float _3698 = _3695 * _3691;
                                float _3702 = 1.0 - (_3692 / (_3558 * _3558));
                                float _4908 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3707 = sqrt(_3692) * _3573.w;
                                float _3709 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                                float _3710 = _3709 * _3709;
                                float _3713 = ((1.0 - _3710) * dot(vec3(_3696, _3697, _3698), vec3(_945, _948, _951))) + _3710;
                                float _3716 = _3707 * _3707;
                                float _3720 = (fma(_2062, _3600.z, fma(_2061, _3600.y, _3600.x * _2060)) + _3600.w) / _3661;
                                float _3721 = (fma(_2062, _3615.z, fma(_2061, _3615.y, _3615.x * _2060)) + _3615.w) / _3661;
                                float _3725 = 1.0 - dot(vec2(_3720, _3721), vec2(_3720, _3721));
                                float _4924 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3727 = _3726 * (((isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0))) * _3703) / ((_3716 * 0.699999988079071044921875) + 1.0));
                                float _3739 = exp2(log2(1.0 / ((_3716 * 3.5) + 5.0)) * 0.25);
                                float _3740 = 1.0 - _1005;
                                float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                                float _3748 = _3747 * _3747;
                                float _3749 = _3748 * _3748;
                                float _3750 = _3696 - _3200;
                                float _3751 = _3697 - _3201;
                                float _3752 = _3698 - _3202;
                                float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                                float _3760 = dot(vec3(_945, _948, _951), vec3((-0.0) - _3200, (-0.0) - _3201, (-0.0) - _3202));
                                float _4935 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3764 = dot(vec3(_945, _948, _951), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                                float _4946 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                                float _3772 = _3709 * _3748;
                                float _3773 = _3772 * _3772;
                                float _3779 = ((1.0 - _3773) * dot(vec3(_945, _948, _951), vec3(_3696, _3697, _3698))) + _3773;
                                float _4957 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3781 = 1.0 - _3748;
                                float _3791 = (0.5 / (((_3780 * ((_3763 * _3781) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3748) * _3763))) * _3780;
                                float _4968 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3801 = (_3726 * _3703) * (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3771 * _3771) * ((_3716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3727 * _3573.y;
                                frontier_phi_78_pred_1 = _3727 * _3573.x;
                                frontier_phi_78_pred_2 = _3801 * _3585.z;
                                frontier_phi_78_pred_3 = _3801 * _3585.y;
                                frontier_phi_78_pred_4 = _3801 * _3585.x;
                                frontier_phi_78_pred_5 = _3727 * _3573.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_78_pred;
                            _3808 = frontier_phi_78_pred_1;
                            _3807 = frontier_phi_78_pred_2;
                            _3806 = frontier_phi_78_pred_3;
                            _3805 = frontier_phi_78_pred_4;
                            _3810 = frontier_phi_78_pred_5;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            if (_3532 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3532;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3517;
                        frontier_phi_72_pred_1 = _3516;
                        frontier_phi_72_pred_2 = _3515;
                        frontier_phi_72_pred_3 = _3514;
                        frontier_phi_72_pred_4 = _3513;
                        frontier_phi_72_pred_5 = _3512;
                    }
                    _3185 = frontier_phi_72_pred;
                    _3183 = frontier_phi_72_pred_1;
                    _3181 = frontier_phi_72_pred_2;
                    _3179 = frontier_phi_72_pred_3;
                    _3177 = frontier_phi_72_pred_4;
                    _3175 = frontier_phi_72_pred_5;
                    uint _3320 = _3319 + 1u;
                    if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3313 = _3175;
                        _3314 = _3177;
                        _3315 = _3179;
                        _3316 = _3181;
                        _3317 = _3183;
                        _3318 = _3185;
                        _3319 = _3320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3185;
                frontier_phi_60_61_ladder_1 = _3183;
                frontier_phi_60_61_ladder_2 = _3179;
                frontier_phi_60_61_ladder_3 = _3177;
                frontier_phi_60_61_ladder_4 = _3175;
                frontier_phi_60_61_ladder_5 = _3181;
            }
            else
            {
                frontier_phi_60_61_ladder = _3072;
                frontier_phi_60_61_ladder_1 = _3070;
                frontier_phi_60_61_ladder_2 = _3066;
                frontier_phi_60_61_ladder_3 = _3064;
                frontier_phi_60_61_ladder_4 = _3062;
                frontier_phi_60_61_ladder_5 = _3068;
            }
            _3174 = frontier_phi_60_61_ladder_4;
            _3176 = frontier_phi_60_61_ladder_3;
            _3178 = frontier_phi_60_61_ladder_2;
            _3180 = frontier_phi_60_61_ladder_5;
            _3182 = frontier_phi_60_61_ladder_1;
            _3184 = frontier_phi_60_61_ladder;
        }
        float _3189 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2995 = (_3189 * _3180) + _2526;
        _2997 = (_3189 * _3182) + _2528;
        _2999 = (_3189 * _3184) + _2530;
        _3001 = ((_3174 * 0.039999999105930328369140625) * _3189) + _2849;
        _3003 = ((_3176 * 0.039999999105930328369140625) * _3189) + _2851;
        _3005 = ((_3178 * 0.039999999105930328369140625) * _3189) + _2853;
    }
    else
    {
        _2995 = _2526;
        _2997 = _2528;
        _2999 = _2530;
        _3001 = _2849;
        _3003 = _2851;
        _3005 = _2853;
    }
    float _4984 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4995 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5006 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    uint _3025 = _277 + 6u;
    float _3033 = _926 / cbSceneParam._m0[86u].x;
    float _3034 = _927 / cbSceneParam._m0[86u].y;
    vec4 _3048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, (log2((isnan(cbSceneParam._m0[77u].w) ? _860 : (isnan(_860) ? cbSceneParam._m0[77u].w : min(_860, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3050 = _3048.x;
    float _3051 = _3048.y;
    float _3052 = _3048.z;
    float _3053 = _3048.w;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_860 > cbSceneParam._m0[78u].w)
    {
        float _3087 = isnan(_860) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _860 : min(cbSceneParam._m0[80u].w, _860));
        float _3088 = _3087 / _860;
        float _3099 = _3088 * _911;
        float _3100 = _912 * _3088;
        float _3101 = (-0.0) - _3100;
        float _3102 = _3088 * _913;
        float _3104 = (cbSceneParam._m0[77u].w * _3101) / _3087;
        float _3105 = _3104 + cbSceneParam._m0[79u].w;
        float _3106 = cbSceneParam._m0[79u].w - _3100;
        float _3112 = sqrt(((_3099 * _3099) + (_3100 * _3100)) + (_3102 * _3102));
        float _3115 = (1.0 - (cbSceneParam._m0[77u].w / _3087)) * _3112;
        float _3120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3275;
        if (abs((_3101 - _3104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3275 = ((((_3105 > 0.0) ? exp2(_3120 * _3105) : (2.0 - exp2(_3122 * _3105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3115;
        }
        else
        {
            float _3235 = 1.0 / cbSceneParam._m0[80u].x;
            float _3236 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : max(_3105, _3106));
            float _3237 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : min(_3105, _3106));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            _3275 = ((abs(_3112 / _3101) * cbSceneParam._m0[80u].y) * ((((_3246 - _3247) * 2.0) - ((exp2(_3120 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0)))) - exp2(_3120 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))))) * _3235)) - ((exp2(_3122 * _3246) - exp2(_3122 * _3247)) * _3235))) + (_3115 * cbSceneParam._m0[80u].z);
        }
        vec4 _3277 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, 1.0), 0.0);
        float _3286 = exp2((_3275 * (-1.44269502162933349609375)) * (1.0 - _3277.w));
        float _3287 = log2(_3286);
        float _3303 = log2(_3053);
        _3124 = (exp2(_3303 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].x)) * _3277.x) / cbSceneParam._m0[78u].x)) + _3050;
        _3126 = (exp2(_3303 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].y)) * _3277.y) / cbSceneParam._m0[78u].y)) + _3051;
        _3128 = (exp2(_3303 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].z)) * _3277.z) / cbSceneParam._m0[78u].z)) + _3052;
        _3130 = _3286 * _3053;
    }
    else
    {
        _3124 = _3050;
        _3126 = _3051;
        _3128 = _3052;
        _3130 = _3053;
    }
    float _3142 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3143 = _3142 == 3.0;
    float _3144 = log2(_3130);
    float _3151 = exp2(_3144 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2995 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _989))) + ((_3001 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _3152 = exp2(_3144 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2997 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _989))) + ((_3003 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _3153 = exp2(_3144 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2999 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _989))) + ((_3005 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _3162 = (_3142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3162 * (_3143 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.y = _3162 * (_3143 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3126)));
    SV_Target.z = _3162 * (_3143 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3128)));
    SV_Target.w = cbInstanceData._m0[_3025].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
}


