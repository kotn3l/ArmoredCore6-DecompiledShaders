#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1381;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3708 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3719 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3730 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3741 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) + _445;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _426) + _541;
    float _553 = ((((_520.x - _539) * _426) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _426) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3752 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _592 = (_553 + ((((_493.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_580.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = (_554 + ((((_493.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_580.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _596 = fma(_560, _246, fma(_593, _253, _592 * _239));
    float _599 = fma(_560, _247, fma(_593, _254, _592 * _240));
    float _602 = fma(_560, _248, fma(_593, _255, _592 * _241));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    vec4 _635 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _637 = _635.x;
    float _638 = 1.0 - _637;
    float _642 = ((_637 - _638) * cbMtdParam._m0[24u].z) + _638;
    float _644 = (cbMtdParam._m0[19u].x + dot(vec4(_606 * _596, _606 * _599, _606 * _602, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_642 * cbMtdParam._m0[21u].z);
    float _3763 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _647 = (-0.0) - cbMtdParam._m0[24u].y;
    float _649 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
    float _657 = _645 - ((_645 * TEXCOORD_8.x) * _650);
    float _658 = _645 - ((_645 * TEXCOORD_8.y) * _650);
    float _659 = _645 - ((_645 * TEXCOORD_8.z) * _650);
    float _666 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _670 = ((isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : min(_666, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _678 = (_670 - (((_642 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _670))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3794 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _683 = ((_657 * ((_473.x * cbMtdParam._m0[18u].x) - _452)) * _679) + _452;
    float _684 = ((_658 * ((_473.y * cbMtdParam._m0[18u].y) - _453)) * _679) + _453;
    float _685 = ((_659 * ((_473.z * cbMtdParam._m0[18u].z) - _454)) * _679) + _454;
    vec4 _697 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _699 = _697.x;
    float _700 = 1.0 - _699;
    float _725 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_699 - _700) * cbMtdParam._m0[24u].w) + _700) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3805 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _734 = ((((cbMtdParam._m0[10u].x - _683) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _726) + _683;
    float _735 = ((((cbMtdParam._m0[10u].y - _684) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _726) + _684;
    float _736 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _685)) * _726) + _685;
    float _741 = (((_493.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    float _745 = ((_580.z - _741) * cbMtdParam._m0[19u].w) + _741;
    vec4 _759 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3816 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _777 = (((_759.z - _745) * _657) * _679) + _745;
    float _780 = ((cbMtdParam._m0[23u].y - _777) * _726) + _777;
    vec4 _799 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _805 = (_799.x * 2.0) + (-1.0);
    float _806 = (_799.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _3827 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _827 = (((cbMtdParam._m0[21u].x * _592) + ((_766 - _592) * _657)) * _679) + _592;
    float _828 = (((cbMtdParam._m0[21u].x * _593) + ((_767 - _593) * _658)) * _679) + _593;
    float _829 = (((sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) - _560) * _659) * _679) + _560;
    float _840 = (((_805 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _726) + _827;
    float _841 = (((_806 - _828) + (_828 * cbMtdParam._m0[22u].z)) * _726) + _828;
    float _842 = ((sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _829) * _726) + _829;
    float _846 = cbMtdParam._m0[22u].x + _580.w;
    float _849 = fma(_842, _246, fma(_841, _253, _840 * _239));
    float _852 = fma(_842, _247, fma(_841, _254, _840 * _240));
    float _855 = fma(_842, _248, fma(_841, _255, _840 * _241));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3838 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _863 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3860 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3871 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3882 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _966 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _969 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _972 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _986 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_986].z;
    float _3893 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _1006 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1010 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _1006.x;
    float _1011 = dot(vec3(_860, _861, _862), vec3(_939, _940, _941));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _860) - _939;
    float _1019 = (_1014 * _861) - _940;
    float _1020 = (_1014 * _862) - _941;
    float _1024 = abs(dot(vec3(_939, _940, _941), vec3(_860, _861, _862)));
    float _3926 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_863);
    float _1039 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1109 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1113 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1138 = _1071 + _860;
        float _1139 = _1075 + _861;
        float _1140 = _1079 + _862;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_860, _861, _862), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3974 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_860, _861, _862), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4007 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_860, _861, _862), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4040 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1424 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1428 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1451 = _1071 + _860;
        float _1452 = _1075 + _861;
        float _1453 = _1079 + _862;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_860, _861, _862), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4103 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_860, _861, _862), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4136 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_860, _861, _862), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4169 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1381;
        _1690 = _1381;
        _1691 = _1381;
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1393)) + _1393;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1394)) + _1394;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1395)) + _1395;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _1018 * 0.5;
    float _1758 = _1019 * 0.5;
    float _1759 = _1020 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1887 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1890 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1918 = frontier_phi_14_12_ladder;
        }
        float _2139;
        if (_1887 > 0.0)
        {
            _2139 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2139 = frontier_phi_23_19_ladder;
        }
        float _2385;
        if (_1890 > 0.0)
        {
            _2385 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2385 = frontier_phi_35_30_ladder;
        }
        float _2387 = isnan(_2139) ? _1918 : (isnan(_1918) ? _2139 : min(_1918, _2139));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1884) + _1873;
        float _2393 = (_2388 * _1887) + _1877;
        float _2394 = (_2388 * _1890) + _1881;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_13_35_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_13_35_ladder_2;
        _1908 = frontier_phi_13_35_ladder_1;
        _1910 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _1982 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _1985 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2144;
        if (_1979 > 0.0)
        {
            _2144 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2144 = frontier_phi_25_21_ladder;
        }
        float _2412;
        if (_1982 > 0.0)
        {
            _2412 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2412 = frontier_phi_37_32_ladder;
        }
        float _2617;
        if (_1985 > 0.0)
        {
            _2617 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2617 = frontier_phi_46_43_ladder;
        }
        float _2619 = isnan(_2412) ? _2144 : (isnan(_2144) ? _2412 : min(_2144, _2412));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1979) + _1968;
        float _2625 = (_2620 * _1982) + _1972;
        float _2626 = (_2620 * _1985) + _1976;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_22_46_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_22_46_ladder_2;
        _2006 = frontier_phi_22_46_ladder_1;
        _2008 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1915);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2020 = ((((1.0 - _1039) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1039 * _1026)) * _1010;
    float _2021 = _2020 * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2022 = _2020 * ((cbModelParam._m0[1u].w * (_2006 - _1908)) + _1908);
    float _2023 = _2020 * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    vec4 _2040 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_947, _948));
    float _2042 = _2040.w;
    float _2054 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2042);
    float _2055 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2042);
    float _2056 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2042);
    uvec4 _2060 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2062 = _2060.x * 14u;
    uint _2063 = _2062 + 13u;
    float _2070 = _1010 + (-1.0);
    float _2075 = (cbLight._m0[_2063].x * _2070) + 1.0;
    float _2076 = (cbLight._m0[_2063].y * _2070) + 1.0;
    float _2077 = (cbLight._m0[_2063].z * _2070) + 1.0;
    float _2078 = (cbLight._m0[_2063].w * _2070) + 1.0;
    uint _2079 = _2062 + 5u;
    float _2085 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2089 = _2062 + 4u;
    float _2098 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2102 = _2062 | 1u;
    float _2113 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_860, _861, _862));
    float _2116 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_860, _861, _862));
    float _4305 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _4316 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2121 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2123 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2130 = ((cbLight._m0[_2079].x * _2085) * _2123) + (((cbLight._m0[_2089].x * _2054) * _2098) * _2121);
    float _2131 = ((_2085 * cbLight._m0[_2079].y) * _2123) + (((cbLight._m0[_2089].y * _2055) * _2098) * _2121);
    float _2132 = ((_2085 * cbLight._m0[_2079].z) * _2123) + (((cbLight._m0[_2089].z * _2056) * _2098) * _2121);
    uvec4 _2136 = floatBitsToUint(cbLight._m0[_2062 + 12u]);
    bool _2138 = _2136.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2138)
    {
        _2149 = _2130;
        _2151 = _2131;
        _2153 = _2132;
    }
    else
    {
        uint _2157 = _2062 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_2062 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4327 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2176 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2130;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2131;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2132;
    }
    bool _2156 = _2136.y == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2156)
    {
        _2194 = _2149;
        _2196 = _2151;
        _2198 = _2153;
    }
    else
    {
        uint _2356 = _2062 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2062 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4343 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2375 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2194 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2149;
        _2196 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2151;
        _2198 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2153;
    }
    uint _2201 = _2062 + 8u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _863) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2062].x + _939;
    float _2217 = cbLight._m0[_2062].y + _940;
    float _2218 = cbLight._m0[_2062].z + _941;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2062].xyz));
    float _4359 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2230 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2231 = dot(vec3(_860, _861, _862), vec3(_2223, _2224, _2225));
    float _4381 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2223, _2224, _2225));
    float _4392 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2215 * _2215;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2255 = 1.0 - _2215;
    float _2266 = (0.5 / (((_2230 * ((_2229 * _2255) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2255) + _2215) * _2229))) * _2229;
    float _4403 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    uint _2282 = _2062 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _863) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2102].x + _939;
    float _2296 = cbLight._m0[_2102].y + _940;
    float _2297 = cbLight._m0[_2102].z + _941;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2102].xyz));
    float _4414 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2309 = dot(vec3(_860, _861, _862), vec3(_2302, _2303, _2304));
    float _4425 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2302, _2303, _2304));
    float _4436 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2331 = 1.0 - _2294;
    float _2341 = (0.5 / (((_2230 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2331) + _2294) * _2308))) * _2308;
    float _4447 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2353 = (((_2330 * cbLight._m0[_2282].x) * _2343) * _2085) + ((((cbLight._m0[_2201].x * _2054) * _2254) * _2268) * _2098);
    float _2354 = (((_2330 * cbLight._m0[_2282].y) * _2343) * _2085) + ((((cbLight._m0[_2201].y * _2055) * _2254) * _2268) * _2098);
    float _2355 = (((_2330 * cbLight._m0[_2282].z) * _2343) * _2085) + ((((cbLight._m0[_2201].z * _2056) * _2254) * _2268) * _2098);
    float _2417;
    float _2419;
    float _2421;
    if (_2138)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2062 + 2u;
        uint _2427 = _2062 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _863) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _939;
        float _2444 = cbLight._m0[_2423].y + _940;
        float _2445 = cbLight._m0[_2423].z + _941;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2423].xyz));
        float _4458 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2457 = dot(vec3(_860, _861, _862), vec3(_2450, _2451, _2452));
        float _4469 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4480 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2478 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2479 = 1.0 - _2442;
        float _2489 = (0.5 / (((_2230 * ((_2456 * _2479) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2479) + _2442) * _2456))) * _2456;
        float _4491 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2417 = (((_2478 * cbLight._m0[_2427].x) * _2491) * _2492) + _2353;
        _2419 = (((_2478 * cbLight._m0[_2427].y) * _2491) * _2492) + _2354;
        _2421 = (((_2478 * cbLight._m0[_2427].z) * _2491) * _2492) + _2355;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2156)
    {
        _2527 = _2417;
        _2529 = _2419;
        _2531 = _2421;
    }
    else
    {
        uint _2538 = _2062 + 3u;
        uint _2542 = _2062 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _863) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _939;
        float _2559 = cbLight._m0[_2538].y + _940;
        float _2560 = cbLight._m0[_2538].z + _941;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2538].xyz));
        float _4507 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2572 = dot(vec3(_860, _861, _862), vec3(_2565, _2566, _2567));
        float _4518 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4529 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2594 = 1.0 - _2557;
        float _2604 = (0.5 / (((_2230 * ((_2571 * _2594) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2594) + _2557) * _2571))) * _2571;
        float _4540 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2527 = (((_2593 * cbLight._m0[_2542].x) * _2606) * _2607) + _2417;
        _2529 = (((_2593 * cbLight._m0[_2542].y) * _2606) * _2607) + _2419;
        _2531 = (((_2593 * cbLight._m0[_2542].z) * _2606) * _2607) + _2421;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2060.y == 0u)
    {
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2682;
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2682;
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2682;
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.x;
        uint _2709 = uint((float(_2697.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _2698))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _2698)));
        float _2719 = (log2(_2685 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2720 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        uint _2723 = uint(isnan(14.0) ? _2720 : (isnan(_2720) ? 14.0 : min(_2720, 14.0)));
        uvec4 _2728 = texelFetch(g_lightClusterGridBuffer, int(((_2723 << 2u) + (_2709 << 6u)) >> 2u));
        uint _2729 = _2728.x;
        uint _2730 = _2697.z;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((((1u << ((_2730 >> 4u) & 15u)) + 4294967295u) & _2729) == 0u) || ((_2730 & 240u) == 0u))
        {
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
        }
        else
        {
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            uint _2980 = 0u;
            uint _2989;
            bool _2990;
            for (;;)
            {
                _2989 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                _2990 = _2989 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2990)
                {
                    frontier_phi_61_pred = _2974;
                    frontier_phi_61_pred_1 = _2979;
                    frontier_phi_61_pred_2 = _2978;
                    frontier_phi_61_pred_3 = _2977;
                    frontier_phi_61_pred_4 = _2976;
                    frontier_phi_61_pred_5 = _2975;
                }
                else
                {
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    uint _3104;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2989;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3108 = uint(findLSB(_3104)) + (_2980 << 5u);
                        uint _3105 = (_3104 + 4294967295u) & _3104;
                        uint _3110 = _3108 * 48u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3130 = (_3108 * 48u) + 4u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3149 = (_3108 * 48u) + 8u;
                        vec3 _3160 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x));
                        float _3164 = _3124.x - _2683;
                        float _3165 = _3124.y - _2684;
                        float _3166 = _3124.z - _2685;
                        float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                        float _3170 = inversesqrt(_3167);
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3174 = dot(vec3(_966, _969, _972), vec3(_3171, _3172, _3173));
                        float _3179 = 1.0 - (_3167 * _3124.w);
                        float _4566 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3181 = sqrt(_3167) * _3143.w;
                        float _3184 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3174) + _3185;
                        float _3191 = _3181 * _3181;
                        float _3195 = ((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3180) / ((_3191 * 0.699999988079071044921875) + 1.0);
                        float _3199 = (-0.0) - _2683;
                        float _3200 = (-0.0) - _2684;
                        float _3201 = (-0.0) - _2685;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3216 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                        float _3217 = 1.0 - _1026;
                        float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                        float _3225 = _3224 * _3224;
                        float _3226 = _3225 * _3225;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3237 = dot(vec3(_966, _969, _972), vec3(_3206, _3207, _3208));
                        float _4582 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3241 = dot(vec3(_966, _969, _972), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                        float _4593 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                        float _3249 = _3184 * _3225;
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3174) + _3250;
                        float _4604 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3255 = 1.0 - _3225;
                        float _3265 = (0.5 / (((_3254 * ((_3240 * _3255) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3225) * _3240))) * _3254;
                        float _4615 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3276 = (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3248 * _3248) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125))) * _3180;
                        _3033 = (_3195 * _3143.x) + _3101;
                        _3034 = (_3195 * _3143.y) + _3102;
                        _3035 = (_3195 * _3143.z) + _3103;
                        _3030 = (_3276 * _3160.x) + _3098;
                        _3031 = (_3276 * _3160.y) + _3099;
                        _3032 = (_3276 * _3160.z) + _3100;
                        if (_3105 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3105;
                        }
                    }
                    frontier_phi_61_pred = _3030;
                    frontier_phi_61_pred_1 = _3035;
                    frontier_phi_61_pred_2 = _3034;
                    frontier_phi_61_pred_3 = _3033;
                    frontier_phi_61_pred_4 = _3032;
                    frontier_phi_61_pred_5 = _3031;
                }
                _2831 = frontier_phi_61_pred;
                _2841 = frontier_phi_61_pred_1;
                _2839 = frontier_phi_61_pred_2;
                _2837 = frontier_phi_61_pred_3;
                _2835 = frontier_phi_61_pred_4;
                _2833 = frontier_phi_61_pred_5;
                uint _2981 = _2980 + 1u;
                if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2974 = _2831;
                    _2975 = _2833;
                    _2976 = _2835;
                    _2977 = _2837;
                    _2978 = _2839;
                    _2979 = _2841;
                    _2980 = _2981;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
        }
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.z;
        uint _2847 = (_2845 >> 8u) & 15u;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((4294967295u << _2847) & _2729) == 0u)
        {
            _2942 = _2830;
            _2944 = _2832;
            _2946 = _2834;
            _2948 = _2836;
            _2950 = _2838;
            _2952 = _2840;
        }
        else
        {
            float _2967 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
            float _2968 = _2967 * _2683;
            float _2969 = _2967 * _2684;
            float _2970 = _2967 * _2685;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2847 < ((_2845 >> 12u) & 15u))
            {
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _3081 = _2830;
                float _3082 = _2832;
                float _3083 = _2834;
                float _3084 = _2836;
                float _3085 = _2838;
                float _3086 = _2840;
                uint _3087 = _2847;
                uint _3096;
                bool _3097;
                for (;;)
                {
                    _3096 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                    _3097 = _3096 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3097)
                    {
                        frontier_phi_67_pred = _3084;
                        frontier_phi_67_pred_1 = _3085;
                        frontier_phi_67_pred_2 = _3086;
                        frontier_phi_67_pred_3 = _3083;
                        frontier_phi_67_pred_4 = _3082;
                        frontier_phi_67_pred_5 = _3081;
                    }
                    else
                    {
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3294 = _3081;
                        float _3295 = _3082;
                        float _3296 = _3083;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        uint _3300 = _3096;
                        uint _3301;
                        vec4 _3326;
                        float _3327;
                        vec4 _3342;
                        vec3 _3354;
                        vec4 _3369;
                        vec4 _3384;
                        float _3430;
                        bool _3431;
                        for (;;)
                        {
                            uint _3311 = ((_3087 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3300));
                            _3301 = (_3300 + 4294967295u) & _3300;
                            uint _3313 = _3311 * 40u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3327 = _3326.w;
                            uint _3329 = (_3311 * 40u) + 4u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3311 * 40u) + 8u;
                            _3354 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x));
                            uint _3356 = (_3311 * 40u) + 16u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3311 * 40u) + 20u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3311 * 40u) + 24u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3405 = (_3311 * 40u) + 28u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3430 = fma(_2685, _3418.z, fma(_2684, _3418.y, _3418.x * _2683)) + _3418.w;
                            _3431 = !((fma(_2685, _3399.z, fma(_2684, _3399.y, _3399.x * _2683)) + _3399.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3431)
                            {
                                float _3458 = _3326.x - _2683;
                                float _3459 = _3326.y - _2684;
                                float _3460 = _3326.z - _2685;
                                float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                                float _3464 = inversesqrt(_3461);
                                float _3465 = _3464 * _3458;
                                float _3466 = _3464 * _3459;
                                float _3467 = _3464 * _3460;
                                float _3471 = 1.0 - (_3461 / (_3327 * _3327));
                                float _4626 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3476 = sqrt(_3461) * _3342.w;
                                float _3478 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                                float _3479 = _3478 * _3478;
                                float _3482 = ((1.0 - _3479) * dot(vec3(_3465, _3466, _3467), vec3(_966, _969, _972))) + _3479;
                                float _3485 = _3476 * _3476;
                                float _3489 = (fma(_2685, _3369.z, fma(_2684, _3369.y, _3369.x * _2683)) + _3369.w) / _3430;
                                float _3490 = (fma(_2685, _3384.z, fma(_2684, _3384.y, _3384.x * _2683)) + _3384.w) / _3430;
                                float _3494 = 1.0 - dot(vec2(_3489, _3490), vec2(_3489, _3490));
                                float _4642 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3496 = _3495 * (((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3472) / ((_3485 * 0.699999988079071044921875) + 1.0));
                                float _3508 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                                float _3509 = 1.0 - _1026;
                                float _3516 = sqrt(1.0 - ((1.0 - (_3509 * _3509)) * (1.0 - (_3508 * _3508))));
                                float _3517 = _3516 * _3516;
                                float _3518 = _3517 * _3517;
                                float _3519 = _3465 - _2968;
                                float _3520 = _3466 - _2969;
                                float _3521 = _3467 - _2970;
                                float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                                float _3529 = dot(vec3(_966, _969, _972), vec3((-0.0) - _2968, (-0.0) - _2969, (-0.0) - _2970));
                                float _4653 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3533 = dot(vec3(_966, _969, _972), vec3(_3525 * _3519, _3525 * _3520, _3525 * _3521));
                                float _4664 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3540 = ((_3536 * _3536) * (_3518 + (-1.0))) + 1.0;
                                float _3541 = _3478 * _3517;
                                float _3542 = _3541 * _3541;
                                float _3548 = ((1.0 - _3542) * dot(vec3(_966, _969, _972), vec3(_3465, _3466, _3467))) + _3542;
                                float _4675 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3550 = 1.0 - _3517;
                                float _3560 = (0.5 / (((_3549 * ((_3532 * _3550) + _3517)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3517) * _3532))) * _3549;
                                float _4686 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3570 = (_3495 * _3472) * (((_3518 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3540 * _3540) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3570 * _3354.x;
                                frontier_phi_73_pred_1 = _3570 * _3354.y;
                                frontier_phi_73_pred_2 = _3496 * _3342.z;
                                frontier_phi_73_pred_3 = _3496 * _3342.y;
                                frontier_phi_73_pred_4 = _3496 * _3342.x;
                                frontier_phi_73_pred_5 = _3570 * _3354.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3574 = frontier_phi_73_pred;
                            _3575 = frontier_phi_73_pred_1;
                            _3579 = frontier_phi_73_pred_2;
                            _3578 = frontier_phi_73_pred_3;
                            _3577 = frontier_phi_73_pred_4;
                            _3576 = frontier_phi_73_pred_5;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            if (_3301 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3301;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3284;
                        frontier_phi_67_pred_1 = _3285;
                        frontier_phi_67_pred_2 = _3286;
                        frontier_phi_67_pred_3 = _3283;
                        frontier_phi_67_pred_4 = _3282;
                        frontier_phi_67_pred_5 = _3281;
                    }
                    _2949 = frontier_phi_67_pred;
                    _2951 = frontier_phi_67_pred_1;
                    _2953 = frontier_phi_67_pred_2;
                    _2947 = frontier_phi_67_pred_3;
                    _2945 = frontier_phi_67_pred_4;
                    _2943 = frontier_phi_67_pred_5;
                    uint _3088 = _3087 + 1u;
                    if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3081 = _2943;
                        _3082 = _2945;
                        _3083 = _2947;
                        _3084 = _2949;
                        _3085 = _2951;
                        _3086 = _2953;
                        _3087 = _3088;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2951;
                frontier_phi_55_56_ladder_1 = _2953;
                frontier_phi_55_56_ladder_2 = _2949;
                frontier_phi_55_56_ladder_3 = _2947;
                frontier_phi_55_56_ladder_4 = _2945;
                frontier_phi_55_56_ladder_5 = _2943;
            }
            else
            {
                frontier_phi_55_56_ladder = _2838;
                frontier_phi_55_56_ladder_1 = _2840;
                frontier_phi_55_56_ladder_2 = _2836;
                frontier_phi_55_56_ladder_3 = _2834;
                frontier_phi_55_56_ladder_4 = _2832;
                frontier_phi_55_56_ladder_5 = _2830;
            }
            _2942 = frontier_phi_55_56_ladder_5;
            _2944 = frontier_phi_55_56_ladder_4;
            _2946 = frontier_phi_55_56_ladder_3;
            _2948 = frontier_phi_55_56_ladder_2;
            _2950 = frontier_phi_55_56_ladder;
            _2952 = frontier_phi_55_56_ladder_1;
        }
        float _2957 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _2742 = (_2957 * _2948) + _2194;
        _2744 = (_2957 * _2950) + _2196;
        _2746 = (_2957 * _2952) + _2198;
        _2748 = ((_2942 * 0.039999999105930328369140625) * _2957) + _2527;
        _2750 = ((_2944 * 0.039999999105930328369140625) * _2957) + _2529;
        _2752 = ((_2946 * 0.039999999105930328369140625) * _2957) + _2531;
    }
    else
    {
        _2742 = _2194;
        _2744 = _2196;
        _2746 = _2198;
        _2748 = _2527;
        _2750 = _2529;
        _2752 = _2531;
    }
    float _4702 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4713 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4724 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    uint _2772 = _277 + 6u;
    float _2780 = _947 / cbSceneParam._m0[86u].x;
    float _2781 = _948 / cbSceneParam._m0[86u].y;
    vec4 _2795 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2797 = _2795.x;
    float _2798 = _2795.y;
    float _2799 = _2795.z;
    float _2800 = _2795.w;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2855 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2856 = _2855 / _881;
        float _2867 = _2856 * _932;
        float _2868 = _933 * _2856;
        float _2869 = (-0.0) - _2868;
        float _2870 = _2856 * _934;
        float _2872 = (cbSceneParam._m0[77u].w * _2869) / _2855;
        float _2873 = _2872 + cbSceneParam._m0[79u].w;
        float _2874 = cbSceneParam._m0[79u].w - _2868;
        float _2880 = sqrt(((_2867 * _2867) + (_2868 * _2868)) + (_2870 * _2870));
        float _2883 = (1.0 - (cbSceneParam._m0[77u].w / _2855)) * _2880;
        float _2888 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2890 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2869 - _2872) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2873 > 0.0) ? exp2(_2888 * _2873) : (2.0 - exp2(_2890 * _2873))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2883;
        }
        else
        {
            float _3003 = 1.0 / cbSceneParam._m0[80u].x;
            float _3004 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : max(_2873, _2874));
            float _3005 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : min(_2873, _2874));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            float _3015 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : min(_3005, 0.0));
            _3043 = ((abs(_2880 / _2869) * cbSceneParam._m0[80u].y) * ((((_3014 - _3015) * 2.0) - ((exp2(_2888 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0)))) - exp2(_2888 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))))) * _3003)) - ((exp2(_2890 * _3014) - exp2(_2890 * _3015)) * _3003))) + (_2883 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2800);
        _2892 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2797;
        _2894 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2798;
        _2896 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2799;
        _2898 = _3054 * _2800;
    }
    else
    {
        _2892 = _2797;
        _2894 = _2798;
        _2896 = _2799;
        _2898 = _2800;
    }
    float _2910 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2911 = _2910 == 3.0;
    float _2912 = log2(_2898);
    float _2919 = exp2(_2912 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2742 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1010))) + ((_2748 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2920 = exp2(_2912 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2744 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1010))) + ((_2750 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2921 = exp2(_2912 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2746 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1010))) + ((_2752 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2930 = (_2910 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2930 * (_2911 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.y = _2930 * (_2911 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2894)));
    SV_Target.z = _2930 * (_2911 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2896)));
    SV_Target.w = cbInstanceData._m0[_2772].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2772].w;
}


