#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1208;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3538 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3549 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3560 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3571 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) + _430;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _514 = ((_484.z - _505) * _411) + _505;
    float _517 = ((((_484.x - _503) * _411) + _503) * 2.0) + (-1.0);
    float _518 = ((((_484.y - _504) * _411) + _504) * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3582 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))));
    float _527 = _517 + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _528 = _518 + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _531 = fma(_524, _229, fma(_528, _236, _527 * _222));
    float _534 = fma(_524, _230, fma(_528, _237, _527 * _223));
    float _537 = fma(_524, _231, fma(_528, _238, _527 * _224));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _585 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _592 = ((_587 - _588) * cbMtdParam._m0[24u].z) + _588;
    float _594 = (cbMtdParam._m0[19u].x + dot(vec4(_541 * _531, _541 * _534, _541 * _537, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_592 * cbMtdParam._m0[21u].z);
    float _3593 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _610 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_592 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3604 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _615 = ((_595 * (cbMtdParam._m0[17u].x - _437)) * _611) + _437;
    float _616 = ((_595 * (cbMtdParam._m0[17u].y - _438)) * _611) + _438;
    float _617 = ((_595 * (cbMtdParam._m0[17u].z - _439)) * _611) + _439;
    float _622 = (((_457.z - _514) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _514;
    vec4 _635 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _642 = (_635.x * 2.0) + (-1.0);
    float _643 = (_635.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3615 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _653 = (((_635.z - _622) * _595) * _611) + _622;
    float _668 = (((cbMtdParam._m0[21u].x * _527) + ((_642 - _527) * _595)) * _611) + _527;
    float _669 = (((cbMtdParam._m0[21u].x * _528) + ((_643 - _528) * _595)) * _611) + _528;
    float _670 = (((sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _524) * _595) * _611) + _524;
    float _672 = cbMtdParam._m0[22u].x + _557.w;
    float _675 = fma(_670, _229, fma(_669, _236, _668 * _222));
    float _678 = fma(_670, _230, fma(_669, _237, _668 * _223));
    float _681 = fma(_670, _231, fma(_669, _238, _668 * _224));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3626 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _689 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3648 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3659 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3670 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _796 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _799 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _813 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_813].z;
    float _3681 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _837 = ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _686) - _766;
    float _846 = (_841 * _687) - _767;
    float _847 = (_841 * _688) - _768;
    float _851 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _3714 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_689);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _936 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _940 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _965 = _898 + _686;
        float _966 = _902 + _687;
        float _967 = _906 + _688;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _932;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _936;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _940;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_686, _687, _688), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3762 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_686, _687, _688), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3795 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_686, _687, _688), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3828 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1247 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1251 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1255 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1278 = _898 + _686;
        float _1279 = _902 + _687;
        float _1280 = _906 + _688;
        float _1290 = fma(_1280, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1278)) - _1247;
        float _1291 = fma(_1280, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1278)) - _1251;
        float _1292 = fma(_1280, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1278)) - _1255;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1247 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1251 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[35u].z) + ((((((_1255 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_686, _687, _688), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3891 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_686, _687, _688), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3924 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_686, _687, _688), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3957 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1208;
        _1517 = _1208;
        _1518 = _1208;
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1222)) + _1222;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _845 * 0.5;
    float _1585 = _846 * 0.5;
    float _1586 = _847 * 0.5;
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1627;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1638;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1629 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1642 = (_1638 * cbModelParam._m0[1u].x) + (_1627 * (1.0 - cbModelParam._m0[1u].x));
    float _1652 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1652 : min(cbModelParam._m0[25u].z, _1652));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1715 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1718 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1746 = frontier_phi_14_12_ladder;
        }
        float _1968;
        if (_1715 > 0.0)
        {
            _1968 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1968 = frontier_phi_23_19_ladder;
        }
        float _2214;
        if (_1718 > 0.0)
        {
            _2214 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2214 = frontier_phi_35_30_ladder;
        }
        float _2216 = isnan(_1968) ? _1746 : (isnan(_1746) ? _1968 : min(_1746, _1968));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1712) + _1701;
        float _2222 = (_2217 * _1715) + _1705;
        float _2223 = (_2217 * _1718) + _1709;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1653);
            frontier_phi_13_35_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_13_35_ladder_2;
        _1736 = frontier_phi_13_35_ladder_1;
        _1738 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1653);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1811 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1814 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1973;
        if (_1808 > 0.0)
        {
            _1973 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1973 = frontier_phi_25_21_ladder;
        }
        float _2241;
        if (_1811 > 0.0)
        {
            _2241 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2241 = frontier_phi_37_32_ladder;
        }
        float _2446;
        if (_1814 > 0.0)
        {
            _2446 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2446 = frontier_phi_46_43_ladder;
        }
        float _2448 = isnan(_2241) ? _1973 : (isnan(_1973) ? _2241 : min(_1973, _2241));
        float _2449 = isnan(_2446) ? _2448 : (isnan(_2448) ? _2446 : min(_2448, _2446));
        float _2453 = (_2449 * _1808) + _1797;
        float _2454 = (_2449 * _1811) + _1801;
        float _2455 = (_2449 * _1814) + _1805;
        float _2456 = _2449 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2456;
        float _2459 = _2456 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2455 > _2459) || ((_2455 < _2457) || ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 < _2457) || (_2453 > _2459))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2455, cbModelParam._m0[17u].z, fma(_2454, cbModelParam._m0[17u].y, _2453 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2455, cbModelParam._m0[18u].z, fma(_2454, cbModelParam._m0[18u].y, _2453 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2455, cbModelParam._m0[19u].z, fma(_2454, cbModelParam._m0[19u].y, _2453 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_22_46_ladder = _2654.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2654.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2654.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_46_ladder_2;
        _1835 = frontier_phi_22_46_ladder_1;
        _1837 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1743);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1849 = ((((1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_866 * _853)) * _837;
    float _1850 = _1849 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1851 = _1849 * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1852 = _1849 * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    vec4 _1869 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_774, _775));
    float _1871 = _1869.w;
    float _1883 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1871);
    float _1884 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1871);
    float _1885 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1871);
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _837 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1927 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1931 = _1891 | 1u;
    float _1942 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_686, _687, _688));
    float _1945 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_686, _687, _688));
    float _4093 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _4104 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1950 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1952 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1959 = ((cbLight._m0[_1908].x * _1914) * _1952) + (((cbLight._m0[_1918].x * _1883) * _1927) * _1950);
    float _1960 = ((_1914 * cbLight._m0[_1908].y) * _1952) + (((cbLight._m0[_1918].y * _1884) * _1927) * _1950);
    float _1961 = ((_1914 * cbLight._m0[_1908].z) * _1952) + (((cbLight._m0[_1918].z * _1885) * _1927) * _1950);
    uvec4 _1965 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1967 = _1965.x == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1967)
    {
        _1978 = _1959;
        _1980 = _1960;
        _1982 = _1961;
    }
    else
    {
        uint _1986 = _1891 + 6u;
        float _2002 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _4115 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2005 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _1978 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1959;
        _1980 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1960;
        _1982 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1961;
    }
    bool _1985 = _1965.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1985)
    {
        _2023 = _1978;
        _2025 = _1980;
        _2027 = _1982;
    }
    else
    {
        uint _2185 = _1891 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4131 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2204 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2023 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1978;
        _2025 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1980;
        _2027 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1982;
    }
    uint _2030 = _1891 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _689) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1891].x + _766;
    float _2046 = cbLight._m0[_1891].y + _767;
    float _2047 = cbLight._m0[_1891].z + _768;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1891].xyz));
    float _4147 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2059 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2060 = dot(vec3(_686, _687, _688), vec3(_2052, _2053, _2054));
    float _4169 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2052, _2053, _2054));
    float _4180 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2084 = 1.0 - _2044;
    float _2095 = (0.5 / (((_2059 * ((_2058 * _2084) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2084) + _2044) * _2058))) * _2058;
    float _4191 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2111 = _1891 + 9u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _689) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1931].x + _766;
    float _2125 = cbLight._m0[_1931].y + _767;
    float _2126 = cbLight._m0[_1931].z + _768;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1931].xyz));
    float _4202 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2138 = dot(vec3(_686, _687, _688), vec3(_2131, _2132, _2133));
    float _4213 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2131, _2132, _2133));
    float _4224 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2123 * _2123;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2123;
    float _2170 = (0.5 / (((_2059 * ((_2137 * _2160) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2160) + _2123) * _2137))) * _2137;
    float _4235 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    float _2182 = (((_2159 * cbLight._m0[_2111].x) * _2172) * _1914) + ((((cbLight._m0[_2030].x * _1883) * _2083) * _2097) * _1927);
    float _2183 = (((_2159 * cbLight._m0[_2111].y) * _2172) * _1914) + ((((cbLight._m0[_2030].y * _1884) * _2083) * _2097) * _1927);
    float _2184 = (((_2159 * cbLight._m0[_2111].z) * _2172) * _1914) + ((((cbLight._m0[_2030].z * _1885) * _2083) * _2097) * _1927);
    float _2246;
    float _2248;
    float _2250;
    if (_1967)
    {
        _2246 = _2182;
        _2248 = _2183;
        _2250 = _2184;
    }
    else
    {
        uint _2252 = _1891 + 2u;
        uint _2256 = _1891 + 10u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _689) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _766;
        float _2273 = cbLight._m0[_2252].y + _767;
        float _2274 = cbLight._m0[_2252].z + _768;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2252].xyz));
        float _4246 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2286 = dot(vec3(_686, _687, _688), vec3(_2279, _2280, _2281));
        float _4257 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4268 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2308 = 1.0 - _2271;
        float _2318 = (0.5 / (((_2059 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2308) + _2271) * _2285))) * _2285;
        float _4279 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2246 = (((_2307 * cbLight._m0[_2256].x) * _2320) * _2321) + _2182;
        _2248 = (((_2307 * cbLight._m0[_2256].y) * _2320) * _2321) + _2183;
        _2250 = (((_2307 * cbLight._m0[_2256].z) * _2320) * _2321) + _2184;
    }
    float _2356;
    float _2358;
    float _2360;
    if (_1985)
    {
        _2356 = _2246;
        _2358 = _2248;
        _2360 = _2250;
    }
    else
    {
        uint _2367 = _1891 + 3u;
        uint _2371 = _1891 + 11u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _689) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _766;
        float _2388 = cbLight._m0[_2367].y + _767;
        float _2389 = cbLight._m0[_2367].z + _768;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2367].xyz));
        float _4295 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2401 = dot(vec3(_686, _687, _688), vec3(_2394, _2395, _2396));
        float _4306 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4317 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2423 = 1.0 - _2386;
        float _2433 = (0.5 / (((_2059 * ((_2400 * _2423) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2423) + _2386) * _2400))) * _2400;
        float _4328 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2356 = (((_2422 * cbLight._m0[_2371].x) * _2435) * _2436) + _2246;
        _2358 = (((_2422 * cbLight._m0[_2371].y) * _2435) * _2436) + _2248;
        _2360 = (((_2422 * cbLight._m0[_2371].z) * _2435) * _2436) + _2250;
    }
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_1889.y == 0u)
    {
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2511;
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2511;
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2511;
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.x;
        uint _2538 = uint((float(_2526.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2527))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2527)));
        float _2548 = (log2(_2514 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2549 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        uint _2552 = uint(isnan(14.0) ? _2549 : (isnan(_2549) ? 14.0 : min(_2549, 14.0)));
        uvec4 _2557 = texelFetch(g_lightClusterGridBuffer, int(((_2552 << 2u) + (_2538 << 6u)) >> 2u));
        uint _2558 = _2557.x;
        uint _2559 = _2526.z;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((((1u << ((_2559 >> 4u) & 15u)) + 4294967295u) & _2558) == 0u) || ((_2559 & 240u) == 0u))
        {
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
        }
        else
        {
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2820)
                {
                    frontier_phi_61_pred = _2804;
                    frontier_phi_61_pred_1 = _2809;
                    frontier_phi_61_pred_2 = _2808;
                    frontier_phi_61_pred_3 = _2807;
                    frontier_phi_61_pred_4 = _2806;
                    frontier_phi_61_pred_5 = _2805;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2819;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2810 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _2512;
                        float _2995 = _2954.y - _2513;
                        float _2996 = _2954.z - _2514;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_793, _796, _799), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4354 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _2512;
                        float _3030 = (-0.0) - _2513;
                        float _3031 = (-0.0) - _2514;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3046 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3047 = 1.0 - _853;
                        float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                        float _3055 = _3054 * _3054;
                        float _3056 = _3055 * _3055;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3067 = dot(vec3(_793, _796, _799), vec3(_3036, _3037, _3038));
                        float _4370 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3071 = dot(vec3(_793, _796, _799), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                        float _4381 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                        float _3079 = _3014 * _3055;
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3004) + _3080;
                        float _4392 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3085 = 1.0 - _3055;
                        float _3095 = (0.5 / (((_3084 * ((_3070 * _3085) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3055) * _3070))) * _3084;
                        float _4403 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3106 = (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3078 * _3078) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2863 = (_3025 * _2973.x) + _2931;
                        _2864 = (_3025 * _2973.y) + _2932;
                        _2865 = (_3025 * _2973.z) + _2933;
                        _2860 = (_3106 * _2990.x) + _2928;
                        _2861 = (_3106 * _2990.y) + _2929;
                        _2862 = (_3106 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_61_pred = _2860;
                    frontier_phi_61_pred_1 = _2865;
                    frontier_phi_61_pred_2 = _2864;
                    frontier_phi_61_pred_3 = _2863;
                    frontier_phi_61_pred_4 = _2862;
                    frontier_phi_61_pred_5 = _2861;
                }
                _2660 = frontier_phi_61_pred;
                _2670 = frontier_phi_61_pred_1;
                _2668 = frontier_phi_61_pred_2;
                _2666 = frontier_phi_61_pred_3;
                _2664 = frontier_phi_61_pred_4;
                _2662 = frontier_phi_61_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2660;
                    _2805 = _2662;
                    _2806 = _2664;
                    _2807 = _2666;
                    _2808 = _2668;
                    _2809 = _2670;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
        }
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.z;
        uint _2676 = (_2674 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2676) & _2558) == 0u)
        {
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
            _2782 = _2669;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
            float _2798 = _2797 * _2512;
            float _2799 = _2797 * _2513;
            float _2800 = _2797 * _2514;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2676 < ((_2674 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2911 = _2659;
                float _2912 = _2661;
                float _2913 = _2663;
                float _2914 = _2665;
                float _2915 = _2667;
                float _2916 = _2669;
                uint _2917 = _2676;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2927)
                    {
                        frontier_phi_67_pred = _2914;
                        frontier_phi_67_pred_1 = _2915;
                        frontier_phi_67_pred_2 = _2916;
                        frontier_phi_67_pred_3 = _2913;
                        frontier_phi_67_pred_4 = _2912;
                        frontier_phi_67_pred_5 = _2911;
                    }
                    else
                    {
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        uint _3130 = _2926;
                        uint _3131;
                        vec4 _3156;
                        float _3157;
                        vec4 _3172;
                        vec3 _3184;
                        vec4 _3199;
                        vec4 _3214;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3141 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3130));
                            _3131 = (_3130 + 4294967295u) & _3130;
                            uint _3143 = _3141 * 40u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            _3157 = _3156.w;
                            uint _3159 = (_3141 * 40u) + 4u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3141 * 40u) + 8u;
                            _3184 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x));
                            uint _3186 = (_3141 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3141 * 40u) + 20u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3141 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3141 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_2514, _3248.z, fma(_2513, _3248.y, _3248.x * _2512)) + _3248.w;
                            _3261 = !((fma(_2514, _3229.z, fma(_2513, _3229.y, _3229.x * _2512)) + _3229.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3156.x - _2512;
                                float _3289 = _3156.y - _2513;
                                float _3290 = _3156.z - _2514;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3157 * _3157));
                                float _4414 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3306 = sqrt(_3291) * _3172.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_793, _796, _799))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_2514, _3199.z, fma(_2513, _3199.y, _3199.x * _2512)) + _3199.w) / _3260;
                                float _3320 = (fma(_2514, _3214.z, fma(_2513, _3214.y, _3214.x * _2512)) + _3214.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4430 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _853;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2798;
                                float _3350 = _3296 - _2799;
                                float _3351 = _3297 - _2800;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4441 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3363 = dot(vec3(_793, _796, _799), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4452 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_793, _796, _799), vec3(_3295, _3296, _3297))) + _3372;
                                float _4463 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4474 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3400 * _3184.x;
                                frontier_phi_73_pred_1 = _3400 * _3184.y;
                                frontier_phi_73_pred_2 = _3326 * _3172.z;
                                frontier_phi_73_pred_3 = _3326 * _3172.y;
                                frontier_phi_73_pred_4 = _3326 * _3172.x;
                                frontier_phi_73_pred_5 = _3400 * _3184.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_73_pred;
                            _3405 = frontier_phi_73_pred_1;
                            _3409 = frontier_phi_73_pred_2;
                            _3408 = frontier_phi_73_pred_3;
                            _3407 = frontier_phi_73_pred_4;
                            _3406 = frontier_phi_73_pred_5;
                            _3114 = _3407 + _3127;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            if (_3131 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3131;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3114;
                        frontier_phi_67_pred_1 = _3115;
                        frontier_phi_67_pred_2 = _3116;
                        frontier_phi_67_pred_3 = _3113;
                        frontier_phi_67_pred_4 = _3112;
                        frontier_phi_67_pred_5 = _3111;
                    }
                    _2779 = frontier_phi_67_pred;
                    _2781 = frontier_phi_67_pred_1;
                    _2783 = frontier_phi_67_pred_2;
                    _2777 = frontier_phi_67_pred_3;
                    _2775 = frontier_phi_67_pred_4;
                    _2773 = frontier_phi_67_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2773;
                        _2912 = _2775;
                        _2913 = _2777;
                        _2914 = _2779;
                        _2915 = _2781;
                        _2916 = _2783;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2781;
                frontier_phi_55_56_ladder_1 = _2783;
                frontier_phi_55_56_ladder_2 = _2779;
                frontier_phi_55_56_ladder_3 = _2777;
                frontier_phi_55_56_ladder_4 = _2775;
                frontier_phi_55_56_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_55_56_ladder = _2667;
                frontier_phi_55_56_ladder_1 = _2669;
                frontier_phi_55_56_ladder_2 = _2665;
                frontier_phi_55_56_ladder_3 = _2663;
                frontier_phi_55_56_ladder_4 = _2661;
                frontier_phi_55_56_ladder_5 = _2659;
            }
            _2772 = frontier_phi_55_56_ladder_5;
            _2774 = frontier_phi_55_56_ladder_4;
            _2776 = frontier_phi_55_56_ladder_3;
            _2778 = frontier_phi_55_56_ladder_2;
            _2780 = frontier_phi_55_56_ladder;
            _2782 = frontier_phi_55_56_ladder_1;
        }
        float _2787 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2571 = (_2787 * _2778) + _2023;
        _2573 = (_2787 * _2780) + _2025;
        _2575 = (_2787 * _2782) + _2027;
        _2577 = ((_2772 * 0.039999999105930328369140625) * _2787) + _2356;
        _2579 = ((_2774 * 0.039999999105930328369140625) * _2787) + _2358;
        _2581 = ((_2776 * 0.039999999105930328369140625) * _2787) + _2360;
    }
    else
    {
        _2571 = _2023;
        _2573 = _2025;
        _2575 = _2027;
        _2577 = _2356;
        _2579 = _2358;
        _2581 = _2360;
    }
    float _4490 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4501 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4512 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    uint _2601 = _262 + 6u;
    float _2609 = _774 / cbSceneParam._m0[86u].x;
    float _2610 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _2684 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _2685 = _2684 / _707;
        float _2696 = _2685 * _759;
        float _2697 = _760 * _2685;
        float _2698 = (-0.0) - _2697;
        float _2700 = _2685 * _761;
        float _2702 = (cbSceneParam._m0[77u].w * _2698) / _2684;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2697;
        float _2710 = sqrt(((_2696 * _2696) + (_2697 * _2697)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2684)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2698 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2835 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2873 = ((abs(_2710 / _2698) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2720 * _2844) - exp2(_2720 * _2845)) * _2833))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2629);
        _2722 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2724 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2726 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2728 = _2884 * _2629;
    }
    else
    {
        _2722 = _2626;
        _2724 = _2627;
        _2726 = _2628;
        _2728 = _2629;
    }
    float _2740 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2741 = _2740 == 3.0;
    float _2742 = log2(_2728);
    float _2749 = exp2(_2742 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2571 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _837))) + ((_2577 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2750 = exp2(_2742 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2573 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _837))) + ((_2579 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2751 = exp2(_2742 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2575 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _837))) + ((_2581 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1642)) * cbPerFrame._m0[3u].x));
    float _2760 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2760 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.y = _2760 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.z = _2760 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.w = cbInstanceData._m0[_2601].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2601].w;
}


