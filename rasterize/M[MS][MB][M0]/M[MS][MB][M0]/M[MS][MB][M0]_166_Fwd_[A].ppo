#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1127;
float _3488;
float _3489;
float _3490;
float _3491;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _341 = _339.x;
    float _351 = dot(vec4(_341, _339.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _368 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_341 - _351) * cbMtdParam._m0[24u].x) + _351) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3500 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _376 = (_369 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _377 = (_369 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _378 = (_369 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _252) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _427 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _441 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_417 - _427) * cbMtdParam._m0[24u].x) + _427) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3511 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _449 = (_442 * ((_395.x * cbMtdParam._m0[13u].x) - _376)) + _376;
    float _450 = (_442 * ((_395.y * cbMtdParam._m0[13u].y) - _377)) + _377;
    float _451 = (_442 * ((_395.z * cbMtdParam._m0[13u].z) - _378)) + _378;
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _492 = ((_464.x - _483) * _369) + _483;
    float _493 = ((_464.y - _484) * _369) + _484;
    float _494 = ((_464.z - _485) * _369) + _485;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _519 = ((_506.z - _494) * _442) + _494;
    float _522 = ((((_506.x - _492) * _442) + _492) * 2.0) + (-1.0);
    float _524 = ((((_506.y - _493) * _442) + _493) * 2.0) + (-1.0);
    float _525 = dot(vec2(_522, _524), vec2(_522, _524));
    float _3522 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _550 = cbMtdParam._m0[22u].x + _543.w;
    float _553 = fma(_530, _219 * NORMAL.x, fma(_524, _226 * TANGENT.x, (_212 * _204) * _522));
    float _556 = fma(_530, _219 * NORMAL.y, fma(_524, _226 * TANGENT.y, (_212 * _205) * _522));
    float _559 = fma(_530, _219 * NORMAL.z, fma(_524, _226 * TANGENT.z, (_212 * _206) * _522));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3533 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _567 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3555 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3566 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3577 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    vec4 _651 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _653 = _651.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _807 = sqrt(((_637 * _637) + (_638 * _638)) + (_639 * _639));
        float _813 = (cbMatDynParam._m0[5u].x * _807) + cbMatDynParam._m0[5u].y;
        float _3588 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _818 = (cbMatDynParam._m0[5u].z * _807) + cbMatDynParam._m0[5u].w;
        float _3599 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) - _814)) + _814) < ((_653 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _686 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _689 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _702 = _232 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3610 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    vec4 _723 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _727 = ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * TEXCOORD_5.w) * _723.x;
    float _728 = dot(vec3(_564, _565, _566), vec3(_644, _645, _646));
    float _731 = _728 * 2.0;
    float _735 = (_731 * _564) - _644;
    float _736 = (_731 * _565) - _645;
    float _737 = (_731 * _566) - _646;
    float _741 = abs(dot(vec3(_644, _645, _646), vec3(_564, _565, _566)));
    float _3643 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = sqrt(_567);
    float _756 = exp2((_743 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_743 * 3.0));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _855 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _859 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _884 = _788 + _564;
        float _885 = _792 + _565;
        float _886 = _796 + _566;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _851;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _855;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _859;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_564, _565, _566), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3691 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_564, _565, _566), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3724 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_564, _565, _566), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3757 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1172 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1176 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1199 = _788 + _564;
        float _1200 = _792 + _565;
        float _1201 = _796 + _566;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_564, _565, _566), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3820 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_564, _565, _566), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3853 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_564, _565, _566), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3886 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1127;
        _1438 = _1127;
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = _1127;
        _1448 = _1127;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1139)) + _1139;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1140)) + _1140;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1141)) + _1141;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _735 * 0.5;
    float _1506 = _736 * 0.5;
    float _1507 = _737 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_737, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735));
        float _1637 = fma(_737, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735));
        float _1640 = fma(_737, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1668 = frontier_phi_17_15_ladder;
        }
        float _1870;
        if (_1637 > 0.0)
        {
            _1870 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1870 = frontier_phi_26_22_ladder;
        }
        float _2113;
        if (_1640 > 0.0)
        {
            _2113 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2113 = frontier_phi_38_33_ladder;
        }
        float _2115 = isnan(_1870) ? _1668 : (isnan(_1668) ? _1870 : min(_1668, _1870));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1634) + _1623;
        float _2121 = (_2116 * _1637) + _1627;
        float _2122 = (_2116 * _1640) + _1631;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_16_38_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_16_38_ladder_2;
        _1658 = frontier_phi_16_38_ladder_1;
        _1660 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_735, _736, _737), _1574);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_737, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735));
        float _1734 = fma(_737, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735));
        float _1737 = fma(_737, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735));
        float _1875;
        if (_1731 > 0.0)
        {
            _1875 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1875 = frontier_phi_28_24_ladder;
        }
        float _2140;
        if (_1734 > 0.0)
        {
            _2140 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2140 = frontier_phi_40_35_ladder;
        }
        float _2345;
        if (_1737 > 0.0)
        {
            _2345 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2345 = frontier_phi_49_46_ladder;
        }
        float _2347 = isnan(_2140) ? _1875 : (isnan(_1875) ? _2140 : min(_1875, _2140));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1731) + _1720;
        float _2353 = (_2348 * _1734) + _1724;
        float _2354 = (_2348 * _1737) + _1728;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2354, cbModelParam._m0[17u].z, fma(_2353, cbModelParam._m0[17u].y, _2352 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2354, cbModelParam._m0[18u].z, fma(_2353, cbModelParam._m0[18u].y, _2352 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2354, cbModelParam._m0[19u].z, fma(_2353, cbModelParam._m0[19u].y, _2352 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_25_49_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_25_49_ladder_2;
        _1758 = frontier_phi_25_49_ladder_1;
        _1760 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_735, _736, _737), _1665);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1772 = ((((1.0 - _756) * ((_743 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_756 * _743)) * _727;
    float _1773 = _1772 * ((cbModelParam._m0[1u].w * (_1756 - _1656)) + _1656);
    float _1774 = _1772 * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1775 = _1772 * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _727 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1829 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1833 = _1796 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_564, _565, _566));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_564, _565, _566));
    float _4022 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4033 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1813].x * _1819) * _1854) + ((cbLight._m0[_1823].x * _1829) * _1852);
    float _1862 = ((_1819 * cbLight._m0[_1813].y) * _1854) + ((_1829 * cbLight._m0[_1823].y) * _1852);
    float _1863 = ((_1819 * cbLight._m0[_1813].z) * _1854) + ((_1829 * cbLight._m0[_1823].z) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1869)
    {
        _1880 = _1861;
        _1882 = _1862;
        _1884 = _1863;
    }
    else
    {
        uint _1888 = _1796 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _4044 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1907 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1861;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1862;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1863;
    }
    bool _1887 = _1867.y == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1887)
    {
        _1925 = _1880;
        _1927 = _1882;
        _1929 = _1884;
    }
    else
    {
        uint _2084 = _1796 + 7u;
        float _2100 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4060 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2103 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1925 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _1880;
        _1927 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _1882;
        _1929 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _1884;
    }
    uint _1932 = _1796 + 8u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _567) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1796].x + _644;
    float _1948 = cbLight._m0[_1796].y + _645;
    float _1949 = cbLight._m0[_1796].z + _646;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1796].xyz));
    float _4076 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _1961 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1962 = dot(vec3(_564, _565, _566), vec3(_1954, _1955, _1956));
    float _4098 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1954, _1955, _1956));
    float _4109 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1946 * _1946;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1985 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1986 = 1.0 - _1946;
    float _1997 = (0.5 / (((_1961 * ((_1960 * _1986) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _1986) + _1946) * _1960))) * _1960;
    float _4120 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    uint _2010 = _1796 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _567) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1833].x + _644;
    float _2024 = cbLight._m0[_1833].y + _645;
    float _2025 = cbLight._m0[_1833].z + _646;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1833].xyz));
    float _4131 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2037 = dot(vec3(_564, _565, _566), vec3(_2030, _2031, _2032));
    float _4142 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2030, _2031, _2032));
    float _4153 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2022;
    float _2069 = (0.5 / (((_1961 * ((_2036 * _2059) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2059) + _2022) * _2036))) * _2036;
    float _4164 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2081 = (((_2058 * cbLight._m0[_2010].x) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].x) * _1999) * _1829);
    float _2082 = (((_2058 * cbLight._m0[_2010].y) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].y) * _1999) * _1829);
    float _2083 = (((_2058 * cbLight._m0[_2010].z) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].z) * _1999) * _1829);
    float _2145;
    float _2147;
    float _2149;
    if (_1869)
    {
        _2145 = _2081;
        _2147 = _2082;
        _2149 = _2083;
    }
    else
    {
        uint _2151 = _1796 + 2u;
        uint _2155 = _1796 + 10u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _567) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _644;
        float _2172 = cbLight._m0[_2151].y + _645;
        float _2173 = cbLight._m0[_2151].z + _646;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2151].xyz));
        float _4175 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2185 = dot(vec3(_564, _565, _566), vec3(_2178, _2179, _2180));
        float _4186 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4197 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1961 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2207) + _2170) * _2184))) * _2184;
        float _4208 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2145 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2081;
        _2147 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2082;
        _2149 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2083;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1887)
    {
        _2255 = _2145;
        _2257 = _2147;
        _2259 = _2149;
    }
    else
    {
        uint _2266 = _1796 + 3u;
        uint _2270 = _1796 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _567) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _644;
        float _2287 = cbLight._m0[_2266].y + _645;
        float _2288 = cbLight._m0[_2266].z + _646;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2266].xyz));
        float _4224 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2300 = dot(vec3(_564, _565, _566), vec3(_2293, _2294, _2295));
        float _4235 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4246 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2322 = 1.0 - _2285;
        float _2332 = (0.5 / (((_1961 * ((_2299 * _2322) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2322) + _2285) * _2299))) * _2299;
        float _4257 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2255 = (((_2321 * cbLight._m0[_2270].x) * _2334) * _2335) + _2145;
        _2257 = (((_2321 * cbLight._m0[_2270].y) * _2334) * _2335) + _2147;
        _2259 = (((_2321 * cbLight._m0[_2270].z) * _2334) * _2335) + _2149;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1794.y == 0u)
    {
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2410;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2410;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2410;
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.x;
        uint _2437 = uint((float(_2425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2426))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2426)));
        float _2447 = (log2(_2413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2448 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        uint _2451 = uint(isnan(14.0) ? _2448 : (isnan(_2448) ? 14.0 : min(_2448, 14.0)));
        uvec4 _2456 = texelFetch(g_lightClusterGridBuffer, int(((_2451 << 2u) + (_2437 << 6u)) >> 2u));
        uint _2457 = _2456.x;
        uint _2458 = _2425.z;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((((1u << ((_2458 >> 4u) & 15u)) + 4294967295u) & _2457) == 0u) || ((_2458 & 240u) == 0u))
        {
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
        }
        else
        {
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            uint _2717 = 0u;
            uint _2726;
            bool _2727;
            for (;;)
            {
                _2726 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                _2727 = _2726 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2727)
                {
                    frontier_phi_66_pred = _2711;
                    frontier_phi_66_pred_1 = _2716;
                    frontier_phi_66_pred_2 = _2715;
                    frontier_phi_66_pred_3 = _2714;
                    frontier_phi_66_pred_4 = _2713;
                    frontier_phi_66_pred_5 = _2712;
                }
                else
                {
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    uint _2862;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2726;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2866 = uint(findLSB(_2862)) + (_2717 << 5u);
                        uint _2863 = (_2862 + 4294967295u) & _2862;
                        uint _2868 = _2866 * 48u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2888 = (_2866 * 48u) + 4u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2907 = (_2866 * 48u) + 8u;
                        vec3 _2918 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x));
                        float _2922 = _2882.x - _2411;
                        float _2923 = _2882.y - _2412;
                        float _2924 = _2882.z - _2413;
                        float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                        float _2928 = inversesqrt(_2925);
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2932 = dot(vec3(_683, _686, _689), vec3(_2929, _2930, _2931));
                        float _2937 = 1.0 - (_2925 * _2882.w);
                        float _4283 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2939 = sqrt(_2925) * _2901.w;
                        float _2942 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2932) + _2943;
                        float _2949 = _2939 * _2939;
                        float _2953 = ((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2938) / ((_2949 * 0.699999988079071044921875) + 1.0);
                        float _2957 = (-0.0) - _2411;
                        float _2958 = (-0.0) - _2412;
                        float _2959 = (-0.0) - _2413;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2974 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _743;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_683, _686, _689), vec3(_2964, _2965, _2966));
                        float _4299 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2999 = dot(vec3(_683, _686, _689), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4310 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2942 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2932) + _3008;
                        float _4321 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4332 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3006 * _3006) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125))) * _2938;
                        _2786 = (_2953 * _2901.x) + _2859;
                        _2787 = (_2953 * _2901.y) + _2860;
                        _2788 = (_2953 * _2901.z) + _2861;
                        _2783 = (_3034 * _2918.x) + _2856;
                        _2784 = (_3034 * _2918.y) + _2857;
                        _2785 = (_3034 * _2918.z) + _2858;
                        if (_2863 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2863;
                        }
                    }
                    frontier_phi_66_pred = _2783;
                    frontier_phi_66_pred_1 = _2788;
                    frontier_phi_66_pred_2 = _2787;
                    frontier_phi_66_pred_3 = _2786;
                    frontier_phi_66_pred_4 = _2785;
                    frontier_phi_66_pred_5 = _2784;
                }
                _2559 = frontier_phi_66_pred;
                _2569 = frontier_phi_66_pred_1;
                _2567 = frontier_phi_66_pred_2;
                _2565 = frontier_phi_66_pred_3;
                _2563 = frontier_phi_66_pred_4;
                _2561 = frontier_phi_66_pred_5;
                uint _2718 = _2717 + 1u;
                if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2711 = _2559;
                    _2712 = _2561;
                    _2713 = _2563;
                    _2714 = _2565;
                    _2715 = _2567;
                    _2716 = _2569;
                    _2717 = _2718;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
        }
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.z;
        uint _2575 = (_2573 >> 8u) & 15u;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((4294967295u << _2575) & _2457) == 0u)
        {
            _2679 = _2558;
            _2681 = _2560;
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
        }
        else
        {
            float _2704 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
            float _2705 = _2704 * _2411;
            float _2706 = _2704 * _2412;
            float _2707 = _2704 * _2413;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2575 < ((_2573 >> 12u) & 15u))
            {
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2839 = _2558;
                float _2840 = _2560;
                float _2841 = _2562;
                float _2842 = _2564;
                float _2843 = _2566;
                float _2844 = _2568;
                uint _2845 = _2575;
                uint _2854;
                bool _2855;
                for (;;)
                {
                    _2854 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                    _2855 = _2854 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2855)
                    {
                        frontier_phi_77_pred = _2844;
                        frontier_phi_77_pred_1 = _2843;
                        frontier_phi_77_pred_2 = _2842;
                        frontier_phi_77_pred_3 = _2841;
                        frontier_phi_77_pred_4 = _2840;
                        frontier_phi_77_pred_5 = _2839;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        uint _3067 = _2854;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3136;
                        vec4 _3151;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3078 = ((_2845 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3123 = (_3078 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3078 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3078 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3078 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2413, _3185.z, fma(_2412, _3185.y, _3185.x * _2411)) + _3185.w;
                            _3198 = !((fma(_2413, _3166.z, fma(_2412, _3166.y, _3166.x * _2411)) + _3166.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3093.x - _2411;
                                float _3226 = _3093.y - _2412;
                                float _3227 = _3093.z - _2413;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3094 * _3094));
                                float _4343 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3243 = sqrt(_3228) * _3109.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_683, _686, _689))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2413, _3136.z, fma(_2412, _3136.y, _3136.x * _2411)) + _3136.w) / _3197;
                                float _3257 = (fma(_2413, _3151.z, fma(_2412, _3151.y, _3151.x * _2411)) + _3151.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4359 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _743;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2705;
                                float _3287 = _3233 - _2706;
                                float _3288 = _3234 - _2707;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2705, (-0.0) - _2706, (-0.0) - _2707));
                                float _4370 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3300 = dot(vec3(_683, _686, _689), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4381 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_683, _686, _689), vec3(_3232, _3233, _3234))) + _3309;
                                float _4392 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4403 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3263 * _3109.y;
                                frontier_phi_83_pred_1 = _3263 * _3109.x;
                                frontier_phi_83_pred_2 = _3337 * _3121.z;
                                frontier_phi_83_pred_3 = _3337 * _3121.y;
                                frontier_phi_83_pred_4 = _3337 * _3121.x;
                                frontier_phi_83_pred_5 = _3263 * _3109.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3345 = frontier_phi_83_pred;
                            _3344 = frontier_phi_83_pred_1;
                            _3343 = frontier_phi_83_pred_2;
                            _3342 = frontier_phi_83_pred_3;
                            _3341 = frontier_phi_83_pred_4;
                            _3346 = frontier_phi_83_pred_5;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3053;
                        frontier_phi_77_pred_1 = _3052;
                        frontier_phi_77_pred_2 = _3051;
                        frontier_phi_77_pred_3 = _3050;
                        frontier_phi_77_pred_4 = _3049;
                        frontier_phi_77_pred_5 = _3048;
                    }
                    _2690 = frontier_phi_77_pred;
                    _2688 = frontier_phi_77_pred_1;
                    _2686 = frontier_phi_77_pred_2;
                    _2684 = frontier_phi_77_pred_3;
                    _2682 = frontier_phi_77_pred_4;
                    _2680 = frontier_phi_77_pred_5;
                    uint _2846 = _2845 + 1u;
                    if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2839 = _2680;
                        _2840 = _2682;
                        _2841 = _2684;
                        _2842 = _2686;
                        _2843 = _2688;
                        _2844 = _2690;
                        _2845 = _2846;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2684;
                frontier_phi_58_59_ladder_1 = _2690;
                frontier_phi_58_59_ladder_2 = _2688;
                frontier_phi_58_59_ladder_3 = _2686;
                frontier_phi_58_59_ladder_4 = _2682;
                frontier_phi_58_59_ladder_5 = _2680;
            }
            else
            {
                frontier_phi_58_59_ladder = _2562;
                frontier_phi_58_59_ladder_1 = _2568;
                frontier_phi_58_59_ladder_2 = _2566;
                frontier_phi_58_59_ladder_3 = _2564;
                frontier_phi_58_59_ladder_4 = _2560;
                frontier_phi_58_59_ladder_5 = _2558;
            }
            _2679 = frontier_phi_58_59_ladder_5;
            _2681 = frontier_phi_58_59_ladder_4;
            _2683 = frontier_phi_58_59_ladder;
            _2685 = frontier_phi_58_59_ladder_3;
            _2687 = frontier_phi_58_59_ladder_2;
            _2689 = frontier_phi_58_59_ladder_1;
        }
        float _2694 = isnan(1.0) ? _727 : (isnan(_727) ? 1.0 : min(_727, 1.0));
        _2470 = (_2694 * _2685) + _1925;
        _2472 = (_2694 * _2687) + _1927;
        _2474 = (_2694 * _2689) + _1929;
        _2476 = ((_2679 * 0.039999999105930328369140625) * _2694) + _2255;
        _2478 = ((_2681 * 0.039999999105930328369140625) * _2694) + _2257;
        _2480 = ((_2683 * 0.039999999105930328369140625) * _2694) + _2259;
    }
    else
    {
        _2470 = _1925;
        _2472 = _1927;
        _2474 = _1929;
        _2476 = _2255;
        _2478 = _2257;
        _2480 = _2259;
    }
    float _4419 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4430 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4441 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _2497 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2470 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _727))) + ((_2476 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2498 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2472 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _727))) + ((_2478 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2499 = ((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2474 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _727))) + ((_2480 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    uint _2500 = _232 + 6u;
    float _2508 = _664 / cbSceneParam._m0[86u].x;
    float _2509 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2523 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2525 = _2523.x;
    float _2526 = _2523.y;
    float _2527 = _2523.z;
    float _2528 = _2523.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2583 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2584 = _2583 / _585;
        float _2595 = _2584 * _637;
        float _2596 = _638 * _2584;
        float _2597 = (-0.0) - _2596;
        float _2599 = _2584 * _639;
        float _2601 = (cbSceneParam._m0[77u].w * _2597) / _2583;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2596;
        float _2609 = sqrt(((_2595 * _2595) + (_2596 * _2596)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2583)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2597 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2740 = 1.0 / cbSceneParam._m0[80u].x;
            float _2741 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2742 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            _2796 = ((abs(_2609 / _2597) * cbSceneParam._m0[80u].y) * ((((_2751 - _2752) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))))) * _2740)) - ((exp2(_2619 * _2751) - exp2(_2619 * _2752)) * _2740))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2528);
        _2621 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2525;
        _2623 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2526;
        _2625 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2527;
        _2627 = _2807 * _2528;
    }
    else
    {
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
        _2627 = _2528;
    }
    bool _2834;
    vec4 _2637;
    vec4 _2659;
    float _2661;
    float _2665;
    float _2666;
    float _2667;
    float _2668;
    bool _2678;
    for (;;)
    {
        _2637 = cbMatDynParam._m0[0u];
        float _2639 = roundEven(_2637.y);
        bool _2640 = _2639 == 3.0;
        float _2641 = log2(_2627);
        float _2648 = exp2(_2641 * cbSceneParam._m0[78u].x) * _2497;
        float _2649 = exp2(_2641 * cbSceneParam._m0[78u].y) * _2498;
        float _2650 = exp2(_2641 * cbSceneParam._m0[78u].z) * _2499;
        float _2657 = _653 + (-0.5);
        _2659 = cbMtdParam._m0[1u];
        _2661 = _2659.y * _2657;
        float _2664 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2665 = _2664 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2621)));
        _2666 = _2664 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2623)));
        _2667 = _2664 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2625)));
        _2668 = _2657 * 0.999000012874603271484375;
        _2678 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2678)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2668) < 0.5)
            {
                _2834 = true;
                break;
            }
        }
        uint _2775 = _702 + uint(_2637.w);
        if ((cbInstanceData._m0[_2775].w < 1.0) && ((cbInstanceData._m0[_2775].w + _2668) < 0.5))
        {
            _2834 = true;
            break;
        }
        if ((_2661 + 1.0) < _2659.x)
        {
            _2834 = true;
            break;
        }
        _2834 = false;
        break;
    }
    float _3039;
    if (_2834)
    {
        discard_state = true;
        _3039 = 0.0;
    }
    else
    {
        _3039 = cbInstanceData._m0[_2500].w;
    }
    SV_Target.x = _2665;
    SV_Target.y = _2666;
    SV_Target.z = _2667;
    SV_Target.w = _3039;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2500].w;
    discard_exit();
}


