#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1022;
float _3385;
float _3386;
float _3387;
float _3388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _344 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _361 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _344) * cbMtdParam._m0[24u].x) + _344) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3397 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _369 = (_362 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _370 = (_362 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _371 = (_362 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    float _414 = ((_384.z - _405) * _362) + _405;
    float _417 = ((((_384.x - _403) * _362) + _403) * 2.0) + (-1.0);
    float _419 = ((((_384.y - _404) * _362) + _404) * 2.0) + (-1.0);
    float _420 = dot(vec2(_417, _419), vec2(_417, _419));
    float _3408 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _445 = cbMtdParam._m0[22u].x + _438.w;
    float _448 = fma(_425, _213 * NORMAL.x, fma(_419, _220 * TANGENT.x, (_206 * _198) * _417));
    float _451 = fma(_425, _213 * NORMAL.y, fma(_419, _220 * TANGENT.y, (_206 * _199) * _417));
    float _454 = fma(_425, _213 * NORMAL.z, fma(_419, _220 * TANGENT.z, (_206 * _200) * _417));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3419 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _462 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3441 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3452 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3463 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _480 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _702 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _708 = (cbMatDynParam._m0[5u].x * _702) + cbMatDynParam._m0[5u].y;
        float _3474 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _713 = (cbMatDynParam._m0[5u].z * _702) + cbMatDynParam._m0[5u].w;
        float _3485 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) - _709)) + _709) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _581 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _584 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _597 = _226 + 9u;
    uint _598 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _604 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_598].x;
    float _605 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_598].y;
    float _606 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_598].z;
    float _3496 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    vec4 _618 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _622 = ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * TEXCOORD_5.w) * _618.x;
    float _623 = dot(vec3(_459, _460, _461), vec3(_539, _540, _541));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _459) - _539;
    float _631 = (_626 * _460) - _540;
    float _632 = (_626 * _461) - _541;
    float _636 = abs(dot(vec3(_539, _540, _541), vec3(_459, _460, _461)));
    float _3529 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_462);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _750 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _754 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _779 = _683 + _459;
        float _780 = _687 + _460;
        float _781 = _691 + _461;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_459, _460, _461), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3577 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_459, _460, _461), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3610 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_459, _460, _461), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3643 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1064 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1068 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1072 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1095 = _683 + _459;
        float _1096 = _687 + _460;
        float _1097 = _691 + _461;
        float _1107 = fma(_1097, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095)) - _1064;
        float _1108 = fma(_1097, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095)) - _1068;
        float _1109 = fma(_1097, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095)) - _1072;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1064 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1068 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[35u].z) + ((((((_1072 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1163 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1130.x + (-0.5));
        float _1165 = _1163 * (_1130.y + (-0.5));
        float _1166 = _1163 * (_1130.z + (-0.5));
        float _1173 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1137.x + (-0.5));
        float _1175 = _1173 * (_1137.y + (-0.5));
        float _1176 = _1173 * (_1137.z + (-0.5));
        float _1183 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1144.x + (-0.5));
        float _1185 = _1183 * (_1144.y + (-0.5));
        float _1186 = _1183 * (_1144.z + (-0.5));
        float _1193 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1151.x + (-0.5));
        float _1195 = _1193 * (_1151.y + (-0.5));
        float _1196 = _1193 * (_1151.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_459, _460, _461), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3706 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1227 + 1.0))) + _1232) * _1197;
        float _1242 = _1165 * 0.5;
        float _1243 = _1175 * 0.5;
        float _1244 = _1185 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_459, _460, _461), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3739 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1269 + 1.0))) + _1274) * _1198;
        float _1284 = _1166 * 0.5;
        float _1285 = _1176 * 0.5;
        float _1286 = _1186 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_459, _460, _461), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3772 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1311 + 1.0))) + _1316) * _1199;
        _1333 = _1166;
        _1334 = _1165;
        _1335 = _1164;
        _1336 = _1176;
        _1337 = _1175;
        _1338 = _1174;
        _1339 = _1186;
        _1340 = _1185;
        _1341 = _1184;
        _1342 = _1199;
        _1343 = _1198;
        _1344 = _1197;
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = _1022;
        _1343 = _1022;
        _1344 = _1022;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1034)) + _1034;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1035)) + _1035;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1036)) + _1036;
    float _1380 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1357));
    float _1401 = _630 * 0.5;
    float _1402 = _631 * 0.5;
    float _1403 = _632 * 0.5;
    float _1404 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1407 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1410 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1444;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1417 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1421 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1425 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1432 = dot(vec4(cbModelParam._m0[39u]), vec4(_1401, _1402, _1403, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1455;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1446 = dot(vec4(cbModelParam._m0[40u]), vec4(_1401, _1402, _1403, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1459 = (_1455 * cbModelParam._m0[1u].x) + (_1444 * (1.0 - cbModelParam._m0[1u].x));
    float _1469 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1469 : min(cbModelParam._m0[25u].z, _1469));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1519 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1523 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1527 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1530 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1533 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1536 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1564;
        if (_1530 > 0.0)
        {
            _1564 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1564 = frontier_phi_17_15_ladder;
        }
        float _1766;
        if (_1533 > 0.0)
        {
            _1766 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1766 = frontier_phi_26_22_ladder;
        }
        float _2009;
        if (_1536 > 0.0)
        {
            _2009 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2009 = frontier_phi_38_33_ladder;
        }
        float _2011 = isnan(_1766) ? _1564 : (isnan(_1564) ? _1766 : min(_1564, _1766));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1530) + _1519;
        float _2017 = (_2012 * _1533) + _1523;
        float _2018 = (_2012 * _1536) + _1527;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1470);
            frontier_phi_16_38_ladder = _2142.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2142.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2142.x * cbModelParam._m0[1u].y;
        }
        _1552 = frontier_phi_16_38_ladder_2;
        _1554 = frontier_phi_16_38_ladder_1;
        _1556 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1470);
        _1552 = _1540.x * cbModelParam._m0[1u].y;
        _1554 = _1540.y * cbModelParam._m0[1u].y;
        _1556 = _1540.z * cbModelParam._m0[1u].y;
    }
    float _1560 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1560 : min(cbModelParam._m0[25u].w, _1560));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1630 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1633 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1771;
        if (_1627 > 0.0)
        {
            _1771 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1771 = frontier_phi_28_24_ladder;
        }
        float _2036;
        if (_1630 > 0.0)
        {
            _2036 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2036 = frontier_phi_40_35_ladder;
        }
        float _2241;
        if (_1633 > 0.0)
        {
            _2241 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2241 = frontier_phi_49_46_ladder;
        }
        float _2243 = isnan(_2036) ? _1771 : (isnan(_1771) ? _2036 : min(_1771, _2036));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1627) + _1616;
        float _2249 = (_2244 * _1630) + _1620;
        float _2250 = (_2244 * _1633) + _1624;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1561);
            frontier_phi_25_49_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_25_49_ladder_2;
        _1654 = frontier_phi_25_49_ladder_1;
        _1656 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1561);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = ((((1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _638)) * _622;
    float _1669 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    uvec4 _1690 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1692 = _1690.x * 14u;
    uint _1693 = _1692 + 13u;
    float _1700 = _622 + (-1.0);
    float _1705 = (cbLight._m0[_1693].x * _1700) + 1.0;
    float _1706 = (cbLight._m0[_1693].y * _1700) + 1.0;
    float _1707 = (cbLight._m0[_1693].z * _1700) + 1.0;
    float _1708 = (cbLight._m0[_1693].w * _1700) + 1.0;
    uint _1709 = _1692 + 5u;
    float _1715 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    uint _1719 = _1692 + 4u;
    float _1725 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1729 = _1692 | 1u;
    float _1740 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_459, _460, _461));
    float _1743 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_459, _460, _461));
    float _3908 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _3919 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1748 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1750 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1757 = ((cbLight._m0[_1709].x * _1715) * _1750) + ((cbLight._m0[_1719].x * _1725) * _1748);
    float _1758 = ((_1715 * cbLight._m0[_1709].y) * _1750) + ((_1725 * cbLight._m0[_1719].y) * _1748);
    float _1759 = ((_1715 * cbLight._m0[_1709].z) * _1750) + ((_1725 * cbLight._m0[_1719].z) * _1748);
    uvec4 _1763 = floatBitsToUint(cbLight._m0[_1692 + 12u]);
    bool _1765 = _1763.x == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1765)
    {
        _1776 = _1757;
        _1778 = _1758;
        _1780 = _1759;
    }
    else
    {
        uint _1784 = _1692 + 6u;
        float _1800 = (dot(vec3(cbLight._m0[_1692 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1801 = _1800 * _1800;
        float _3930 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1803 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _1776 = (((cbLight._m0[_1784].x * 0.3183098733425140380859375) * _1802) * _1803) + _1757;
        _1778 = (((cbLight._m0[_1784].y * 0.3183098733425140380859375) * _1802) * _1803) + _1758;
        _1780 = (((cbLight._m0[_1784].z * 0.3183098733425140380859375) * _1802) * _1803) + _1759;
    }
    bool _1783 = _1763.y == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1783)
    {
        _1821 = _1776;
        _1823 = _1778;
        _1825 = _1780;
    }
    else
    {
        uint _1980 = _1692 + 7u;
        float _1996 = (dot(vec3(cbLight._m0[_1692 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _3946 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1999 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _1821 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1776;
        _1823 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1778;
        _1825 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1780;
    }
    uint _1828 = _1692 + 8u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1692].w)) * _462) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1692].x + _539;
    float _1844 = cbLight._m0[_1692].y + _540;
    float _1845 = cbLight._m0[_1692].z + _541;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1692].xyz));
    float _3962 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1857 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1858 = dot(vec3(_459, _460, _461), vec3(_1850, _1851, _1852));
    float _3984 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_1850, _1851, _1852));
    float _3995 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1842 * _1842;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1882 = 1.0 - _1842;
    float _1893 = (0.5 / (((_1857 * ((_1856 * _1882) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1882) + _1842) * _1856))) * _1856;
    float _4006 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    uint _1906 = _1692 + 9u;
    float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _462) * 0.949999988079071044921875);
    float _1918 = _1917 * _1917;
    float _1919 = cbLight._m0[_1729].x + _539;
    float _1920 = cbLight._m0[_1729].y + _540;
    float _1921 = cbLight._m0[_1729].z + _541;
    float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
    float _1926 = _1925 * _1919;
    float _1927 = _1925 * _1920;
    float _1928 = _1925 * _1921;
    float _1929 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1729].xyz));
    float _4017 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1933 = dot(vec3(_459, _460, _461), vec3(_1926, _1927, _1928));
    float _4028 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1926, _1927, _1928));
    float _4039 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1918 * _1918;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1954 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1955 = 1.0 - _1918;
    float _1965 = (0.5 / (((_1857 * ((_1932 * _1955) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1955) + _1918) * _1932))) * _1932;
    float _4050 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    float _1977 = (((_1954 * cbLight._m0[_1906].x) * _1967) * _1715) + (((_1881 * cbLight._m0[_1828].x) * _1895) * _1725);
    float _1978 = (((_1954 * cbLight._m0[_1906].y) * _1967) * _1715) + (((_1881 * cbLight._m0[_1828].y) * _1895) * _1725);
    float _1979 = (((_1954 * cbLight._m0[_1906].z) * _1967) * _1715) + (((_1881 * cbLight._m0[_1828].z) * _1895) * _1725);
    float _2041;
    float _2043;
    float _2045;
    if (_1765)
    {
        _2041 = _1977;
        _2043 = _1978;
        _2045 = _1979;
    }
    else
    {
        uint _2047 = _1692 + 2u;
        uint _2051 = _1692 + 10u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _462) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _539;
        float _2068 = cbLight._m0[_2047].y + _540;
        float _2069 = cbLight._m0[_2047].z + _541;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2047].xyz));
        float _4061 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2081 = dot(vec3(_459, _460, _461), vec3(_2074, _2075, _2076));
        float _4072 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _4083 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2103 = 1.0 - _2066;
        float _2113 = (0.5 / (((_1857 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _2103) + _2066) * _2080))) * _2080;
        float _4094 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _2041 = (((_2102 * cbLight._m0[_2051].x) * _2115) * _2116) + _1977;
        _2043 = (((_2102 * cbLight._m0[_2051].y) * _2115) * _2116) + _1978;
        _2045 = (((_2102 * cbLight._m0[_2051].z) * _2115) * _2116) + _1979;
    }
    float _2151;
    float _2153;
    float _2155;
    if (_1783)
    {
        _2151 = _2041;
        _2153 = _2043;
        _2155 = _2045;
    }
    else
    {
        uint _2162 = _1692 + 3u;
        uint _2166 = _1692 + 11u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _462) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _539;
        float _2183 = cbLight._m0[_2162].y + _540;
        float _2184 = cbLight._m0[_2162].z + _541;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2162].xyz));
        float _4110 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2196 = dot(vec3(_459, _460, _461), vec3(_2189, _2190, _2191));
        float _4121 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4132 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2218 = 1.0 - _2181;
        float _2228 = (0.5 / (((_1857 * ((_2195 * _2218) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _2218) + _2181) * _2195))) * _2195;
        float _4143 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _2151 = (((_2217 * cbLight._m0[_2166].x) * _2230) * _2231) + _2041;
        _2153 = (((_2217 * cbLight._m0[_2166].y) * _2230) * _2231) + _2043;
        _2155 = (((_2217 * cbLight._m0[_2166].z) * _2230) * _2231) + _2045;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1690.y == 0u)
    {
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2306;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2306;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2306;
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.x;
        uint _2333 = uint((float(_2321.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2322))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2322)));
        float _2343 = (log2(_2309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2344 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        uint _2347 = uint(isnan(14.0) ? _2344 : (isnan(_2344) ? 14.0 : min(_2344, 14.0)));
        uvec4 _2352 = texelFetch(g_lightClusterGridBuffer, int(((_2347 << 2u) + (_2333 << 6u)) >> 2u));
        uint _2353 = _2352.x;
        uint _2354 = _2321.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2354 >> 4u) & 15u)) + 4294967295u) & _2353) == 0u) || ((_2354 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2623)
                {
                    frontier_phi_66_pred = _2607;
                    frontier_phi_66_pred_1 = _2612;
                    frontier_phi_66_pred_2 = _2611;
                    frontier_phi_66_pred_3 = _2610;
                    frontier_phi_66_pred_4 = _2609;
                    frontier_phi_66_pred_5 = _2608;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2622;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2613 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2307;
                        float _2819 = _2778.y - _2308;
                        float _2820 = _2778.z - _2309;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_578, _581, _584), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4169 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2307;
                        float _2854 = (-0.0) - _2308;
                        float _2855 = (-0.0) - _2309;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _638;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_578, _581, _584), vec3(_2860, _2861, _2862));
                        float _4185 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2895 = dot(vec3(_578, _581, _584), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4196 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4207 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4218 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2682 = (_2849 * _2797.x) + _2755;
                        _2683 = (_2849 * _2797.y) + _2756;
                        _2684 = (_2849 * _2797.z) + _2757;
                        _2679 = (_2930 * _2814.x) + _2752;
                        _2680 = (_2930 * _2814.y) + _2753;
                        _2681 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_66_pred = _2679;
                    frontier_phi_66_pred_1 = _2684;
                    frontier_phi_66_pred_2 = _2683;
                    frontier_phi_66_pred_3 = _2682;
                    frontier_phi_66_pred_4 = _2681;
                    frontier_phi_66_pred_5 = _2680;
                }
                _2455 = frontier_phi_66_pred;
                _2465 = frontier_phi_66_pred_1;
                _2463 = frontier_phi_66_pred_2;
                _2461 = frontier_phi_66_pred_3;
                _2459 = frontier_phi_66_pred_4;
                _2457 = frontier_phi_66_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2455;
                    _2608 = _2457;
                    _2609 = _2459;
                    _2610 = _2461;
                    _2611 = _2463;
                    _2612 = _2465;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2471) & _2353) == 0u)
        {
            _2575 = _2454;
            _2577 = _2456;
            _2579 = _2458;
            _2581 = _2460;
            _2583 = _2462;
            _2585 = _2464;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
            float _2601 = _2600 * _2307;
            float _2602 = _2600 * _2308;
            float _2603 = _2600 * _2309;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2735 = _2454;
                float _2736 = _2456;
                float _2737 = _2458;
                float _2738 = _2460;
                float _2739 = _2462;
                float _2740 = _2464;
                uint _2741 = _2471;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2751)
                    {
                        frontier_phi_77_pred = _2740;
                        frontier_phi_77_pred_1 = _2739;
                        frontier_phi_77_pred_2 = _2738;
                        frontier_phi_77_pred_3 = _2737;
                        frontier_phi_77_pred_4 = _2736;
                        frontier_phi_77_pred_5 = _2735;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        uint _2963 = _2750;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3032;
                        vec4 _3048;
                        float _3094;
                        bool _3095;
                        for (;;)
                        {
                            uint _2974 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3019 = (_2974 * 40u) + 16u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2974 * 40u) + 20u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2974 * 40u) + 24u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3069 = (_2974 * 40u) + 28u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3094 = fma(_2309, _3082.z, fma(_2308, _3082.y, _3082.x * _2307)) + _3082.w;
                            _3095 = !((fma(_2309, _3063.z, fma(_2308, _3063.y, _3063.x * _2307)) + _3063.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3095)
                            {
                                float _3122 = _2989.x - _2307;
                                float _3123 = _2989.y - _2308;
                                float _3124 = _2989.z - _2309;
                                float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                                float _3128 = inversesqrt(_3125);
                                float _3129 = _3128 * _3122;
                                float _3130 = _3128 * _3123;
                                float _3131 = _3128 * _3124;
                                float _3135 = 1.0 - (_3125 / (_2990 * _2990));
                                float _4229 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3140 = sqrt(_3125) * _3005.w;
                                float _3142 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                                float _3143 = _3142 * _3142;
                                float _3146 = ((1.0 - _3143) * dot(vec3(_3129, _3130, _3131), vec3(_578, _581, _584))) + _3143;
                                float _3149 = _3140 * _3140;
                                float _3153 = (fma(_2309, _3032.z, fma(_2308, _3032.y, _3032.x * _2307)) + _3032.w) / _3094;
                                float _3154 = (fma(_2309, _3048.z, fma(_2308, _3048.y, _3048.x * _2307)) + _3048.w) / _3094;
                                float _3158 = 1.0 - dot(vec2(_3153, _3154), vec2(_3153, _3154));
                                float _4245 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3160 = _3159 * (((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3136) / ((_3149 * 0.699999988079071044921875) + 1.0));
                                float _3172 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                                float _3173 = 1.0 - _638;
                                float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                                float _3181 = _3180 * _3180;
                                float _3182 = _3181 * _3181;
                                float _3183 = _3129 - _2601;
                                float _3184 = _3130 - _2602;
                                float _3185 = _3131 - _2603;
                                float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                                float _3193 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4256 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3197 = dot(vec3(_578, _581, _584), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                                float _4267 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                                float _3205 = _3142 * _3181;
                                float _3206 = _3205 * _3205;
                                float _3212 = ((1.0 - _3206) * dot(vec3(_578, _581, _584), vec3(_3129, _3130, _3131))) + _3206;
                                float _4278 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3214 = 1.0 - _3181;
                                float _3224 = (0.5 / (((_3213 * ((_3196 * _3214) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3181) * _3196))) * _3213;
                                float _4289 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3234 = (_3159 * _3136) * (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3204 * _3204) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3160 * _3005.y;
                                frontier_phi_83_pred_1 = _3160 * _3005.x;
                                frontier_phi_83_pred_2 = _3234 * _3017.z;
                                frontier_phi_83_pred_3 = _3234 * _3017.y;
                                frontier_phi_83_pred_4 = _3234 * _3017.x;
                                frontier_phi_83_pred_5 = _3160 * _3005.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3242 = frontier_phi_83_pred;
                            _3241 = frontier_phi_83_pred_1;
                            _3240 = frontier_phi_83_pred_2;
                            _3239 = frontier_phi_83_pred_3;
                            _3238 = frontier_phi_83_pred_4;
                            _3243 = frontier_phi_83_pred_5;
                            _2947 = _3241 + _2960;
                            _2948 = _3242 + _2961;
                            _2949 = _3243 + _2962;
                            _2944 = _3238 + _2957;
                            _2945 = _3239 + _2958;
                            _2946 = _3240 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2949;
                        frontier_phi_77_pred_1 = _2948;
                        frontier_phi_77_pred_2 = _2947;
                        frontier_phi_77_pred_3 = _2946;
                        frontier_phi_77_pred_4 = _2945;
                        frontier_phi_77_pred_5 = _2944;
                    }
                    _2586 = frontier_phi_77_pred;
                    _2584 = frontier_phi_77_pred_1;
                    _2582 = frontier_phi_77_pred_2;
                    _2580 = frontier_phi_77_pred_3;
                    _2578 = frontier_phi_77_pred_4;
                    _2576 = frontier_phi_77_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2576;
                        _2736 = _2578;
                        _2737 = _2580;
                        _2738 = _2582;
                        _2739 = _2584;
                        _2740 = _2586;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2580;
                frontier_phi_58_59_ladder_1 = _2586;
                frontier_phi_58_59_ladder_2 = _2584;
                frontier_phi_58_59_ladder_3 = _2582;
                frontier_phi_58_59_ladder_4 = _2578;
                frontier_phi_58_59_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_58_59_ladder = _2458;
                frontier_phi_58_59_ladder_1 = _2464;
                frontier_phi_58_59_ladder_2 = _2462;
                frontier_phi_58_59_ladder_3 = _2460;
                frontier_phi_58_59_ladder_4 = _2456;
                frontier_phi_58_59_ladder_5 = _2454;
            }
            _2575 = frontier_phi_58_59_ladder_5;
            _2577 = frontier_phi_58_59_ladder_4;
            _2579 = frontier_phi_58_59_ladder;
            _2581 = frontier_phi_58_59_ladder_3;
            _2583 = frontier_phi_58_59_ladder_2;
            _2585 = frontier_phi_58_59_ladder_1;
        }
        float _2590 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2366 = (_2590 * _2581) + _1821;
        _2368 = (_2590 * _2583) + _1823;
        _2370 = (_2590 * _2585) + _1825;
        _2372 = ((_2575 * 0.039999999105930328369140625) * _2590) + _2151;
        _2374 = ((_2577 * 0.039999999105930328369140625) * _2590) + _2153;
        _2376 = ((_2579 * 0.039999999105930328369140625) * _2590) + _2155;
    }
    else
    {
        _2366 = _1821;
        _2368 = _1823;
        _2370 = _1825;
        _2372 = _2151;
        _2374 = _2153;
        _2376 = _2155;
    }
    float _4305 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4316 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4327 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _2393 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2366 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _622))) + ((_2372 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1459)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2368 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _622))) + ((_2374 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1459)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2370 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _622))) + ((_2376 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1459)) * cbPerFrame._m0[3u].x);
    uint _2396 = _226 + 6u;
    float _2404 = _559 / cbSceneParam._m0[86u].x;
    float _2405 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _480 : (isnan(_480) ? cbSceneParam._m0[77u].w : min(_480, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_480 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_480) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _480 : min(cbSceneParam._m0[80u].w, _480));
        float _2480 = _2479 / _480;
        float _2491 = _2480 * _532;
        float _2492 = _533 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2495 = _2480 * _534;
        float _2497 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2492;
        float _2505 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2692;
        if (abs((_2493 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2692 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2638 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2692 = ((abs(_2505 / _2493) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2515 * _2647) - exp2(_2515 * _2648)) * _2636))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2694 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2703 = exp2((_2692 * (-1.44269502162933349609375)) * (1.0 - _2694.w));
        float _2704 = log2(_2703);
        float _2720 = log2(_2424);
        _2517 = (exp2(_2720 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].x)) * _2694.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2519 = (exp2(_2720 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].y)) * _2694.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2521 = (exp2(_2720 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].z)) * _2694.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2523 = _2703 * _2424;
    }
    else
    {
        _2517 = _2421;
        _2519 = _2422;
        _2521 = _2423;
        _2523 = _2424;
    }
    bool _2730;
    vec4 _2533;
    vec4 _2555;
    float _2557;
    float _2561;
    float _2562;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2533 = cbMatDynParam._m0[0u];
        float _2535 = roundEven(_2533.y);
        bool _2536 = _2535 == 3.0;
        float _2537 = log2(_2523);
        float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * _2393;
        float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * _2394;
        float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * _2395;
        float _2553 = _548 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        float _2560 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2561 = _2560 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
        _2562 = _2560 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
        _2563 = _2560 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
        _2564 = _2553 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2564) < 0.5)
            {
                _2730 = true;
                break;
            }
        }
        uint _2671 = _597 + uint(_2533.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2564) < 0.5))
        {
            _2730 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2730 = true;
            break;
        }
        _2730 = false;
        break;
    }
    float _2935;
    if (_2730)
    {
        discard_state = true;
        _2935 = 0.0;
    }
    else
    {
        _2935 = cbInstanceData._m0[_2396].w;
    }
    SV_Target.x = _2561;
    SV_Target.y = _2562;
    SV_Target.z = _2563;
    SV_Target.w = _2935;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
    discard_exit();
}


