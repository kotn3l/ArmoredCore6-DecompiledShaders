#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _3737;
float _3738;
float _3739;
float _3740;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _377 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _377) * cbMtdParam._m0[24u].x) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3749 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _402 = (_395 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _403 = (_395 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _404 = (_395 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].x) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3760 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _395) + _536;
    float _546 = ((_517.y - _537) * _395) + _537;
    float _547 = ((_517.z - _538) * _395) + _538;
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _468) + _547;
    float _575 = ((((_559.x - _545) * _468) + _545) * 2.0) + (-1.0);
    float _576 = ((((_559.y - _546) * _468) + _546) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3771 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _622 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _625 = ((isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : min(_622, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _634 = (_625 - ((((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3792 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _642 = (_635 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _643 = (_635 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _644 = (_635 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _656 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_658 - _659) * cbMtdParam._m0[24u].w) + _659) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3803 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _642) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _642;
    float _696 = ((((cbMtdParam._m0[10u].y - _643) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _643;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _644)) * _687) + _644;
    float _702 = (((_494.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    vec4 _716 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _723 = (_716.x * 2.0) + (-1.0);
    float _724 = (_716.y * 2.0) + (-1.0);
    float _725 = dot(vec2(_723, _724), vec2(_723, _724));
    float _3814 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _733 = (_635 * (_716.z - _702)) + _702;
    float _736 = ((cbMtdParam._m0[23u].y - _733) * _687) + _733;
    vec4 _755 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _761 = (_755.x * 2.0) + (-1.0);
    float _762 = (_755.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3825 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _773 = _575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)));
    float _774 = _576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)));
    float _786 = (((_723 - _773) + (cbMtdParam._m0[21u].x * _773)) * _635) + _773;
    float _787 = (((_724 - _774) + (cbMtdParam._m0[21u].x * _774)) * _635) + _774;
    float _788 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) - _582)) + _582;
    float _799 = (((_761 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _687) + _786;
    float _800 = (((_762 - _787) + (_787 * cbMtdParam._m0[22u].z)) * _687) + _787;
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) - _788) * _687) + _788;
    float _803 = cbMtdParam._m0[22u].x + _595.w;
    float _806 = fma(_801, _246 * NORMAL.x, fma(_800, _253 * TANGENT.x, (_239 * _231) * _799));
    float _809 = fma(_801, _246 * NORMAL.y, fma(_800, _253 * TANGENT.y, (_239 * _232) * _799));
    float _812 = fma(_801, _246 * NORMAL.z, fma(_800, _253 * TANGENT.z, (_239 * _233) * _799));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    float _817 = _816 * _806;
    float _818 = _816 * _809;
    float _819 = _816 * _812;
    float _3836 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _820 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _3858 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3869 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3880 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _838 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_889 * _889) + (_890 * _890)) + (_891 * _891));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _3891 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _3902 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) - _1066)) + _1066) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _916 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _917 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _935 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _817));
    float _938 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _817));
    float _941 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _817));
    uint _954 = _259 + 9u;
    uint _955 = _954 + uint(cbMatDynParam._m0[0u].w);
    float _961 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_955].x;
    float _962 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_955].y;
    float _963 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_955].z;
    float _3913 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _916, cbSceneParam._m0[86u].y * _917));
    float _979 = ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_817, _818, _819), vec3(_896, _897, _898));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _817) - _896;
    float _988 = (_983 * _818) - _897;
    float _989 = (_983 * _819) - _898;
    float _993 = abs(dot(vec3(_896, _897, _898), vec3(_817, _818, _819)));
    float _3946 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_820);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1106 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1110 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1135 = _1040 + _817;
        float _1136 = _1044 + _818;
        float _1137 = _1048 + _819;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_817, _818, _819), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3994 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_817, _818, _819), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4027 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_817, _818, _819), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4060 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1423 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1427 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1450 = _1040 + _817;
        float _1451 = _1044 + _818;
        float _1452 = _1048 + _819;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_817, _818, _819), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4123 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_817, _818, _819), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4156 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_817, _818, _819), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4189 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1391)) + _1391;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1392)) + _1392;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _987 * 0.5;
    float _1757 = _988 * 0.5;
    float _1758 = _989 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1887 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1890 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1918 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1887 > 0.0)
        {
            _2119 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2362;
        if (_1890 > 0.0)
        {
            _2362 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2362 = frontier_phi_38_33_ladder;
        }
        float _2364 = isnan(_2119) ? _1918 : (isnan(_1918) ? _2119 : min(_1918, _2119));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1884) + _1873;
        float _2370 = (_2365 * _1887) + _1877;
        float _2371 = (_2365 * _1890) + _1881;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_16_38_ladder_2;
        _1908 = frontier_phi_16_38_ladder_1;
        _1910 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1825);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1983 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1986 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2124;
        if (_1980 > 0.0)
        {
            _2124 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1983 > 0.0)
        {
            _2389 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2594;
        if (_1986 > 0.0)
        {
            _2594 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2594 = frontier_phi_49_46_ladder;
        }
        float _2596 = isnan(_2389) ? _2124 : (isnan(_2124) ? _2389 : min(_2124, _2389));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1980) + _1969;
        float _2602 = (_2597 * _1983) + _1973;
        float _2603 = (_2597 * _1986) + _1977;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_25_49_ladder = _2802.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2802.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2802.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_25_49_ladder_2;
        _2007 = frontier_phi_25_49_ladder_1;
        _2009 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1915);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2021 = ((((1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1008 * _995)) * _979;
    float _2022 = _2021 * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2023 = _2021 * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2024 = _2021 * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _979 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2078 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2082 = _2045 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_817, _818, _819));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_817, _818, _819));
    float _4325 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4336 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2062].x * _2068) * _2103) + ((cbLight._m0[_2072].x * _2078) * _2101);
    float _2111 = ((_2068 * cbLight._m0[_2062].y) * _2103) + ((_2078 * cbLight._m0[_2072].y) * _2101);
    float _2112 = ((_2068 * cbLight._m0[_2062].z) * _2103) + ((_2078 * cbLight._m0[_2072].z) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2045 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4347 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2156 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2333 = _2045 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4363 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2352 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2174 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2129;
        _2176 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2131;
        _2178 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2133;
    }
    uint _2181 = _2045 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _820) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2045].x + _896;
    float _2197 = cbLight._m0[_2045].y + _897;
    float _2198 = cbLight._m0[_2045].z + _898;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2045].xyz));
    float _4379 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2210 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2211 = dot(vec3(_817, _818, _819), vec3(_2203, _2204, _2205));
    float _4401 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2203, _2204, _2205));
    float _4412 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2235 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2210 * ((_2209 * _2235) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2235) + _2195) * _2209))) * _2209;
    float _4423 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2259 = _2045 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _820) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2082].x + _896;
    float _2273 = cbLight._m0[_2082].y + _897;
    float _2274 = cbLight._m0[_2082].z + _898;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2082].xyz));
    float _4434 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2286 = dot(vec3(_817, _818, _819), vec3(_2279, _2280, _2281));
    float _4445 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2279, _2280, _2281));
    float _4456 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2308 = 1.0 - _2271;
    float _2318 = (0.5 / (((_2210 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2308) + _2271) * _2285))) * _2285;
    float _4467 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2330 = (((_2307 * cbLight._m0[_2259].x) * _2320) * _2068) + (((_2234 * cbLight._m0[_2181].x) * _2248) * _2078);
    float _2331 = (((_2307 * cbLight._m0[_2259].y) * _2320) * _2068) + (((_2234 * cbLight._m0[_2181].y) * _2248) * _2078);
    float _2332 = (((_2307 * cbLight._m0[_2259].z) * _2320) * _2068) + (((_2234 * cbLight._m0[_2181].z) * _2248) * _2078);
    float _2394;
    float _2396;
    float _2398;
    if (_2118)
    {
        _2394 = _2330;
        _2396 = _2331;
        _2398 = _2332;
    }
    else
    {
        uint _2400 = _2045 + 2u;
        uint _2404 = _2045 + 10u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _820) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _896;
        float _2421 = cbLight._m0[_2400].y + _897;
        float _2422 = cbLight._m0[_2400].z + _898;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2400].xyz));
        float _4478 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2434 = dot(vec3(_817, _818, _819), vec3(_2427, _2428, _2429));
        float _4489 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4500 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2456 = 1.0 - _2419;
        float _2466 = (0.5 / (((_2210 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2456) + _2419) * _2433))) * _2433;
        float _4511 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2394 = (((_2455 * cbLight._m0[_2404].x) * _2468) * _2469) + _2330;
        _2396 = (((_2455 * cbLight._m0[_2404].y) * _2468) * _2469) + _2331;
        _2398 = (((_2455 * cbLight._m0[_2404].z) * _2468) * _2469) + _2332;
    }
    float _2504;
    float _2506;
    float _2508;
    if (_2136)
    {
        _2504 = _2394;
        _2506 = _2396;
        _2508 = _2398;
    }
    else
    {
        uint _2515 = _2045 + 3u;
        uint _2519 = _2045 + 11u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _820) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _896;
        float _2536 = cbLight._m0[_2515].y + _897;
        float _2537 = cbLight._m0[_2515].z + _898;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2515].xyz));
        float _4527 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2549 = dot(vec3(_817, _818, _819), vec3(_2542, _2543, _2544));
        float _4538 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4549 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2570 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2571 = 1.0 - _2534;
        float _2581 = (0.5 / (((_2210 * ((_2548 * _2571) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2571) + _2534) * _2548))) * _2548;
        float _4560 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2504 = (((_2570 * cbLight._m0[_2519].x) * _2583) * _2584) + _2394;
        _2506 = (((_2570 * cbLight._m0[_2519].y) * _2583) * _2584) + _2396;
        _2508 = (((_2570 * cbLight._m0[_2519].z) * _2583) * _2584) + _2398;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_2043.y == 0u)
    {
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2659;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2659;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2659;
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _917) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _916) / _2675)));
        float _2696 = (log2(_2662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
        }
        else
        {
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            uint _2966 = 0u;
            uint _2975;
            bool _2976;
            for (;;)
            {
                _2975 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                _2976 = _2975 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2976)
                {
                    frontier_phi_66_pred = _2960;
                    frontier_phi_66_pred_1 = _2965;
                    frontier_phi_66_pred_2 = _2964;
                    frontier_phi_66_pred_3 = _2963;
                    frontier_phi_66_pred_4 = _2962;
                    frontier_phi_66_pred_5 = _2961;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2975;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2966 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _2660;
                        float _3172 = _3131.y - _2661;
                        float _3173 = _3131.z - _2662;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_935, _938, _941), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4586 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3191 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3181) + _3192;
                        float _3198 = _3188 * _3188;
                        float _3202 = ((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3187) / ((_3198 * 0.699999988079071044921875) + 1.0);
                        float _3206 = (-0.0) - _2660;
                        float _3207 = (-0.0) - _2661;
                        float _3208 = (-0.0) - _2662;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3223 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3224 = 1.0 - _995;
                        float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                        float _3232 = _3231 * _3231;
                        float _3233 = _3232 * _3232;
                        float _3234 = _3213 + _3178;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3244 = dot(vec3(_935, _938, _941), vec3(_3213, _3214, _3215));
                        float _4602 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3248 = dot(vec3(_935, _938, _941), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                        float _4613 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                        float _3256 = _3191 * _3232;
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3181) + _3257;
                        float _4624 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3262 = 1.0 - _3232;
                        float _3272 = (0.5 / (((_3261 * ((_3247 * _3262) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3232) * _3247))) * _3261;
                        float _4635 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3283 = (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3255 * _3255) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3035 = (_3202 * _3150.x) + _3108;
                        _3036 = (_3202 * _3150.y) + _3109;
                        _3037 = (_3202 * _3150.z) + _3110;
                        _3032 = (_3283 * _3167.x) + _3105;
                        _3033 = (_3283 * _3167.y) + _3106;
                        _3034 = (_3283 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                _2808 = frontier_phi_66_pred;
                _2818 = frontier_phi_66_pred_1;
                _2816 = frontier_phi_66_pred_2;
                _2814 = frontier_phi_66_pred_3;
                _2812 = frontier_phi_66_pred_4;
                _2810 = frontier_phi_66_pred_5;
                uint _2967 = _2966 + 1u;
                if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2960 = _2808;
                    _2961 = _2810;
                    _2962 = _2812;
                    _2963 = _2814;
                    _2964 = _2816;
                    _2965 = _2818;
                    _2966 = _2967;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
        }
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.z;
        uint _2824 = (_2822 >> 8u) & 15u;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((4294967295u << _2824) & _2706) == 0u)
        {
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
        }
        else
        {
            float _2953 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
            float _2954 = _2953 * _2660;
            float _2955 = _2953 * _2661;
            float _2956 = _2953 * _2662;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2824 < ((_2822 >> 12u) & 15u))
            {
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _3088 = _2807;
                float _3089 = _2809;
                float _3090 = _2811;
                float _3091 = _2813;
                float _3092 = _2815;
                float _3093 = _2817;
                uint _3094 = _2824;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3104)
                    {
                        frontier_phi_77_pred = _3093;
                        frontier_phi_77_pred_1 = _3092;
                        frontier_phi_77_pred_2 = _3091;
                        frontier_phi_77_pred_3 = _3090;
                        frontier_phi_77_pred_4 = _3089;
                        frontier_phi_77_pred_5 = _3088;
                    }
                    else
                    {
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        uint _3316 = _3103;
                        uint _3317;
                        vec4 _3342;
                        float _3343;
                        vec4 _3358;
                        vec3 _3370;
                        vec4 _3385;
                        vec4 _3400;
                        float _3446;
                        bool _3447;
                        for (;;)
                        {
                            uint _3327 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3316));
                            _3317 = (_3316 + 4294967295u) & _3316;
                            uint _3329 = _3327 * 40u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3343 = _3342.w;
                            uint _3345 = (_3327 * 40u) + 4u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3360 = (_3327 * 40u) + 8u;
                            _3370 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x));
                            uint _3372 = (_3327 * 40u) + 16u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3327 * 40u) + 20u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3327 * 40u) + 24u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3421 = (_3327 * 40u) + 28u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3446 = fma(_2662, _3434.z, fma(_2661, _3434.y, _3434.x * _2660)) + _3434.w;
                            _3447 = !((fma(_2662, _3415.z, fma(_2661, _3415.y, _3415.x * _2660)) + _3415.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3447)
                            {
                                float _3474 = _3342.x - _2660;
                                float _3475 = _3342.y - _2661;
                                float _3476 = _3342.z - _2662;
                                float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                                float _3480 = inversesqrt(_3477);
                                float _3481 = _3480 * _3474;
                                float _3482 = _3480 * _3475;
                                float _3483 = _3480 * _3476;
                                float _3487 = 1.0 - (_3477 / (_3343 * _3343));
                                float _4646 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3492 = sqrt(_3477) * _3358.w;
                                float _3494 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                                float _3495 = _3494 * _3494;
                                float _3498 = ((1.0 - _3495) * dot(vec3(_3481, _3482, _3483), vec3(_935, _938, _941))) + _3495;
                                float _3501 = _3492 * _3492;
                                float _3505 = (fma(_2662, _3385.z, fma(_2661, _3385.y, _3385.x * _2660)) + _3385.w) / _3446;
                                float _3506 = (fma(_2662, _3400.z, fma(_2661, _3400.y, _3400.x * _2660)) + _3400.w) / _3446;
                                float _3510 = 1.0 - dot(vec2(_3505, _3506), vec2(_3505, _3506));
                                float _4662 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3512 = _3511 * (((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3488) / ((_3501 * 0.699999988079071044921875) + 1.0));
                                float _3524 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                                float _3525 = 1.0 - _995;
                                float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                                float _3533 = _3532 * _3532;
                                float _3534 = _3533 * _3533;
                                float _3535 = _3481 - _2954;
                                float _3536 = _3482 - _2955;
                                float _3537 = _3483 - _2956;
                                float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                                float _3545 = dot(vec3(_935, _938, _941), vec3((-0.0) - _2954, (-0.0) - _2955, (-0.0) - _2956));
                                float _4673 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3549 = dot(vec3(_935, _938, _941), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                                float _4684 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                                float _3557 = _3494 * _3533;
                                float _3558 = _3557 * _3557;
                                float _3564 = ((1.0 - _3558) * dot(vec3(_935, _938, _941), vec3(_3481, _3482, _3483))) + _3558;
                                float _4695 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3566 = 1.0 - _3533;
                                float _3576 = (0.5 / (((_3565 * ((_3548 * _3566) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3533) * _3548))) * _3565;
                                float _4706 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3586 = (_3511 * _3488) * (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3556 * _3556) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3512 * _3358.y;
                                frontier_phi_83_pred_1 = _3512 * _3358.x;
                                frontier_phi_83_pred_2 = _3586 * _3370.z;
                                frontier_phi_83_pred_3 = _3586 * _3370.y;
                                frontier_phi_83_pred_4 = _3586 * _3370.x;
                                frontier_phi_83_pred_5 = _3512 * _3358.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3594 = frontier_phi_83_pred;
                            _3593 = frontier_phi_83_pred_1;
                            _3592 = frontier_phi_83_pred_2;
                            _3591 = frontier_phi_83_pred_3;
                            _3590 = frontier_phi_83_pred_4;
                            _3595 = frontier_phi_83_pred_5;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            if (_3317 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3317;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3302;
                        frontier_phi_77_pred_1 = _3301;
                        frontier_phi_77_pred_2 = _3300;
                        frontier_phi_77_pred_3 = _3299;
                        frontier_phi_77_pred_4 = _3298;
                        frontier_phi_77_pred_5 = _3297;
                    }
                    _2939 = frontier_phi_77_pred;
                    _2937 = frontier_phi_77_pred_1;
                    _2935 = frontier_phi_77_pred_2;
                    _2933 = frontier_phi_77_pred_3;
                    _2931 = frontier_phi_77_pred_4;
                    _2929 = frontier_phi_77_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2929;
                        _3089 = _2931;
                        _3090 = _2933;
                        _3091 = _2935;
                        _3092 = _2937;
                        _3093 = _2939;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2933;
                frontier_phi_58_59_ladder_1 = _2939;
                frontier_phi_58_59_ladder_2 = _2937;
                frontier_phi_58_59_ladder_3 = _2935;
                frontier_phi_58_59_ladder_4 = _2931;
                frontier_phi_58_59_ladder_5 = _2929;
            }
            else
            {
                frontier_phi_58_59_ladder = _2811;
                frontier_phi_58_59_ladder_1 = _2817;
                frontier_phi_58_59_ladder_2 = _2815;
                frontier_phi_58_59_ladder_3 = _2813;
                frontier_phi_58_59_ladder_4 = _2809;
                frontier_phi_58_59_ladder_5 = _2807;
            }
            _2928 = frontier_phi_58_59_ladder_5;
            _2930 = frontier_phi_58_59_ladder_4;
            _2932 = frontier_phi_58_59_ladder;
            _2934 = frontier_phi_58_59_ladder_3;
            _2936 = frontier_phi_58_59_ladder_2;
            _2938 = frontier_phi_58_59_ladder_1;
        }
        float _2943 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2719 = (_2943 * _2934) + _2174;
        _2721 = (_2943 * _2936) + _2176;
        _2723 = (_2943 * _2938) + _2178;
        _2725 = ((_2928 * 0.039999999105930328369140625) * _2943) + _2504;
        _2727 = ((_2930 * 0.039999999105930328369140625) * _2943) + _2506;
        _2729 = ((_2932 * 0.039999999105930328369140625) * _2943) + _2508;
    }
    else
    {
        _2719 = _2174;
        _2721 = _2176;
        _2723 = _2178;
        _2725 = _2504;
        _2727 = _2506;
        _2729 = _2508;
    }
    float _4722 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4733 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4744 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2746 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2719 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _979))) + ((_2725 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2747 = ((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2721 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _979))) + ((_2727 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2748 = ((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2723 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _979))) + ((_2729 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _2749 = _259 + 6u;
    float _2757 = _916 / cbSceneParam._m0[86u].x;
    float _2758 = _917 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _838 : (isnan(_838) ? cbSceneParam._m0[77u].w : min(_838, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_838 > cbSceneParam._m0[78u].w)
    {
        float _2832 = isnan(_838) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _838 : min(cbSceneParam._m0[80u].w, _838));
        float _2833 = _2832 / _838;
        float _2844 = _2833 * _889;
        float _2845 = _890 * _2833;
        float _2846 = (-0.0) - _2845;
        float _2848 = _2833 * _891;
        float _2850 = (cbSceneParam._m0[77u].w * _2846) / _2832;
        float _2851 = _2850 + cbSceneParam._m0[79u].w;
        float _2852 = cbSceneParam._m0[79u].w - _2845;
        float _2858 = sqrt(((_2844 * _2844) + (_2845 * _2845)) + (_2848 * _2848));
        float _2861 = (1.0 - (cbSceneParam._m0[77u].w / _2832)) * _2858;
        float _2866 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2868 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3045;
        if (abs((_2846 - _2850) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3045 = ((((_2851 > 0.0) ? exp2(_2866 * _2851) : (2.0 - exp2(_2868 * _2851))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2861;
        }
        else
        {
            float _2989 = 1.0 / cbSceneParam._m0[80u].x;
            float _2990 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : max(_2851, _2852));
            float _2991 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : min(_2851, _2852));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            _3045 = ((abs(_2858 / _2846) * cbSceneParam._m0[80u].y) * ((((_3000 - _3001) * 2.0) - ((exp2(_2866 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0)))) - exp2(_2866 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))))) * _2989)) - ((exp2(_2868 * _3000) - exp2(_2868 * _3001)) * _2989))) + (_2861 * cbSceneParam._m0[80u].z);
        }
        vec4 _3047 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3056 = exp2((_3045 * (-1.44269502162933349609375)) * (1.0 - _3047.w));
        float _3057 = log2(_3056);
        float _3073 = log2(_2777);
        _2870 = (exp2(_3073 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].x)) * _3047.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2872 = (exp2(_3073 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].y)) * _3047.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2874 = (exp2(_3073 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].z)) * _3047.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2876 = _3056 * _2777;
    }
    else
    {
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
        _2876 = _2777;
    }
    bool _3083;
    vec4 _2886;
    vec4 _2908;
    float _2910;
    float _2914;
    float _2915;
    float _2916;
    float _2917;
    bool _2927;
    for (;;)
    {
        _2886 = cbMatDynParam._m0[0u];
        float _2888 = roundEven(_2886.y);
        bool _2889 = _2888 == 3.0;
        float _2890 = log2(_2876);
        float _2897 = exp2(_2890 * cbSceneParam._m0[78u].x) * _2746;
        float _2898 = exp2(_2890 * cbSceneParam._m0[78u].y) * _2747;
        float _2899 = exp2(_2890 * cbSceneParam._m0[78u].z) * _2748;
        float _2906 = _905 + (-0.5);
        _2908 = cbMtdParam._m0[1u];
        _2910 = _2908.y * _2906;
        float _2913 = (_2888 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2914 = _2913 * (_2889 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2870)));
        _2915 = _2913 * (_2889 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2872)));
        _2916 = _2913 * (_2889 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2874)));
        _2917 = _2906 * 0.999000012874603271484375;
        _2927 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2927)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2917) < 0.5)
            {
                _3083 = true;
                break;
            }
        }
        uint _3024 = _954 + uint(_2886.w);
        if ((cbInstanceData._m0[_3024].w < 1.0) && ((cbInstanceData._m0[_3024].w + _2917) < 0.5))
        {
            _3083 = true;
            break;
        }
        if ((_2910 + 1.0) < _2908.x)
        {
            _3083 = true;
            break;
        }
        _3083 = false;
        break;
    }
    float _3288;
    if (_3083)
    {
        discard_state = true;
        _3288 = 0.0;
    }
    else
    {
        _3288 = cbInstanceData._m0[_2749].w;
    }
    SV_Target.x = _2914;
    SV_Target.y = _2915;
    SV_Target.z = _2916;
    SV_Target.w = _3288;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2749].w;
    discard_exit();
}


