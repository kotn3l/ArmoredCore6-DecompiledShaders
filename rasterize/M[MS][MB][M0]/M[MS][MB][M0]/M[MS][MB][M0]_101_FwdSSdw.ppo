#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3537 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3548 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3559 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3570 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) + _428;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _512 = ((_482.z - _503) * _409) + _503;
    float _515 = ((((_482.x - _501) * _409) + _501) * 2.0) + (-1.0);
    float _516 = ((((_482.y - _502) * _409) + _502) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3581 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _554 = (_515 + ((((_455.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_542.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _555 = (_516 + ((((_455.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_542.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _558 = fma(_522, _227, fma(_555, _234, _554 * _220));
    float _561 = fma(_522, _228, fma(_555, _235, _554 * _221));
    float _564 = fma(_522, _229, fma(_555, _236, _554 * _222));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _606 = (cbMtdParam._m0[19u].x + dot(vec4(_568 * _558, _568 * _561, _568 * _564, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_599 - _600) * cbMtdParam._m0[24u].z) + _600) * cbMtdParam._m0[21u].z);
    float _3592 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _614 = (_607 * (cbMtdParam._m0[17u].x - _435)) + _435;
    float _615 = (_607 * (cbMtdParam._m0[17u].y - _436)) + _436;
    float _616 = (_607 * (cbMtdParam._m0[17u].z - _437)) + _437;
    float _621 = (((_455.z - _512) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _512;
    float _625 = ((_542.z - _621) * cbMtdParam._m0[19u].w) + _621;
    vec4 _638 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3603 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _655 = ((_638.z - _625) * _607) + _625;
    float _665 = ((sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) - _522) * _607) + _522;
    float _668 = (((_645 - _554) * _607) + _554) + (cbMtdParam._m0[21u].x * _554);
    float _669 = (((_646 - _555) * _607) + _555) + (cbMtdParam._m0[21u].x * _555);
    float _671 = cbMtdParam._m0[22u].x + _542.w;
    float _674 = fma(_665, _227, fma(_669, _234, _668 * _220));
    float _677 = fma(_665, _228, fma(_669, _235, _668 * _221));
    float _680 = fma(_665, _229, fma(_669, _236, _668 * _222));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3614 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _688 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3636 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3647 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3658 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _795 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _798 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _812 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3669 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _836 = ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_685, _686, _687), vec3(_765, _766, _767));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _685) - _765;
    float _845 = (_840 * _686) - _766;
    float _846 = (_840 * _687) - _767;
    float _850 = abs(dot(vec3(_765, _766, _767), vec3(_685, _686, _687)));
    float _3702 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_688);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _935 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _939 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _964 = _897 + _685;
        float _965 = _901 + _686;
        float _966 = _905 + _687;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _931;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _935;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _939;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_685, _686, _687), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3750 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_685, _686, _687), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3783 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_685, _686, _687), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3816 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1250 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1254 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1277 = _897 + _685;
        float _1278 = _901 + _686;
        float _1279 = _905 + _687;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_685, _686, _687), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3879 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_685, _686, _687), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3912 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_685, _686, _687), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3945 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1207;
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _844 * 0.5;
    float _1584 = _845 * 0.5;
    float _1585 = _846 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1700 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1704 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1708 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1711 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1714 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1717 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1745;
        if (_1711 > 0.0)
        {
            _1745 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1745 = frontier_phi_14_12_ladder;
        }
        float _1967;
        if (_1714 > 0.0)
        {
            _1967 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1967 = frontier_phi_23_19_ladder;
        }
        float _2213;
        if (_1717 > 0.0)
        {
            _2213 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2213 = frontier_phi_35_30_ladder;
        }
        float _2215 = isnan(_1967) ? _1745 : (isnan(_1745) ? _1967 : min(_1745, _1967));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1711) + _1700;
        float _2221 = (_2216 * _1714) + _1704;
        float _2222 = (_2216 * _1717) + _1708;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_13_35_ladder = _2346.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2346.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2346.x * cbModelParam._m0[1u].y;
        }
        _1733 = frontier_phi_13_35_ladder_2;
        _1735 = frontier_phi_13_35_ladder_1;
        _1737 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1652);
        _1733 = _1721.x * cbModelParam._m0[1u].y;
        _1735 = _1721.y * cbModelParam._m0[1u].y;
        _1737 = _1721.z * cbModelParam._m0[1u].y;
    }
    float _1741 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1741 : min(cbModelParam._m0[25u].w, _1741));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1810 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1813 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1972;
        if (_1807 > 0.0)
        {
            _1972 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2240;
        if (_1810 > 0.0)
        {
            _2240 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2240 = frontier_phi_37_32_ladder;
        }
        float _2445;
        if (_1813 > 0.0)
        {
            _2445 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2445 = frontier_phi_46_43_ladder;
        }
        float _2447 = isnan(_2240) ? _1972 : (isnan(_1972) ? _2240 : min(_1972, _2240));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1807) + _1796;
        float _2453 = (_2448 * _1810) + _1800;
        float _2454 = (_2448 * _1813) + _1804;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2455;
        float _2458 = _2455 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2454 > _2458) || ((_2454 < _2456) || ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 < _2456) || (_2452 > _2458))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2454, cbModelParam._m0[17u].z, fma(_2453, cbModelParam._m0[17u].y, _2452 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2454, cbModelParam._m0[18u].z, fma(_2453, cbModelParam._m0[18u].y, _2452 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2454, cbModelParam._m0[19u].z, fma(_2453, cbModelParam._m0[19u].y, _2452 * cbModelParam._m0[19u].x))), _1742);
            frontier_phi_22_46_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_22_46_ladder_2;
        _1834 = frontier_phi_22_46_ladder_1;
        _1836 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1742);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1848 = ((((1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_865 * _852)) * _836;
    float _1849 = _1848 * ((cbModelParam._m0[1u].w * (_1832 - _1733)) + _1733);
    float _1850 = _1848 * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1851 = _1848 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1854 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    vec4 _1868 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_773, _774));
    float _1870 = _1868.w;
    float _1882 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1870);
    float _1883 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1870);
    float _1884 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1870);
    uvec4 _1888 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1890 = _1888.x * 14u;
    uint _1891 = _1890 + 13u;
    float _1898 = _836 + (-1.0);
    float _1903 = (cbLight._m0[_1891].x * _1898) + 1.0;
    float _1904 = (cbLight._m0[_1891].y * _1898) + 1.0;
    float _1905 = (cbLight._m0[_1891].z * _1898) + 1.0;
    float _1906 = (cbLight._m0[_1891].w * _1898) + 1.0;
    uint _1907 = _1890 + 5u;
    float _1913 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1917 = _1890 + 4u;
    float _1926 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1930 = _1890 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_685, _686, _687));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_685, _686, _687));
    float _4081 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4092 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1907].x * _1913) * _1951) + (((cbLight._m0[_1917].x * _1882) * _1926) * _1949);
    float _1959 = ((_1913 * cbLight._m0[_1907].y) * _1951) + (((cbLight._m0[_1917].y * _1883) * _1926) * _1949);
    float _1960 = ((_1913 * cbLight._m0[_1907].z) * _1951) + (((cbLight._m0[_1917].z * _1884) * _1926) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1890 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1890 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1890 + 2u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4103 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2004 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2184 = _1890 + 7u;
        float _2200 = (dot(vec3(cbLight._m0[_1890 + 3u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4119 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2203 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2022 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _1977;
        _2024 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _1979;
        _2026 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _1981;
    }
    uint _2029 = _1890 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _688) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1890].x + _765;
    float _2045 = cbLight._m0[_1890].y + _766;
    float _2046 = cbLight._m0[_1890].z + _767;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1890].xyz));
    float _4135 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2058 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2059 = dot(vec3(_685, _686, _687), vec3(_2051, _2052, _2053));
    float _4157 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2051, _2052, _2053));
    float _4168 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2043;
    float _2094 = (0.5 / (((_2058 * ((_2057 * _2083) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2083) + _2043) * _2057))) * _2057;
    float _4179 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2110 = _1890 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _688) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1930].x + _765;
    float _2124 = cbLight._m0[_1930].y + _766;
    float _2125 = cbLight._m0[_1930].z + _767;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1930].xyz));
    float _4190 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2137 = dot(vec3(_685, _686, _687), vec3(_2130, _2131, _2132));
    float _4201 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2130, _2131, _2132));
    float _4212 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2122;
    float _2169 = (0.5 / (((_2058 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2159) + _2122) * _2136))) * _2136;
    float _4223 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2181 = (((_2158 * cbLight._m0[_2110].x) * _2171) * _1913) + ((((cbLight._m0[_2029].x * _1882) * _2082) * _2096) * _1926);
    float _2182 = (((_2158 * cbLight._m0[_2110].y) * _2171) * _1913) + ((((cbLight._m0[_2029].y * _1883) * _2082) * _2096) * _1926);
    float _2183 = (((_2158 * cbLight._m0[_2110].z) * _2171) * _1913) + ((((cbLight._m0[_2029].z * _1884) * _2082) * _2096) * _1926);
    float _2245;
    float _2247;
    float _2249;
    if (_1966)
    {
        _2245 = _2181;
        _2247 = _2182;
        _2249 = _2183;
    }
    else
    {
        uint _2251 = _1890 + 2u;
        uint _2255 = _1890 + 10u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _688) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _765;
        float _2272 = cbLight._m0[_2251].y + _766;
        float _2273 = cbLight._m0[_2251].z + _767;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2251].xyz));
        float _4234 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2285 = dot(vec3(_685, _686, _687), vec3(_2278, _2279, _2280));
        float _4245 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4256 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2307 = 1.0 - _2270;
        float _2317 = (0.5 / (((_2058 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2307) + _2270) * _2284))) * _2284;
        float _4267 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2319 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2320 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2245 = (((_2306 * cbLight._m0[_2255].x) * _2319) * _2320) + _2181;
        _2247 = (((_2306 * cbLight._m0[_2255].y) * _2319) * _2320) + _2182;
        _2249 = (((_2306 * cbLight._m0[_2255].z) * _2319) * _2320) + _2183;
    }
    float _2355;
    float _2357;
    float _2359;
    if (_1984)
    {
        _2355 = _2245;
        _2357 = _2247;
        _2359 = _2249;
    }
    else
    {
        uint _2366 = _1890 + 3u;
        uint _2370 = _1890 + 11u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _688) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _765;
        float _2387 = cbLight._m0[_2366].y + _766;
        float _2388 = cbLight._m0[_2366].z + _767;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2366].xyz));
        float _4283 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2400 = dot(vec3(_685, _686, _687), vec3(_2393, _2394, _2395));
        float _4294 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4305 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2422 = 1.0 - _2385;
        float _2432 = (0.5 / (((_2058 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2422) + _2385) * _2399))) * _2399;
        float _4316 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2355 = (((_2421 * cbLight._m0[_2370].x) * _2434) * _2435) + _2245;
        _2357 = (((_2421 * cbLight._m0[_2370].y) * _2434) * _2435) + _2247;
        _2359 = (((_2421 * cbLight._m0[_2370].z) * _2434) * _2435) + _2249;
    }
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_1888.y == 0u)
    {
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2510;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2510;
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2510;
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.x;
        uint _2537 = uint((float(_2525.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2526))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2526)));
        float _2547 = (log2(_2513 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2548 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        uint _2551 = uint(isnan(14.0) ? _2548 : (isnan(_2548) ? 14.0 : min(_2548, 14.0)));
        uvec4 _2556 = texelFetch(g_lightClusterGridBuffer, int(((_2551 << 2u) + (_2537 << 6u)) >> 2u));
        uint _2557 = _2556.x;
        uint _2558 = _2525.z;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((((1u << ((_2558 >> 4u) & 15u)) + 4294967295u) & _2557) == 0u) || ((_2558 & 240u) == 0u))
        {
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
        }
        else
        {
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            uint _2809 = 0u;
            uint _2818;
            bool _2819;
            for (;;)
            {
                _2818 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                _2819 = _2818 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2819)
                {
                    frontier_phi_61_pred = _2803;
                    frontier_phi_61_pred_1 = _2808;
                    frontier_phi_61_pred_2 = _2807;
                    frontier_phi_61_pred_3 = _2806;
                    frontier_phi_61_pred_4 = _2805;
                    frontier_phi_61_pred_5 = _2804;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2818;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2809 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _2511;
                        float _2994 = _2953.y - _2512;
                        float _2995 = _2953.z - _2513;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_792, _795, _798), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4342 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _2511;
                        float _3029 = (-0.0) - _2512;
                        float _3030 = (-0.0) - _2513;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3045 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _852;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_792, _795, _798), vec3(_3035, _3036, _3037));
                        float _4358 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3070 = dot(vec3(_792, _795, _798), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4369 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3013 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3003) + _3079;
                        float _4380 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4391 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3077 * _3077) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2862 = (_3024 * _2972.x) + _2930;
                        _2863 = (_3024 * _2972.y) + _2931;
                        _2864 = (_3024 * _2972.z) + _2932;
                        _2859 = (_3105 * _2989.x) + _2927;
                        _2860 = (_3105 * _2989.y) + _2928;
                        _2861 = (_3105 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_61_pred = _2859;
                    frontier_phi_61_pred_1 = _2864;
                    frontier_phi_61_pred_2 = _2863;
                    frontier_phi_61_pred_3 = _2862;
                    frontier_phi_61_pred_4 = _2861;
                    frontier_phi_61_pred_5 = _2860;
                }
                _2659 = frontier_phi_61_pred;
                _2669 = frontier_phi_61_pred_1;
                _2667 = frontier_phi_61_pred_2;
                _2665 = frontier_phi_61_pred_3;
                _2663 = frontier_phi_61_pred_4;
                _2661 = frontier_phi_61_pred_5;
                uint _2810 = _2809 + 1u;
                if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2803 = _2659;
                    _2804 = _2661;
                    _2805 = _2663;
                    _2806 = _2665;
                    _2807 = _2667;
                    _2808 = _2669;
                    _2809 = _2810;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
        }
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.z;
        uint _2675 = (_2673 >> 8u) & 15u;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((4294967295u << _2675) & _2557) == 0u)
        {
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
        }
        else
        {
            float _2796 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
            float _2797 = _2796 * _2511;
            float _2798 = _2796 * _2512;
            float _2799 = _2796 * _2513;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2675 < ((_2673 >> 12u) & 15u))
            {
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2910 = _2658;
                float _2911 = _2660;
                float _2912 = _2662;
                float _2913 = _2664;
                float _2914 = _2666;
                float _2915 = _2668;
                uint _2916 = _2675;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2926)
                    {
                        frontier_phi_67_pred = _2913;
                        frontier_phi_67_pred_1 = _2914;
                        frontier_phi_67_pred_2 = _2915;
                        frontier_phi_67_pred_3 = _2912;
                        frontier_phi_67_pred_4 = _2911;
                        frontier_phi_67_pred_5 = _2910;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        uint _3129 = _2925;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3198;
                        vec4 _3213;
                        float _3259;
                        bool _3260;
                        for (;;)
                        {
                            uint _3140 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3185 = (_3140 * 40u) + 16u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3140 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3140 * 40u) + 24u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3234 = (_3140 * 40u) + 28u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3259 = fma(_2513, _3247.z, fma(_2512, _3247.y, _3247.x * _2511)) + _3247.w;
                            _3260 = !((fma(_2513, _3228.z, fma(_2512, _3228.y, _3228.x * _2511)) + _3228.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3260)
                            {
                                float _3287 = _3155.x - _2511;
                                float _3288 = _3155.y - _2512;
                                float _3289 = _3155.z - _2513;
                                float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                                float _3293 = inversesqrt(_3290);
                                float _3294 = _3293 * _3287;
                                float _3295 = _3293 * _3288;
                                float _3296 = _3293 * _3289;
                                float _3300 = 1.0 - (_3290 / (_3156 * _3156));
                                float _4402 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3305 = sqrt(_3290) * _3171.w;
                                float _3307 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                                float _3308 = _3307 * _3307;
                                float _3311 = ((1.0 - _3308) * dot(vec3(_3294, _3295, _3296), vec3(_792, _795, _798))) + _3308;
                                float _3314 = _3305 * _3305;
                                float _3318 = (fma(_2513, _3198.z, fma(_2512, _3198.y, _3198.x * _2511)) + _3198.w) / _3259;
                                float _3319 = (fma(_2513, _3213.z, fma(_2512, _3213.y, _3213.x * _2511)) + _3213.w) / _3259;
                                float _3323 = 1.0 - dot(vec2(_3318, _3319), vec2(_3318, _3319));
                                float _4418 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3325 = _3324 * (((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3301) / ((_3314 * 0.699999988079071044921875) + 1.0));
                                float _3337 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                                float _3338 = 1.0 - _852;
                                float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                                float _3346 = _3345 * _3345;
                                float _3347 = _3346 * _3346;
                                float _3348 = _3294 - _2797;
                                float _3349 = _3295 - _2798;
                                float _3350 = _3296 - _2799;
                                float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                                float _3358 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2797, (-0.0) - _2798, (-0.0) - _2799));
                                float _4429 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3362 = dot(vec3(_792, _795, _798), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                                float _4440 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                                float _3370 = _3307 * _3346;
                                float _3371 = _3370 * _3370;
                                float _3377 = ((1.0 - _3371) * dot(vec3(_792, _795, _798), vec3(_3294, _3295, _3296))) + _3371;
                                float _4451 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3379 = 1.0 - _3346;
                                float _3389 = (0.5 / (((_3378 * ((_3361 * _3379) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3346) * _3361))) * _3378;
                                float _4462 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3399 = (_3324 * _3301) * (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3369 * _3369) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3399 * _3183.x;
                                frontier_phi_73_pred_1 = _3399 * _3183.y;
                                frontier_phi_73_pred_2 = _3325 * _3171.z;
                                frontier_phi_73_pred_3 = _3325 * _3171.y;
                                frontier_phi_73_pred_4 = _3325 * _3171.x;
                                frontier_phi_73_pred_5 = _3399 * _3183.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_73_pred;
                            _3404 = frontier_phi_73_pred_1;
                            _3408 = frontier_phi_73_pred_2;
                            _3407 = frontier_phi_73_pred_3;
                            _3406 = frontier_phi_73_pred_4;
                            _3405 = frontier_phi_73_pred_5;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            _3115 = _3408 + _3128;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3113;
                        frontier_phi_67_pred_1 = _3114;
                        frontier_phi_67_pred_2 = _3115;
                        frontier_phi_67_pred_3 = _3112;
                        frontier_phi_67_pred_4 = _3111;
                        frontier_phi_67_pred_5 = _3110;
                    }
                    _2778 = frontier_phi_67_pred;
                    _2780 = frontier_phi_67_pred_1;
                    _2782 = frontier_phi_67_pred_2;
                    _2776 = frontier_phi_67_pred_3;
                    _2774 = frontier_phi_67_pred_4;
                    _2772 = frontier_phi_67_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2772;
                        _2911 = _2774;
                        _2912 = _2776;
                        _2913 = _2778;
                        _2914 = _2780;
                        _2915 = _2782;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2780;
                frontier_phi_55_56_ladder_1 = _2782;
                frontier_phi_55_56_ladder_2 = _2778;
                frontier_phi_55_56_ladder_3 = _2776;
                frontier_phi_55_56_ladder_4 = _2774;
                frontier_phi_55_56_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_55_56_ladder = _2666;
                frontier_phi_55_56_ladder_1 = _2668;
                frontier_phi_55_56_ladder_2 = _2664;
                frontier_phi_55_56_ladder_3 = _2662;
                frontier_phi_55_56_ladder_4 = _2660;
                frontier_phi_55_56_ladder_5 = _2658;
            }
            _2771 = frontier_phi_55_56_ladder_5;
            _2773 = frontier_phi_55_56_ladder_4;
            _2775 = frontier_phi_55_56_ladder_3;
            _2777 = frontier_phi_55_56_ladder_2;
            _2779 = frontier_phi_55_56_ladder;
            _2781 = frontier_phi_55_56_ladder_1;
        }
        float _2786 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2570 = (_2786 * _2777) + _2022;
        _2572 = (_2786 * _2779) + _2024;
        _2574 = (_2786 * _2781) + _2026;
        _2576 = ((_2771 * 0.039999999105930328369140625) * _2786) + _2355;
        _2578 = ((_2773 * 0.039999999105930328369140625) * _2786) + _2357;
        _2580 = ((_2775 * 0.039999999105930328369140625) * _2786) + _2359;
    }
    else
    {
        _2570 = _2022;
        _2572 = _2024;
        _2574 = _2026;
        _2576 = _2355;
        _2578 = _2357;
        _2580 = _2359;
    }
    float _4478 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4489 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4500 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    uint _2600 = _260 + 6u;
    float _2608 = _773 / cbSceneParam._m0[86u].x;
    float _2609 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2623 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2625 = _2623.x;
    float _2626 = _2623.y;
    float _2627 = _2623.z;
    float _2628 = _2623.w;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _2683 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _2684 = _2683 / _706;
        float _2695 = _2684 * _758;
        float _2696 = _759 * _2684;
        float _2697 = (-0.0) - _2696;
        float _2699 = _2684 * _760;
        float _2701 = (cbSceneParam._m0[77u].w * _2697) / _2683;
        float _2702 = _2701 + cbSceneParam._m0[79u].w;
        float _2703 = cbSceneParam._m0[79u].w - _2696;
        float _2709 = sqrt(((_2695 * _2695) + (_2696 * _2696)) + (_2699 * _2699));
        float _2712 = (1.0 - (cbSceneParam._m0[77u].w / _2683)) * _2709;
        float _2717 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2719 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2697 - _2701) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2702 > 0.0) ? exp2(_2717 * _2702) : (2.0 - exp2(_2719 * _2702))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2712;
        }
        else
        {
            float _2832 = 1.0 / cbSceneParam._m0[80u].x;
            float _2833 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : max(_2702, _2703));
            float _2834 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : min(_2702, _2703));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            _2872 = ((abs(_2709 / _2697) * cbSceneParam._m0[80u].y) * ((((_2843 - _2844) * 2.0) - ((exp2(_2717 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0)))) - exp2(_2717 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))))) * _2832)) - ((exp2(_2719 * _2843) - exp2(_2719 * _2844)) * _2832))) + (_2712 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2628);
        _2721 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2625;
        _2723 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2626;
        _2725 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2627;
        _2727 = _2883 * _2628;
    }
    else
    {
        _2721 = _2625;
        _2723 = _2626;
        _2725 = _2627;
        _2727 = _2628;
    }
    float _2739 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2740 = _2739 == 3.0;
    float _2741 = log2(_2727);
    float _2748 = exp2(_2741 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2570 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _836))) + ((_2576 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2749 = exp2(_2741 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2572 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _836))) + ((_2578 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2750 = exp2(_2741 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2574 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _836))) + ((_2580 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2759 = (_2739 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2759 * (_2740 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.y = _2759 * (_2740 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.z = _2759 * (_2740 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.w = cbInstanceData._m0[_2600].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2600].w;
}


