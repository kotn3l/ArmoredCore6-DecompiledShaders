#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1046;
float _3432;
float _3433;
float _3434;
float _3435;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3444 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _390 = ((_382 - _383) * cbMtdParam._m0[24u].z) + _383;
    float _392 = (cbMtdParam._m0[19u].x + dot(vec4(_344 * _334, _344 * _337, _344 * _340, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_390 * cbMtdParam._m0[21u].z);
    float _3455 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _408 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_390 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3466 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _413 = ((_393 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) * _409) + _272;
    float _414 = ((_393 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) * _409) + _273;
    float _415 = ((_393 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) * _409) + _274;
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _435 = (_428.x * 2.0) + (-1.0);
    float _436 = (_428.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_435, _436), vec2(_435, _436));
    float _3477 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _446 = (((_428.z - _317) * _393) * _409) + _317;
    float _461 = (((cbMtdParam._m0[21u].x * _322) + ((_435 - _322) * _393)) * _409) + _322;
    float _462 = (((cbMtdParam._m0[21u].x * _324) + ((_436 - _324) * _393)) * _409) + _324;
    float _463 = (((sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) - _331) * _393) * _409) + _331;
    float _468 = cbMtdParam._m0[22u].x + _313.w;
    float _471 = fma(_463, _214, fma(_462, _221, _461 * _207));
    float _474 = fma(_463, _215, fma(_462, _222, _461 * _208));
    float _477 = fma(_463, _216, fma(_462, _223, _461 * _209));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    float _482 = _481 * _471;
    float _483 = _481 * _474;
    float _484 = _481 * _477;
    float _3488 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _485 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3510 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3521 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3532 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _503 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _554 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _544);
    float _555 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _544);
    float _556 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _544);
    float _560 = inversesqrt(dot(vec3(_554, _555, _556), vec3(_554, _555, _556)));
    float _561 = _554 * _560;
    float _562 = _555 * _560;
    float _563 = _556 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _727 = sqrt(((_554 * _554) + (_555 * _555)) + (_556 * _556));
        float _733 = (cbMatDynParam._m0[5u].x * _727) + cbMatDynParam._m0[5u].y;
        float _3543 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _738 = (cbMatDynParam._m0[5u].z * _727) + cbMatDynParam._m0[5u].w;
        float _3554 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) - _734)) + _734) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_484, cbSceneParam._m0[5u].z, fma(_483, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _482));
    float _606 = fma(_484, cbSceneParam._m0[6u].z, fma(_483, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _482));
    float _609 = fma(_484, cbSceneParam._m0[7u].z, fma(_483, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _482));
    uint _622 = _226 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3565 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _647 = ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * TEXCOORD_5.w) * _643.x;
    float _648 = dot(vec3(_482, _483, _484), vec3(_561, _562, _563));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _482) - _561;
    float _656 = (_651 * _483) - _562;
    float _657 = (_651 * _484) - _563;
    float _661 = abs(dot(vec3(_561, _562, _563), vec3(_482, _483, _484)));
    float _3598 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_485);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _774 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _778 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _803 = _708 + _482;
        float _804 = _712 + _483;
        float _805 = _716 + _484;
        float _815 = fma(_805, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803)) - _770;
        float _816 = fma(_805, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803)) - _774;
        float _817 = fma(_805, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803)) - _778;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(_482, _483, _484), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3646 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_482, _483, _484), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3679 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_482, _483, _484), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3712 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1092 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1096 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1119 = _708 + _482;
        float _1120 = _712 + _483;
        float _1121 = _716 + _484;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_482, _483, _484), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3775 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_482, _483, _484), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3808 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_482, _483, _484), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3841 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1046;
        _1358 = _1046;
        _1359 = _1046;
        _1360 = _1046;
        _1361 = _1046;
        _1362 = _1046;
        _1363 = _1046;
        _1364 = _1046;
        _1365 = _1046;
        _1366 = _1046;
        _1367 = _1046;
        _1368 = _1046;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1059)) + _1059;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1060)) + _1060;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _655 * 0.5;
    float _1426 = _656 * 0.5;
    float _1427 = _657 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _485);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1555 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1558 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1586 = frontier_phi_17_15_ladder;
        }
        float _1809;
        if (_1555 > 0.0)
        {
            _1809 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1809 = frontier_phi_26_22_ladder;
        }
        float _2055;
        if (_1558 > 0.0)
        {
            _2055 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2055 = frontier_phi_38_33_ladder;
        }
        float _2057 = isnan(_1809) ? _1586 : (isnan(_1586) ? _1809 : min(_1586, _1809));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1552) + _1541;
        float _2063 = (_2058 * _1555) + _1545;
        float _2064 = (_2058 * _1558) + _1549;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2065;
        float _2069 = _2065 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 > _2069) || ((_2063 < _2067) || ((_2062 < _2067) || (_2062 > _2069))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2064, cbModelParam._m0[9u].z, fma(_2063, cbModelParam._m0[9u].y, _2062 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2064, cbModelParam._m0[10u].z, fma(_2063, cbModelParam._m0[10u].y, _2062 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2064, cbModelParam._m0[11u].z, fma(_2063, cbModelParam._m0[11u].y, _2062 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_16_38_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_16_38_ladder_2;
        _1576 = frontier_phi_16_38_ladder_1;
        _1578 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1494);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _485);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1650 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1653 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1814;
        if (_1647 > 0.0)
        {
            _1814 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1814 = frontier_phi_28_24_ladder;
        }
        float _2082;
        if (_1650 > 0.0)
        {
            _2082 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2082 = frontier_phi_40_35_ladder;
        }
        float _2287;
        if (_1653 > 0.0)
        {
            _2287 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2287 = frontier_phi_49_46_ladder;
        }
        float _2289 = isnan(_2082) ? _1814 : (isnan(_1814) ? _2082 : min(_1814, _2082));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1647) + _1636;
        float _2295 = (_2290 * _1650) + _1640;
        float _2296 = (_2290 * _1653) + _1644;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_25_49_ladder = _2495.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2495.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2495.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_25_49_ladder_2;
        _1674 = frontier_phi_25_49_ladder_1;
        _1676 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1583);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_676 * _663)) * _647;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1574)) + _1574);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1576)) + _1576);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1578)) + _1578);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_582, _583));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _647 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1767 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1771 = _1730 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_482, _483, _484));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_482, _483, _484));
    float _3977 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3988 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1747].x * _1753) * _1792) + (((cbLight._m0[_1757].x * _1722) * _1767) * _1790);
    float _1800 = ((_1753 * cbLight._m0[_1747].y) * _1792) + (((cbLight._m0[_1757].y * _1723) * _1767) * _1790);
    float _1801 = ((_1753 * cbLight._m0[_1747].z) * _1792) + (((cbLight._m0[_1757].z * _1724) * _1767) * _1790);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1799;
        _1821 = _1800;
        _1823 = _1801;
    }
    else
    {
        uint _1827 = _1730 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3999 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1846 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1799;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2026 = _1730 + 7u;
        float _2042 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4015 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2045 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1864 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1819;
        _1866 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _1821;
        _1868 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _1823;
    }
    uint _1871 = _1730 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _485) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1730].x + _561;
    float _1887 = cbLight._m0[_1730].y + _562;
    float _1888 = cbLight._m0[_1730].z + _563;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1730].xyz));
    float _4031 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _1900 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1901 = dot(vec3(_482, _483, _484), vec3(_1893, _1894, _1895));
    float _4053 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1893, _1894, _1895));
    float _4064 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1900 * ((_1899 * _1925) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1925) + _1885) * _1899))) * _1899;
    float _4075 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1952 = _1730 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _485) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1771].x + _561;
    float _1966 = cbLight._m0[_1771].y + _562;
    float _1967 = cbLight._m0[_1771].z + _563;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1771].xyz));
    float _4086 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1979 = dot(vec3(_482, _483, _484), vec3(_1972, _1973, _1974));
    float _4097 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1972, _1973, _1974));
    float _4108 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1964;
    float _2011 = (0.5 / (((_1900 * ((_1978 * _2001) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2001) + _1964) * _1978))) * _1978;
    float _4119 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2023 = (((_2000 * cbLight._m0[_1952].x) * _2013) * _1753) + ((((cbLight._m0[_1871].x * _1722) * _1924) * _1938) * _1767);
    float _2024 = (((_2000 * cbLight._m0[_1952].y) * _2013) * _1753) + ((((cbLight._m0[_1871].y * _1723) * _1924) * _1938) * _1767);
    float _2025 = (((_2000 * cbLight._m0[_1952].z) * _2013) * _1753) + ((((cbLight._m0[_1871].z * _1724) * _1924) * _1938) * _1767);
    float _2087;
    float _2089;
    float _2091;
    if (_1808)
    {
        _2087 = _2023;
        _2089 = _2024;
        _2091 = _2025;
    }
    else
    {
        uint _2093 = _1730 + 2u;
        uint _2097 = _1730 + 10u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _485) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _561;
        float _2114 = cbLight._m0[_2093].y + _562;
        float _2115 = cbLight._m0[_2093].z + _563;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2093].xyz));
        float _4130 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2127 = dot(vec3(_482, _483, _484), vec3(_2120, _2121, _2122));
        float _4141 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4152 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2149 = 1.0 - _2112;
        float _2159 = (0.5 / (((_1900 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2149) + _2112) * _2126))) * _2126;
        float _4163 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2087 = (((_2148 * cbLight._m0[_2097].x) * _2161) * _2162) + _2023;
        _2089 = (((_2148 * cbLight._m0[_2097].y) * _2161) * _2162) + _2024;
        _2091 = (((_2148 * cbLight._m0[_2097].z) * _2161) * _2162) + _2025;
    }
    float _2197;
    float _2199;
    float _2201;
    if (_1826)
    {
        _2197 = _2087;
        _2199 = _2089;
        _2201 = _2091;
    }
    else
    {
        uint _2208 = _1730 + 3u;
        uint _2212 = _1730 + 11u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _485) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _561;
        float _2229 = cbLight._m0[_2208].y + _562;
        float _2230 = cbLight._m0[_2208].z + _563;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2208].xyz));
        float _4179 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2242 = dot(vec3(_482, _483, _484), vec3(_2235, _2236, _2237));
        float _4190 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4201 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_1900 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2264) + _2227) * _2241))) * _2241;
        float _4212 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2197 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2087;
        _2199 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2089;
        _2201 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2091;
    }
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    if (_1728.y == 0u)
    {
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2352;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2352;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2352;
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.x;
        uint _2379 = uint((float(_2367.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2368))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2368)));
        float _2389 = (log2(_2355 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2390 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        uint _2393 = uint(isnan(14.0) ? _2390 : (isnan(_2390) ? 14.0 : min(_2390, 14.0)));
        uvec4 _2398 = texelFetch(g_lightClusterGridBuffer, int(((_2393 << 2u) + (_2379 << 6u)) >> 2u));
        uint _2399 = _2398.x;
        uint _2400 = _2367.z;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((((1u << ((_2400 >> 4u) & 15u)) + 4294967295u) & _2399) == 0u) || ((_2400 & 240u) == 0u))
        {
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
        }
        else
        {
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            uint _2659 = 0u;
            uint _2668;
            bool _2669;
            for (;;)
            {
                _2668 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                _2669 = _2668 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2669)
                {
                    frontier_phi_66_pred = _2653;
                    frontier_phi_66_pred_1 = _2658;
                    frontier_phi_66_pred_2 = _2657;
                    frontier_phi_66_pred_3 = _2656;
                    frontier_phi_66_pred_4 = _2655;
                    frontier_phi_66_pred_5 = _2654;
                }
                else
                {
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    uint _2804;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2657;
                    _2803 = _2658;
                    _2804 = _2668;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    for (;;)
                    {
                        uint _2808 = uint(findLSB(_2804)) + (_2659 << 5u);
                        uint _2805 = (_2804 + 4294967295u) & _2804;
                        uint _2810 = _2808 * 48u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2830 = (_2808 * 48u) + 4u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2849 = (_2808 * 48u) + 8u;
                        vec3 _2860 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x));
                        float _2864 = _2824.x - _2353;
                        float _2865 = _2824.y - _2354;
                        float _2866 = _2824.z - _2355;
                        float _2867 = dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866));
                        float _2870 = inversesqrt(_2867);
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2874 = dot(vec3(_603, _606, _609), vec3(_2871, _2872, _2873));
                        float _2879 = 1.0 - (_2867 * _2824.w);
                        float _4238 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2881 = sqrt(_2867) * _2843.w;
                        float _2884 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2874) + _2885;
                        float _2891 = _2881 * _2881;
                        float _2895 = ((isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * _2880) / ((_2891 * 0.699999988079071044921875) + 1.0);
                        float _2899 = (-0.0) - _2353;
                        float _2900 = (-0.0) - _2354;
                        float _2901 = (-0.0) - _2355;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2891 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _663;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_603, _606, _609), vec3(_2906, _2907, _2908));
                        float _4254 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2941 = dot(vec3(_603, _606, _609), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4265 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2884 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2874) + _2950;
                        float _4276 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4287 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_2948 * _2948) * ((_2891 * 2.1991131305694580078125) + 3.141590118408203125))) * _2880;
                        _2728 = (_2895 * _2843.x) + _2801;
                        _2729 = (_2895 * _2843.y) + _2802;
                        _2730 = (_2895 * _2843.z) + _2803;
                        _2725 = (_2976 * _2860.x) + _2798;
                        _2726 = (_2976 * _2860.y) + _2799;
                        _2727 = (_2976 * _2860.z) + _2800;
                        if (_2805 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2805;
                        }
                    }
                    frontier_phi_66_pred = _2725;
                    frontier_phi_66_pred_1 = _2730;
                    frontier_phi_66_pred_2 = _2729;
                    frontier_phi_66_pred_3 = _2728;
                    frontier_phi_66_pred_4 = _2727;
                    frontier_phi_66_pred_5 = _2726;
                }
                _2501 = frontier_phi_66_pred;
                _2511 = frontier_phi_66_pred_1;
                _2509 = frontier_phi_66_pred_2;
                _2507 = frontier_phi_66_pred_3;
                _2505 = frontier_phi_66_pred_4;
                _2503 = frontier_phi_66_pred_5;
                uint _2660 = _2659 + 1u;
                if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2653 = _2501;
                    _2654 = _2503;
                    _2655 = _2505;
                    _2656 = _2507;
                    _2657 = _2509;
                    _2658 = _2511;
                    _2659 = _2660;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
        }
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.z;
        uint _2517 = (_2515 >> 8u) & 15u;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((4294967295u << _2517) & _2399) == 0u)
        {
            _2621 = _2500;
            _2623 = _2502;
            _2625 = _2504;
            _2627 = _2506;
            _2629 = _2508;
            _2631 = _2510;
        }
        else
        {
            float _2646 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
            float _2647 = _2646 * _2353;
            float _2648 = _2646 * _2354;
            float _2649 = _2646 * _2355;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2517 < ((_2515 >> 12u) & 15u))
            {
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2781 = _2500;
                float _2782 = _2502;
                float _2783 = _2504;
                float _2784 = _2506;
                float _2785 = _2508;
                float _2786 = _2510;
                uint _2787 = _2517;
                uint _2796;
                bool _2797;
                for (;;)
                {
                    _2796 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                    _2797 = _2796 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2797)
                    {
                        frontier_phi_77_pred = _2786;
                        frontier_phi_77_pred_1 = _2785;
                        frontier_phi_77_pred_2 = _2784;
                        frontier_phi_77_pred_3 = _2783;
                        frontier_phi_77_pred_4 = _2782;
                        frontier_phi_77_pred_5 = _2781;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        float _3007 = _2785;
                        float _3008 = _2786;
                        uint _3009 = _2796;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3079;
                        vec4 _3095;
                        float _3141;
                        bool _3142;
                        for (;;)
                        {
                            uint _3020 = ((_2787 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3066 = (_3020 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3082 = (_3020 * 40u) + 20u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3020 * 40u) + 24u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3116 = (_3020 * 40u) + 28u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3141 = fma(_2355, _3129.z, fma(_2354, _3129.y, _3129.x * _2353)) + _3129.w;
                            _3142 = !((fma(_2355, _3110.z, fma(_2354, _3110.y, _3110.x * _2353)) + _3110.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3142)
                            {
                                float _3169 = _3035.x - _2353;
                                float _3170 = _3035.y - _2354;
                                float _3171 = _3035.z - _2355;
                                float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                                float _3175 = inversesqrt(_3172);
                                float _3176 = _3175 * _3169;
                                float _3177 = _3175 * _3170;
                                float _3178 = _3175 * _3171;
                                float _3182 = 1.0 - (_3172 / (_3036 * _3036));
                                float _4298 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3187 = sqrt(_3172) * _3051.w;
                                float _3189 = 1.39999997615814208984375 / (_3187 + 1.39999997615814208984375);
                                float _3190 = _3189 * _3189;
                                float _3193 = ((1.0 - _3190) * dot(vec3(_3176, _3177, _3178), vec3(_603, _606, _609))) + _3190;
                                float _3196 = _3187 * _3187;
                                float _3200 = (fma(_2355, _3079.z, fma(_2354, _3079.y, _3079.x * _2353)) + _3079.w) / _3141;
                                float _3201 = (fma(_2355, _3095.z, fma(_2354, _3095.y, _3095.x * _2353)) + _3095.w) / _3141;
                                float _3205 = 1.0 - dot(vec2(_3200, _3201), vec2(_3200, _3201));
                                float _4314 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3207 = _3206 * (((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3183) / ((_3196 * 0.699999988079071044921875) + 1.0));
                                float _3219 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                                float _3220 = 1.0 - _663;
                                float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                                float _3228 = _3227 * _3227;
                                float _3229 = _3228 * _3228;
                                float _3230 = _3176 - _2647;
                                float _3231 = _3177 - _2648;
                                float _3232 = _3178 - _2649;
                                float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                                float _3240 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2647, (-0.0) - _2648, (-0.0) - _2649));
                                float _4325 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3244 = dot(vec3(_603, _606, _609), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                                float _4336 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                                float _3252 = _3189 * _3228;
                                float _3253 = _3252 * _3252;
                                float _3259 = ((1.0 - _3253) * dot(vec3(_603, _606, _609), vec3(_3176, _3177, _3178))) + _3253;
                                float _4347 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3261 = 1.0 - _3228;
                                float _3271 = (0.5 / (((_3260 * ((_3243 * _3261) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3228) * _3243))) * _3260;
                                float _4358 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3281 = (_3206 * _3183) * (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3251 * _3251) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3207 * _3051.y;
                                frontier_phi_83_pred_1 = _3207 * _3051.x;
                                frontier_phi_83_pred_2 = _3281 * _3063.z;
                                frontier_phi_83_pred_3 = _3281 * _3063.y;
                                frontier_phi_83_pred_4 = _3281 * _3063.x;
                                frontier_phi_83_pred_5 = _3207 * _3051.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_83_pred;
                            _3288 = frontier_phi_83_pred_1;
                            _3287 = frontier_phi_83_pred_2;
                            _3286 = frontier_phi_83_pred_3;
                            _3285 = frontier_phi_83_pred_4;
                            _3290 = frontier_phi_83_pred_5;
                            _2993 = _3288 + _3006;
                            _2994 = _3289 + _3007;
                            _2995 = _3290 + _3008;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2992 = _3287 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2995;
                        frontier_phi_77_pred_1 = _2994;
                        frontier_phi_77_pred_2 = _2993;
                        frontier_phi_77_pred_3 = _2992;
                        frontier_phi_77_pred_4 = _2991;
                        frontier_phi_77_pred_5 = _2990;
                    }
                    _2632 = frontier_phi_77_pred;
                    _2630 = frontier_phi_77_pred_1;
                    _2628 = frontier_phi_77_pred_2;
                    _2626 = frontier_phi_77_pred_3;
                    _2624 = frontier_phi_77_pred_4;
                    _2622 = frontier_phi_77_pred_5;
                    uint _2788 = _2787 + 1u;
                    if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2781 = _2622;
                        _2782 = _2624;
                        _2783 = _2626;
                        _2784 = _2628;
                        _2785 = _2630;
                        _2786 = _2632;
                        _2787 = _2788;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2626;
                frontier_phi_58_59_ladder_1 = _2632;
                frontier_phi_58_59_ladder_2 = _2630;
                frontier_phi_58_59_ladder_3 = _2628;
                frontier_phi_58_59_ladder_4 = _2624;
                frontier_phi_58_59_ladder_5 = _2622;
            }
            else
            {
                frontier_phi_58_59_ladder = _2504;
                frontier_phi_58_59_ladder_1 = _2510;
                frontier_phi_58_59_ladder_2 = _2508;
                frontier_phi_58_59_ladder_3 = _2506;
                frontier_phi_58_59_ladder_4 = _2502;
                frontier_phi_58_59_ladder_5 = _2500;
            }
            _2621 = frontier_phi_58_59_ladder_5;
            _2623 = frontier_phi_58_59_ladder_4;
            _2625 = frontier_phi_58_59_ladder;
            _2627 = frontier_phi_58_59_ladder_3;
            _2629 = frontier_phi_58_59_ladder_2;
            _2631 = frontier_phi_58_59_ladder_1;
        }
        float _2636 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2412 = (_2636 * _2627) + _1864;
        _2414 = (_2636 * _2629) + _1866;
        _2416 = (_2636 * _2631) + _1868;
        _2418 = ((_2621 * 0.039999999105930328369140625) * _2636) + _2197;
        _2420 = ((_2623 * 0.039999999105930328369140625) * _2636) + _2199;
        _2422 = ((_2625 * 0.039999999105930328369140625) * _2636) + _2201;
    }
    else
    {
        _2412 = _1864;
        _2414 = _1866;
        _2416 = _1868;
        _2418 = _2197;
        _2420 = _2199;
        _2422 = _2201;
    }
    float _4374 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4385 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4396 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2439 = ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2412 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _647))) + ((_2418 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2440 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2414 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _647))) + ((_2420 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2441 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2416 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _647))) + ((_2422 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    uint _2442 = _226 + 6u;
    float _2450 = _582 / cbSceneParam._m0[86u].x;
    float _2451 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2465 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, (log2((isnan(cbSceneParam._m0[77u].w) ? _503 : (isnan(_503) ? cbSceneParam._m0[77u].w : min(_503, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2467 = _2465.x;
    float _2468 = _2465.y;
    float _2469 = _2465.z;
    float _2470 = _2465.w;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_503 > cbSceneParam._m0[78u].w)
    {
        float _2525 = isnan(_503) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _503 : min(cbSceneParam._m0[80u].w, _503));
        float _2526 = _2525 / _503;
        float _2537 = _2526 * _554;
        float _2538 = _555 * _2526;
        float _2539 = (-0.0) - _2538;
        float _2541 = _2526 * _556;
        float _2543 = (cbSceneParam._m0[77u].w * _2539) / _2525;
        float _2544 = _2543 + cbSceneParam._m0[79u].w;
        float _2545 = cbSceneParam._m0[79u].w - _2538;
        float _2551 = sqrt(((_2537 * _2537) + (_2538 * _2538)) + (_2541 * _2541));
        float _2554 = (1.0 - (cbSceneParam._m0[77u].w / _2525)) * _2551;
        float _2559 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2561 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2738;
        if (abs((_2539 - _2543) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2738 = ((((_2544 > 0.0) ? exp2(_2559 * _2544) : (2.0 - exp2(_2561 * _2544))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2554;
        }
        else
        {
            float _2682 = 1.0 / cbSceneParam._m0[80u].x;
            float _2683 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : max(_2544, _2545));
            float _2684 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : min(_2544, _2545));
            float _2693 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : min(_2683, 0.0));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            _2738 = ((abs(_2551 / _2539) * cbSceneParam._m0[80u].y) * ((((_2693 - _2694) * 2.0) - ((exp2(_2559 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0)))) - exp2(_2559 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))))) * _2682)) - ((exp2(_2561 * _2693) - exp2(_2561 * _2694)) * _2682))) + (_2554 * cbSceneParam._m0[80u].z);
        }
        vec4 _2740 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, 1.0), 0.0);
        float _2749 = exp2((_2738 * (-1.44269502162933349609375)) * (1.0 - _2740.w));
        float _2750 = log2(_2749);
        float _2766 = log2(_2470);
        _2563 = (exp2(_2766 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].x)) * _2740.x) / cbSceneParam._m0[78u].x)) + _2467;
        _2565 = (exp2(_2766 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].y)) * _2740.y) / cbSceneParam._m0[78u].y)) + _2468;
        _2567 = (exp2(_2766 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].z)) * _2740.z) / cbSceneParam._m0[78u].z)) + _2469;
        _2569 = _2749 * _2470;
    }
    else
    {
        _2563 = _2467;
        _2565 = _2468;
        _2567 = _2469;
        _2569 = _2470;
    }
    bool _2776;
    vec4 _2579;
    vec4 _2601;
    float _2603;
    float _2607;
    float _2608;
    float _2609;
    float _2610;
    bool _2620;
    for (;;)
    {
        _2579 = cbMatDynParam._m0[0u];
        float _2581 = roundEven(_2579.y);
        bool _2582 = _2581 == 3.0;
        float _2583 = log2(_2569);
        float _2590 = exp2(_2583 * cbSceneParam._m0[78u].x) * _2439;
        float _2591 = exp2(_2583 * cbSceneParam._m0[78u].y) * _2440;
        float _2592 = exp2(_2583 * cbSceneParam._m0[78u].z) * _2441;
        float _2599 = _570 + (-0.5);
        _2601 = cbMtdParam._m0[1u];
        _2603 = _2601.y * _2599;
        float _2606 = (_2581 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2607 = _2606 * (_2582 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2563)));
        _2608 = _2606 * (_2582 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2565)));
        _2609 = _2606 * (_2582 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2567)));
        _2610 = _2599 * 0.999000012874603271484375;
        _2620 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2620)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2610) < 0.5)
            {
                _2776 = true;
                break;
            }
        }
        uint _2717 = _622 + uint(_2579.w);
        if ((cbInstanceData._m0[_2717].w < 1.0) && ((cbInstanceData._m0[_2717].w + _2610) < 0.5))
        {
            _2776 = true;
            break;
        }
        if ((_2603 + 1.0) < _2601.x)
        {
            _2776 = true;
            break;
        }
        _2776 = false;
        break;
    }
    float _2981;
    if (_2776)
    {
        discard_state = true;
        _2981 = 0.0;
    }
    else
    {
        _2981 = cbInstanceData._m0[_2442].w;
    }
    SV_Target.x = _2607;
    SV_Target.y = _2608;
    SV_Target.z = _2609;
    SV_Target.w = _2981;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2442].w;
    discard_exit();
}


