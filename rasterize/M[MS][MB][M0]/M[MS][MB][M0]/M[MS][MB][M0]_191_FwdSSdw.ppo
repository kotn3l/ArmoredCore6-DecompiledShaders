#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1352;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _375 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _375) * cbMtdParam._m0[24u].x) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3681 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _400 = (_393 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _401 = (_393 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _402 = (_393 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].x) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3692 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _543 = ((_515.x - _534) * _393) + _534;
    float _544 = ((_515.y - _535) * _393) + _535;
    float _545 = ((_515.z - _536) * _393) + _536;
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _570 = ((_557.z - _545) * _466) + _545;
    float _573 = ((((_557.x - _543) * _466) + _543) * 2.0) + (-1.0);
    float _574 = ((((_557.y - _544) * _466) + _544) * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3703 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _580 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _619 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _628 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _631 = ((isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : min(_628, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _640 = (_631 - ((((((_621 - _622) * cbMtdParam._m0[24u].z) + _622) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _631))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3724 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _648 = (_641 * (cbMtdParam._m0[17u].x - _473)) + _473;
    float _649 = (_641 * (cbMtdParam._m0[17u].y - _474)) + _474;
    float _650 = (_641 * (cbMtdParam._m0[17u].z - _475)) + _475;
    vec4 _662 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _692 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3735 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _701 = ((((cbMtdParam._m0[10u].x - _648) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _693) + _648;
    float _702 = ((((cbMtdParam._m0[10u].y - _649) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _693) + _649;
    float _703 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _650)) * _693) + _650;
    float _708 = (((_492.z - _570) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _570;
    float _712 = ((_594.z - _708) * cbMtdParam._m0[19u].w) + _708;
    vec4 _726 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3746 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _743 = (_641 * (_726.z - _712)) + _712;
    float _746 = ((cbMtdParam._m0[23u].y - _743) * _693) + _743;
    vec4 _765 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _771 = (_765.x * 2.0) + (-1.0);
    float _772 = (_765.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3757 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _787 = (_573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_492.x * 2.0) + (-1.0)))) + (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_492.y * 2.0) + (-1.0)))) + (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _800 = (((_733 - _787) + (cbMtdParam._m0[21u].x * _787)) * _641) + _787;
    float _801 = (((_734 - _788) + (cbMtdParam._m0[21u].x * _788)) * _641) + _788;
    float _802 = (_641 * (sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _580)) + _580;
    float _813 = (((_771 - _800) + (_800 * cbMtdParam._m0[22u].z)) * _693) + _800;
    float _814 = (((_772 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _693) + _801;
    float _815 = ((sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _802) * _693) + _802;
    float _817 = cbMtdParam._m0[22u].x + _594.w;
    float _820 = fma(_815, _244 * NORMAL.x, fma(_814, _251 * TANGENT.x, (_237 * _229) * _813));
    float _823 = fma(_815, _244 * NORMAL.y, fma(_814, _251 * TANGENT.y, (_237 * _230) * _813));
    float _826 = fma(_815, _244 * NORMAL.z, fma(_814, _251 * TANGENT.z, (_237 * _231) * _813));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _3768 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _834 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3790 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3801 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3812 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _852 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _903 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _893);
    float _904 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _893);
    float _905 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _893);
    float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
    float _910 = _903 * _909;
    float _911 = _904 * _909;
    float _912 = _905 * _909;
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _940 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _943 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _957 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_957].z;
    float _3823 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _981 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_831, _832, _833), vec3(_910, _911, _912));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _831) - _910;
    float _990 = (_985 * _832) - _911;
    float _991 = (_985 * _833) - _912;
    float _995 = abs(dot(vec3(_910, _911, _912), vec3(_831, _832, _833)));
    float _3856 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_834);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1080 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1084 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1109 = _1042 + _831;
        float _1110 = _1046 + _832;
        float _1111 = _1050 + _833;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_831, _832, _833), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3904 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_831, _832, _833), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3937 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_831, _832, _833), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3970 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1390 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1394 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1398 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1421 = _1042 + _831;
        float _1422 = _1046 + _832;
        float _1423 = _1050 + _833;
        float _1433 = fma(_1423, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421)) - _1390;
        float _1434 = fma(_1423, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421)) - _1394;
        float _1435 = fma(_1423, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421)) - _1398;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1390 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1394 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[35u].z) + ((((((_1398 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1489 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1456.x + (-0.5));
        float _1491 = _1489 * (_1456.y + (-0.5));
        float _1492 = _1489 * (_1456.z + (-0.5));
        float _1499 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1463.x + (-0.5));
        float _1501 = _1499 * (_1463.y + (-0.5));
        float _1502 = _1499 * (_1463.z + (-0.5));
        float _1509 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1470.x + (-0.5));
        float _1511 = _1509 * (_1470.y + (-0.5));
        float _1512 = _1509 * (_1470.z + (-0.5));
        float _1519 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1477.x + (-0.5));
        float _1521 = _1519 * (_1477.y + (-0.5));
        float _1522 = _1519 * (_1477.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_831, _832, _833), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4033 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1553 + 1.0))) + _1558) * _1523;
        float _1568 = _1491 * 0.5;
        float _1569 = _1501 * 0.5;
        float _1570 = _1511 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_831, _832, _833), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4066 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1595 + 1.0))) + _1600) * _1524;
        float _1610 = _1492 * 0.5;
        float _1611 = _1502 * 0.5;
        float _1612 = _1512 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_831, _832, _833), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4099 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1637 + 1.0))) + _1642) * _1525;
        _1659 = _1492;
        _1660 = _1491;
        _1661 = _1490;
        _1662 = _1502;
        _1663 = _1501;
        _1664 = _1500;
        _1665 = _1512;
        _1666 = _1511;
        _1667 = _1510;
        _1668 = _1525;
        _1669 = _1524;
        _1670 = _1523;
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1352;
        _1660 = _1352;
        _1661 = _1352;
        _1662 = _1352;
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1364)) + _1364;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1365)) + _1365;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1366)) + _1366;
    float _1706 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1683));
    float _1727 = _989 * 0.5;
    float _1728 = _990 * 0.5;
    float _1729 = _991 * 0.5;
    float _1730 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1733 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1736 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1770;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1743 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1747 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1751 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1758 = dot(vec4(cbModelParam._m0[39u]), vec4(_1727, _1728, _1729, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1781;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1772 = dot(vec4(cbModelParam._m0[40u]), vec4(_1727, _1728, _1729, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1785 = (_1781 * cbModelParam._m0[1u].x) + (_1770 * (1.0 - cbModelParam._m0[1u].x));
    float _1795 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1795 : min(cbModelParam._m0[25u].z, _1795));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1858 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1861 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1889 = frontier_phi_14_12_ladder;
        }
        float _2111;
        if (_1858 > 0.0)
        {
            _2111 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2111 = frontier_phi_23_19_ladder;
        }
        float _2357;
        if (_1861 > 0.0)
        {
            _2357 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2357 = frontier_phi_35_30_ladder;
        }
        float _2359 = isnan(_2111) ? _1889 : (isnan(_1889) ? _2111 : min(_1889, _2111));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1855) + _1844;
        float _2365 = (_2360 * _1858) + _1848;
        float _2366 = (_2360 * _1861) + _1852;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1796);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_13_35_ladder_2;
        _1879 = frontier_phi_13_35_ladder_1;
        _1881 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1796);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1954 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1957 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2116;
        if (_1951 > 0.0)
        {
            _2116 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2384;
        if (_1954 > 0.0)
        {
            _2384 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2384 = frontier_phi_37_32_ladder;
        }
        float _2589;
        if (_1957 > 0.0)
        {
            _2589 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2589 = frontier_phi_46_43_ladder;
        }
        float _2591 = isnan(_2384) ? _2116 : (isnan(_2116) ? _2384 : min(_2116, _2384));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1951) + _1940;
        float _2597 = (_2592 * _1954) + _1944;
        float _2598 = (_2592 * _1957) + _1948;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_22_46_ladder = _2797.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2797.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2797.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_22_46_ladder_2;
        _1978 = frontier_phi_22_46_ladder_1;
        _1980 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1886);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1992 = ((((1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1010 * _997)) * _981;
    float _1993 = _1992 * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1994 = _1992 * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1995 = _1992 * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    vec4 _2012 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_918, _919));
    float _2014 = _2012.w;
    float _2026 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2014);
    float _2027 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2014);
    float _2028 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2014);
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _981 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2070 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2074 = _2034 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_831, _832, _833));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_831, _832, _833));
    float _4235 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4246 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2051].x * _2057) * _2095) + (((cbLight._m0[_2061].x * _2026) * _2070) * _2093);
    float _2103 = ((_2057 * cbLight._m0[_2051].y) * _2095) + (((cbLight._m0[_2061].y * _2027) * _2070) * _2093);
    float _2104 = ((_2057 * cbLight._m0[_2051].z) * _2095) + (((cbLight._m0[_2061].z * _2028) * _2070) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2034 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4257 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2148 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2328 = _2034 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4273 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2347 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2166 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2121;
        _2168 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2123;
        _2170 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2125;
    }
    uint _2173 = _2034 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _834) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2034].x + _910;
    float _2189 = cbLight._m0[_2034].y + _911;
    float _2190 = cbLight._m0[_2034].z + _912;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2034].xyz));
    float _4289 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2202 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2203 = dot(vec3(_831, _832, _833), vec3(_2195, _2196, _2197));
    float _4311 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2195, _2196, _2197));
    float _4322 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2202 * ((_2201 * _2227) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2227) + _2187) * _2201))) * _2201;
    float _4333 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2254 = _2034 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _834) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2074].x + _910;
    float _2268 = cbLight._m0[_2074].y + _911;
    float _2269 = cbLight._m0[_2074].z + _912;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2074].xyz));
    float _4344 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2281 = dot(vec3(_831, _832, _833), vec3(_2274, _2275, _2276));
    float _4355 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2274, _2275, _2276));
    float _4366 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2266;
    float _2313 = (0.5 / (((_2202 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2303) + _2266) * _2280))) * _2280;
    float _4377 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2325 = (((_2302 * cbLight._m0[_2254].x) * _2315) * _2057) + ((((cbLight._m0[_2173].x * _2026) * _2226) * _2240) * _2070);
    float _2326 = (((_2302 * cbLight._m0[_2254].y) * _2315) * _2057) + ((((cbLight._m0[_2173].y * _2027) * _2226) * _2240) * _2070);
    float _2327 = (((_2302 * cbLight._m0[_2254].z) * _2315) * _2057) + ((((cbLight._m0[_2173].z * _2028) * _2226) * _2240) * _2070);
    float _2389;
    float _2391;
    float _2393;
    if (_2110)
    {
        _2389 = _2325;
        _2391 = _2326;
        _2393 = _2327;
    }
    else
    {
        uint _2395 = _2034 + 2u;
        uint _2399 = _2034 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _834) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _910;
        float _2416 = cbLight._m0[_2395].y + _911;
        float _2417 = cbLight._m0[_2395].z + _912;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2395].xyz));
        float _4388 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2429 = dot(vec3(_831, _832, _833), vec3(_2422, _2423, _2424));
        float _4399 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4410 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2202 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2451) + _2414) * _2428))) * _2428;
        float _4421 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2389 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2325;
        _2391 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2326;
        _2393 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2327;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2128)
    {
        _2499 = _2389;
        _2501 = _2391;
        _2503 = _2393;
    }
    else
    {
        uint _2510 = _2034 + 3u;
        uint _2514 = _2034 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _834) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _910;
        float _2531 = cbLight._m0[_2510].y + _911;
        float _2532 = cbLight._m0[_2510].z + _912;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2510].xyz));
        float _4437 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2544 = dot(vec3(_831, _832, _833), vec3(_2537, _2538, _2539));
        float _4448 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4459 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2566 = 1.0 - _2529;
        float _2576 = (0.5 / (((_2202 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2566) + _2529) * _2543))) * _2543;
        float _4470 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2499 = (((_2565 * cbLight._m0[_2514].x) * _2578) * _2579) + _2389;
        _2501 = (((_2565 * cbLight._m0[_2514].y) * _2578) * _2579) + _2391;
        _2503 = (((_2565 * cbLight._m0[_2514].z) * _2578) * _2579) + _2393;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2032.y == 0u)
    {
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2654;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2654;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2654;
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2670)));
        float _2691 = (log2(_2657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2963)
                {
                    frontier_phi_61_pred = _2947;
                    frontier_phi_61_pred_1 = _2952;
                    frontier_phi_61_pred_2 = _2951;
                    frontier_phi_61_pred_3 = _2950;
                    frontier_phi_61_pred_4 = _2949;
                    frontier_phi_61_pred_5 = _2948;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2962;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2953 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _2655;
                        float _3138 = _3097.y - _2656;
                        float _3139 = _3097.z - _2657;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_937, _940, _943), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4496 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _2655;
                        float _3173 = (-0.0) - _2656;
                        float _3174 = (-0.0) - _2657;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3189 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _997;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_937, _940, _943), vec3(_3179, _3180, _3181));
                        float _4512 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3214 = dot(vec3(_937, _940, _943), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4523 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3157 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3147) + _3223;
                        float _4534 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4545 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3221 * _3221) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3006 = (_3168 * _3116.x) + _3074;
                        _3007 = (_3168 * _3116.y) + _3075;
                        _3008 = (_3168 * _3116.z) + _3076;
                        _3003 = (_3249 * _3133.x) + _3071;
                        _3004 = (_3249 * _3133.y) + _3072;
                        _3005 = (_3249 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_61_pred = _3003;
                    frontier_phi_61_pred_1 = _3008;
                    frontier_phi_61_pred_2 = _3007;
                    frontier_phi_61_pred_3 = _3006;
                    frontier_phi_61_pred_4 = _3005;
                    frontier_phi_61_pred_5 = _3004;
                }
                _2803 = frontier_phi_61_pred;
                _2813 = frontier_phi_61_pred_1;
                _2811 = frontier_phi_61_pred_2;
                _2809 = frontier_phi_61_pred_3;
                _2807 = frontier_phi_61_pred_4;
                _2805 = frontier_phi_61_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2803;
                    _2948 = _2805;
                    _2949 = _2807;
                    _2950 = _2809;
                    _2951 = _2811;
                    _2952 = _2813;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2819) & _2701) == 0u)
        {
            _2915 = _2802;
            _2917 = _2804;
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
            float _2941 = _2940 * _2655;
            float _2942 = _2940 * _2656;
            float _2943 = _2940 * _2657;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3054 = _2802;
                float _3055 = _2804;
                float _3056 = _2806;
                float _3057 = _2808;
                float _3058 = _2810;
                float _3059 = _2812;
                uint _3060 = _2819;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3070)
                    {
                        frontier_phi_67_pred = _3057;
                        frontier_phi_67_pred_1 = _3058;
                        frontier_phi_67_pred_2 = _3059;
                        frontier_phi_67_pred_3 = _3056;
                        frontier_phi_67_pred_4 = _3055;
                        frontier_phi_67_pred_5 = _3054;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        float _3269 = _3056;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        uint _3273 = _3069;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3357;
                        float _3403;
                        bool _3404;
                        for (;;)
                        {
                            uint _3284 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3284 * 40u) + 20u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3284 * 40u) + 24u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3378 = (_3284 * 40u) + 28u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3403 = fma(_2657, _3391.z, fma(_2656, _3391.y, _3391.x * _2655)) + _3391.w;
                            _3404 = !((fma(_2657, _3372.z, fma(_2656, _3372.y, _3372.x * _2655)) + _3372.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3404)
                            {
                                float _3431 = _3299.x - _2655;
                                float _3432 = _3299.y - _2656;
                                float _3433 = _3299.z - _2657;
                                float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                                float _3437 = inversesqrt(_3434);
                                float _3438 = _3437 * _3431;
                                float _3439 = _3437 * _3432;
                                float _3440 = _3437 * _3433;
                                float _3444 = 1.0 - (_3434 / (_3300 * _3300));
                                float _4556 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3449 = sqrt(_3434) * _3315.w;
                                float _3451 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                                float _3452 = _3451 * _3451;
                                float _3455 = ((1.0 - _3452) * dot(vec3(_3438, _3439, _3440), vec3(_937, _940, _943))) + _3452;
                                float _3458 = _3449 * _3449;
                                float _3462 = (fma(_2657, _3342.z, fma(_2656, _3342.y, _3342.x * _2655)) + _3342.w) / _3403;
                                float _3463 = (fma(_2657, _3357.z, fma(_2656, _3357.y, _3357.x * _2655)) + _3357.w) / _3403;
                                float _3467 = 1.0 - dot(vec2(_3462, _3463), vec2(_3462, _3463));
                                float _4572 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3469 = _3468 * (((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3445) / ((_3458 * 0.699999988079071044921875) + 1.0));
                                float _3481 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                                float _3482 = 1.0 - _997;
                                float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                                float _3490 = _3489 * _3489;
                                float _3491 = _3490 * _3490;
                                float _3492 = _3438 - _2941;
                                float _3493 = _3439 - _2942;
                                float _3494 = _3440 - _2943;
                                float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                                float _3502 = dot(vec3(_937, _940, _943), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4583 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3506 = dot(vec3(_937, _940, _943), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                                float _4594 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                                float _3514 = _3451 * _3490;
                                float _3515 = _3514 * _3514;
                                float _3521 = ((1.0 - _3515) * dot(vec3(_937, _940, _943), vec3(_3438, _3439, _3440))) + _3515;
                                float _4605 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3523 = 1.0 - _3490;
                                float _3533 = (0.5 / (((_3522 * ((_3505 * _3523) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3490) * _3505))) * _3522;
                                float _4616 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3543 = (_3468 * _3445) * (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3513 * _3513) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3543 * _3327.x;
                                frontier_phi_73_pred_1 = _3543 * _3327.y;
                                frontier_phi_73_pred_2 = _3469 * _3315.z;
                                frontier_phi_73_pred_3 = _3469 * _3315.y;
                                frontier_phi_73_pred_4 = _3469 * _3315.x;
                                frontier_phi_73_pred_5 = _3543 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_73_pred;
                            _3548 = frontier_phi_73_pred_1;
                            _3552 = frontier_phi_73_pred_2;
                            _3551 = frontier_phi_73_pred_3;
                            _3550 = frontier_phi_73_pred_4;
                            _3549 = frontier_phi_73_pred_5;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3257;
                        frontier_phi_67_pred_1 = _3258;
                        frontier_phi_67_pred_2 = _3259;
                        frontier_phi_67_pred_3 = _3256;
                        frontier_phi_67_pred_4 = _3255;
                        frontier_phi_67_pred_5 = _3254;
                    }
                    _2922 = frontier_phi_67_pred;
                    _2924 = frontier_phi_67_pred_1;
                    _2926 = frontier_phi_67_pred_2;
                    _2920 = frontier_phi_67_pred_3;
                    _2918 = frontier_phi_67_pred_4;
                    _2916 = frontier_phi_67_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2916;
                        _3055 = _2918;
                        _3056 = _2920;
                        _3057 = _2922;
                        _3058 = _2924;
                        _3059 = _2926;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2924;
                frontier_phi_55_56_ladder_1 = _2926;
                frontier_phi_55_56_ladder_2 = _2922;
                frontier_phi_55_56_ladder_3 = _2920;
                frontier_phi_55_56_ladder_4 = _2918;
                frontier_phi_55_56_ladder_5 = _2916;
            }
            else
            {
                frontier_phi_55_56_ladder = _2810;
                frontier_phi_55_56_ladder_1 = _2812;
                frontier_phi_55_56_ladder_2 = _2808;
                frontier_phi_55_56_ladder_3 = _2806;
                frontier_phi_55_56_ladder_4 = _2804;
                frontier_phi_55_56_ladder_5 = _2802;
            }
            _2915 = frontier_phi_55_56_ladder_5;
            _2917 = frontier_phi_55_56_ladder_4;
            _2919 = frontier_phi_55_56_ladder_3;
            _2921 = frontier_phi_55_56_ladder_2;
            _2923 = frontier_phi_55_56_ladder;
            _2925 = frontier_phi_55_56_ladder_1;
        }
        float _2930 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _2714 = (_2930 * _2921) + _2166;
        _2716 = (_2930 * _2923) + _2168;
        _2718 = (_2930 * _2925) + _2170;
        _2720 = ((_2915 * 0.039999999105930328369140625) * _2930) + _2499;
        _2722 = ((_2917 * 0.039999999105930328369140625) * _2930) + _2501;
        _2724 = ((_2919 * 0.039999999105930328369140625) * _2930) + _2503;
    }
    else
    {
        _2714 = _2166;
        _2716 = _2168;
        _2718 = _2170;
        _2720 = _2499;
        _2722 = _2501;
        _2724 = _2503;
    }
    float _4632 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4643 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4654 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    uint _2744 = _257 + 6u;
    float _2752 = _918 / cbSceneParam._m0[86u].x;
    float _2753 = _919 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _852 : (isnan(_852) ? cbSceneParam._m0[77u].w : min(_852, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_852 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_852) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _852 : min(cbSceneParam._m0[80u].w, _852));
        float _2828 = _2827 / _852;
        float _2839 = _2828 * _903;
        float _2840 = _904 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2843 = _2828 * _905;
        float _2845 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2846 = _2845 + cbSceneParam._m0[79u].w;
        float _2847 = cbSceneParam._m0[79u].w - _2840;
        float _2853 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2843 * _2843));
        float _2856 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2853;
        float _2861 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2863 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3016;
        if (abs((_2841 - _2845) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3016 = ((((_2846 > 0.0) ? exp2(_2861 * _2846) : (2.0 - exp2(_2863 * _2846))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2856;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : max(_2846, _2847));
            float _2978 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : min(_2846, _2847));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3016 = ((abs(_2853 / _2841) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2861 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2861 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2863 * _2987) - exp2(_2863 * _2988)) * _2976))) + (_2856 * cbSceneParam._m0[80u].z);
        }
        vec4 _3018 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3027 = exp2((_3016 * (-1.44269502162933349609375)) * (1.0 - _3018.w));
        float _3028 = log2(_3027);
        float _3044 = log2(_2772);
        _2865 = (exp2(_3044 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].x)) * _3018.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2867 = (exp2(_3044 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].y)) * _3018.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2869 = (exp2(_3044 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].z)) * _3018.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2871 = _3027 * _2772;
    }
    else
    {
        _2865 = _2769;
        _2867 = _2770;
        _2869 = _2771;
        _2871 = _2772;
    }
    float _2883 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2884 = _2883 == 3.0;
    float _2885 = log2(_2871);
    float _2892 = exp2(_2885 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2714 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _981))) + ((_2720 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2893 = exp2(_2885 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2716 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _981))) + ((_2722 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2894 = exp2(_2885 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2718 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _981))) + ((_2724 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2903 = (_2883 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2903 * (_2884 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.y = _2903 * (_2884 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.z = _2903 * (_2884 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.w = cbInstanceData._m0[_2744].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
}


