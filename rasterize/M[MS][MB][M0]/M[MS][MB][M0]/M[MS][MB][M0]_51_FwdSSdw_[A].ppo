#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1253;
float _3636;
float _3637;
float _3638;
float _3639;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3648 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3659 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3670 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3681 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    float _440 = fma(_431, _238, fma(_437, _245, _436 * _231));
    float _443 = fma(_431, _239, fma(_437, _246, _436 * _232));
    float _446 = fma(_431, _240, fma(_437, _247, _436 * _233));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _498 = (cbMtdParam._m0[19u].x + dot(vec4(_450 * _440, _450 * _443, _450 * _446, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_488 - _489) * cbMtdParam._m0[24u].z) + _489) * cbMtdParam._m0[21u].z);
    float _3692 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _501 = (-0.0) - cbMtdParam._m0[24u].y;
    float _503 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
    float _511 = _499 - ((_499 * TEXCOORD_8.x) * _504);
    float _512 = _499 - ((_499 * TEXCOORD_8.y) * _504);
    float _513 = _499 - ((_499 * TEXCOORD_8.z) * _504);
    float _520 = (_511 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) + _349;
    float _521 = (_512 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) + _350;
    float _522 = (_513 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) + _351;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _565 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_536 - _537) * cbMtdParam._m0[24u].w) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3713 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _574 = ((((cbMtdParam._m0[10u].x - _520) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _566) + _520;
    float _575 = ((((cbMtdParam._m0[10u].y - _521) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _566) + _521;
    float _576 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _522)) * _566) + _522;
    float _581 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3724 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _612 = ((_595.z - _581) * _511) + _581;
    float _615 = ((cbMtdParam._m0[23u].y - _612) * _566) + _612;
    vec4 _634 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _640 = (_634.x * 2.0) + (-1.0);
    float _641 = (_634.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3735 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _657 = ((sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) - _431) * _513) + _431;
    float _660 = (((_602 - _436) * _511) + _436) + (cbMtdParam._m0[21u].x * _436);
    float _661 = (((_603 - _437) * _512) + _437) + (cbMtdParam._m0[21u].x * _437);
    float _672 = (((_640 - _660) + (_660 * cbMtdParam._m0[22u].z)) * _566) + _660;
    float _673 = (((_641 - _661) + (_661 * cbMtdParam._m0[22u].z)) * _566) + _661;
    float _674 = (_566 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _657)) + _657;
    float _676 = cbMtdParam._m0[22u].x + _416.w;
    float _679 = fma(_674, _238, fma(_673, _245, _672 * _231));
    float _682 = fma(_674, _239, fma(_673, _246, _672 * _232));
    float _685 = fma(_674, _240, fma(_673, _247, _672 * _233));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = _689 * _679;
    float _691 = _689 * _682;
    float _692 = _689 * _685;
    float _3746 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _693 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3768 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3779 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3790 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _711 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    vec4 _775 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _777 = _775.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _934 = sqrt(((_761 * _761) + (_762 * _762)) + (_763 * _763));
        float _940 = (cbMatDynParam._m0[5u].x * _934) + cbMatDynParam._m0[5u].y;
        float _3801 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _945 = (cbMatDynParam._m0[5u].z * _934) + cbMatDynParam._m0[5u].w;
        float _3812 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) - _941)) + _941) < ((_777 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _789 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _790 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_692, cbSceneParam._m0[5u].z, fma(_691, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _690));
    float _813 = fma(_692, cbSceneParam._m0[6u].z, fma(_691, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _690));
    float _816 = fma(_692, cbSceneParam._m0[7u].z, fma(_691, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _690));
    uint _829 = _269 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3823 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _789, cbSceneParam._m0[86u].y * _790));
    float _854 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_690, _691, _692), vec3(_768, _769, _770));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _690) - _768;
    float _863 = (_858 * _691) - _769;
    float _864 = (_858 * _692) - _770;
    float _868 = abs(dot(vec3(_768, _769, _770), vec3(_690, _691, _692)));
    float _3856 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_693);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _977 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _981 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _985 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _1010 = _915 + _690;
        float _1011 = _919 + _691;
        float _1012 = _923 + _692;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _977;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _981;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _985;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_977 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_981 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_985 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_690, _691, _692), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3904 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_690, _691, _692), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3937 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_690, _691, _692), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3970 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1299 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1303 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1326 = _915 + _690;
        float _1327 = _919 + _691;
        float _1328 = _923 + _692;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_690, _691, _692), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4033 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_690, _691, _692), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4066 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_690, _691, _692), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4099 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = _1253;
        _1575 = _1253;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _862 * 0.5;
    float _1633 = _863 * 0.5;
    float _1634 = _864 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _693);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1762 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1765 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1793;
        if (_1759 > 0.0)
        {
            _1793 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1793 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1762 > 0.0)
        {
            _2016 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2262;
        if (_1765 > 0.0)
        {
            _2262 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2262 = frontier_phi_38_33_ladder;
        }
        float _2264 = isnan(_2016) ? _1793 : (isnan(_1793) ? _2016 : min(_1793, _2016));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1759) + _1748;
        float _2270 = (_2265 * _1762) + _1752;
        float _2271 = (_2265 * _1765) + _1756;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_16_38_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_16_38_ladder_2;
        _1783 = frontier_phi_16_38_ladder_1;
        _1785 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1701);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1789 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _693);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1789 : min(cbModelParam._m0[25u].w, _1789));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1843 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1847 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1851 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1854 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1857 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1860 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _2021;
        if (_1854 > 0.0)
        {
            _2021 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1857 > 0.0)
        {
            _2289 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2494;
        if (_1860 > 0.0)
        {
            _2494 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2494 = frontier_phi_49_46_ladder;
        }
        float _2496 = isnan(_2289) ? _2021 : (isnan(_2021) ? _2289 : min(_2021, _2289));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1854) + _1843;
        float _2502 = (_2497 * _1857) + _1847;
        float _2503 = (_2497 * _1860) + _1851;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1790);
            frontier_phi_25_49_ladder = _2702.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2702.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2702.x * cbModelParam._m0[1u].z;
        }
        _1879 = frontier_phi_25_49_ladder_2;
        _1881 = frontier_phi_25_49_ladder_1;
        _1883 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1790);
        _1879 = _1863.x * cbModelParam._m0[1u].z;
        _1881 = _1863.y * cbModelParam._m0[1u].z;
        _1883 = _1863.z * cbModelParam._m0[1u].z;
    }
    float _1895 = ((((1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_883 * _870)) * _854;
    float _1896 = _1895 * ((cbModelParam._m0[1u].w * (_1879 - _1781)) + _1781);
    float _1897 = _1895 * ((cbModelParam._m0[1u].w * (_1881 - _1783)) + _1783);
    float _1898 = _1895 * ((cbModelParam._m0[1u].w * (_1883 - _1785)) + _1785);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1896 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1896 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1896 * cbSceneParam._m0[91u].x));
    vec4 _1915 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_789, _790));
    float _1917 = _1915.w;
    float _1929 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1917);
    float _1930 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1917);
    float _1931 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1917);
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _854 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1974 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1978 = _1937 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_690, _691, _692));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_690, _691, _692));
    float _4235 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4246 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1954].x * _1960) * _1999) + (((cbLight._m0[_1964].x * _1929) * _1974) * _1997);
    float _2007 = ((_1960 * cbLight._m0[_1954].y) * _1999) + (((cbLight._m0[_1964].y * _1930) * _1974) * _1997);
    float _2008 = ((_1960 * cbLight._m0[_1954].z) * _1999) + (((cbLight._m0[_1964].z * _1931) * _1974) * _1997);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2006;
        _2028 = _2007;
        _2030 = _2008;
    }
    else
    {
        uint _2034 = _1937 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4257 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2053 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2006;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2233 = _1937 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4273 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2252 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2071 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2026;
        _2073 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2028;
        _2075 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2030;
    }
    uint _2078 = _1937 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _693) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1937].x + _768;
    float _2094 = cbLight._m0[_1937].y + _769;
    float _2095 = cbLight._m0[_1937].z + _770;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_1937].xyz));
    float _4289 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2107 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2108 = dot(vec3(_690, _691, _692), vec3(_2100, _2101, _2102));
    float _4311 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2100, _2101, _2102));
    float _4322 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2092;
    float _2143 = (0.5 / (((_2107 * ((_2106 * _2132) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2132) + _2092) * _2106))) * _2106;
    float _4333 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2159 = _1937 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _693) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1978].x + _768;
    float _2173 = cbLight._m0[_1978].y + _769;
    float _2174 = cbLight._m0[_1978].z + _770;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_1978].xyz));
    float _4344 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2186 = dot(vec3(_690, _691, _692), vec3(_2179, _2180, _2181));
    float _4355 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2179, _2180, _2181));
    float _4366 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2171;
    float _2218 = (0.5 / (((_2107 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2208) + _2171) * _2185))) * _2185;
    float _4377 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2230 = (((_2207 * cbLight._m0[_2159].x) * _2220) * _1960) + ((((cbLight._m0[_2078].x * _1929) * _2131) * _2145) * _1974);
    float _2231 = (((_2207 * cbLight._m0[_2159].y) * _2220) * _1960) + ((((cbLight._m0[_2078].y * _1930) * _2131) * _2145) * _1974);
    float _2232 = (((_2207 * cbLight._m0[_2159].z) * _2220) * _1960) + ((((cbLight._m0[_2078].z * _1931) * _2131) * _2145) * _1974);
    float _2294;
    float _2296;
    float _2298;
    if (_2015)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1937 + 2u;
        uint _2304 = _1937 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _693) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _768;
        float _2321 = cbLight._m0[_2300].y + _769;
        float _2322 = cbLight._m0[_2300].z + _770;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2300].xyz));
        float _4388 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2334 = dot(vec3(_690, _691, _692), vec3(_2327, _2328, _2329));
        float _4399 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4410 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_2107 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2356) + _2319) * _2333))) * _2333;
        float _4421 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2294 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2230;
        _2296 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2231;
        _2298 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2232;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2033)
    {
        _2404 = _2294;
        _2406 = _2296;
        _2408 = _2298;
    }
    else
    {
        uint _2415 = _1937 + 3u;
        uint _2419 = _1937 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _693) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _768;
        float _2436 = cbLight._m0[_2415].y + _769;
        float _2437 = cbLight._m0[_2415].z + _770;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2415].xyz));
        float _4437 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2449 = dot(vec3(_690, _691, _692), vec3(_2442, _2443, _2444));
        float _4448 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4459 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2470 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2471 = 1.0 - _2434;
        float _2481 = (0.5 / (((_2107 * ((_2448 * _2471) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2471) + _2434) * _2448))) * _2448;
        float _4470 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2404 = (((_2470 * cbLight._m0[_2419].x) * _2483) * _2484) + _2294;
        _2406 = (((_2470 * cbLight._m0[_2419].y) * _2483) * _2484) + _2296;
        _2408 = (((_2470 * cbLight._m0[_2419].z) * _2483) * _2484) + _2298;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1935.y == 0u)
    {
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2559;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2559;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2559;
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _790) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _789) / _2575)));
        float _2596 = (log2(_2562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2875)
                {
                    frontier_phi_66_pred = _2859;
                    frontier_phi_66_pred_1 = _2864;
                    frontier_phi_66_pred_2 = _2863;
                    frontier_phi_66_pred_3 = _2862;
                    frontier_phi_66_pred_4 = _2861;
                    frontier_phi_66_pred_5 = _2860;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2874;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2865 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        float _3070 = _3030.x - _2560;
                        float _3071 = _3030.y - _2561;
                        float _3072 = _3030.z - _2562;
                        float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                        float _3076 = inversesqrt(_3073);
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3080 = dot(vec3(_810, _813, _816), vec3(_3077, _3078, _3079));
                        float _3085 = 1.0 - (_3073 * _3030.w);
                        float _4496 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3087 = sqrt(_3073) * _3049.w;
                        float _3090 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3080) + _3091;
                        float _3097 = _3087 * _3087;
                        float _3101 = ((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3086) / ((_3097 * 0.699999988079071044921875) + 1.0);
                        float _3105 = (-0.0) - _2560;
                        float _3106 = (-0.0) - _2561;
                        float _3107 = (-0.0) - _2562;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3122 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _870;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_810, _813, _816), vec3(_3112, _3113, _3114));
                        float _4512 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3147 = dot(vec3(_810, _813, _816), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4523 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3090 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3080) + _3156;
                        float _4534 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4545 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3154 * _3154) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125))) * _3086;
                        _2934 = (_3101 * _3049.x) + _3007;
                        _2935 = (_3101 * _3049.y) + _3008;
                        _2936 = (_3101 * _3049.z) + _3009;
                        _2931 = (_3182 * _3066.x) + _3004;
                        _2932 = (_3182 * _3066.y) + _3005;
                        _2933 = (_3182 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_66_pred = _2931;
                    frontier_phi_66_pred_1 = _2936;
                    frontier_phi_66_pred_2 = _2935;
                    frontier_phi_66_pred_3 = _2934;
                    frontier_phi_66_pred_4 = _2933;
                    frontier_phi_66_pred_5 = _2932;
                }
                _2708 = frontier_phi_66_pred;
                _2718 = frontier_phi_66_pred_1;
                _2716 = frontier_phi_66_pred_2;
                _2714 = frontier_phi_66_pred_3;
                _2712 = frontier_phi_66_pred_4;
                _2710 = frontier_phi_66_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2708;
                    _2860 = _2710;
                    _2861 = _2712;
                    _2862 = _2714;
                    _2863 = _2716;
                    _2864 = _2718;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2724) & _2606) == 0u)
        {
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
            float _2853 = _2852 * _2560;
            float _2854 = _2852 * _2561;
            float _2855 = _2852 * _2562;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2987 = _2707;
                float _2988 = _2709;
                float _2989 = _2711;
                float _2990 = _2713;
                float _2991 = _2715;
                float _2992 = _2717;
                uint _2993 = _2724;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3003)
                    {
                        frontier_phi_77_pred = _2992;
                        frontier_phi_77_pred_1 = _2991;
                        frontier_phi_77_pred_2 = _2990;
                        frontier_phi_77_pred_3 = _2989;
                        frontier_phi_77_pred_4 = _2988;
                        frontier_phi_77_pred_5 = _2987;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        uint _3215 = _3002;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3284;
                        vec4 _3299;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3226 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3271 = (_3226 * 40u) + 16u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3226 * 40u) + 20u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3226 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3226 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_2562, _3333.z, fma(_2561, _3333.y, _3333.x * _2560)) + _3333.w;
                            _3346 = !((fma(_2562, _3314.z, fma(_2561, _3314.y, _3314.x * _2560)) + _3314.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3241.x - _2560;
                                float _3374 = _3241.y - _2561;
                                float _3375 = _3241.z - _2562;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3242 * _3242));
                                float _4556 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3391 = sqrt(_3376) * _3257.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_810, _813, _816))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_2562, _3284.z, fma(_2561, _3284.y, _3284.x * _2560)) + _3284.w) / _3345;
                                float _3405 = (fma(_2562, _3299.z, fma(_2561, _3299.y, _3299.x * _2560)) + _3299.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4572 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _870;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2853;
                                float _3435 = _3381 - _2854;
                                float _3436 = _3382 - _2855;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4583 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3448 = dot(vec3(_810, _813, _816), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4594 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_810, _813, _816), vec3(_3380, _3381, _3382))) + _3457;
                                float _4605 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4616 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3411 * _3257.y;
                                frontier_phi_83_pred_1 = _3411 * _3257.x;
                                frontier_phi_83_pred_2 = _3485 * _3269.z;
                                frontier_phi_83_pred_3 = _3485 * _3269.y;
                                frontier_phi_83_pred_4 = _3485 * _3269.x;
                                frontier_phi_83_pred_5 = _3411 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3493 = frontier_phi_83_pred;
                            _3492 = frontier_phi_83_pred_1;
                            _3491 = frontier_phi_83_pred_2;
                            _3490 = frontier_phi_83_pred_3;
                            _3489 = frontier_phi_83_pred_4;
                            _3494 = frontier_phi_83_pred_5;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3201;
                        frontier_phi_77_pred_1 = _3200;
                        frontier_phi_77_pred_2 = _3199;
                        frontier_phi_77_pred_3 = _3198;
                        frontier_phi_77_pred_4 = _3197;
                        frontier_phi_77_pred_5 = _3196;
                    }
                    _2838 = frontier_phi_77_pred;
                    _2836 = frontier_phi_77_pred_1;
                    _2834 = frontier_phi_77_pred_2;
                    _2832 = frontier_phi_77_pred_3;
                    _2830 = frontier_phi_77_pred_4;
                    _2828 = frontier_phi_77_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2828;
                        _2988 = _2830;
                        _2989 = _2832;
                        _2990 = _2834;
                        _2991 = _2836;
                        _2992 = _2838;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2832;
                frontier_phi_58_59_ladder_1 = _2838;
                frontier_phi_58_59_ladder_2 = _2836;
                frontier_phi_58_59_ladder_3 = _2834;
                frontier_phi_58_59_ladder_4 = _2830;
                frontier_phi_58_59_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_58_59_ladder = _2711;
                frontier_phi_58_59_ladder_1 = _2717;
                frontier_phi_58_59_ladder_2 = _2715;
                frontier_phi_58_59_ladder_3 = _2713;
                frontier_phi_58_59_ladder_4 = _2709;
                frontier_phi_58_59_ladder_5 = _2707;
            }
            _2827 = frontier_phi_58_59_ladder_5;
            _2829 = frontier_phi_58_59_ladder_4;
            _2831 = frontier_phi_58_59_ladder;
            _2833 = frontier_phi_58_59_ladder_3;
            _2835 = frontier_phi_58_59_ladder_2;
            _2837 = frontier_phi_58_59_ladder_1;
        }
        float _2842 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2619 = (_2842 * _2833) + _2071;
        _2621 = (_2842 * _2835) + _2073;
        _2623 = (_2842 * _2837) + _2075;
        _2625 = ((_2827 * 0.039999999105930328369140625) * _2842) + _2404;
        _2627 = ((_2829 * 0.039999999105930328369140625) * _2842) + _2406;
        _2629 = ((_2831 * 0.039999999105930328369140625) * _2842) + _2408;
    }
    else
    {
        _2619 = _2071;
        _2621 = _2073;
        _2623 = _2075;
        _2625 = _2404;
        _2627 = _2406;
        _2629 = _2408;
    }
    float _4632 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4643 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4654 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2646 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2619 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _854))) + ((_2625 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2647 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2621 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _854))) + ((_2627 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2623 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _854))) + ((_2629 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    uint _2649 = _269 + 6u;
    float _2657 = _789 / cbSceneParam._m0[86u].x;
    float _2658 = _790 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _711 : (isnan(_711) ? cbSceneParam._m0[77u].w : min(_711, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_711 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_711) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _711 : min(cbSceneParam._m0[80u].w, _711));
        float _2733 = _2732 / _711;
        float _2744 = _2733 * _761;
        float _2745 = _762 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2747 = _2733 * _763;
        float _2749 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2745;
        float _2757 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2746 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2890 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2944 = ((abs(_2757 / _2746) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2767 * _2899) - exp2(_2767 * _2900)) * _2888))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2677);
        _2769 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2771 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2773 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2775 = _2955 * _2677;
    }
    else
    {
        _2769 = _2674;
        _2771 = _2675;
        _2773 = _2676;
        _2775 = _2677;
    }
    bool _2982;
    vec4 _2785;
    vec4 _2807;
    float _2809;
    float _2813;
    float _2814;
    float _2815;
    float _2816;
    bool _2826;
    for (;;)
    {
        _2785 = cbMatDynParam._m0[0u];
        float _2787 = roundEven(_2785.y);
        bool _2788 = _2787 == 3.0;
        float _2789 = log2(_2775);
        float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * _2646;
        float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * _2647;
        float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * _2648;
        float _2805 = _777 + (-0.5);
        _2807 = cbMtdParam._m0[1u];
        _2809 = _2807.y * _2805;
        float _2812 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2813 = _2812 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
        _2814 = _2812 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
        _2815 = _2812 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
        _2816 = _2805 * 0.999000012874603271484375;
        _2826 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2826)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2816) < 0.5)
            {
                _2982 = true;
                break;
            }
        }
        uint _2923 = _829 + uint(_2785.w);
        if ((cbInstanceData._m0[_2923].w < 1.0) && ((cbInstanceData._m0[_2923].w + _2816) < 0.5))
        {
            _2982 = true;
            break;
        }
        if ((_2809 + 1.0) < _2807.x)
        {
            _2982 = true;
            break;
        }
        _2982 = false;
        break;
    }
    float _3187;
    if (_2982)
    {
        discard_state = true;
        _3187 = 0.0;
    }
    else
    {
        _3187 = cbInstanceData._m0[_2649].w;
    }
    SV_Target.x = _2813;
    SV_Target.y = _2814;
    SV_Target.z = _2815;
    SV_Target.w = _3187;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
    discard_exit();
}


