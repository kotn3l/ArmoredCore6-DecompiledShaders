#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1305;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3611 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3622 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3633 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3644 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) + _441;
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _523 = ((_493.z - _514) * _422) + _514;
    float _526 = ((((_493.x - _512) * _422) + _512) * 2.0) + (-1.0);
    float _527 = ((((_493.y - _513) * _422) + _513) * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3655 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _583 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _586 = ((isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : min(_583, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _595 = (_586 - ((((((_576 - _577) * cbMtdParam._m0[24u].z) + _577) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _586))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3676 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _603 = (_596 * (cbMtdParam._m0[17u].x - _448)) + _448;
    float _604 = (_596 * (cbMtdParam._m0[17u].y - _449)) + _449;
    float _605 = (_596 * (cbMtdParam._m0[17u].z - _450)) + _450;
    vec4 _617 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _645 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_619 - _620) * cbMtdParam._m0[24u].w) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _654 = ((((cbMtdParam._m0[10u].x - _603) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _646) + _603;
    float _655 = ((((cbMtdParam._m0[10u].y - _604) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _646) + _604;
    float _656 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _605)) * _646) + _605;
    float _661 = (((_468.z - _523) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _523;
    float _665 = ((_549.z - _661) * cbMtdParam._m0[19u].w) + _661;
    vec4 _679 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _686 = (_679.x * 2.0) + (-1.0);
    float _687 = (_679.y * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3698 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _696 = (_596 * (_679.z - _665)) + _665;
    float _699 = ((cbMtdParam._m0[23u].y - _696) * _646) + _696;
    vec4 _718 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _724 = (_718.x * 2.0) + (-1.0);
    float _725 = (_718.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3709 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _740 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_468.x * 2.0) + (-1.0)))) + (((_549.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _741 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_468.y * 2.0) + (-1.0)))) + (((_549.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _753 = (((_686 - _740) + (cbMtdParam._m0[21u].x * _740)) * _596) + _740;
    float _754 = (((_687 - _741) + (cbMtdParam._m0[21u].x * _741)) * _596) + _741;
    float _755 = (_596 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _533)) + _533;
    float _766 = (((_724 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _646) + _753;
    float _767 = (((_725 - _754) + (_754 * cbMtdParam._m0[22u].z)) * _646) + _754;
    float _768 = ((sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _755) * _646) + _755;
    float _770 = cbMtdParam._m0[22u].x + _549.w;
    float _773 = fma(_768, _241 * NORMAL.x, fma(_767, _248 * TANGENT.x, (_234 * _226) * _766));
    float _776 = fma(_768, _241 * NORMAL.y, fma(_767, _248 * TANGENT.y, (_234 * _227) * _766));
    float _779 = fma(_768, _241 * NORMAL.z, fma(_767, _248 * TANGENT.z, (_234 * _228) * _766));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3720 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _787 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3742 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3753 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3764 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    float _871 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _872 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _890 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _893 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _896 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    uint _910 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_910].z;
    float _3775 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _871, cbSceneParam._m0[86u].y * _872));
    float _934 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _930.x;
    float _935 = dot(vec3(_784, _785, _786), vec3(_863, _864, _865));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _784) - _863;
    float _943 = (_938 * _785) - _864;
    float _944 = (_938 * _786) - _865;
    float _948 = abs(dot(vec3(_863, _864, _865), vec3(_784, _785, _786)));
    float _3808 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_787);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1304;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1033 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1037 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1062 = _995 + _784;
        float _1063 = _999 + _785;
        float _1064 = _1003 + _786;
        float _1074 = fma(_1064, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062)) - _1029;
        float _1075 = fma(_1064, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062)) - _1033;
        float _1076 = fma(_1064, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062)) - _1037;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1132 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1098.x + (-0.5));
        float _1134 = _1132 * (_1098.y + (-0.5));
        float _1135 = _1132 * (_1098.z + (-0.5));
        float _1142 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1105.x + (-0.5));
        float _1144 = _1142 * (_1105.y + (-0.5));
        float _1145 = _1142 * (_1105.z + (-0.5));
        float _1152 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1112.x + (-0.5));
        float _1154 = _1152 * (_1112.y + (-0.5));
        float _1155 = _1152 * (_1112.z + (-0.5));
        float _1162 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1119.x + (-0.5));
        float _1164 = _1162 * (_1119.y + (-0.5));
        float _1165 = _1162 * (_1119.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1186 = (dot(vec3(_784, _785, _786), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1196 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3856 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1198 + 1.0))) + _1203) * _1166;
        float _1213 = _1134 * 0.5;
        float _1214 = _1144 * 0.5;
        float _1215 = _1154 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_784, _785, _786), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3889 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1240 + 1.0))) + _1245) * _1167;
        float _1255 = _1135 * 0.5;
        float _1256 = _1145 * 0.5;
        float _1257 = _1155 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_784, _785, _786), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3922 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1282 + 1.0))) + _1287) * _1168;
        _1304 = _1135;
        _1306 = _1134;
        _1307 = _1133;
        _1308 = _1145;
        _1309 = _1144;
        _1310 = _1143;
        _1311 = _1155;
        _1312 = _1154;
        _1313 = _1153;
        _1314 = _1168;
        _1315 = _1167;
        _1316 = _1166;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _1305;
        _1306 = _1305;
        _1307 = _1305;
        _1308 = _1305;
        _1309 = _1305;
        _1310 = _1305;
        _1311 = _1305;
        _1312 = _1305;
        _1313 = _1305;
        _1314 = _1305;
        _1315 = _1305;
        _1316 = _1305;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1348 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1352 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1375 = _995 + _784;
        float _1376 = _999 + _785;
        float _1377 = _1003 + _786;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_784, _785, _786), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3985 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_784, _785, _786), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4018 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_784, _785, _786), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4051 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1305;
        _1614 = _1305;
        _1615 = _1305;
        _1616 = _1305;
        _1617 = _1305;
        _1618 = _1305;
        _1619 = _1305;
        _1620 = _1305;
        _1621 = _1305;
        _1622 = _1305;
        _1623 = _1305;
        _1624 = _1305;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1317)) + _1317;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1319)) + _1319;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _942 * 0.5;
    float _1682 = _943 * 0.5;
    float _1683 = _944 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1304, _1308, _1311, _1314));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _787);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1812 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1815 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1843 = frontier_phi_14_12_ladder;
        }
        float _2044;
        if (_1812 > 0.0)
        {
            _2044 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2044 = frontier_phi_23_19_ladder;
        }
        float _2287;
        if (_1815 > 0.0)
        {
            _2287 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2287 = frontier_phi_35_30_ladder;
        }
        float _2289 = isnan(_2044) ? _1843 : (isnan(_1843) ? _2044 : min(_1843, _2044));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1809) + _1798;
        float _2295 = (_2290 * _1812) + _1802;
        float _2296 = (_2290 * _1815) + _1806;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_13_35_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_13_35_ladder_2;
        _1833 = frontier_phi_13_35_ladder_1;
        _1835 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1750);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _787);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1908 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1911 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2049;
        if (_1905 > 0.0)
        {
            _2049 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2314;
        if (_1908 > 0.0)
        {
            _2314 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2314 = frontier_phi_37_32_ladder;
        }
        float _2519;
        if (_1911 > 0.0)
        {
            _2519 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2519 = frontier_phi_46_43_ladder;
        }
        float _2521 = isnan(_2314) ? _2049 : (isnan(_2049) ? _2314 : min(_2049, _2314));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1905) + _1894;
        float _2527 = (_2522 * _1908) + _1898;
        float _2528 = (_2522 * _1911) + _1902;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_22_46_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2727.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2727.x * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_22_46_ladder_2;
        _1932 = frontier_phi_22_46_ladder_1;
        _1934 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1840);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1946 = ((((1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_963 * _950)) * _934;
    float _1947 = _1946 * ((cbModelParam._m0[1u].w * (_1930 - _1831)) + _1831);
    float _1948 = _1946 * ((cbModelParam._m0[1u].w * (_1932 - _1833)) + _1833);
    float _1949 = _1946 * ((cbModelParam._m0[1u].w * (_1934 - _1835)) + _1835);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _934 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2003 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2007 = _1970 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_784, _785, _786));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_784, _785, _786));
    float _4187 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4198 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1987].x * _1993) * _2028) + ((cbLight._m0[_1997].x * _2003) * _2026);
    float _2036 = ((_1993 * cbLight._m0[_1987].y) * _2028) + ((_2003 * cbLight._m0[_1997].y) * _2026);
    float _2037 = ((_1993 * cbLight._m0[_1987].z) * _2028) + ((_2003 * cbLight._m0[_1997].z) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1970 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4209 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2081 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2258 = _1970 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4225 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2277 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2099 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2054;
        _2101 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2056;
        _2103 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2058;
    }
    uint _2106 = _1970 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _787) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1970].x + _863;
    float _2122 = cbLight._m0[_1970].y + _864;
    float _2123 = cbLight._m0[_1970].z + _865;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_1970].xyz));
    float _4241 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2135 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2136 = dot(vec3(_784, _785, _786), vec3(_2128, _2129, _2130));
    float _4263 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2128, _2129, _2130));
    float _4274 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2135 * ((_2134 * _2160) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2160) + _2120) * _2134))) * _2134;
    float _4285 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2184 = _1970 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _787) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2007].x + _863;
    float _2198 = cbLight._m0[_2007].y + _864;
    float _2199 = cbLight._m0[_2007].z + _865;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2007].xyz));
    float _4296 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2211 = dot(vec3(_784, _785, _786), vec3(_2204, _2205, _2206));
    float _4307 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2204, _2205, _2206));
    float _4318 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2196;
    float _2243 = (0.5 / (((_2135 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2233) + _2196) * _2210))) * _2210;
    float _4329 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2255 = (((_2232 * cbLight._m0[_2184].x) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].x) * _2173) * _2003);
    float _2256 = (((_2232 * cbLight._m0[_2184].y) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].y) * _2173) * _2003);
    float _2257 = (((_2232 * cbLight._m0[_2184].z) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].z) * _2173) * _2003);
    float _2319;
    float _2321;
    float _2323;
    if (_2043)
    {
        _2319 = _2255;
        _2321 = _2256;
        _2323 = _2257;
    }
    else
    {
        uint _2325 = _1970 + 2u;
        uint _2329 = _1970 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _787) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _863;
        float _2346 = cbLight._m0[_2325].y + _864;
        float _2347 = cbLight._m0[_2325].z + _865;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2325].xyz));
        float _4340 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2359 = dot(vec3(_784, _785, _786), vec3(_2352, _2353, _2354));
        float _4351 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4362 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2381 = 1.0 - _2344;
        float _2391 = (0.5 / (((_2135 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2381) + _2344) * _2358))) * _2358;
        float _4373 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2319 = (((_2380 * cbLight._m0[_2329].x) * _2393) * _2394) + _2255;
        _2321 = (((_2380 * cbLight._m0[_2329].y) * _2393) * _2394) + _2256;
        _2323 = (((_2380 * cbLight._m0[_2329].z) * _2393) * _2394) + _2257;
    }
    float _2429;
    float _2431;
    float _2433;
    if (_2061)
    {
        _2429 = _2319;
        _2431 = _2321;
        _2433 = _2323;
    }
    else
    {
        uint _2440 = _1970 + 3u;
        uint _2444 = _1970 + 11u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _787) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _863;
        float _2461 = cbLight._m0[_2440].y + _864;
        float _2462 = cbLight._m0[_2440].z + _865;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2440].xyz));
        float _4389 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2474 = dot(vec3(_784, _785, _786), vec3(_2467, _2468, _2469));
        float _4400 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4411 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2135 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2496) + _2459) * _2473))) * _2473;
        float _4422 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2429 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2319;
        _2431 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2321;
        _2433 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2323;
    }
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_1968.y == 0u)
    {
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2584;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2584;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2584;
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.x;
        uint _2611 = uint((float(_2599.y) * floor(float(uint(cbSceneParam._m0[85u].y * _872) / _2600))) + floor(float(uint(cbSceneParam._m0[85u].x * _871) / _2600)));
        float _2621 = (log2(_2587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2622 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        uint _2625 = uint(isnan(14.0) ? _2622 : (isnan(_2622) ? 14.0 : min(_2622, 14.0)));
        uvec4 _2630 = texelFetch(g_lightClusterGridBuffer, int(((_2625 << 2u) + (_2611 << 6u)) >> 2u));
        uint _2631 = _2630.x;
        uint _2632 = _2599.z;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((((1u << ((_2632 >> 4u) & 15u)) + 4294967295u) & _2631) == 0u) || ((_2632 & 240u) == 0u))
        {
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
        }
        else
        {
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2893)
                {
                    frontier_phi_61_pred = _2877;
                    frontier_phi_61_pred_1 = _2882;
                    frontier_phi_61_pred_2 = _2881;
                    frontier_phi_61_pred_3 = _2880;
                    frontier_phi_61_pred_4 = _2879;
                    frontier_phi_61_pred_5 = _2878;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2892;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2883 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _2585;
                        float _3068 = _3027.y - _2586;
                        float _3069 = _3027.z - _2587;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_890, _893, _896), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4448 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _2585;
                        float _3103 = (-0.0) - _2586;
                        float _3104 = (-0.0) - _2587;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3119 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _950;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_890, _893, _896), vec3(_3109, _3110, _3111));
                        float _4464 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3144 = dot(vec3(_890, _893, _896), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4475 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3087 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3077) + _3153;
                        float _4486 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4497 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3151 * _3151) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2936 = (_3098 * _3046.x) + _3004;
                        _2937 = (_3098 * _3046.y) + _3005;
                        _2938 = (_3098 * _3046.z) + _3006;
                        _2933 = (_3179 * _3063.x) + _3001;
                        _2934 = (_3179 * _3063.y) + _3002;
                        _2935 = (_3179 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_61_pred = _2933;
                    frontier_phi_61_pred_1 = _2938;
                    frontier_phi_61_pred_2 = _2937;
                    frontier_phi_61_pred_3 = _2936;
                    frontier_phi_61_pred_4 = _2935;
                    frontier_phi_61_pred_5 = _2934;
                }
                _2733 = frontier_phi_61_pred;
                _2743 = frontier_phi_61_pred_1;
                _2741 = frontier_phi_61_pred_2;
                _2739 = frontier_phi_61_pred_3;
                _2737 = frontier_phi_61_pred_4;
                _2735 = frontier_phi_61_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2733;
                    _2878 = _2735;
                    _2879 = _2737;
                    _2880 = _2739;
                    _2881 = _2741;
                    _2882 = _2743;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
        }
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.z;
        uint _2749 = (_2747 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2749) & _2631) == 0u)
        {
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
            _2851 = _2738;
            _2853 = _2740;
            _2855 = _2742;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
            float _2871 = _2870 * _2585;
            float _2872 = _2870 * _2586;
            float _2873 = _2870 * _2587;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2749 < ((_2747 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2984 = _2732;
                float _2985 = _2734;
                float _2986 = _2736;
                float _2987 = _2738;
                float _2988 = _2740;
                float _2989 = _2742;
                uint _2990 = _2749;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3000)
                    {
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        uint _3203 = _2999;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3272;
                        vec4 _3287;
                        float _3333;
                        bool _3334;
                        for (;;)
                        {
                            uint _3214 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3259 = (_3214 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3214 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3214 * 40u) + 24u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3308 = (_3214 * 40u) + 28u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3333 = fma(_2587, _3321.z, fma(_2586, _3321.y, _3321.x * _2585)) + _3321.w;
                            _3334 = !((fma(_2587, _3302.z, fma(_2586, _3302.y, _3302.x * _2585)) + _3302.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3334)
                            {
                                float _3361 = _3229.x - _2585;
                                float _3362 = _3229.y - _2586;
                                float _3363 = _3229.z - _2587;
                                float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                                float _3367 = inversesqrt(_3364);
                                float _3368 = _3367 * _3361;
                                float _3369 = _3367 * _3362;
                                float _3370 = _3367 * _3363;
                                float _3374 = 1.0 - (_3364 / (_3230 * _3230));
                                float _4508 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3379 = sqrt(_3364) * _3245.w;
                                float _3381 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                                float _3382 = _3381 * _3381;
                                float _3385 = ((1.0 - _3382) * dot(vec3(_3368, _3369, _3370), vec3(_890, _893, _896))) + _3382;
                                float _3388 = _3379 * _3379;
                                float _3392 = (fma(_2587, _3272.z, fma(_2586, _3272.y, _3272.x * _2585)) + _3272.w) / _3333;
                                float _3393 = (fma(_2587, _3287.z, fma(_2586, _3287.y, _3287.x * _2585)) + _3287.w) / _3333;
                                float _3397 = 1.0 - dot(vec2(_3392, _3393), vec2(_3392, _3393));
                                float _4524 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3399 = _3398 * (((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3375) / ((_3388 * 0.699999988079071044921875) + 1.0));
                                float _3411 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3412 = 1.0 - _950;
                                float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                                float _3420 = _3419 * _3419;
                                float _3421 = _3420 * _3420;
                                float _3422 = _3368 - _2871;
                                float _3423 = _3369 - _2872;
                                float _3424 = _3370 - _2873;
                                float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                                float _3432 = dot(vec3(_890, _893, _896), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4535 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3436 = dot(vec3(_890, _893, _896), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                                float _4546 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                                float _3444 = _3381 * _3420;
                                float _3445 = _3444 * _3444;
                                float _3451 = ((1.0 - _3445) * dot(vec3(_890, _893, _896), vec3(_3368, _3369, _3370))) + _3445;
                                float _4557 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3453 = 1.0 - _3420;
                                float _3463 = (0.5 / (((_3452 * ((_3435 * _3453) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3420) * _3435))) * _3452;
                                float _4568 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3473 = (_3398 * _3375) * (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3443 * _3443) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3473 * _3257.x;
                                frontier_phi_73_pred_1 = _3473 * _3257.y;
                                frontier_phi_73_pred_2 = _3399 * _3245.z;
                                frontier_phi_73_pred_3 = _3399 * _3245.y;
                                frontier_phi_73_pred_4 = _3399 * _3245.x;
                                frontier_phi_73_pred_5 = _3473 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_73_pred;
                            _3478 = frontier_phi_73_pred_1;
                            _3482 = frontier_phi_73_pred_2;
                            _3481 = frontier_phi_73_pred_3;
                            _3480 = frontier_phi_73_pred_4;
                            _3479 = frontier_phi_73_pred_5;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3186 = _3479 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    _2852 = frontier_phi_67_pred;
                    _2854 = frontier_phi_67_pred_1;
                    _2856 = frontier_phi_67_pred_2;
                    _2850 = frontier_phi_67_pred_3;
                    _2848 = frontier_phi_67_pred_4;
                    _2846 = frontier_phi_67_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2846;
                        _2985 = _2848;
                        _2986 = _2850;
                        _2987 = _2852;
                        _2988 = _2854;
                        _2989 = _2856;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2854;
                frontier_phi_55_56_ladder_1 = _2856;
                frontier_phi_55_56_ladder_2 = _2852;
                frontier_phi_55_56_ladder_3 = _2850;
                frontier_phi_55_56_ladder_4 = _2848;
                frontier_phi_55_56_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_55_56_ladder = _2740;
                frontier_phi_55_56_ladder_1 = _2742;
                frontier_phi_55_56_ladder_2 = _2738;
                frontier_phi_55_56_ladder_3 = _2736;
                frontier_phi_55_56_ladder_4 = _2734;
                frontier_phi_55_56_ladder_5 = _2732;
            }
            _2845 = frontier_phi_55_56_ladder_5;
            _2847 = frontier_phi_55_56_ladder_4;
            _2849 = frontier_phi_55_56_ladder_3;
            _2851 = frontier_phi_55_56_ladder_2;
            _2853 = frontier_phi_55_56_ladder;
            _2855 = frontier_phi_55_56_ladder_1;
        }
        float _2860 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2644 = (_2860 * _2851) + _2099;
        _2646 = (_2860 * _2853) + _2101;
        _2648 = (_2860 * _2855) + _2103;
        _2650 = ((_2845 * 0.039999999105930328369140625) * _2860) + _2429;
        _2652 = ((_2847 * 0.039999999105930328369140625) * _2860) + _2431;
        _2654 = ((_2849 * 0.039999999105930328369140625) * _2860) + _2433;
    }
    else
    {
        _2644 = _2099;
        _2646 = _2101;
        _2648 = _2103;
        _2650 = _2429;
        _2652 = _2431;
        _2654 = _2433;
    }
    float _4584 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4595 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4606 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _2674 = _273 + 6u;
    float _2682 = _871 / cbSceneParam._m0[86u].x;
    float _2683 = _872 / cbSceneParam._m0[86u].y;
    vec4 _2697 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2699 = _2697.x;
    float _2700 = _2697.y;
    float _2701 = _2697.z;
    float _2702 = _2697.w;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2757 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2758 = _2757 / _805;
        float _2769 = _2758 * _856;
        float _2770 = _857 * _2758;
        float _2771 = (-0.0) - _2770;
        float _2773 = _2758 * _858;
        float _2775 = (cbSceneParam._m0[77u].w * _2771) / _2757;
        float _2776 = _2775 + cbSceneParam._m0[79u].w;
        float _2777 = cbSceneParam._m0[79u].w - _2770;
        float _2783 = sqrt(((_2769 * _2769) + (_2770 * _2770)) + (_2773 * _2773));
        float _2786 = (1.0 - (cbSceneParam._m0[77u].w / _2757)) * _2783;
        float _2791 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2793 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2771 - _2775) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2776 > 0.0) ? exp2(_2791 * _2776) : (2.0 - exp2(_2793 * _2776))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2786;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : max(_2776, _2777));
            float _2908 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : min(_2776, _2777));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2946 = ((abs(_2783 / _2771) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2791 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2791 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2793 * _2917) - exp2(_2793 * _2918)) * _2906))) + (_2786 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2702);
        _2795 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2699;
        _2797 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2700;
        _2799 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2701;
        _2801 = _2957 * _2702;
    }
    else
    {
        _2795 = _2699;
        _2797 = _2700;
        _2799 = _2701;
        _2801 = _2702;
    }
    float _2813 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2814 = _2813 == 3.0;
    float _2815 = log2(_2801);
    float _2822 = exp2(_2815 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2644 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _934))) + ((_2650 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1739)) * cbPerFrame._m0[3u].x));
    float _2823 = exp2(_2815 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2646 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _934))) + ((_2652 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1739)) * cbPerFrame._m0[3u].x));
    float _2824 = exp2(_2815 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2648 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _934))) + ((_2654 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1739)) * cbPerFrame._m0[3u].x));
    float _2833 = (_2813 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2833 * (_2814 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.y = _2833 * (_2814 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.z = _2833 * (_2814 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
    SV_Target.w = cbInstanceData._m0[_2674].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2674].w;
}


