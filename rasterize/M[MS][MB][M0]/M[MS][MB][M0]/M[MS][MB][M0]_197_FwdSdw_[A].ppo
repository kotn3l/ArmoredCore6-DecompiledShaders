#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1343;
float _3983;
float _3984;
float _3985;
float _3986;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3995 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4006 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4017 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4028 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _433 = (_426 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _434 = (_426 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _435 = (_426 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[24u].x) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4039 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    float _512 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _506;
    float _515 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _507;
    float _518 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _508;
    float _525 = ((_506 - _512) * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) + _512;
    float _526 = ((_507 - _515) * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) + _515;
    float _527 = ((_508 - _518) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) + _518;
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _426) + _607;
    float _617 = ((_588.y - _608) * _426) + _608;
    float _618 = ((_588.z - _609) * _426) + _609;
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_630.z - _618) * _499) + _618;
    float _646 = ((((_630.x - _616) * _499) + _616) * 2.0) + (-1.0);
    float _647 = ((((_630.y - _617) * _499) + _617) * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _4050 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))));
    vec4 _666 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _700 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_686 - _687) * cbMtdParam._m0[24u].z) + _687) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4061 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _708 = (_701 * ((_546.x * cbMtdParam._m0[18u].x) - _525)) + _525;
    float _709 = (_701 * ((_546.y * cbMtdParam._m0[18u].y) - _526)) + _526;
    float _710 = (_701 * ((_546.z * cbMtdParam._m0[18u].z) - _527)) + _527;
    float _715 = (((_565.z - _643) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _643;
    vec4 _728 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4072 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_701 * (_728.z - _715)) + _715;
    float _750 = _646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_565.x * 2.0) + (-1.0)));
    float _751 = _647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_565.y * 2.0) + (-1.0)));
    float _763 = (((_735 - _750) + (cbMtdParam._m0[21u].x * _750)) * _701) + _750;
    float _764 = (((_736 - _751) + (cbMtdParam._m0[21u].x * _751)) * _701) + _751;
    float _765 = (_701 * (sqrt(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) - _653)) + _653;
    float _767 = cbMtdParam._m0[22u].x + _666.w;
    float _770 = fma(_765, _242 * NORMAL.x, fma(_764, _249 * TANGENT.x, (_235 * _227) * _763));
    float _773 = fma(_765, _242 * NORMAL.y, fma(_764, _249 * TANGENT.y, (_235 * _228) * _763));
    float _776 = fma(_765, _242 * NORMAL.z, fma(_764, _249 * TANGENT.z, (_235 * _229) * _763));
    float _780 = inversesqrt(dot(vec3(_770, _773, _776), vec3(_770, _773, _776)));
    float _781 = _780 * _770;
    float _782 = _780 * _773;
    float _783 = _780 * _776;
    float _4083 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _784 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4105 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4116 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4127 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _802 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _854 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _844);
    float _855 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _844);
    float _856 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _844);
    float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
    float _861 = _854 * _860;
    float _862 = _855 * _860;
    float _863 = _856 * _860;
    vec4 _868 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _870 = _868.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1024 = sqrt(((_854 * _854) + (_855 * _855)) + (_856 * _856));
        float _1030 = (cbMatDynParam._m0[5u].x * _1024) + cbMatDynParam._m0[5u].y;
        float _4138 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1035 = (cbMatDynParam._m0[5u].z * _1024) + cbMatDynParam._m0[5u].w;
        float _4149 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) - _1031)) + _1031) < ((_870 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _900 = fma(_783, cbSceneParam._m0[5u].z, fma(_782, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _781));
    float _903 = fma(_783, cbSceneParam._m0[6u].z, fma(_782, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _781));
    float _906 = fma(_783, cbSceneParam._m0[7u].z, fma(_782, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _781));
    uint _919 = _276 + 9u;
    uint _920 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_920].z;
    float _4160 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    vec4 _940 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _944 = ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * TEXCOORD_5.w) * _940.x;
    float _945 = dot(vec3(_781, _782, _783), vec3(_861, _862, _863));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _781) - _861;
    float _953 = (_948 * _782) - _862;
    float _954 = (_948 * _783) - _863;
    float _958 = abs(dot(vec3(_861, _862, _863), vec3(_781, _782, _783)));
    float _4193 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_784);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1342;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1071 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1075 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1100 = _1005 + _781;
        float _1101 = _1009 + _782;
        float _1102 = _1013 + _783;
        float _1112 = fma(_1102, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100)) - _1067;
        float _1113 = fma(_1102, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100)) - _1071;
        float _1114 = fma(_1102, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100)) - _1075;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1170 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1136.x + (-0.5));
        float _1172 = _1170 * (_1136.y + (-0.5));
        float _1173 = _1170 * (_1136.z + (-0.5));
        float _1180 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1143.x + (-0.5));
        float _1182 = _1180 * (_1143.y + (-0.5));
        float _1183 = _1180 * (_1143.z + (-0.5));
        float _1190 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1150.x + (-0.5));
        float _1192 = _1190 * (_1150.y + (-0.5));
        float _1193 = _1190 * (_1150.z + (-0.5));
        float _1200 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1157.x + (-0.5));
        float _1202 = _1200 * (_1157.y + (-0.5));
        float _1203 = _1200 * (_1157.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1224 = (dot(vec3(_781, _782, _783), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1234 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4241 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1236 + 1.0))) + _1241) * _1204;
        float _1251 = _1172 * 0.5;
        float _1252 = _1182 * 0.5;
        float _1253 = _1192 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_781, _782, _783), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4274 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1278 + 1.0))) + _1283) * _1205;
        float _1293 = _1173 * 0.5;
        float _1294 = _1183 * 0.5;
        float _1295 = _1193 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_781, _782, _783), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4307 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1320 + 1.0))) + _1325) * _1206;
        _1342 = _1173;
        _1344 = _1172;
        _1345 = _1171;
        _1346 = _1183;
        _1347 = _1182;
        _1348 = _1181;
        _1349 = _1193;
        _1350 = _1192;
        _1351 = _1191;
        _1352 = _1206;
        _1353 = _1205;
        _1354 = _1204;
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1343;
        _1344 = _1343;
        _1345 = _1343;
        _1346 = _1343;
        _1347 = _1343;
        _1348 = _1343;
        _1349 = _1343;
        _1350 = _1343;
        _1351 = _1343;
        _1352 = _1343;
        _1353 = _1343;
        _1354 = _1343;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1388 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1392 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1415 = _1005 + _781;
        float _1416 = _1009 + _782;
        float _1417 = _1013 + _783;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_781, _782, _783), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4370 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_781, _782, _783), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4403 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_781, _782, _783), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4436 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1343;
        _1654 = _1343;
        _1655 = _1343;
        _1656 = _1343;
        _1657 = _1343;
        _1658 = _1343;
        _1659 = _1343;
        _1660 = _1343;
        _1661 = _1343;
        _1662 = _1343;
        _1663 = _1343;
        _1664 = _1343;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1355)) + _1355;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1356)) + _1356;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1357)) + _1357;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _952 * 0.5;
    float _1722 = _953 * 0.5;
    float _1723 = _954 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1342, _1346, _1349, _1352));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _784);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1851 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1854 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2051;
        if (_1851 > 0.0)
        {
            _2051 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2051 = frontier_phi_26_22_ladder;
        }
        float _2346;
        if (_1854 > 0.0)
        {
            _2346 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2346 = frontier_phi_38_33_ladder;
        }
        float _2348 = isnan(_2051) ? _1882 : (isnan(_1882) ? _2051 : min(_1882, _2051));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1848) + _1837;
        float _2354 = (_2349 * _1851) + _1841;
        float _2355 = (_2349 * _1854) + _1845;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_16_38_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _784);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1946 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1949 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2056;
        if (_1943 > 0.0)
        {
            _2056 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2056 = frontier_phi_28_24_ladder;
        }
        float _2373;
        if (_1946 > 0.0)
        {
            _2373 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2373 = frontier_phi_40_35_ladder;
        }
        float _2700;
        if (_1949 > 0.0)
        {
            _2700 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2700 = frontier_phi_50_47_ladder;
        }
        float _2702 = isnan(_2373) ? _2056 : (isnan(_2056) ? _2373 : min(_2056, _2373));
        float _2703 = isnan(_2700) ? _2702 : (isnan(_2702) ? _2700 : min(_2702, _2700));
        float _2707 = (_2703 * _1943) + _1932;
        float _2708 = (_2703 * _1946) + _1936;
        float _2709 = (_2703 * _1949) + _1940;
        float _2710 = _2703 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2710;
        float _2713 = _2710 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2709 > _2713) || ((_2709 < _2711) || ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 < _2711) || (_2707 > _2713))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2709, cbModelParam._m0[17u].z, fma(_2708, cbModelParam._m0[17u].y, _2707 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2709, cbModelParam._m0[18u].z, fma(_2708, cbModelParam._m0[18u].y, _2707 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2709, cbModelParam._m0[19u].z, fma(_2708, cbModelParam._m0[19u].y, _2707 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_50_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_25_50_ladder_2;
        _1970 = frontier_phi_25_50_ladder_1;
        _1972 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1879);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1984 = ((((1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_973 * _960)) * _944;
    float _1985 = _1984 * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1986 = _1984 * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1987 = _1984 * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2043 = _2030 / _2042;
    float _2044 = _2034 / _2042;
    float _2045 = _2038 / _2042;
    float _2192;
    float _2193;
    float _2194;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2072 = ((uint(_2045 > cbSceneParam._m0[59u].y) + uint(_2045 > cbSceneParam._m0[59u].x)) + uint(_2045 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2073 = _2072 + 43u;
        uint _2081 = _2072 + 44u;
        uint _2089 = _2072 + 45u;
        uint _2097 = _2072 + 46u;
        float _2108 = fma(_2042, cbSceneParam._m0[_2073].w, fma(_2038, cbSceneParam._m0[_2073].z, fma(_2034, cbSceneParam._m0[_2073].y, _2030 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2042, cbSceneParam._m0[_2081].w, fma(_2038, cbSceneParam._m0[_2081].z, fma(_2034, cbSceneParam._m0[_2081].y, _2030 * cbSceneParam._m0[_2081].x)));
        float _2120 = fma(_2042, cbSceneParam._m0[_2097].w, fma(_2038, cbSceneParam._m0[_2097].z, fma(_2034, cbSceneParam._m0[_2097].y, _2030 * cbSceneParam._m0[_2097].x)));
        float _2125 = cbSceneParam._m0[33u].z * _2120;
        float _2127 = cbSceneParam._m0[33u].w * _2120;
        float _2130 = fma(_2042, cbSceneParam._m0[_2089].w, fma(_2038, cbSceneParam._m0[_2089].z, fma(_2034, cbSceneParam._m0[_2089].y, _2030 * cbSceneParam._m0[_2089].x))) / _2120;
        float _2178 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
        float _4562 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2185 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 + _2108) / _2120, (_2127 + _2112) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2108) / _2120, (_2112 - _2125) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2125) / _2120, (_2112 - _2127) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2127) / _2120, (_2125 + _2112) / _2120), _2130), 0.0)).x), vec4(0.25)));
        _2192 = 1.0 - (_2185 * cbSceneParam._m0[34u].x);
        _2193 = 1.0 - (_2185 * cbSceneParam._m0[34u].y);
        _2194 = 1.0 - (_2185 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2192 = 1.0;
        _2193 = 1.0;
        _2194 = 1.0;
    }
    float _2258;
    float _2260;
    float _2262;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2246 = fma(_2042, cbSceneParam._m0[63u].w, fma(_2038, cbSceneParam._m0[63u].z, fma(_2034, cbSceneParam._m0[63u].y, _2030 * cbSceneParam._m0[63u].x)));
        float _2247 = fma(_2042, cbSceneParam._m0[60u].w, fma(_2038, cbSceneParam._m0[60u].z, fma(_2034, cbSceneParam._m0[60u].y, _2030 * cbSceneParam._m0[60u].x))) / _2246;
        float _2248 = fma(_2042, cbSceneParam._m0[61u].w, fma(_2038, cbSceneParam._m0[61u].z, fma(_2034, cbSceneParam._m0[61u].y, _2030 * cbSceneParam._m0[61u].x))) / _2246;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2247 >= cbSceneParam._m0[64u].x) && (_2248 >= cbSceneParam._m0[64u].y)) && (_2247 <= cbSceneParam._m0[64u].z)) && (_2248 <= cbSceneParam._m0[64u].w))
        {
            float _2386 = fma(_2042, cbSceneParam._m0[62u].w, fma(_2038, cbSceneParam._m0[62u].z, fma(_2034, cbSceneParam._m0[62u].y, _2030 * cbSceneParam._m0[62u].x))) / _2246;
            float _2390 = isnan(cbSceneParam._m0[41u].w) ? _2386 : (isnan(_2386) ? cbSceneParam._m0[41u].w : max(_2386, cbSceneParam._m0[41u].w));
            float _2433 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
            float _4578 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
            float _2440 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2247, cbSceneParam._m0[33u].w + _2248), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2247, _2248 - cbSceneParam._m0[33u].z), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].z, _2248 - cbSceneParam._m0[33u].w), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2248), _2390), 0.0)).x), vec4(0.25)));
            float _2444 = 1.0 - (_2440 * cbSceneParam._m0[34u].x);
            float _2445 = 1.0 - (_2440 * cbSceneParam._m0[34u].y);
            float _2446 = 1.0 - (_2440 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2446) ? _2194 : (isnan(_2194) ? _2446 : min(_2194, _2446));
            frontier_phi_37_36_ladder_1 = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
            frontier_phi_37_36_ladder_2 = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
        }
        else
        {
            frontier_phi_37_36_ladder = _2194;
            frontier_phi_37_36_ladder_1 = _2193;
            frontier_phi_37_36_ladder_2 = _2192;
        }
        _2258 = frontier_phi_37_36_ladder_2;
        _2260 = frontier_phi_37_36_ladder_1;
        _2262 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2258 = _2192;
        _2260 = _2193;
        _2262 = _2194;
    }
    uvec4 _2267 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2269 = _2267.x * 14u;
    uint _2270 = _2269 + 13u;
    float _2277 = _944 + (-1.0);
    float _2282 = (cbLight._m0[_2270].x * _2277) + 1.0;
    float _2283 = (cbLight._m0[_2270].y * _2277) + 1.0;
    float _2284 = (cbLight._m0[_2270].z * _2277) + 1.0;
    float _2285 = (cbLight._m0[_2270].w * _2277) + 1.0;
    uint _2286 = _2269 + 5u;
    float _2292 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2296 = _2269 + 4u;
    float _2305 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2309 = _2269 | 1u;
    float _2320 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_781, _782, _783));
    float _2323 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_781, _782, _783));
    float _4614 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _4625 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2328 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2330 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2337 = ((cbLight._m0[_2286].x * _2292) * _2330) + (((cbLight._m0[_2296].x * _2258) * _2305) * _2328);
    float _2338 = ((_2292 * cbLight._m0[_2286].y) * _2330) + (((cbLight._m0[_2296].y * _2260) * _2305) * _2328);
    float _2339 = ((_2292 * cbLight._m0[_2286].z) * _2330) + (((cbLight._m0[_2296].z * _2262) * _2305) * _2328);
    uvec4 _2343 = floatBitsToUint(cbLight._m0[_2269 + 12u]);
    bool _2345 = _2343.x == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2345)
    {
        _2447 = _2337;
        _2449 = _2338;
        _2451 = _2339;
    }
    else
    {
        uint _2455 = _2269 + 6u;
        float _2471 = (dot(vec3(cbLight._m0[_2269 + 2u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4636 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2474 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2447 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2337;
        _2449 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2338;
        _2451 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2339;
    }
    bool _2454 = _2343.y == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2454)
    {
        _2509 = _2447;
        _2511 = _2449;
        _2513 = _2451;
    }
    else
    {
        uint _2671 = _2269 + 7u;
        float _2687 = (dot(vec3(cbLight._m0[_2269 + 3u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4652 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2690 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2509 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2447;
        _2511 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2449;
        _2513 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2451;
    }
    uint _2516 = _2269 + 8u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _784) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2269].x + _861;
    float _2532 = cbLight._m0[_2269].y + _862;
    float _2533 = cbLight._m0[_2269].z + _863;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2269].xyz));
    float _4668 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2545 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2546 = dot(vec3(_781, _782, _783), vec3(_2538, _2539, _2540));
    float _4690 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2538, _2539, _2540));
    float _4701 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2530 * _2530;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2570 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2545 * ((_2544 * _2570) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2570) + _2530) * _2544))) * _2544;
    float _4712 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    uint _2597 = _2269 + 9u;
    float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _784) * 0.949999988079071044921875);
    float _2609 = _2608 * _2608;
    float _2610 = cbLight._m0[_2309].x + _861;
    float _2611 = cbLight._m0[_2309].y + _862;
    float _2612 = cbLight._m0[_2309].z + _863;
    float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
    float _2617 = _2616 * _2610;
    float _2618 = _2616 * _2611;
    float _2619 = _2616 * _2612;
    float _2620 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2309].xyz));
    float _4723 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2624 = dot(vec3(_781, _782, _783), vec3(_2617, _2618, _2619));
    float _4734 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2617, _2618, _2619));
    float _4745 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2609 * _2609;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2645 = (exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2646 = 1.0 - _2609;
    float _2656 = (0.5 / (((_2545 * ((_2623 * _2646) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2646) + _2609) * _2623))) * _2623;
    float _4756 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    float _2668 = (((_2645 * cbLight._m0[_2597].x) * _2658) * _2292) + ((((cbLight._m0[_2516].x * _2258) * _2569) * _2583) * _2305);
    float _2669 = (((_2645 * cbLight._m0[_2597].y) * _2658) * _2292) + ((((cbLight._m0[_2516].y * _2260) * _2569) * _2583) * _2305);
    float _2670 = (((_2645 * cbLight._m0[_2597].z) * _2658) * _2292) + ((((cbLight._m0[_2516].z * _2262) * _2569) * _2583) * _2305);
    float _2726;
    float _2728;
    float _2730;
    if (_2345)
    {
        _2726 = _2668;
        _2728 = _2669;
        _2730 = _2670;
    }
    else
    {
        uint _2732 = _2269 + 2u;
        uint _2736 = _2269 + 10u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _784) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _861;
        float _2753 = cbLight._m0[_2732].y + _862;
        float _2754 = cbLight._m0[_2732].z + _863;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2732].xyz));
        float _4767 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2766 = dot(vec3(_781, _782, _783), vec3(_2759, _2760, _2761));
        float _4778 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4789 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2787 = (exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2788 = 1.0 - _2751;
        float _2798 = (0.5 / (((_2545 * ((_2765 * _2788) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2788) + _2751) * _2765))) * _2765;
        float _4800 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2726 = (((_2787 * cbLight._m0[_2736].x) * _2800) * _2801) + _2668;
        _2728 = (((_2787 * cbLight._m0[_2736].y) * _2800) * _2801) + _2669;
        _2730 = (((_2787 * cbLight._m0[_2736].z) * _2800) * _2801) + _2670;
    }
    float _2832;
    float _2834;
    float _2836;
    if (_2454)
    {
        _2832 = _2726;
        _2834 = _2728;
        _2836 = _2730;
    }
    else
    {
        uint _2843 = _2269 + 3u;
        uint _2847 = _2269 + 11u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _784) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _861;
        float _2864 = cbLight._m0[_2843].y + _862;
        float _2865 = cbLight._m0[_2843].z + _863;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2843].xyz));
        float _4816 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2877 = dot(vec3(_781, _782, _783), vec3(_2870, _2871, _2872));
        float _4827 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4838 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2898 = (exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2899 = 1.0 - _2862;
        float _2909 = (0.5 / (((_2545 * ((_2876 * _2899) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2899) + _2862) * _2876))) * _2876;
        float _4849 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2911 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2912 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2832 = (((_2898 * cbLight._m0[_2847].x) * _2911) * _2912) + _2726;
        _2834 = (((_2898 * cbLight._m0[_2847].y) * _2911) * _2912) + _2728;
        _2836 = (((_2898 * cbLight._m0[_2847].z) * _2911) * _2912) + _2730;
    }
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_2267.y == 0u)
    {
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.x;
        uint _2945 = uint((float(_2933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2934))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2934)));
        float _2955 = (log2(_2045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2956 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        uint _2959 = uint(isnan(14.0) ? _2956 : (isnan(_2956) ? 14.0 : min(_2956, 14.0)));
        uvec4 _2964 = texelFetch(g_lightClusterGridBuffer, int(((_2959 << 2u) + (_2945 << 6u)) >> 2u));
        uint _2965 = _2964.x;
        uint _2966 = _2933.z;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((((1u << ((_2966 >> 4u) & 15u)) + 4294967295u) & _2965) == 0u) || ((_2966 & 240u) == 0u))
        {
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
        }
        else
        {
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3214)
                {
                    frontier_phi_71_pred = _3203;
                    frontier_phi_71_pred_1 = _3202;
                    frontier_phi_71_pred_2 = _3201;
                    frontier_phi_71_pred_3 = _3200;
                    frontier_phi_71_pred_4 = _3199;
                    frontier_phi_71_pred_5 = _3198;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2043;
                        float _3410 = _3369.y - _2044;
                        float _3411 = _3369.z - _2045;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_900, _903, _906), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4875 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2043;
                        float _3445 = (-0.0) - _2044;
                        float _3446 = (-0.0) - _2045;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3460 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3461 = 1.0 - _960;
                        float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                        float _3469 = _3468 * _3468;
                        float _3470 = _3469 * _3469;
                        float _3471 = _3451 + _3416;
                        float _3472 = _3452 + _3417;
                        float _3473 = _3453 + _3418;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3481 = dot(vec3(_900, _903, _906), vec3(_3451, _3452, _3453));
                        float _4891 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3485 = dot(vec3(_900, _903, _906), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                        float _4902 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                        float _3493 = _3429 * _3469;
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3419) + _3494;
                        float _4913 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3499 = 1.0 - _3469;
                        float _3509 = (0.5 / (((_3498 * ((_3484 * _3499) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3469) * _3484))) * _3498;
                        float _4924 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3520 = (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3492 * _3492) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3440 * _3388.x) + _3346;
                        _3274 = (_3440 * _3388.y) + _3347;
                        _3275 = (_3440 * _3388.z) + _3348;
                        _3270 = (_3520 * _3405.x) + _3343;
                        _3271 = (_3520 * _3405.y) + _3344;
                        _3272 = (_3520 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_71_pred = _3275;
                    frontier_phi_71_pred_1 = _3274;
                    frontier_phi_71_pred_2 = _3273;
                    frontier_phi_71_pred_3 = _3272;
                    frontier_phi_71_pred_4 = _3271;
                    frontier_phi_71_pred_5 = _3270;
                }
                _3056 = frontier_phi_71_pred;
                _3054 = frontier_phi_71_pred_1;
                _3052 = frontier_phi_71_pred_2;
                _3050 = frontier_phi_71_pred_3;
                _3048 = frontier_phi_71_pred_4;
                _3046 = frontier_phi_71_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3046;
                    _3199 = _3048;
                    _3200 = _3050;
                    _3201 = _3052;
                    _3202 = _3054;
                    _3203 = _3056;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
        }
        uvec4 _3059 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3060 = _3059.z;
        uint _3062 = (_3060 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3062) & _2965) == 0u)
        {
            _3166 = _3045;
            _3168 = _3047;
            _3170 = _3049;
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
            float _3192 = _3191 * _2043;
            float _3193 = _3191 * _2044;
            float _3194 = _3191 * _2045;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3062 < ((_3060 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3045;
                float _3327 = _3047;
                float _3328 = _3049;
                float _3329 = _3051;
                float _3330 = _3053;
                float _3331 = _3055;
                uint _3332 = _3062;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3342)
                    {
                        frontier_phi_82_pred = _3331;
                        frontier_phi_82_pred_1 = _3330;
                        frontier_phi_82_pred_2 = _3329;
                        frontier_phi_82_pred_3 = _3328;
                        frontier_phi_82_pred_4 = _3327;
                        frontier_phi_82_pred_5 = _3326;
                    }
                    else
                    {
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        uint _3553 = _3341;
                        uint _3554;
                        vec4 _3579;
                        float _3580;
                        vec4 _3595;
                        vec3 _3607;
                        vec4 _3622;
                        vec4 _3637;
                        float _3683;
                        bool _3684;
                        for (;;)
                        {
                            uint _3564 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3553));
                            _3554 = (_3553 + 4294967295u) & _3553;
                            uint _3566 = _3564 * 40u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3580 = _3579.w;
                            uint _3582 = (_3564 * 40u) + 4u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3564 * 40u) + 8u;
                            _3607 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x));
                            uint _3609 = (_3564 * 40u) + 16u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3624 = (_3564 * 40u) + 20u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3564 * 40u) + 24u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3658 = (_3564 * 40u) + 28u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            _3683 = fma(_2045, _3671.z, fma(_2044, _3671.y, _3671.x * _2043)) + _3671.w;
                            _3684 = !((fma(_2045, _3652.z, fma(_2044, _3652.y, _3652.x * _2043)) + _3652.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3684)
                            {
                                float _3711 = _3579.x - _2043;
                                float _3712 = _3579.y - _2044;
                                float _3713 = _3579.z - _2045;
                                float _3714 = dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713));
                                float _3717 = inversesqrt(_3714);
                                float _3718 = _3717 * _3711;
                                float _3719 = _3717 * _3712;
                                float _3720 = _3717 * _3713;
                                float _3724 = 1.0 - (_3714 / (_3580 * _3580));
                                float _4935 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3729 = sqrt(_3714) * _3595.w;
                                float _3731 = 1.39999997615814208984375 / (_3729 + 1.39999997615814208984375);
                                float _3732 = _3731 * _3731;
                                float _3735 = ((1.0 - _3732) * dot(vec3(_3718, _3719, _3720), vec3(_900, _903, _906))) + _3732;
                                float _3738 = _3729 * _3729;
                                float _3742 = (fma(_2045, _3622.z, fma(_2044, _3622.y, _3622.x * _2043)) + _3622.w) / _3683;
                                float _3743 = (fma(_2045, _3637.z, fma(_2044, _3637.y, _3637.x * _2043)) + _3637.w) / _3683;
                                float _3747 = 1.0 - dot(vec2(_3742, _3743), vec2(_3742, _3743));
                                float _4951 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3749 = _3748 * (((isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0))) * _3725) / ((_3738 * 0.699999988079071044921875) + 1.0));
                                float _3761 = exp2(log2(1.0 / ((_3738 * 3.5) + 5.0)) * 0.25);
                                float _3762 = 1.0 - _960;
                                float _3769 = sqrt(1.0 - ((1.0 - (_3762 * _3762)) * (1.0 - (_3761 * _3761))));
                                float _3770 = _3769 * _3769;
                                float _3771 = _3770 * _3770;
                                float _3772 = _3718 - _3192;
                                float _3773 = _3719 - _3193;
                                float _3774 = _3720 - _3194;
                                float _3778 = inversesqrt(dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774)));
                                float _3782 = dot(vec3(_900, _903, _906), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4962 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3786 = dot(vec3(_900, _903, _906), vec3(_3778 * _3772, _3778 * _3773, _3778 * _3774));
                                float _4973 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3793 = ((_3789 * _3789) * (_3771 + (-1.0))) + 1.0;
                                float _3794 = _3731 * _3770;
                                float _3795 = _3794 * _3794;
                                float _3801 = ((1.0 - _3795) * dot(vec3(_900, _903, _906), vec3(_3718, _3719, _3720))) + _3795;
                                float _4984 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3803 = 1.0 - _3770;
                                float _3813 = (0.5 / (((_3802 * ((_3785 * _3803) + _3770)) + 9.9999999392252902907785028219223e-09) + (((_3802 * _3803) + _3770) * _3785))) * _3802;
                                float _4995 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3823 = (_3748 * _3725) * (((_3771 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3793 * _3793) * ((_3738 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3749 * _3595.z;
                                frontier_phi_88_pred_1 = _3749 * _3595.y;
                                frontier_phi_88_pred_2 = _3749 * _3595.x;
                                frontier_phi_88_pred_3 = _3823 * _3607.z;
                                frontier_phi_88_pred_4 = _3823 * _3607.y;
                                frontier_phi_88_pred_5 = _3823 * _3607.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_88_pred;
                            _3831 = frontier_phi_88_pred_1;
                            _3830 = frontier_phi_88_pred_2;
                            _3829 = frontier_phi_88_pred_3;
                            _3828 = frontier_phi_88_pred_4;
                            _3827 = frontier_phi_88_pred_5;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            if (_3554 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3554;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3539;
                        frontier_phi_82_pred_1 = _3538;
                        frontier_phi_82_pred_2 = _3537;
                        frontier_phi_82_pred_3 = _3536;
                        frontier_phi_82_pred_4 = _3535;
                        frontier_phi_82_pred_5 = _3534;
                    }
                    _3177 = frontier_phi_82_pred;
                    _3175 = frontier_phi_82_pred_1;
                    _3173 = frontier_phi_82_pred_2;
                    _3171 = frontier_phi_82_pred_3;
                    _3169 = frontier_phi_82_pred_4;
                    _3167 = frontier_phi_82_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3173;
                frontier_phi_63_64_ladder_1 = _3177;
                frontier_phi_63_64_ladder_2 = _3175;
                frontier_phi_63_64_ladder_3 = _3171;
                frontier_phi_63_64_ladder_4 = _3169;
                frontier_phi_63_64_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_63_64_ladder = _3051;
                frontier_phi_63_64_ladder_1 = _3055;
                frontier_phi_63_64_ladder_2 = _3053;
                frontier_phi_63_64_ladder_3 = _3049;
                frontier_phi_63_64_ladder_4 = _3047;
                frontier_phi_63_64_ladder_5 = _3045;
            }
            _3166 = frontier_phi_63_64_ladder_5;
            _3168 = frontier_phi_63_64_ladder_4;
            _3170 = frontier_phi_63_64_ladder_3;
            _3172 = frontier_phi_63_64_ladder;
            _3174 = frontier_phi_63_64_ladder_2;
            _3176 = frontier_phi_63_64_ladder_1;
        }
        float _3181 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2978 = (_3181 * _3172) + _2509;
        _2980 = (_3181 * _3174) + _2511;
        _2982 = (_3181 * _3176) + _2513;
        _2984 = ((_3166 * 0.039999999105930328369140625) * _3181) + _2832;
        _2986 = ((_3168 * 0.039999999105930328369140625) * _3181) + _2834;
        _2988 = ((_3170 * 0.039999999105930328369140625) * _3181) + _2836;
    }
    else
    {
        _2978 = _2509;
        _2980 = _2511;
        _2982 = _2513;
        _2984 = _2832;
        _2986 = _2834;
        _2988 = _2836;
    }
    float _5011 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _5022 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _5033 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _3005 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2978 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _944))) + ((_2984 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3006 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2980 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _944))) + ((_2986 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3007 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2982 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _944))) + ((_2988 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    uint _3008 = _276 + 6u;
    float _3016 = _881 / cbSceneParam._m0[86u].x;
    float _3017 = _882 / cbSceneParam._m0[86u].y;
    vec4 _3031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, (log2((isnan(cbSceneParam._m0[77u].w) ? _802 : (isnan(_802) ? cbSceneParam._m0[77u].w : min(_802, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3033 = _3031.x;
    float _3034 = _3031.y;
    float _3035 = _3031.z;
    float _3036 = _3031.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_802 > cbSceneParam._m0[78u].w)
    {
        float _3070 = isnan(_802) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _802 : min(cbSceneParam._m0[80u].w, _802));
        float _3071 = _3070 / _802;
        float _3082 = _3071 * _854;
        float _3083 = _855 * _3071;
        float _3084 = (-0.0) - _3083;
        float _3086 = _3071 * _856;
        float _3088 = (cbSceneParam._m0[77u].w * _3084) / _3070;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3083;
        float _3096 = sqrt(((_3082 * _3082) + (_3083 * _3083)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3070)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3084 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3229 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3096 / _3084) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3106 * _3238) - exp2(_3106 * _3239)) * _3227))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3036);
        _3108 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3033;
        _3110 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3034;
        _3112 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3035;
        _3114 = _3294 * _3036;
    }
    else
    {
        _3108 = _3033;
        _3110 = _3034;
        _3112 = _3035;
        _3114 = _3036;
    }
    bool _3321;
    vec4 _3124;
    vec4 _3146;
    float _3148;
    float _3152;
    float _3153;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3124 = cbMatDynParam._m0[0u];
        float _3126 = roundEven(_3124.y);
        bool _3127 = _3126 == 3.0;
        float _3128 = log2(_3114);
        float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * _3005;
        float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * _3006;
        float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * _3007;
        float _3144 = _870 + (-0.5);
        _3146 = cbMtdParam._m0[1u];
        _3148 = _3146.y * _3144;
        float _3151 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3152 = _3151 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
        _3153 = _3151 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
        _3154 = _3151 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
        _3155 = _3144 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _919 + uint(_3124.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3148 + 1.0) < _3146.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3525;
    if (_3321)
    {
        discard_state = true;
        _3525 = 0.0;
    }
    else
    {
        _3525 = cbInstanceData._m0[_3008].w;
    }
    SV_Target.x = _3152;
    SV_Target.y = _3153;
    SV_Target.z = _3154;
    SV_Target.w = _3525;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3008].w;
    discard_exit();
}


