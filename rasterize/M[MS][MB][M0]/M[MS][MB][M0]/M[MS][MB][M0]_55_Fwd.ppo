#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1097;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3403 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3414 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3425 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) + _325;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _271) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _272) + cbTextureTilingScale._m0[14u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _408 = (_399.y * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _3436 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _419 = _407 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_373.x * 2.0) + (-1.0)));
    float _420 = _408 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_373.y * 2.0) + (-1.0)));
    float _423 = fma(_414, _219, fma(_420, _226, _419 * _212));
    float _426 = fma(_414, _220, fma(_420, _227, _419 * _213));
    float _429 = fma(_414, _221, fma(_420, _228, _419 * _214));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _471 = _469.x;
    float _472 = 1.0 - _471;
    float _479 = ((_471 - _472) * cbMtdParam._m0[24u].z) + _472;
    float _481 = (cbMtdParam._m0[19u].x + dot(vec4(_433 * _423, _433 * _426, _433 * _429, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_479 * cbMtdParam._m0[21u].z);
    float _3447 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _497 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_479 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3458 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _502 = ((_482 * ((_353.x * cbMtdParam._m0[18u].x) - _332)) * _498) + _332;
    float _503 = ((_482 * ((_353.y * cbMtdParam._m0[18u].y) - _333)) * _498) + _333;
    float _504 = ((_482 * ((_353.z * cbMtdParam._m0[18u].z) - _334)) * _498) + _334;
    float _509 = (((_373.z - _403) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _403;
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _529 = (_522.x * 2.0) + (-1.0);
    float _530 = (_522.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3469 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _540 = (((_522.z - _509) * _482) * _498) + _509;
    float _555 = (((cbMtdParam._m0[21u].x * _419) + ((_529 - _419) * _482)) * _498) + _419;
    float _556 = (((cbMtdParam._m0[21u].x * _420) + ((_530 - _420) * _482)) * _498) + _420;
    float _557 = (((sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) - _414) * _482) * _498) + _414;
    float _559 = cbMtdParam._m0[22u].x + _399.w;
    float _562 = fma(_557, _219, fma(_556, _226, _555 * _212));
    float _565 = fma(_557, _220, fma(_556, _227, _555 * _213));
    float _568 = fma(_557, _221, fma(_556, _228, _555 * _214));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3480 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _576 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3502 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3513 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3524 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _682 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _685 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _688 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    uint _702 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3535 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _726 = ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * TEXCOORD_5.w) * _722.x;
    float _727 = dot(vec3(_573, _574, _575), vec3(_652, _653, _654));
    float _730 = _727 * 2.0;
    float _734 = (_730 * _573) - _652;
    float _735 = (_730 * _574) - _653;
    float _736 = (_730 * _575) - _654;
    float _740 = abs(dot(vec3(_652, _653, _654), vec3(_573, _574, _575)));
    float _3568 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _742 = sqrt(_576);
    float _755 = exp2((_742 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_742 * 3.0));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1096;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _821 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _825 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _829 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _854 = _787 + _573;
        float _855 = _791 + _574;
        float _856 = _795 + _575;
        float _866 = fma(_856, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) - _821;
        float _867 = fma(_856, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) - _825;
        float _868 = fma(_856, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) - _829;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_821 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_825 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[34u].z) + ((((((_829 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _924 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_890.x + (-0.5));
        float _926 = _924 * (_890.y + (-0.5));
        float _927 = _924 * (_890.z + (-0.5));
        float _934 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_897.x + (-0.5));
        float _936 = _934 * (_897.y + (-0.5));
        float _937 = _934 * (_897.z + (-0.5));
        float _944 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_904.x + (-0.5));
        float _946 = _944 * (_904.y + (-0.5));
        float _947 = _944 * (_904.z + (-0.5));
        float _954 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_911.x + (-0.5));
        float _956 = _954 * (_911.y + (-0.5));
        float _957 = _954 * (_911.z + (-0.5));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = _925 * 0.5;
        float _962 = _935 * 0.5;
        float _963 = _945 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _978 = (dot(vec3(_573, _574, _575), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _988 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3616 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_990 + 1.0))) + _995) * _958;
        float _1005 = _926 * 0.5;
        float _1006 = _936 * 0.5;
        float _1007 = _946 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_573, _574, _575), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3649 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1032 + 1.0))) + _1037) * _959;
        float _1047 = _927 * 0.5;
        float _1048 = _937 * 0.5;
        float _1049 = _947 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_573, _574, _575), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3682 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1074 + 1.0))) + _1079) * _960;
        _1096 = _927;
        _1098 = _926;
        _1099 = _925;
        _1100 = _937;
        _1101 = _936;
        _1102 = _935;
        _1103 = _947;
        _1104 = _946;
        _1105 = _945;
        _1106 = _960;
        _1107 = _959;
        _1108 = _958;
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _1097;
        _1098 = _1097;
        _1099 = _1097;
        _1100 = _1097;
        _1101 = _1097;
        _1102 = _1097;
        _1103 = _1097;
        _1104 = _1097;
        _1105 = _1097;
        _1106 = _1097;
        _1107 = _1097;
        _1108 = _1097;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1136 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1140 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1144 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1167 = _787 + _573;
        float _1168 = _791 + _574;
        float _1169 = _795 + _575;
        float _1179 = fma(_1169, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1136 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1140 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[35u].z) + ((((((_1144 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1235 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1202.x + (-0.5));
        float _1237 = _1235 * (_1202.y + (-0.5));
        float _1238 = _1235 * (_1202.z + (-0.5));
        float _1245 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1209.x + (-0.5));
        float _1247 = _1245 * (_1209.y + (-0.5));
        float _1248 = _1245 * (_1209.z + (-0.5));
        float _1255 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1216.x + (-0.5));
        float _1257 = _1255 * (_1216.y + (-0.5));
        float _1258 = _1255 * (_1216.z + (-0.5));
        float _1265 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1223.x + (-0.5));
        float _1267 = _1265 * (_1223.y + (-0.5));
        float _1268 = _1265 * (_1223.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_573, _574, _575), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3745 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1299 + 1.0))) + _1304) * _1269;
        float _1314 = _1237 * 0.5;
        float _1315 = _1247 * 0.5;
        float _1316 = _1257 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_573, _574, _575), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3778 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1341 + 1.0))) + _1346) * _1270;
        float _1356 = _1238 * 0.5;
        float _1357 = _1248 * 0.5;
        float _1358 = _1258 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_573, _574, _575), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3811 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1383 + 1.0))) + _1388) * _1271;
        _1405 = _1238;
        _1406 = _1237;
        _1407 = _1236;
        _1408 = _1248;
        _1409 = _1247;
        _1410 = _1246;
        _1411 = _1258;
        _1412 = _1257;
        _1413 = _1256;
        _1414 = _1271;
        _1415 = _1270;
        _1416 = _1269;
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1097;
        _1406 = _1097;
        _1407 = _1097;
        _1408 = _1097;
        _1409 = _1097;
        _1410 = _1097;
        _1411 = _1097;
        _1412 = _1097;
        _1413 = _1097;
        _1414 = _1097;
        _1415 = _1097;
        _1416 = _1097;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1111)) + _1111;
    float _1452 = fma(_1431, cbSceneParam._m0[89u].z, fma(_1430, cbSceneParam._m0[89u].y, _1429 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1431, cbSceneParam._m0[90u].z, fma(_1430, cbSceneParam._m0[90u].y, _1429 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1431, cbSceneParam._m0[91u].z, fma(_1430, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1429));
    float _1473 = _734 * 0.5;
    float _1474 = _735 * 0.5;
    float _1475 = _736 * 0.5;
    float _1476 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1479 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1482 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1516;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1489 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1096, _1100, _1103, _1106));
        float _1493 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1497 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1504 = dot(vec4(cbModelParam._m0[39u]), vec4(_1473, _1474, _1475, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1527;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1518 = dot(vec4(cbModelParam._m0[40u]), vec4(_1473, _1474, _1475, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1531 = (_1527 * cbModelParam._m0[1u].x) + (_1516 * (1.0 - cbModelParam._m0[1u].x));
    float _1541 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1541 : min(cbModelParam._m0[25u].z, _1541));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1603 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1606 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1634 = frontier_phi_14_12_ladder;
        }
        float _1836;
        if (_1603 > 0.0)
        {
            _1836 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1836 = frontier_phi_23_19_ladder;
        }
        float _2079;
        if (_1606 > 0.0)
        {
            _2079 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2079 = frontier_phi_35_30_ladder;
        }
        float _2081 = isnan(_1836) ? _1634 : (isnan(_1634) ? _1836 : min(_1634, _1836));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1600) + _1589;
        float _2087 = (_2082 * _1603) + _1593;
        float _2088 = (_2082 * _1606) + _1597;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1542);
            frontier_phi_13_35_ladder = _2212.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2212.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2212.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_13_35_ladder_2;
        _1624 = frontier_phi_13_35_ladder_1;
        _1626 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1542);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1698 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1701 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1841;
        if (_1695 > 0.0)
        {
            _1841 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1841 = frontier_phi_25_21_ladder;
        }
        float _2106;
        if (_1698 > 0.0)
        {
            _2106 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2106 = frontier_phi_37_32_ladder;
        }
        float _2311;
        if (_1701 > 0.0)
        {
            _2311 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2311 = frontier_phi_46_43_ladder;
        }
        float _2313 = isnan(_2106) ? _1841 : (isnan(_1841) ? _2106 : min(_1841, _2106));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1695) + _1684;
        float _2319 = (_2314 * _1698) + _1688;
        float _2320 = (_2314 * _1701) + _1692;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2321;
        float _2324 = _2321 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2320 > _2324) || ((_2320 < _2322) || ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 < _2322) || (_2318 > _2324))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2320, cbModelParam._m0[17u].z, fma(_2319, cbModelParam._m0[17u].y, _2318 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2320, cbModelParam._m0[18u].z, fma(_2319, cbModelParam._m0[18u].y, _2318 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2320, cbModelParam._m0[19u].z, fma(_2319, cbModelParam._m0[19u].y, _2318 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_22_46_ladder = _2519.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2519.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2519.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_22_46_ladder_2;
        _1722 = frontier_phi_22_46_ladder_1;
        _1724 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1631);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _755) * ((_742 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_755 * _742)) * _726;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1622)) + _1622);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1624)) + _1624);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1626)) + _1626);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _726 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1794 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1798 = _1760 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_573, _574, _575));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_573, _574, _575));
    float _3947 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3958 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1777].x * _1783) * _1819) + ((cbLight._m0[_1787].x * _1794) * _1817);
    float _1827 = ((_1783 * cbLight._m0[_1777].y) * _1819) + ((_1794 * cbLight._m0[_1787].y) * _1817);
    float _1828 = ((_1783 * cbLight._m0[_1777].z) * _1819) + ((_1794 * cbLight._m0[_1787].z) * _1817);
    uvec4 _1833 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1835 = _1833.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1835)
    {
        _1846 = _1826;
        _1848 = _1827;
        _1850 = _1828;
    }
    else
    {
        uint _1854 = _1760 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3969 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1873 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1826;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1827;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1828;
    }
    bool _1853 = _1833.y == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1853)
    {
        _1891 = _1846;
        _1893 = _1848;
        _1895 = _1850;
    }
    else
    {
        uint _2050 = _1760 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _3985 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2069 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1891 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1846;
        _1893 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1848;
        _1895 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1850;
    }
    uint _1898 = _1760 + 8u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _576) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1760].x + _652;
    float _1914 = cbLight._m0[_1760].y + _653;
    float _1915 = cbLight._m0[_1760].z + _654;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1760].xyz));
    float _4001 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _1927 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1928 = dot(vec3(_573, _574, _575), vec3(_1920, _1921, _1922));
    float _4023 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1920, _1921, _1922));
    float _4034 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1912 * _1912;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = 1.0 - _1912;
    float _1963 = (0.5 / (((_1927 * ((_1926 * _1952) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _1952) + _1912) * _1926))) * _1926;
    float _4045 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    uint _1976 = _1760 + 9u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _576) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1798].x + _652;
    float _1990 = cbLight._m0[_1798].y + _653;
    float _1991 = cbLight._m0[_1798].z + _654;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1798].xyz));
    float _4056 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2003 = dot(vec3(_573, _574, _575), vec3(_1996, _1997, _1998));
    float _4067 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1996, _1997, _1998));
    float _4078 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1988 * _1988;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1988;
    float _2035 = (0.5 / (((_1927 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2025) + _1988) * _2002))) * _2002;
    float _4089 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    float _2047 = (((_2024 * cbLight._m0[_1976].x) * _2037) * _1783) + (((_1951 * cbLight._m0[_1898].x) * _1965) * _1794);
    float _2048 = (((_2024 * cbLight._m0[_1976].y) * _2037) * _1783) + (((_1951 * cbLight._m0[_1898].y) * _1965) * _1794);
    float _2049 = (((_2024 * cbLight._m0[_1976].z) * _2037) * _1783) + (((_1951 * cbLight._m0[_1898].z) * _1965) * _1794);
    float _2111;
    float _2113;
    float _2115;
    if (_1835)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1760 + 2u;
        uint _2121 = _1760 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _576) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _652;
        float _2138 = cbLight._m0[_2117].y + _653;
        float _2139 = cbLight._m0[_2117].z + _654;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2117].xyz));
        float _4100 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2151 = dot(vec3(_573, _574, _575), vec3(_2144, _2145, _2146));
        float _4111 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4122 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2173 = 1.0 - _2136;
        float _2183 = (0.5 / (((_1927 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2173) + _2136) * _2150))) * _2150;
        float _4133 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2111 = (((_2172 * cbLight._m0[_2121].x) * _2185) * _2186) + _2047;
        _2113 = (((_2172 * cbLight._m0[_2121].y) * _2185) * _2186) + _2048;
        _2115 = (((_2172 * cbLight._m0[_2121].z) * _2185) * _2186) + _2049;
    }
    float _2221;
    float _2223;
    float _2225;
    if (_1853)
    {
        _2221 = _2111;
        _2223 = _2113;
        _2225 = _2115;
    }
    else
    {
        uint _2232 = _1760 + 3u;
        uint _2236 = _1760 + 11u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _576) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _652;
        float _2253 = cbLight._m0[_2232].y + _653;
        float _2254 = cbLight._m0[_2232].z + _654;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2232].xyz));
        float _4149 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2266 = dot(vec3(_573, _574, _575), vec3(_2259, _2260, _2261));
        float _4160 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4171 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_1927 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2288) + _2251) * _2265))) * _2265;
        float _4182 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2221 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2111;
        _2223 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2113;
        _2225 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2115;
    }
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_1758.y == 0u)
    {
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2376;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2376;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2376;
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.x;
        uint _2403 = uint((float(_2391.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2392))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2392)));
        float _2413 = (log2(_2379 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2414 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        uint _2417 = uint(isnan(14.0) ? _2414 : (isnan(_2414) ? 14.0 : min(_2414, 14.0)));
        uvec4 _2422 = texelFetch(g_lightClusterGridBuffer, int(((_2417 << 2u) + (_2403 << 6u)) >> 2u));
        uint _2423 = _2422.x;
        uint _2424 = _2391.z;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((((1u << ((_2424 >> 4u) & 15u)) + 4294967295u) & _2423) == 0u) || ((_2424 & 240u) == 0u))
        {
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
        }
        else
        {
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2685)
                {
                    frontier_phi_61_pred = _2669;
                    frontier_phi_61_pred_1 = _2674;
                    frontier_phi_61_pred_2 = _2673;
                    frontier_phi_61_pred_3 = _2672;
                    frontier_phi_61_pred_4 = _2671;
                    frontier_phi_61_pred_5 = _2670;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2684;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2675 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2377;
                        float _2860 = _2819.y - _2378;
                        float _2861 = _2819.z - _2379;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_682, _685, _688), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4208 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2377;
                        float _2895 = (-0.0) - _2378;
                        float _2896 = (-0.0) - _2379;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _742;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_682, _685, _688), vec3(_2901, _2902, _2903));
                        float _4224 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2936 = dot(vec3(_682, _685, _688), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4235 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4246 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4257 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2728 = (_2890 * _2838.x) + _2796;
                        _2729 = (_2890 * _2838.y) + _2797;
                        _2730 = (_2890 * _2838.z) + _2798;
                        _2725 = (_2971 * _2855.x) + _2793;
                        _2726 = (_2971 * _2855.y) + _2794;
                        _2727 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_61_pred = _2725;
                    frontier_phi_61_pred_1 = _2730;
                    frontier_phi_61_pred_2 = _2729;
                    frontier_phi_61_pred_3 = _2728;
                    frontier_phi_61_pred_4 = _2727;
                    frontier_phi_61_pred_5 = _2726;
                }
                _2525 = frontier_phi_61_pred;
                _2535 = frontier_phi_61_pred_1;
                _2533 = frontier_phi_61_pred_2;
                _2531 = frontier_phi_61_pred_3;
                _2529 = frontier_phi_61_pred_4;
                _2527 = frontier_phi_61_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2525;
                    _2670 = _2527;
                    _2671 = _2529;
                    _2672 = _2531;
                    _2673 = _2533;
                    _2674 = _2535;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
        }
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.z;
        uint _2541 = (_2539 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2541) & _2423) == 0u)
        {
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
            _2643 = _2530;
            _2645 = _2532;
            _2647 = _2534;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
            float _2663 = _2662 * _2377;
            float _2664 = _2662 * _2378;
            float _2665 = _2662 * _2379;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2541 < ((_2539 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2776 = _2524;
                float _2777 = _2526;
                float _2778 = _2528;
                float _2779 = _2530;
                float _2780 = _2532;
                float _2781 = _2534;
                uint _2782 = _2541;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2792)
                    {
                        frontier_phi_67_pred = _2779;
                        frontier_phi_67_pred_1 = _2780;
                        frontier_phi_67_pred_2 = _2781;
                        frontier_phi_67_pred_3 = _2778;
                        frontier_phi_67_pred_4 = _2777;
                        frontier_phi_67_pred_5 = _2776;
                    }
                    else
                    {
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        uint _2995 = _2791;
                        uint _2996;
                        vec4 _3021;
                        float _3022;
                        vec4 _3037;
                        vec3 _3049;
                        vec4 _3064;
                        vec4 _3079;
                        float _3125;
                        bool _3126;
                        for (;;)
                        {
                            uint _3006 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2995));
                            _2996 = (_2995 + 4294967295u) & _2995;
                            uint _3008 = _3006 * 40u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3022 = _3021.w;
                            uint _3024 = (_3006 * 40u) + 4u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3039 = (_3006 * 40u) + 8u;
                            _3049 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x));
                            uint _3051 = (_3006 * 40u) + 16u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3066 = (_3006 * 40u) + 20u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3006 * 40u) + 24u;
                            vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3100 = (_3006 * 40u) + 28u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3125 = fma(_2379, _3113.z, fma(_2378, _3113.y, _3113.x * _2377)) + _3113.w;
                            _3126 = !((fma(_2379, _3094.z, fma(_2378, _3094.y, _3094.x * _2377)) + _3094.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3126)
                            {
                                float _3153 = _3021.x - _2377;
                                float _3154 = _3021.y - _2378;
                                float _3155 = _3021.z - _2379;
                                float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                                float _3159 = inversesqrt(_3156);
                                float _3160 = _3159 * _3153;
                                float _3161 = _3159 * _3154;
                                float _3162 = _3159 * _3155;
                                float _3166 = 1.0 - (_3156 / (_3022 * _3022));
                                float _4268 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3171 = sqrt(_3156) * _3037.w;
                                float _3173 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                                float _3174 = _3173 * _3173;
                                float _3177 = ((1.0 - _3174) * dot(vec3(_3160, _3161, _3162), vec3(_682, _685, _688))) + _3174;
                                float _3180 = _3171 * _3171;
                                float _3184 = (fma(_2379, _3064.z, fma(_2378, _3064.y, _3064.x * _2377)) + _3064.w) / _3125;
                                float _3185 = (fma(_2379, _3079.z, fma(_2378, _3079.y, _3079.x * _2377)) + _3079.w) / _3125;
                                float _3189 = 1.0 - dot(vec2(_3184, _3185), vec2(_3184, _3185));
                                float _4284 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3191 = _3190 * (((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3167) / ((_3180 * 0.699999988079071044921875) + 1.0));
                                float _3203 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                                float _3204 = 1.0 - _742;
                                float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                                float _3212 = _3211 * _3211;
                                float _3213 = _3212 * _3212;
                                float _3214 = _3160 - _2663;
                                float _3215 = _3161 - _2664;
                                float _3216 = _3162 - _2665;
                                float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                                float _3224 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4295 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3227 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3228 = dot(vec3(_682, _685, _688), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                                float _4306 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                                float _3236 = _3173 * _3212;
                                float _3237 = _3236 * _3236;
                                float _3243 = ((1.0 - _3237) * dot(vec3(_682, _685, _688), vec3(_3160, _3161, _3162))) + _3237;
                                float _4317 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3245 = 1.0 - _3212;
                                float _3255 = (0.5 / (((_3244 * ((_3227 * _3245) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3212) * _3227))) * _3244;
                                float _4328 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3265 = (_3190 * _3167) * (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3235 * _3235) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3265 * _3049.x;
                                frontier_phi_73_pred_1 = _3265 * _3049.y;
                                frontier_phi_73_pred_2 = _3191 * _3037.z;
                                frontier_phi_73_pred_3 = _3191 * _3037.y;
                                frontier_phi_73_pred_4 = _3191 * _3037.x;
                                frontier_phi_73_pred_5 = _3265 * _3049.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3269 = frontier_phi_73_pred;
                            _3270 = frontier_phi_73_pred_1;
                            _3274 = frontier_phi_73_pred_2;
                            _3273 = frontier_phi_73_pred_3;
                            _3272 = frontier_phi_73_pred_4;
                            _3271 = frontier_phi_73_pred_5;
                            _2979 = _3272 + _2992;
                            _2980 = _3273 + _2993;
                            _2981 = _3274 + _2994;
                            _2976 = _3269 + _2989;
                            _2977 = _3270 + _2990;
                            _2978 = _3271 + _2991;
                            if (_2996 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2996;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2979;
                        frontier_phi_67_pred_1 = _2980;
                        frontier_phi_67_pred_2 = _2981;
                        frontier_phi_67_pred_3 = _2978;
                        frontier_phi_67_pred_4 = _2977;
                        frontier_phi_67_pred_5 = _2976;
                    }
                    _2644 = frontier_phi_67_pred;
                    _2646 = frontier_phi_67_pred_1;
                    _2648 = frontier_phi_67_pred_2;
                    _2642 = frontier_phi_67_pred_3;
                    _2640 = frontier_phi_67_pred_4;
                    _2638 = frontier_phi_67_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2638;
                        _2777 = _2640;
                        _2778 = _2642;
                        _2779 = _2644;
                        _2780 = _2646;
                        _2781 = _2648;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2646;
                frontier_phi_55_56_ladder_1 = _2648;
                frontier_phi_55_56_ladder_2 = _2644;
                frontier_phi_55_56_ladder_3 = _2642;
                frontier_phi_55_56_ladder_4 = _2640;
                frontier_phi_55_56_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_55_56_ladder = _2532;
                frontier_phi_55_56_ladder_1 = _2534;
                frontier_phi_55_56_ladder_2 = _2530;
                frontier_phi_55_56_ladder_3 = _2528;
                frontier_phi_55_56_ladder_4 = _2526;
                frontier_phi_55_56_ladder_5 = _2524;
            }
            _2637 = frontier_phi_55_56_ladder_5;
            _2639 = frontier_phi_55_56_ladder_4;
            _2641 = frontier_phi_55_56_ladder_3;
            _2643 = frontier_phi_55_56_ladder_2;
            _2645 = frontier_phi_55_56_ladder;
            _2647 = frontier_phi_55_56_ladder_1;
        }
        float _2652 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
        _2436 = (_2652 * _2643) + _1891;
        _2438 = (_2652 * _2645) + _1893;
        _2440 = (_2652 * _2647) + _1895;
        _2442 = ((_2637 * 0.039999999105930328369140625) * _2652) + _2221;
        _2444 = ((_2639 * 0.039999999105930328369140625) * _2652) + _2223;
        _2446 = ((_2641 * 0.039999999105930328369140625) * _2652) + _2225;
    }
    else
    {
        _2436 = _1891;
        _2438 = _1893;
        _2440 = _1895;
        _2442 = _2221;
        _2444 = _2223;
        _2446 = _2225;
    }
    float _4344 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4355 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4366 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    uint _2466 = _252 + 6u;
    float _2474 = _660 / cbSceneParam._m0[86u].x;
    float _2475 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2489 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2491 = _2489.x;
    float _2492 = _2489.y;
    float _2493 = _2489.z;
    float _2494 = _2489.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2549 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2550 = _2549 / _594;
        float _2561 = _2550 * _645;
        float _2562 = _646 * _2550;
        float _2563 = (-0.0) - _2562;
        float _2565 = _2550 * _647;
        float _2567 = (cbSceneParam._m0[77u].w * _2563) / _2549;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2562;
        float _2575 = sqrt(((_2561 * _2561) + (_2562 * _2562)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2549)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2738;
        if (abs((_2563 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2738 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2700 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2738 = ((abs(_2575 / _2563) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2585 * _2709) - exp2(_2585 * _2710)) * _2698))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2740 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, 1.0), 0.0);
        float _2749 = exp2((_2738 * (-1.44269502162933349609375)) * (1.0 - _2740.w));
        float _2750 = log2(_2749);
        float _2766 = log2(_2494);
        _2587 = (exp2(_2766 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].x)) * _2740.x) / cbSceneParam._m0[78u].x)) + _2491;
        _2589 = (exp2(_2766 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].y)) * _2740.y) / cbSceneParam._m0[78u].y)) + _2492;
        _2591 = (exp2(_2766 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].z)) * _2740.z) / cbSceneParam._m0[78u].z)) + _2493;
        _2593 = _2749 * _2494;
    }
    else
    {
        _2587 = _2491;
        _2589 = _2492;
        _2591 = _2493;
        _2593 = _2494;
    }
    float _2605 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2606 = _2605 == 3.0;
    float _2607 = log2(_2593);
    float _2614 = exp2(_2607 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2436 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _726))) + ((_2442 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2615 = exp2(_2607 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2438 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _726))) + ((_2444 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2616 = exp2(_2607 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2440 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _726))) + ((_2446 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2625 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2625 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.y = _2625 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.z = _2625 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.w = cbInstanceData._m0[_2466].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2466].w;
}


