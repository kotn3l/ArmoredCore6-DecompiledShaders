#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1003;
float _3366;
float _3367;
float _3368;
float _3369;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3378 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _348 = _346.x;
    float _349 = 1.0 - _348;
    float _365 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_348 - _349) * cbMtdParam._m0[24u].z) + _349) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3389 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _373 = (_366 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) + _270;
    float _374 = (_366 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) + _271;
    float _375 = (_366 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) + _272;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _395 = (_388.x * 2.0) + (-1.0);
    float _396 = (_388.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3400 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _405 = (_366 * (_388.z - _315)) + _315;
    float _417 = (((_395 - _320) + (cbMtdParam._m0[21u].x * _320)) * _366) + _320;
    float _418 = (((_396 - _322) + (cbMtdParam._m0[21u].x * _322)) * _366) + _322;
    float _419 = (_366 * (sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) - _329)) + _329;
    float _424 = cbMtdParam._m0[22u].x + _311.w;
    float _427 = fma(_419, _211 * NORMAL.x, fma(_418, _218 * TANGENT.x, (_204 * _196) * _417));
    float _430 = fma(_419, _211 * NORMAL.y, fma(_418, _218 * TANGENT.y, (_204 * _197) * _417));
    float _433 = fma(_419, _211 * NORMAL.z, fma(_418, _218 * TANGENT.z, (_204 * _198) * _417));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    float _438 = _437 * _427;
    float _439 = _437 * _430;
    float _440 = _437 * _433;
    float _3411 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _441 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3433 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3444 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3455 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _510 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _500);
    float _511 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _500);
    float _512 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _500);
    float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
    float _517 = _510 * _516;
    float _518 = _511 * _516;
    float _519 = _512 * _516;
    vec4 _524 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _526 = _524.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _683 = sqrt(((_510 * _510) + (_511 * _511)) + (_512 * _512));
        float _689 = (cbMatDynParam._m0[5u].x * _683) + cbMatDynParam._m0[5u].y;
        float _3466 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _694 = (cbMatDynParam._m0[5u].z * _683) + cbMatDynParam._m0[5u].w;
        float _3477 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) - _690)) + _690) < ((_526 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _559 = fma(_440, cbSceneParam._m0[5u].z, fma(_439, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _438));
    float _562 = fma(_440, cbSceneParam._m0[6u].z, fma(_439, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _438));
    float _565 = fma(_440, cbSceneParam._m0[7u].z, fma(_439, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _438));
    uint _578 = _224 + 9u;
    uint _579 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3488 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _603 = ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * TEXCOORD_5.w) * _599.x;
    float _604 = dot(vec3(_438, _439, _440), vec3(_517, _518, _519));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _438) - _517;
    float _612 = (_607 * _439) - _518;
    float _613 = (_607 * _440) - _519;
    float _617 = abs(dot(vec3(_517, _518, _519), vec3(_438, _439, _440)));
    float _3521 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_441);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _731 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _735 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _760 = _664 + _438;
        float _761 = _668 + _439;
        float _762 = _672 + _440;
        float _772 = fma(_762, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760)) - _727;
        float _773 = fma(_762, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760)) - _731;
        float _774 = fma(_762, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760)) - _735;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _830 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_796.x + (-0.5));
        float _832 = _830 * (_796.y + (-0.5));
        float _833 = _830 * (_796.z + (-0.5));
        float _840 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_803.x + (-0.5));
        float _842 = _840 * (_803.y + (-0.5));
        float _843 = _840 * (_803.z + (-0.5));
        float _850 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_810.x + (-0.5));
        float _852 = _850 * (_810.y + (-0.5));
        float _853 = _850 * (_810.z + (-0.5));
        float _860 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_817.x + (-0.5));
        float _862 = _860 * (_817.y + (-0.5));
        float _863 = _860 * (_817.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(_438, _439, _440), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3569 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_438, _439, _440), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3602 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_438, _439, _440), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3635 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1049 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1053 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1076 = _664 + _438;
        float _1077 = _668 + _439;
        float _1078 = _672 + _440;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_438, _439, _440), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3698 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_438, _439, _440), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3731 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_438, _439, _440), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3764 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1003;
        _1315 = _1003;
        _1316 = _1003;
        _1317 = _1003;
        _1318 = _1003;
        _1319 = _1003;
        _1320 = _1003;
        _1321 = _1003;
        _1322 = _1003;
        _1323 = _1003;
        _1324 = _1003;
        _1325 = _1003;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1015)) + _1015;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1016)) + _1016;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1017)) + _1017;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _611 * 0.5;
    float _1383 = _612 * 0.5;
    float _1384 = _613 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _441);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1498 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1502 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1506 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1509 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1512 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1515 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1543;
        if (_1509 > 0.0)
        {
            _1543 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1543 = frontier_phi_17_15_ladder;
        }
        float _1746;
        if (_1512 > 0.0)
        {
            _1746 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1746 = frontier_phi_26_22_ladder;
        }
        float _1989;
        if (_1515 > 0.0)
        {
            _1989 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1989 = frontier_phi_38_33_ladder;
        }
        float _1991 = isnan(_1746) ? _1543 : (isnan(_1543) ? _1746 : min(_1543, _1746));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1509) + _1498;
        float _1997 = (_1992 * _1512) + _1502;
        float _1998 = (_1992 * _1515) + _1506;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _1999;
        float _2003 = _1999 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 > _2003) || ((_1997 < _2001) || ((_1996 < _2001) || (_1996 > _2003))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1998, cbModelParam._m0[9u].z, fma(_1997, cbModelParam._m0[9u].y, _1996 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1998, cbModelParam._m0[10u].z, fma(_1997, cbModelParam._m0[10u].y, _1996 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1998, cbModelParam._m0[11u].z, fma(_1997, cbModelParam._m0[11u].y, _1996 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_16_38_ladder = _2122.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2122.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2122.x * cbModelParam._m0[1u].y;
        }
        _1531 = frontier_phi_16_38_ladder_2;
        _1533 = frontier_phi_16_38_ladder_1;
        _1535 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1451);
        _1531 = _1519.x * cbModelParam._m0[1u].y;
        _1533 = _1519.y * cbModelParam._m0[1u].y;
        _1535 = _1519.z * cbModelParam._m0[1u].y;
    }
    float _1539 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _441);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1539 : min(cbModelParam._m0[25u].w, _1539));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1594 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1598 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1602 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1605 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1608 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1611 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1751;
        if (_1605 > 0.0)
        {
            _1751 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1751 = frontier_phi_28_24_ladder;
        }
        float _2016;
        if (_1608 > 0.0)
        {
            _2016 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2016 = frontier_phi_40_35_ladder;
        }
        float _2221;
        if (_1611 > 0.0)
        {
            _2221 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2221 = frontier_phi_49_46_ladder;
        }
        float _2223 = isnan(_2016) ? _1751 : (isnan(_1751) ? _2016 : min(_1751, _2016));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1605) + _1594;
        float _2229 = (_2224 * _1608) + _1598;
        float _2230 = (_2224 * _1611) + _1602;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1540);
            frontier_phi_25_49_ladder = _2429.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2429.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2429.x * cbModelParam._m0[1u].z;
        }
        _1630 = frontier_phi_25_49_ladder_2;
        _1632 = frontier_phi_25_49_ladder_1;
        _1634 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1540);
        _1630 = _1614.x * cbModelParam._m0[1u].z;
        _1632 = _1614.y * cbModelParam._m0[1u].z;
        _1634 = _1614.z * cbModelParam._m0[1u].z;
    }
    float _1646 = ((((1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_632 * _619)) * _603;
    float _1647 = _1646 * ((cbModelParam._m0[1u].w * (_1630 - _1531)) + _1531);
    float _1648 = _1646 * ((cbModelParam._m0[1u].w * (_1632 - _1533)) + _1533);
    float _1649 = _1646 * ((cbModelParam._m0[1u].w * (_1634 - _1535)) + _1535);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    uvec4 _1668 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1670 = _1668.x * 14u;
    uint _1671 = _1670 + 13u;
    float _1678 = _603 + (-1.0);
    float _1683 = (cbLight._m0[_1671].x * _1678) + 1.0;
    float _1684 = (cbLight._m0[_1671].y * _1678) + 1.0;
    float _1685 = (cbLight._m0[_1671].z * _1678) + 1.0;
    float _1686 = (cbLight._m0[_1671].w * _1678) + 1.0;
    uint _1687 = _1670 + 5u;
    float _1693 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
    uint _1697 = _1670 + 4u;
    float _1704 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1708 = _1670 | 1u;
    float _1719 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_438, _439, _440));
    float _1722 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_438, _439, _440));
    float _3900 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _3911 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1727 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1729 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1736 = ((cbLight._m0[_1687].x * _1693) * _1729) + ((cbLight._m0[_1697].x * _1704) * _1727);
    float _1737 = ((_1693 * cbLight._m0[_1687].y) * _1729) + ((_1704 * cbLight._m0[_1697].y) * _1727);
    float _1738 = ((_1693 * cbLight._m0[_1687].z) * _1729) + ((_1704 * cbLight._m0[_1697].z) * _1727);
    uvec4 _1743 = floatBitsToUint(cbLight._m0[_1670 + 12u]);
    bool _1745 = _1743.x == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1745)
    {
        _1756 = _1736;
        _1758 = _1737;
        _1760 = _1738;
    }
    else
    {
        uint _1764 = _1670 + 6u;
        float _1780 = (dot(vec3(cbLight._m0[_1670 + 2u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _1781 = _1780 * _1780;
        float _3922 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1783 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _1756 = (((cbLight._m0[_1764].x * 0.3183098733425140380859375) * _1782) * _1783) + _1736;
        _1758 = (((cbLight._m0[_1764].y * 0.3183098733425140380859375) * _1782) * _1783) + _1737;
        _1760 = (((cbLight._m0[_1764].z * 0.3183098733425140380859375) * _1782) * _1783) + _1738;
    }
    bool _1763 = _1743.y == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1763)
    {
        _1801 = _1756;
        _1803 = _1758;
        _1805 = _1760;
    }
    else
    {
        uint _1960 = _1670 + 7u;
        float _1976 = (dot(vec3(cbLight._m0[_1670 + 3u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _1977 = _1976 * _1976;
        float _3938 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1979 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _1801 = (((cbLight._m0[_1960].x * 0.3183098733425140380859375) * _1978) * _1979) + _1756;
        _1803 = (((cbLight._m0[_1960].y * 0.3183098733425140380859375) * _1978) * _1979) + _1758;
        _1805 = (((cbLight._m0[_1960].z * 0.3183098733425140380859375) * _1978) * _1979) + _1760;
    }
    uint _1808 = _1670 + 8u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1670].w)) * _441) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1670].x + _517;
    float _1824 = cbLight._m0[_1670].y + _518;
    float _1825 = cbLight._m0[_1670].z + _519;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1670].xyz));
    float _3954 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1837 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1838 = dot(vec3(_438, _439, _440), vec3(_1830, _1831, _1832));
    float _3976 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1842 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_1830, _1831, _1832));
    float _3987 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1846 = _1822 * _1822;
    float _1850 = ((_1841 * _1841) * (_1846 + (-1.0))) + 1.0;
    float _1861 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1862 = 1.0 - _1822;
    float _1873 = (0.5 / (((_1837 * ((_1836 * _1862) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1862) + _1822) * _1836))) * _1836;
    float _3998 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1846 / ((_1850 * _1850) * 3.141590118408203125));
    uint _1886 = _1670 + 9u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1708].w)) * _441) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1708].x + _517;
    float _1900 = cbLight._m0[_1708].y + _518;
    float _1901 = cbLight._m0[_1708].z + _519;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1708].xyz));
    float _4009 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1913 = dot(vec3(_438, _439, _440), vec3(_1906, _1907, _1908));
    float _4020 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_1906, _1907, _1908));
    float _4031 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1898 * _1898;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1934 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1935 = 1.0 - _1898;
    float _1945 = (0.5 / (((_1837 * ((_1912 * _1935) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1935) + _1898) * _1912))) * _1912;
    float _4042 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    float _1957 = (((_1934 * cbLight._m0[_1886].x) * _1947) * _1693) + (((_1861 * cbLight._m0[_1808].x) * _1875) * _1704);
    float _1958 = (((_1934 * cbLight._m0[_1886].y) * _1947) * _1693) + (((_1861 * cbLight._m0[_1808].y) * _1875) * _1704);
    float _1959 = (((_1934 * cbLight._m0[_1886].z) * _1947) * _1693) + (((_1861 * cbLight._m0[_1808].z) * _1875) * _1704);
    float _2021;
    float _2023;
    float _2025;
    if (_1745)
    {
        _2021 = _1957;
        _2023 = _1958;
        _2025 = _1959;
    }
    else
    {
        uint _2027 = _1670 + 2u;
        uint _2031 = _1670 + 10u;
        float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _441) * 0.949999988079071044921875);
        float _2046 = _2045 * _2045;
        float _2047 = cbLight._m0[_2027].x + _517;
        float _2048 = cbLight._m0[_2027].y + _518;
        float _2049 = cbLight._m0[_2027].z + _519;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2054 = _2053 * _2047;
        float _2055 = _2053 * _2048;
        float _2056 = _2053 * _2049;
        float _2057 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2027].xyz));
        float _4053 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2061 = dot(vec3(_438, _439, _440), vec3(_2054, _2055, _2056));
        float _4064 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2065 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2054, _2055, _2056));
        float _4075 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2069 = _2046 * _2046;
        float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
        float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2083 = 1.0 - _2046;
        float _2093 = (0.5 / (((_1837 * ((_2060 * _2083) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2083) + _2046) * _2060))) * _2060;
        float _4086 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _2021 = (((_2082 * cbLight._m0[_2031].x) * _2095) * _2096) + _1957;
        _2023 = (((_2082 * cbLight._m0[_2031].y) * _2095) * _2096) + _1958;
        _2025 = (((_2082 * cbLight._m0[_2031].z) * _2095) * _2096) + _1959;
    }
    float _2131;
    float _2133;
    float _2135;
    if (_1763)
    {
        _2131 = _2021;
        _2133 = _2023;
        _2135 = _2025;
    }
    else
    {
        uint _2142 = _1670 + 3u;
        uint _2146 = _1670 + 11u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _441) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _517;
        float _2163 = cbLight._m0[_2142].y + _518;
        float _2164 = cbLight._m0[_2142].z + _519;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2142].xyz));
        float _4102 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2176 = dot(vec3(_438, _439, _440), vec3(_2169, _2170, _2171));
        float _4113 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4124 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2198 = 1.0 - _2161;
        float _2208 = (0.5 / (((_1837 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2198) + _2161) * _2175))) * _2175;
        float _4135 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _2131 = (((_2197 * cbLight._m0[_2146].x) * _2210) * _2211) + _2021;
        _2133 = (((_2197 * cbLight._m0[_2146].y) * _2210) * _2211) + _2023;
        _2135 = (((_2197 * cbLight._m0[_2146].z) * _2210) * _2211) + _2025;
    }
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    if (_1668.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
        }
        else
        {
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            uint _2593 = 0u;
            uint _2602;
            bool _2603;
            for (;;)
            {
                _2602 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                _2603 = _2602 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2603)
                {
                    frontier_phi_66_pred = _2587;
                    frontier_phi_66_pred_1 = _2592;
                    frontier_phi_66_pred_2 = _2591;
                    frontier_phi_66_pred_3 = _2590;
                    frontier_phi_66_pred_4 = _2589;
                    frontier_phi_66_pred_5 = _2588;
                }
                else
                {
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    uint _2738;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2602;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    for (;;)
                    {
                        uint _2742 = uint(findLSB(_2738)) + (_2593 << 5u);
                        uint _2739 = (_2738 + 4294967295u) & _2738;
                        uint _2744 = _2742 * 48u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2764 = (_2742 * 48u) + 4u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2783 = (_2742 * 48u) + 8u;
                        vec3 _2794 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x));
                        float _2798 = _2758.x - _2287;
                        float _2799 = _2758.y - _2288;
                        float _2800 = _2758.z - _2289;
                        float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                        float _2804 = inversesqrt(_2801);
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2808 = dot(vec3(_559, _562, _565), vec3(_2805, _2806, _2807));
                        float _2813 = 1.0 - (_2801 * _2758.w);
                        float _4161 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2815 = sqrt(_2801) * _2777.w;
                        float _2818 = 1.39999997615814208984375 / (_2815 + 1.39999997615814208984375);
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2808) + _2819;
                        float _2825 = _2815 * _2815;
                        float _2829 = ((isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))) * _2814) / ((_2825 * 0.699999988079071044921875) + 1.0);
                        float _2833 = (-0.0) - _2287;
                        float _2834 = (-0.0) - _2288;
                        float _2835 = (-0.0) - _2289;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2850 = exp2(log2(1.0 / ((_2825 * 3.5) + 5.0)) * 0.25);
                        float _2851 = 1.0 - _619;
                        float _2858 = sqrt(1.0 - ((1.0 - (_2851 * _2851)) * (1.0 - (_2850 * _2850))));
                        float _2859 = _2858 * _2858;
                        float _2860 = _2859 * _2859;
                        float _2861 = _2840 + _2805;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(_559, _562, _565), vec3(_2840, _2841, _2842));
                        float _4177 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2875 = dot(vec3(_559, _562, _565), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _4188 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2882 = ((_2878 * _2878) * (_2860 + (-1.0))) + 1.0;
                        float _2883 = _2818 * _2859;
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2808) + _2884;
                        float _4199 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2889 = 1.0 - _2859;
                        float _2899 = (0.5 / (((_2888 * ((_2874 * _2889) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2888 * _2889) + _2859) * _2874))) * _2888;
                        float _4210 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2910 = (((_2860 * 3.1415927410125732421875) * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) / ((_2882 * _2882) * ((_2825 * 2.1991131305694580078125) + 3.141590118408203125))) * _2814;
                        _2662 = (_2829 * _2777.x) + _2735;
                        _2663 = (_2829 * _2777.y) + _2736;
                        _2664 = (_2829 * _2777.z) + _2737;
                        _2659 = (_2910 * _2794.x) + _2732;
                        _2660 = (_2910 * _2794.y) + _2733;
                        _2661 = (_2910 * _2794.z) + _2734;
                        if (_2739 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2739;
                        }
                    }
                    frontier_phi_66_pred = _2659;
                    frontier_phi_66_pred_1 = _2664;
                    frontier_phi_66_pred_2 = _2663;
                    frontier_phi_66_pred_3 = _2662;
                    frontier_phi_66_pred_4 = _2661;
                    frontier_phi_66_pred_5 = _2660;
                }
                _2435 = frontier_phi_66_pred;
                _2445 = frontier_phi_66_pred_1;
                _2443 = frontier_phi_66_pred_2;
                _2441 = frontier_phi_66_pred_3;
                _2439 = frontier_phi_66_pred_4;
                _2437 = frontier_phi_66_pred_5;
                uint _2594 = _2593 + 1u;
                if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2587 = _2435;
                    _2588 = _2437;
                    _2589 = _2439;
                    _2590 = _2441;
                    _2591 = _2443;
                    _2592 = _2445;
                    _2593 = _2594;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
        }
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.z;
        uint _2451 = (_2449 >> 8u) & 15u;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((4294967295u << _2451) & _2333) == 0u)
        {
            _2555 = _2434;
            _2557 = _2436;
            _2559 = _2438;
            _2561 = _2440;
            _2563 = _2442;
            _2565 = _2444;
        }
        else
        {
            float _2580 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2581 = _2580 * _2287;
            float _2582 = _2580 * _2288;
            float _2583 = _2580 * _2289;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2451 < ((_2449 >> 12u) & 15u))
            {
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2715 = _2434;
                float _2716 = _2436;
                float _2717 = _2438;
                float _2718 = _2440;
                float _2719 = _2442;
                float _2720 = _2444;
                uint _2721 = _2451;
                uint _2730;
                bool _2731;
                for (;;)
                {
                    _2730 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                    _2731 = _2730 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2731)
                    {
                        frontier_phi_77_pred = _2720;
                        frontier_phi_77_pred_1 = _2719;
                        frontier_phi_77_pred_2 = _2718;
                        frontier_phi_77_pred_3 = _2717;
                        frontier_phi_77_pred_4 = _2716;
                        frontier_phi_77_pred_5 = _2715;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        uint _2943 = _2730;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3013;
                        vec4 _3029;
                        float _3075;
                        bool _3076;
                        for (;;)
                        {
                            uint _2954 = ((_2721 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _3000 = (_2954 * 40u) + 16u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3016 = (_2954 * 40u) + 20u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2954 * 40u) + 24u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3050 = (_2954 * 40u) + 28u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3075 = fma(_2289, _3063.z, fma(_2288, _3063.y, _3063.x * _2287)) + _3063.w;
                            _3076 = !((fma(_2289, _3044.z, fma(_2288, _3044.y, _3044.x * _2287)) + _3044.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3076)
                            {
                                float _3103 = _2969.x - _2287;
                                float _3104 = _2969.y - _2288;
                                float _3105 = _2969.z - _2289;
                                float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                                float _3109 = inversesqrt(_3106);
                                float _3110 = _3109 * _3103;
                                float _3111 = _3109 * _3104;
                                float _3112 = _3109 * _3105;
                                float _3116 = 1.0 - (_3106 / (_2970 * _2970));
                                float _4221 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3121 = sqrt(_3106) * _2985.w;
                                float _3123 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                                float _3124 = _3123 * _3123;
                                float _3127 = ((1.0 - _3124) * dot(vec3(_3110, _3111, _3112), vec3(_559, _562, _565))) + _3124;
                                float _3130 = _3121 * _3121;
                                float _3134 = (fma(_2289, _3013.z, fma(_2288, _3013.y, _3013.x * _2287)) + _3013.w) / _3075;
                                float _3135 = (fma(_2289, _3029.z, fma(_2288, _3029.y, _3029.x * _2287)) + _3029.w) / _3075;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4237 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3117) / ((_3130 * 0.699999988079071044921875) + 1.0));
                                float _3153 = exp2(log2(1.0 / ((_3130 * 3.5) + 5.0)) * 0.25);
                                float _3154 = 1.0 - _619;
                                float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                                float _3162 = _3161 * _3161;
                                float _3163 = _3162 * _3162;
                                float _3164 = _3110 - _2581;
                                float _3165 = _3111 - _2582;
                                float _3166 = _3112 - _2583;
                                float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                                float _3174 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2581, (-0.0) - _2582, (-0.0) - _2583));
                                float _4248 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3178 = dot(vec3(_559, _562, _565), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                                float _4259 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                                float _3186 = _3123 * _3162;
                                float _3187 = _3186 * _3186;
                                float _3193 = ((1.0 - _3187) * dot(vec3(_559, _562, _565), vec3(_3110, _3111, _3112))) + _3187;
                                float _4270 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3195 = 1.0 - _3162;
                                float _3205 = (0.5 / (((_3194 * ((_3177 * _3195) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3162) * _3177))) * _3194;
                                float _4281 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3215 = (_3140 * _3117) * (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) / ((_3185 * _3185) * ((_3130 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3141 * _2985.y;
                                frontier_phi_83_pred_1 = _3141 * _2985.x;
                                frontier_phi_83_pred_2 = _3215 * _2997.z;
                                frontier_phi_83_pred_3 = _3215 * _2997.y;
                                frontier_phi_83_pred_4 = _3215 * _2997.x;
                                frontier_phi_83_pred_5 = _3141 * _2985.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_83_pred;
                            _3222 = frontier_phi_83_pred_1;
                            _3221 = frontier_phi_83_pred_2;
                            _3220 = frontier_phi_83_pred_3;
                            _3219 = frontier_phi_83_pred_4;
                            _3224 = frontier_phi_83_pred_5;
                            _2927 = _3222 + _2940;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            _2924 = _3219 + _2937;
                            _2925 = _3220 + _2938;
                            _2926 = _3221 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2929;
                        frontier_phi_77_pred_1 = _2928;
                        frontier_phi_77_pred_2 = _2927;
                        frontier_phi_77_pred_3 = _2926;
                        frontier_phi_77_pred_4 = _2925;
                        frontier_phi_77_pred_5 = _2924;
                    }
                    _2566 = frontier_phi_77_pred;
                    _2564 = frontier_phi_77_pred_1;
                    _2562 = frontier_phi_77_pred_2;
                    _2560 = frontier_phi_77_pred_3;
                    _2558 = frontier_phi_77_pred_4;
                    _2556 = frontier_phi_77_pred_5;
                    uint _2722 = _2721 + 1u;
                    if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2715 = _2556;
                        _2716 = _2558;
                        _2717 = _2560;
                        _2718 = _2562;
                        _2719 = _2564;
                        _2720 = _2566;
                        _2721 = _2722;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2560;
                frontier_phi_58_59_ladder_1 = _2566;
                frontier_phi_58_59_ladder_2 = _2564;
                frontier_phi_58_59_ladder_3 = _2562;
                frontier_phi_58_59_ladder_4 = _2558;
                frontier_phi_58_59_ladder_5 = _2556;
            }
            else
            {
                frontier_phi_58_59_ladder = _2438;
                frontier_phi_58_59_ladder_1 = _2444;
                frontier_phi_58_59_ladder_2 = _2442;
                frontier_phi_58_59_ladder_3 = _2440;
                frontier_phi_58_59_ladder_4 = _2436;
                frontier_phi_58_59_ladder_5 = _2434;
            }
            _2555 = frontier_phi_58_59_ladder_5;
            _2557 = frontier_phi_58_59_ladder_4;
            _2559 = frontier_phi_58_59_ladder;
            _2561 = frontier_phi_58_59_ladder_3;
            _2563 = frontier_phi_58_59_ladder_2;
            _2565 = frontier_phi_58_59_ladder_1;
        }
        float _2570 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2346 = (_2570 * _2561) + _1801;
        _2348 = (_2570 * _2563) + _1803;
        _2350 = (_2570 * _2565) + _1805;
        _2352 = ((_2555 * 0.039999999105930328369140625) * _2570) + _2131;
        _2354 = ((_2557 * 0.039999999105930328369140625) * _2570) + _2133;
        _2356 = ((_2559 * 0.039999999105930328369140625) * _2570) + _2135;
    }
    else
    {
        _2346 = _1801;
        _2348 = _1803;
        _2350 = _1805;
        _2352 = _2131;
        _2354 = _2133;
        _2356 = _2135;
    }
    float _4297 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4308 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4319 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2373 = ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2346 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _603))) + ((_2352 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2374 = ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2348 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _603))) + ((_2354 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2375 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2350 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _603))) + ((_2356 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    uint _2376 = _224 + 6u;
    float _2384 = _538 / cbSceneParam._m0[86u].x;
    float _2385 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _2459 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _2460 = _2459 / _459;
        float _2471 = _2460 * _510;
        float _2472 = _511 * _2460;
        float _2473 = (-0.0) - _2472;
        float _2475 = _2460 * _512;
        float _2477 = (cbSceneParam._m0[77u].w * _2473) / _2459;
        float _2478 = _2477 + cbSceneParam._m0[79u].w;
        float _2479 = cbSceneParam._m0[79u].w - _2472;
        float _2485 = sqrt(((_2471 * _2471) + (_2472 * _2472)) + (_2475 * _2475));
        float _2488 = (1.0 - (cbSceneParam._m0[77u].w / _2459)) * _2485;
        float _2493 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2495 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2672;
        if (abs((_2473 - _2477) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2672 = ((((_2478 > 0.0) ? exp2(_2493 * _2478) : (2.0 - exp2(_2495 * _2478))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2488;
        }
        else
        {
            float _2616 = 1.0 / cbSceneParam._m0[80u].x;
            float _2617 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : max(_2478, _2479));
            float _2618 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : min(_2478, _2479));
            float _2627 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : min(_2617, 0.0));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            _2672 = ((abs(_2485 / _2473) * cbSceneParam._m0[80u].y) * ((((_2627 - _2628) * 2.0) - ((exp2(_2493 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0)))) - exp2(_2493 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))))) * _2616)) - ((exp2(_2495 * _2627) - exp2(_2495 * _2628)) * _2616))) + (_2488 * cbSceneParam._m0[80u].z);
        }
        vec4 _2674 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2683 = exp2((_2672 * (-1.44269502162933349609375)) * (1.0 - _2674.w));
        float _2684 = log2(_2683);
        float _2700 = log2(_2404);
        _2497 = (exp2(_2700 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].x)) * _2674.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2499 = (exp2(_2700 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].y)) * _2674.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2501 = (exp2(_2700 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].z)) * _2674.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2503 = _2683 * _2404;
    }
    else
    {
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
        _2503 = _2404;
    }
    bool _2710;
    vec4 _2513;
    vec4 _2535;
    float _2537;
    float _2541;
    float _2542;
    float _2543;
    float _2544;
    bool _2554;
    for (;;)
    {
        _2513 = cbMatDynParam._m0[0u];
        float _2515 = roundEven(_2513.y);
        bool _2516 = _2515 == 3.0;
        float _2517 = log2(_2503);
        float _2524 = exp2(_2517 * cbSceneParam._m0[78u].x) * _2373;
        float _2525 = exp2(_2517 * cbSceneParam._m0[78u].y) * _2374;
        float _2526 = exp2(_2517 * cbSceneParam._m0[78u].z) * _2375;
        float _2533 = _526 + (-0.5);
        _2535 = cbMtdParam._m0[1u];
        _2537 = _2535.y * _2533;
        float _2540 = (_2515 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2541 = _2540 * (_2516 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2497)));
        _2542 = _2540 * (_2516 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
        _2543 = _2540 * (_2516 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
        _2544 = _2533 * 0.999000012874603271484375;
        _2554 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2554)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2544) < 0.5)
            {
                _2710 = true;
                break;
            }
        }
        uint _2651 = _578 + uint(_2513.w);
        if ((cbInstanceData._m0[_2651].w < 1.0) && ((cbInstanceData._m0[_2651].w + _2544) < 0.5))
        {
            _2710 = true;
            break;
        }
        if ((_2537 + 1.0) < _2535.x)
        {
            _2710 = true;
            break;
        }
        _2710 = false;
        break;
    }
    float _2915;
    if (_2710)
    {
        discard_state = true;
        _2915 = 0.0;
    }
    else
    {
        _2915 = cbInstanceData._m0[_2376].w;
    }
    SV_Target.x = _2541;
    SV_Target.y = _2542;
    SV_Target.z = _2543;
    SV_Target.w = _2915;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2376].w;
    discard_exit();
}


