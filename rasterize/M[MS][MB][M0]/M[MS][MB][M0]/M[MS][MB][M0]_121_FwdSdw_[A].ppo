#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _3989;
float _3990;
float _3991;
float _3992;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4001 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    float _476 = ((_446.z - _467) * _392) + _467;
    float _479 = ((((_446.x - _465) * _392) + _465) * 2.0) + (-1.0);
    float _480 = ((((_446.y - _466) * _392) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _4012 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _518 = (_479 + ((((_419.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _519 = (_480 + ((((_419.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _522 = fma(_486, _245, fma(_519, _252, _518 * _238));
    float _525 = fma(_486, _246, fma(_519, _253, _518 * _239));
    float _528 = fma(_486, _247, fma(_519, _254, _518 * _240));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _568 = ((_563 - _564) * cbMtdParam._m0[24u].z) + _564;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_532 * _522, _532 * _525, _532 * _528, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_568 * cbMtdParam._m0[21u].z);
    float _4023 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _573 = (-0.0) - cbMtdParam._m0[24u].y;
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
    float _583 = _571 - ((_571 * TEXCOORD_8.x) * _576);
    float _584 = _571 - ((_571 * TEXCOORD_8.y) * _576);
    float _585 = _571 - ((_571 * TEXCOORD_8.z) * _576);
    float _592 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _596 = ((isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : min(_592, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _604 = (_596 - (((_568 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _596))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4054 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _609 = ((_583 * (cbMtdParam._m0[17u].x - _399)) * _605) + _399;
    float _610 = ((_584 * (cbMtdParam._m0[17u].y - _400)) * _605) + _400;
    float _611 = ((_585 * (cbMtdParam._m0[17u].z - _401)) * _605) + _401;
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _653 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].w) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4065 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _662 = ((((cbMtdParam._m0[10u].x - _609) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _654) + _609;
    float _663 = ((((cbMtdParam._m0[10u].y - _610) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _654) + _610;
    float _664 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _611)) * _654) + _611;
    float _669 = (((_419.z - _476) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _476;
    float _673 = ((_506.z - _669) * cbMtdParam._m0[19u].w) + _669;
    vec4 _687 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _694 = (_687.x * 2.0) + (-1.0);
    float _695 = (_687.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _4076 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _705 = (((_687.z - _673) * _583) * _605) + _673;
    float _708 = ((cbMtdParam._m0[23u].y - _705) * _654) + _705;
    vec4 _727 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _733 = (_727.x * 2.0) + (-1.0);
    float _734 = (_727.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4087 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _755 = (((cbMtdParam._m0[21u].x * _518) + ((_694 - _518) * _583)) * _605) + _518;
    float _756 = (((cbMtdParam._m0[21u].x * _519) + ((_695 - _519) * _584)) * _605) + _519;
    float _757 = (((sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) - _486) * _585) * _605) + _486;
    float _768 = (((_733 - _755) + (_755 * cbMtdParam._m0[22u].z)) * _654) + _755;
    float _769 = (((_734 - _756) + (_756 * cbMtdParam._m0[22u].z)) * _654) + _756;
    float _770 = ((sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) - _757) * _654) + _757;
    float _772 = cbMtdParam._m0[22u].x + _506.w;
    float _775 = fma(_770, _245, fma(_769, _252, _768 * _238));
    float _778 = fma(_770, _246, fma(_769, _253, _768 * _239));
    float _781 = fma(_770, _247, fma(_769, _254, _768 * _240));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _4098 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _789 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4120 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4131 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4142 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    vec4 _872 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _874 = _872.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_858 * _858) + (_859 * _859)) + (_860 * _860));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _4153 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _4164 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) - _1035)) + _1035) < ((_874 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _907 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _910 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _923 = _257 + 9u;
    uint _924 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_924].z;
    float _4175 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _948 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_786, _787, _788), vec3(_865, _866, _867));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _786) - _865;
    float _957 = (_952 * _787) - _866;
    float _958 = (_952 * _788) - _867;
    float _962 = abs(dot(vec3(_865, _866, _867), vec3(_786, _787, _788)));
    float _4208 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_789);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1075 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1079 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1104 = _1009 + _786;
        float _1105 = _1013 + _787;
        float _1106 = _1017 + _788;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_786, _787, _788), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4256 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_786, _787, _788), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_786, _787, _788), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4322 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1393 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1397 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1420 = _1009 + _786;
        float _1421 = _1013 + _787;
        float _1422 = _1017 + _788;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_786, _787, _788), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4385 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_786, _787, _788), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4418 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_786, _787, _788), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4451 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = _1347;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _956 * 0.5;
    float _1727 = _957 * 0.5;
    float _1728 = _958 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1843 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1847 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1851 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1854 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1857 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1860 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1888;
        if (_1854 > 0.0)
        {
            _1888 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1888 = frontier_phi_17_15_ladder;
        }
        float _2058;
        if (_1857 > 0.0)
        {
            _2058 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2058 = frontier_phi_26_22_ladder;
        }
        float _2353;
        if (_1860 > 0.0)
        {
            _2353 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2353 = frontier_phi_38_33_ladder;
        }
        float _2355 = isnan(_2058) ? _1888 : (isnan(_1888) ? _2058 : min(_1888, _2058));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1854) + _1843;
        float _2361 = (_2356 * _1857) + _1847;
        float _2362 = (_2356 * _1860) + _1851;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1876 = frontier_phi_16_38_ladder_2;
        _1878 = frontier_phi_16_38_ladder_1;
        _1880 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1795);
        _1876 = _1864.x * cbModelParam._m0[1u].y;
        _1878 = _1864.y * cbModelParam._m0[1u].y;
        _1880 = _1864.z * cbModelParam._m0[1u].y;
    }
    float _1884 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1884 : min(cbModelParam._m0[25u].w, _1884));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1939 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1943 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1947 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1950 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1953 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1956 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2063;
        if (_1950 > 0.0)
        {
            _2063 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2063 = frontier_phi_28_24_ladder;
        }
        float _2380;
        if (_1953 > 0.0)
        {
            _2380 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2380 = frontier_phi_40_35_ladder;
        }
        float _2707;
        if (_1956 > 0.0)
        {
            _2707 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2707 = frontier_phi_50_47_ladder;
        }
        float _2709 = isnan(_2380) ? _2063 : (isnan(_2063) ? _2380 : min(_2063, _2380));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _1950) + _1939;
        float _2715 = (_2710 * _1953) + _1943;
        float _2716 = (_2710 * _1956) + _1947;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1885);
            frontier_phi_25_50_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1975 = frontier_phi_25_50_ladder_2;
        _1977 = frontier_phi_25_50_ladder_1;
        _1979 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1885);
        _1975 = _1959.x * cbModelParam._m0[1u].z;
        _1977 = _1959.y * cbModelParam._m0[1u].z;
        _1979 = _1959.z * cbModelParam._m0[1u].z;
    }
    float _1991 = ((((1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_977 * _964)) * _948;
    float _1992 = _1991 * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1993 = _1991 * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1994 = _1991 * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, _1992 * cbSceneParam._m0[91u].x));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2050 = _2037 / _2049;
    float _2051 = _2041 / _2049;
    float _2052 = _2045 / _2049;
    float _2199;
    float _2200;
    float _2201;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2079 = ((uint(_2052 > cbSceneParam._m0[59u].y) + uint(_2052 > cbSceneParam._m0[59u].x)) + uint(_2052 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2080 = _2079 + 43u;
        uint _2088 = _2079 + 44u;
        uint _2096 = _2079 + 45u;
        uint _2104 = _2079 + 46u;
        float _2115 = fma(_2049, cbSceneParam._m0[_2080].w, fma(_2045, cbSceneParam._m0[_2080].z, fma(_2041, cbSceneParam._m0[_2080].y, _2037 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2049, cbSceneParam._m0[_2088].w, fma(_2045, cbSceneParam._m0[_2088].z, fma(_2041, cbSceneParam._m0[_2088].y, _2037 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2049, cbSceneParam._m0[_2104].w, fma(_2045, cbSceneParam._m0[_2104].z, fma(_2041, cbSceneParam._m0[_2104].y, _2037 * cbSceneParam._m0[_2104].x)));
        float _2132 = cbSceneParam._m0[33u].z * _2127;
        float _2134 = cbSceneParam._m0[33u].w * _2127;
        float _2137 = fma(_2049, cbSceneParam._m0[_2096].w, fma(_2045, cbSceneParam._m0[_2096].z, fma(_2041, cbSceneParam._m0[_2096].y, _2037 * cbSceneParam._m0[_2096].x))) / _2127;
        float _2185 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
        float _4577 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2192 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 + _2115) / _2127, (_2134 + _2119) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2115) / _2127, (_2119 - _2132) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2132) / _2127, (_2119 - _2134) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2134) / _2127, (_2132 + _2119) / _2127), _2137), 0.0)).x), vec4(0.25)));
        _2199 = 1.0 - (_2192 * cbSceneParam._m0[34u].x);
        _2200 = 1.0 - (_2192 * cbSceneParam._m0[34u].y);
        _2201 = 1.0 - (_2192 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2199 = 1.0;
        _2200 = 1.0;
        _2201 = 1.0;
    }
    float _2265;
    float _2267;
    float _2269;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2253 = fma(_2049, cbSceneParam._m0[63u].w, fma(_2045, cbSceneParam._m0[63u].z, fma(_2041, cbSceneParam._m0[63u].y, _2037 * cbSceneParam._m0[63u].x)));
        float _2254 = fma(_2049, cbSceneParam._m0[60u].w, fma(_2045, cbSceneParam._m0[60u].z, fma(_2041, cbSceneParam._m0[60u].y, _2037 * cbSceneParam._m0[60u].x))) / _2253;
        float _2255 = fma(_2049, cbSceneParam._m0[61u].w, fma(_2045, cbSceneParam._m0[61u].z, fma(_2041, cbSceneParam._m0[61u].y, _2037 * cbSceneParam._m0[61u].x))) / _2253;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2254 >= cbSceneParam._m0[64u].x) && (_2255 >= cbSceneParam._m0[64u].y)) && (_2254 <= cbSceneParam._m0[64u].z)) && (_2255 <= cbSceneParam._m0[64u].w))
        {
            float _2393 = fma(_2049, cbSceneParam._m0[62u].w, fma(_2045, cbSceneParam._m0[62u].z, fma(_2041, cbSceneParam._m0[62u].y, _2037 * cbSceneParam._m0[62u].x))) / _2253;
            float _2397 = isnan(cbSceneParam._m0[41u].w) ? _2393 : (isnan(_2393) ? cbSceneParam._m0[41u].w : max(_2393, cbSceneParam._m0[41u].w));
            float _2440 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
            float _4593 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
            float _2447 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2254, cbSceneParam._m0[33u].w + _2255), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2254, _2255 - cbSceneParam._m0[33u].z), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].z, _2255 - cbSceneParam._m0[33u].w), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2255), _2397), 0.0)).x), vec4(0.25)));
            float _2451 = 1.0 - (_2447 * cbSceneParam._m0[34u].x);
            float _2452 = 1.0 - (_2447 * cbSceneParam._m0[34u].y);
            float _2453 = 1.0 - (_2447 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
            frontier_phi_37_36_ladder_1 = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_37_36_ladder_2 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
        }
        else
        {
            frontier_phi_37_36_ladder = _2201;
            frontier_phi_37_36_ladder_1 = _2200;
            frontier_phi_37_36_ladder_2 = _2199;
        }
        _2265 = frontier_phi_37_36_ladder_2;
        _2267 = frontier_phi_37_36_ladder_1;
        _2269 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2265 = _2199;
        _2267 = _2200;
        _2269 = _2201;
    }
    uvec4 _2274 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2276 = _2274.x * 14u;
    uint _2277 = _2276 + 13u;
    float _2284 = _948 + (-1.0);
    float _2289 = (cbLight._m0[_2277].x * _2284) + 1.0;
    float _2290 = (cbLight._m0[_2277].y * _2284) + 1.0;
    float _2291 = (cbLight._m0[_2277].z * _2284) + 1.0;
    float _2292 = (cbLight._m0[_2277].w * _2284) + 1.0;
    uint _2293 = _2276 + 5u;
    float _2299 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2303 = _2276 + 4u;
    float _2312 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2316 = _2276 | 1u;
    float _2327 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_786, _787, _788));
    float _2330 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_786, _787, _788));
    float _4629 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _4640 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2335 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * 0.3183098733425140380859375;
    float _2337 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2344 = ((cbLight._m0[_2293].x * _2299) * _2337) + (((cbLight._m0[_2303].x * _2265) * _2312) * _2335);
    float _2345 = ((_2299 * cbLight._m0[_2293].y) * _2337) + (((cbLight._m0[_2303].y * _2267) * _2312) * _2335);
    float _2346 = ((_2299 * cbLight._m0[_2293].z) * _2337) + (((cbLight._m0[_2303].z * _2269) * _2312) * _2335);
    uvec4 _2350 = floatBitsToUint(cbLight._m0[_2276 + 12u]);
    bool _2352 = _2350.x == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2352)
    {
        _2454 = _2344;
        _2456 = _2345;
        _2458 = _2346;
    }
    else
    {
        uint _2462 = _2276 + 6u;
        float _2478 = (dot(vec3(cbLight._m0[_2276 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4651 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2481 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2454 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2344;
        _2456 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2345;
        _2458 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2346;
    }
    bool _2461 = _2350.y == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2461)
    {
        _2516 = _2454;
        _2518 = _2456;
        _2520 = _2458;
    }
    else
    {
        uint _2678 = _2276 + 7u;
        float _2694 = (dot(vec3(cbLight._m0[_2276 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2695 = _2694 * _2694;
        float _4667 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2696 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2697 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2516 = (((cbLight._m0[_2678].x * 0.3183098733425140380859375) * _2696) * _2697) + _2454;
        _2518 = (((cbLight._m0[_2678].y * 0.3183098733425140380859375) * _2696) * _2697) + _2456;
        _2520 = (((cbLight._m0[_2678].z * 0.3183098733425140380859375) * _2696) * _2697) + _2458;
    }
    uint _2523 = _2276 + 8u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _789) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2276].x + _865;
    float _2539 = cbLight._m0[_2276].y + _866;
    float _2540 = cbLight._m0[_2276].z + _867;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2276].xyz));
    float _4683 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _4694 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2552 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2553 = dot(vec3(_786, _787, _788), vec3(_2545, _2546, _2547));
    float _4705 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2545, _2546, _2547));
    float _4716 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2537 * _2537;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2577 = 1.0 - _2537;
    float _2588 = (0.5 / (((_2552 * ((_2551 * _2577) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2577) + _2537) * _2551))) * _2551;
    float _4727 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    uint _2604 = _2276 + 9u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _789) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2316].x + _865;
    float _2618 = cbLight._m0[_2316].y + _866;
    float _2619 = cbLight._m0[_2316].z + _867;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2316].xyz));
    float _4738 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2631 = dot(vec3(_786, _787, _788), vec3(_2624, _2625, _2626));
    float _4749 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2624, _2625, _2626));
    float _4760 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2616 * _2616;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2652 = (exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2653 = 1.0 - _2616;
    float _2663 = (0.5 / (((_2552 * ((_2630 * _2653) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2653) + _2616) * _2630))) * _2630;
    float _4771 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    float _2675 = (((_2652 * cbLight._m0[_2604].x) * _2665) * _2299) + ((((cbLight._m0[_2523].x * _2265) * _2576) * _2590) * _2312);
    float _2676 = (((_2652 * cbLight._m0[_2604].y) * _2665) * _2299) + ((((cbLight._m0[_2523].y * _2267) * _2576) * _2590) * _2312);
    float _2677 = (((_2652 * cbLight._m0[_2604].z) * _2665) * _2299) + ((((cbLight._m0[_2523].z * _2269) * _2576) * _2590) * _2312);
    float _2733;
    float _2735;
    float _2737;
    if (_2352)
    {
        _2733 = _2675;
        _2735 = _2676;
        _2737 = _2677;
    }
    else
    {
        uint _2739 = _2276 + 2u;
        uint _2743 = _2276 + 10u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _789) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _865;
        float _2760 = cbLight._m0[_2739].y + _866;
        float _2761 = cbLight._m0[_2739].z + _867;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2739].xyz));
        float _4782 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2773 = dot(vec3(_786, _787, _788), vec3(_2766, _2767, _2768));
        float _4793 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4804 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2794 = (exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2795 = 1.0 - _2758;
        float _2805 = (0.5 / (((_2552 * ((_2772 * _2795) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2795) + _2758) * _2772))) * _2772;
        float _4815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2733 = (((_2794 * cbLight._m0[_2743].x) * _2807) * _2808) + _2675;
        _2735 = (((_2794 * cbLight._m0[_2743].y) * _2807) * _2808) + _2676;
        _2737 = (((_2794 * cbLight._m0[_2743].z) * _2807) * _2808) + _2677;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2461)
    {
        _2839 = _2733;
        _2841 = _2735;
        _2843 = _2737;
    }
    else
    {
        uint _2850 = _2276 + 3u;
        uint _2854 = _2276 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _789) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _865;
        float _2871 = cbLight._m0[_2850].y + _866;
        float _2872 = cbLight._m0[_2850].z + _867;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2850].xyz));
        float _4831 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2884 = dot(vec3(_786, _787, _788), vec3(_2877, _2878, _2879));
        float _4842 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4853 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2905 = (exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2906 = 1.0 - _2869;
        float _2916 = (0.5 / (((_2552 * ((_2883 * _2906) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2906) + _2869) * _2883))) * _2883;
        float _4864 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2918 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2919 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2839 = (((_2905 * cbLight._m0[_2854].x) * _2918) * _2919) + _2733;
        _2841 = (((_2905 * cbLight._m0[_2854].y) * _2918) * _2919) + _2735;
        _2843 = (((_2905 * cbLight._m0[_2854].z) * _2918) * _2919) + _2737;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2274.y == 0u)
    {
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.x;
        uint _2952 = uint((float(_2940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2941))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2941)));
        float _2962 = (log2(_2052 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2963 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        uint _2966 = uint(isnan(14.0) ? _2963 : (isnan(_2963) ? 14.0 : min(_2963, 14.0)));
        uvec4 _2971 = texelFetch(g_lightClusterGridBuffer, int(((_2966 << 2u) + (_2952 << 6u)) >> 2u));
        uint _2972 = _2971.x;
        uint _2973 = _2940.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2973 >> 4u) & 15u)) + 4294967295u) & _2972) == 0u) || ((_2973 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            uint _3210 = 0u;
            uint _3219;
            bool _3220;
            for (;;)
            {
                _3219 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                _3220 = _3219 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3220)
                {
                    frontier_phi_71_pred = _3209;
                    frontier_phi_71_pred_1 = _3208;
                    frontier_phi_71_pred_2 = _3207;
                    frontier_phi_71_pred_3 = _3206;
                    frontier_phi_71_pred_4 = _3205;
                    frontier_phi_71_pred_5 = _3204;
                }
                else
                {
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    uint _3355;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3219;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    for (;;)
                    {
                        uint _3359 = uint(findLSB(_3355)) + (_3210 << 5u);
                        uint _3356 = (_3355 + 4294967295u) & _3355;
                        uint _3361 = _3359 * 48u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3381 = (_3359 * 48u) + 4u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3400 = (_3359 * 48u) + 8u;
                        vec3 _3411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x));
                        float _3415 = _3375.x - _2050;
                        float _3416 = _3375.y - _2051;
                        float _3417 = _3375.z - _2052;
                        float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                        float _3421 = inversesqrt(_3418);
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3425 = dot(vec3(_904, _907, _910), vec3(_3422, _3423, _3424));
                        float _3430 = 1.0 - (_3418 * _3375.w);
                        float _4890 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3432 = sqrt(_3418) * _3394.w;
                        float _3435 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3425) + _3436;
                        float _3442 = _3432 * _3432;
                        float _3446 = ((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3431) / ((_3442 * 0.699999988079071044921875) + 1.0);
                        float _3450 = (-0.0) - _2050;
                        float _3451 = (-0.0) - _2051;
                        float _3452 = (-0.0) - _2052;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3466 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                        float _3467 = 1.0 - _964;
                        float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                        float _3475 = _3474 * _3474;
                        float _3476 = _3475 * _3475;
                        float _3477 = _3457 + _3422;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3487 = dot(vec3(_904, _907, _910), vec3(_3457, _3458, _3459));
                        float _4906 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3491 = dot(vec3(_904, _907, _910), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                        float _4917 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                        float _3499 = _3435 * _3475;
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3425) + _3500;
                        float _4928 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3505 = 1.0 - _3475;
                        float _3515 = (0.5 / (((_3504 * ((_3490 * _3505) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3504 * _3505) + _3475) * _3490))) * _3504;
                        float _4939 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3526 = (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) / ((_3498 * _3498) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125))) * _3431;
                        _3279 = (_3446 * _3394.x) + _3352;
                        _3280 = (_3446 * _3394.y) + _3353;
                        _3281 = (_3446 * _3394.z) + _3354;
                        _3276 = (_3526 * _3411.x) + _3349;
                        _3277 = (_3526 * _3411.y) + _3350;
                        _3278 = (_3526 * _3411.z) + _3351;
                        if (_3356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3356;
                        }
                    }
                    frontier_phi_71_pred = _3281;
                    frontier_phi_71_pred_1 = _3280;
                    frontier_phi_71_pred_2 = _3279;
                    frontier_phi_71_pred_3 = _3278;
                    frontier_phi_71_pred_4 = _3277;
                    frontier_phi_71_pred_5 = _3276;
                }
                _3063 = frontier_phi_71_pred;
                _3061 = frontier_phi_71_pred_1;
                _3059 = frontier_phi_71_pred_2;
                _3057 = frontier_phi_71_pred_3;
                _3055 = frontier_phi_71_pred_4;
                _3053 = frontier_phi_71_pred_5;
                uint _3211 = _3210 + 1u;
                if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3204 = _3053;
                    _3205 = _3055;
                    _3206 = _3057;
                    _3207 = _3059;
                    _3208 = _3061;
                    _3209 = _3063;
                    _3210 = _3211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((4294967295u << _3069) & _2972) == 0u)
        {
            _3172 = _3052;
            _3174 = _3054;
            _3176 = _3056;
            _3178 = _3058;
            _3180 = _3060;
            _3182 = _3062;
        }
        else
        {
            float _3197 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
            float _3198 = _3197 * _2050;
            float _3199 = _3197 * _2051;
            float _3200 = _3197 * _2052;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3332 = _3052;
                float _3333 = _3054;
                float _3334 = _3056;
                float _3335 = _3058;
                float _3336 = _3060;
                float _3337 = _3062;
                uint _3338 = _3069;
                uint _3347;
                bool _3348;
                for (;;)
                {
                    _3347 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                    _3348 = _3347 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3348)
                    {
                        frontier_phi_82_pred = _3337;
                        frontier_phi_82_pred_1 = _3336;
                        frontier_phi_82_pred_2 = _3335;
                        frontier_phi_82_pred_3 = _3334;
                        frontier_phi_82_pred_4 = _3333;
                        frontier_phi_82_pred_5 = _3332;
                    }
                    else
                    {
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        float _3557 = _3336;
                        float _3558 = _3337;
                        uint _3559 = _3347;
                        uint _3560;
                        vec4 _3585;
                        float _3586;
                        vec4 _3601;
                        vec3 _3613;
                        vec4 _3628;
                        vec4 _3643;
                        float _3689;
                        bool _3690;
                        for (;;)
                        {
                            uint _3570 = ((_3338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3559));
                            _3560 = (_3559 + 4294967295u) & _3559;
                            uint _3572 = _3570 * 40u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3586 = _3585.w;
                            uint _3588 = (_3570 * 40u) + 4u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3570 * 40u) + 8u;
                            _3613 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x));
                            uint _3615 = (_3570 * 40u) + 16u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3570 * 40u) + 20u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3570 * 40u) + 24u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3664 = (_3570 * 40u) + 28u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            _3689 = fma(_2052, _3677.z, fma(_2051, _3677.y, _3677.x * _2050)) + _3677.w;
                            _3690 = !((fma(_2052, _3658.z, fma(_2051, _3658.y, _3658.x * _2050)) + _3658.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3690)
                            {
                                float _3717 = _3585.x - _2050;
                                float _3718 = _3585.y - _2051;
                                float _3719 = _3585.z - _2052;
                                float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                                float _3723 = inversesqrt(_3720);
                                float _3724 = _3723 * _3717;
                                float _3725 = _3723 * _3718;
                                float _3726 = _3723 * _3719;
                                float _3730 = 1.0 - (_3720 / (_3586 * _3586));
                                float _4950 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3735 = sqrt(_3720) * _3601.w;
                                float _3737 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                                float _3738 = _3737 * _3737;
                                float _3741 = ((1.0 - _3738) * dot(vec3(_3724, _3725, _3726), vec3(_904, _907, _910))) + _3738;
                                float _3744 = _3735 * _3735;
                                float _3748 = (fma(_2052, _3628.z, fma(_2051, _3628.y, _3628.x * _2050)) + _3628.w) / _3689;
                                float _3749 = (fma(_2052, _3643.z, fma(_2051, _3643.y, _3643.x * _2050)) + _3643.w) / _3689;
                                float _3753 = 1.0 - dot(vec2(_3748, _3749), vec2(_3748, _3749));
                                float _4966 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3755 = _3754 * (((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3731) / ((_3744 * 0.699999988079071044921875) + 1.0));
                                float _3767 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                                float _3768 = 1.0 - _964;
                                float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                                float _3776 = _3775 * _3775;
                                float _3777 = _3776 * _3776;
                                float _3778 = _3724 - _3198;
                                float _3779 = _3725 - _3199;
                                float _3780 = _3726 - _3200;
                                float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                                float _3788 = dot(vec3(_904, _907, _910), vec3((-0.0) - _3198, (-0.0) - _3199, (-0.0) - _3200));
                                float _4977 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3792 = dot(vec3(_904, _907, _910), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                                float _4988 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                                float _3800 = _3737 * _3776;
                                float _3801 = _3800 * _3800;
                                float _3807 = ((1.0 - _3801) * dot(vec3(_904, _907, _910), vec3(_3724, _3725, _3726))) + _3801;
                                float _4999 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3809 = 1.0 - _3776;
                                float _3819 = (0.5 / (((_3808 * ((_3791 * _3809) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3808 * _3809) + _3776) * _3791))) * _3808;
                                float _5010 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3829 = (_3754 * _3731) * (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3799 * _3799) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3755 * _3601.z;
                                frontier_phi_88_pred_1 = _3755 * _3601.y;
                                frontier_phi_88_pred_2 = _3755 * _3601.x;
                                frontier_phi_88_pred_3 = _3829 * _3613.z;
                                frontier_phi_88_pred_4 = _3829 * _3613.y;
                                frontier_phi_88_pred_5 = _3829 * _3613.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_88_pred;
                            _3837 = frontier_phi_88_pred_1;
                            _3836 = frontier_phi_88_pred_2;
                            _3835 = frontier_phi_88_pred_3;
                            _3834 = frontier_phi_88_pred_4;
                            _3833 = frontier_phi_88_pred_5;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            if (_3560 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3560;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3545;
                        frontier_phi_82_pred_1 = _3544;
                        frontier_phi_82_pred_2 = _3543;
                        frontier_phi_82_pred_3 = _3542;
                        frontier_phi_82_pred_4 = _3541;
                        frontier_phi_82_pred_5 = _3540;
                    }
                    _3183 = frontier_phi_82_pred;
                    _3181 = frontier_phi_82_pred_1;
                    _3179 = frontier_phi_82_pred_2;
                    _3177 = frontier_phi_82_pred_3;
                    _3175 = frontier_phi_82_pred_4;
                    _3173 = frontier_phi_82_pred_5;
                    uint _3339 = _3338 + 1u;
                    if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3332 = _3173;
                        _3333 = _3175;
                        _3334 = _3177;
                        _3335 = _3179;
                        _3336 = _3181;
                        _3337 = _3183;
                        _3338 = _3339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3179;
                frontier_phi_63_64_ladder_1 = _3183;
                frontier_phi_63_64_ladder_2 = _3181;
                frontier_phi_63_64_ladder_3 = _3177;
                frontier_phi_63_64_ladder_4 = _3175;
                frontier_phi_63_64_ladder_5 = _3173;
            }
            else
            {
                frontier_phi_63_64_ladder = _3058;
                frontier_phi_63_64_ladder_1 = _3062;
                frontier_phi_63_64_ladder_2 = _3060;
                frontier_phi_63_64_ladder_3 = _3056;
                frontier_phi_63_64_ladder_4 = _3054;
                frontier_phi_63_64_ladder_5 = _3052;
            }
            _3172 = frontier_phi_63_64_ladder_5;
            _3174 = frontier_phi_63_64_ladder_4;
            _3176 = frontier_phi_63_64_ladder_3;
            _3178 = frontier_phi_63_64_ladder;
            _3180 = frontier_phi_63_64_ladder_2;
            _3182 = frontier_phi_63_64_ladder_1;
        }
        float _3187 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2985 = (_3187 * _3178) + _2516;
        _2987 = (_3187 * _3180) + _2518;
        _2989 = (_3187 * _3182) + _2520;
        _2991 = ((_3172 * 0.039999999105930328369140625) * _3187) + _2839;
        _2993 = ((_3174 * 0.039999999105930328369140625) * _3187) + _2841;
        _2995 = ((_3176 * 0.039999999105930328369140625) * _3187) + _2843;
    }
    else
    {
        _2985 = _2516;
        _2987 = _2518;
        _2989 = _2520;
        _2991 = _2839;
        _2993 = _2841;
        _2995 = _2843;
    }
    float _5026 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _5037 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _5048 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _3012 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2985 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _948))) + ((_2991 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3013 = ((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_2987 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _948))) + ((_2993 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3014 = ((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_2989 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _948))) + ((_2995 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _3015 = _257 + 6u;
    float _3023 = _885 / cbSceneParam._m0[86u].x;
    float _3024 = _886 / cbSceneParam._m0[86u].y;
    vec4 _3038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3040 = _3038.x;
    float _3041 = _3038.y;
    float _3042 = _3038.z;
    float _3043 = _3038.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _3078 = _3077 / _807;
        float _3089 = _3078 * _858;
        float _3090 = _859 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3092 = _3078 * _860;
        float _3094 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3090;
        float _3102 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3289;
        if (abs((_3091 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3289 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3233 = 1.0 / cbSceneParam._m0[80u].x;
            float _3234 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3235 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            _3289 = ((abs(_3102 / _3091) * cbSceneParam._m0[80u].y) * ((((_3244 - _3245) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))))) * _3233)) - ((exp2(_3112 * _3244) - exp2(_3112 * _3245)) * _3233))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3291 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, 1.0), 0.0);
        float _3300 = exp2((_3289 * (-1.44269502162933349609375)) * (1.0 - _3291.w));
        float _3301 = log2(_3300);
        float _3317 = log2(_3043);
        _3114 = (exp2(_3317 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].x)) * _3291.x) / cbSceneParam._m0[78u].x)) + _3040;
        _3116 = (exp2(_3317 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].y)) * _3291.y) / cbSceneParam._m0[78u].y)) + _3041;
        _3118 = (exp2(_3317 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].z)) * _3291.z) / cbSceneParam._m0[78u].z)) + _3042;
        _3120 = _3300 * _3043;
    }
    else
    {
        _3114 = _3040;
        _3116 = _3041;
        _3118 = _3042;
        _3120 = _3043;
    }
    bool _3327;
    vec4 _3130;
    vec4 _3152;
    float _3154;
    float _3158;
    float _3159;
    float _3160;
    float _3161;
    bool _3171;
    for (;;)
    {
        _3130 = cbMatDynParam._m0[0u];
        float _3132 = roundEven(_3130.y);
        bool _3133 = _3132 == 3.0;
        float _3134 = log2(_3120);
        float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * _3012;
        float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * _3013;
        float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * _3014;
        float _3150 = _874 + (-0.5);
        _3152 = cbMtdParam._m0[1u];
        _3154 = _3152.y * _3150;
        float _3157 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3158 = _3157 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
        _3159 = _3157 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
        _3160 = _3157 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
        _3161 = _3150 * 0.999000012874603271484375;
        _3171 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3171)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3161) < 0.5)
            {
                _3327 = true;
                break;
            }
        }
        uint _3268 = _923 + uint(_3130.w);
        if ((cbInstanceData._m0[_3268].w < 1.0) && ((cbInstanceData._m0[_3268].w + _3161) < 0.5))
        {
            _3327 = true;
            break;
        }
        if ((_3154 + 1.0) < _3152.x)
        {
            _3327 = true;
            break;
        }
        _3327 = false;
        break;
    }
    float _3531;
    if (_3327)
    {
        discard_state = true;
        _3531 = 0.0;
    }
    else
    {
        _3531 = cbInstanceData._m0[_3015].w;
    }
    SV_Target.x = _3158;
    SV_Target.y = _3159;
    SV_Target.z = _3160;
    SV_Target.w = _3531;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3015].w;
    discard_exit();
}


