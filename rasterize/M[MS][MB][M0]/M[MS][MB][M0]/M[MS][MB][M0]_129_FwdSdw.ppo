#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1215;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3802 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3813 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3824 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _397 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _397) * cbMtdParam._m0[24u].x) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3835 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _422 = (_415 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _423 = (_415 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _424 = (_415 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) + _434;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _415) + _528;
    float _540 = ((((_507.x - _526) * _415) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _415) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3846 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _604 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_590 - _591) * cbMtdParam._m0[24u].z) + _591) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3857 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _612 = (_605 * ((_462.x * cbMtdParam._m0[18u].x) - _441)) + _441;
    float _613 = (_605 * ((_462.y * cbMtdParam._m0[18u].y) - _442)) + _442;
    float _614 = (_605 * ((_462.z * cbMtdParam._m0[18u].z) - _443)) + _443;
    float _619 = (((_482.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _623 = ((_563.z - _619) * cbMtdParam._m0[19u].w) + _619;
    vec4 _636 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3868 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _653 = (_605 * (_636.z - _623)) + _623;
    float _662 = (_540 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_482.x * 2.0) + (-1.0)))) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _663 = (_541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_482.y * 2.0) + (-1.0)))) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _675 = (((_643 - _662) + (cbMtdParam._m0[21u].x * _662)) * _605) + _662;
    float _676 = (((_644 - _663) + (cbMtdParam._m0[21u].x * _663)) * _605) + _663;
    float _677 = (_605 * (sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _547)) + _547;
    float _679 = cbMtdParam._m0[22u].x + _563.w;
    float _682 = fma(_677, _232 * NORMAL.x, fma(_676, _239 * TANGENT.x, (_225 * _217) * _675));
    float _685 = fma(_677, _232 * NORMAL.y, fma(_676, _239 * TANGENT.y, (_225 * _218) * _675));
    float _688 = fma(_677, _232 * NORMAL.z, fma(_676, _239 * TANGENT.z, (_225 * _219) * _675));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3879 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _696 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3901 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3912 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3923 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _766 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _768 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
    float _773 = _766 * _772;
    float _774 = _767 * _772;
    float _775 = _768 * _772;
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_695, cbSceneParam._m0[5u].z, fma(_694, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _693));
    float _803 = fma(_695, cbSceneParam._m0[6u].z, fma(_694, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _693));
    float _806 = fma(_695, cbSceneParam._m0[7u].z, fma(_694, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _693));
    uint _820 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_820].z;
    float _3934 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _844 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _840.x;
    float _845 = dot(vec3(_693, _694, _695), vec3(_773, _774, _775));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _693) - _773;
    float _853 = (_848 * _694) - _774;
    float _854 = (_848 * _695) - _775;
    float _858 = abs(dot(vec3(_773, _774, _775), vec3(_693, _694, _695)));
    float _3967 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_696);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1214;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _939 = fma(_913, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905));
        float _943 = fma(_913, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905));
        float _947 = fma(_913, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905));
        float _972 = _905 + _693;
        float _973 = _909 + _694;
        float _974 = _913 + _695;
        float _984 = fma(_974, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972)) - _939;
        float _985 = fma(_974, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972)) - _943;
        float _986 = fma(_974, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972)) - _947;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_939 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_943 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[34u].z) + ((((((_947 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1042 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1008.x + (-0.5));
        float _1044 = _1042 * (_1008.y + (-0.5));
        float _1045 = _1042 * (_1008.z + (-0.5));
        float _1052 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1015.x + (-0.5));
        float _1054 = _1052 * (_1015.y + (-0.5));
        float _1055 = _1052 * (_1015.z + (-0.5));
        float _1062 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1022.x + (-0.5));
        float _1064 = _1062 * (_1022.y + (-0.5));
        float _1065 = _1062 * (_1022.z + (-0.5));
        float _1072 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1029.x + (-0.5));
        float _1074 = _1072 * (_1029.y + (-0.5));
        float _1075 = _1072 * (_1029.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1096 = (dot(vec3(_693, _694, _695), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1106 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _4015 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1108 + 1.0))) + _1113) * _1076;
        float _1123 = _1044 * 0.5;
        float _1124 = _1054 * 0.5;
        float _1125 = _1064 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_693, _694, _695), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4048 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1150 + 1.0))) + _1155) * _1077;
        float _1165 = _1045 * 0.5;
        float _1166 = _1055 * 0.5;
        float _1167 = _1065 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_693, _694, _695), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4081 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1192 + 1.0))) + _1197) * _1078;
        _1214 = _1045;
        _1216 = _1044;
        _1217 = _1043;
        _1218 = _1055;
        _1219 = _1054;
        _1220 = _1053;
        _1221 = _1065;
        _1222 = _1064;
        _1223 = _1063;
        _1224 = _1078;
        _1225 = _1077;
        _1226 = _1076;
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _1215;
        _1216 = _1215;
        _1217 = _1215;
        _1218 = _1215;
        _1219 = _1215;
        _1220 = _1215;
        _1221 = _1215;
        _1222 = _1215;
        _1223 = _1215;
        _1224 = _1215;
        _1225 = _1215;
        _1226 = _1215;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_913, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905));
        float _1258 = fma(_913, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905));
        float _1262 = fma(_913, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905));
        float _1285 = _905 + _693;
        float _1286 = _909 + _694;
        float _1287 = _913 + _695;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_693, _694, _695), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4144 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_693, _694, _695), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4177 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_693, _694, _695), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4210 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1215;
        _1524 = _1215;
        _1525 = _1215;
        _1526 = _1215;
        _1527 = _1215;
        _1528 = _1215;
        _1529 = _1215;
        _1530 = _1215;
        _1531 = _1215;
        _1532 = _1215;
        _1533 = _1215;
        _1534 = _1215;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1227)) + _1227;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1228)) + _1228;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1229)) + _1229;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _852 * 0.5;
    float _1592 = _853 * 0.5;
    float _1593 = _854 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1214, _1218, _1221, _1224));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1707 = fma(_913, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905)) + cbModelParam._m0[13u].w;
        float _1711 = fma(_913, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905)) + cbModelParam._m0[14u].w;
        float _1715 = fma(_913, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905)) + cbModelParam._m0[15u].w;
        float _1718 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1721 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1724 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1752;
        if (_1718 > 0.0)
        {
            _1752 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1752 = frontier_phi_14_12_ladder;
        }
        float _1921;
        if (_1721 > 0.0)
        {
            _1921 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1921 = frontier_phi_23_19_ladder;
        }
        float _2216;
        if (_1724 > 0.0)
        {
            _2216 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2216 = frontier_phi_35_30_ladder;
        }
        float _2218 = isnan(_1921) ? _1752 : (isnan(_1752) ? _1921 : min(_1752, _1921));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1718) + _1707;
        float _2224 = (_2219 * _1721) + _1711;
        float _2225 = (_2219 * _1724) + _1715;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2226;
        float _2230 = _2226 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 > _2230) || ((_2224 < _2228) || ((_2223 < _2228) || (_2223 > _2230))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2225, cbModelParam._m0[9u].z, fma(_2224, cbModelParam._m0[9u].y, _2223 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2225, cbModelParam._m0[10u].z, fma(_2224, cbModelParam._m0[10u].y, _2223 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2225, cbModelParam._m0[11u].z, fma(_2224, cbModelParam._m0[11u].y, _2223 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_13_35_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1740 = frontier_phi_13_35_ladder_2;
        _1742 = frontier_phi_13_35_ladder_1;
        _1744 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1660);
        _1740 = _1728.x * cbModelParam._m0[1u].y;
        _1742 = _1728.y * cbModelParam._m0[1u].y;
        _1744 = _1728.z * cbModelParam._m0[1u].y;
    }
    float _1748 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1748 : min(cbModelParam._m0[25u].w, _1748));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1802 = fma(_913, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905)) + cbModelParam._m0[21u].w;
        float _1806 = fma(_913, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905)) + cbModelParam._m0[22u].w;
        float _1810 = fma(_913, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905)) + cbModelParam._m0[23u].w;
        float _1813 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1816 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1819 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1926;
        if (_1813 > 0.0)
        {
            _1926 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1926 = frontier_phi_25_21_ladder;
        }
        float _2243;
        if (_1816 > 0.0)
        {
            _2243 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2243 = frontier_phi_37_32_ladder;
        }
        float _2570;
        if (_1819 > 0.0)
        {
            _2570 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2570 = frontier_phi_47_44_ladder;
        }
        float _2572 = isnan(_2243) ? _1926 : (isnan(_1926) ? _2243 : min(_1926, _2243));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1813) + _1802;
        float _2578 = (_2573 * _1816) + _1806;
        float _2579 = (_2573 * _1819) + _1810;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1749);
            frontier_phi_22_47_ladder = _2697.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2697.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2697.x * cbModelParam._m0[1u].z;
        }
        _1838 = frontier_phi_22_47_ladder_2;
        _1840 = frontier_phi_22_47_ladder_1;
        _1842 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1749);
        _1838 = _1822.x * cbModelParam._m0[1u].z;
        _1840 = _1822.y * cbModelParam._m0[1u].z;
        _1842 = _1822.z * cbModelParam._m0[1u].z;
    }
    float _1854 = ((((1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_873 * _860)) * _844;
    float _1855 = _1854 * ((cbModelParam._m0[1u].w * (_1838 - _1740)) + _1740);
    float _1856 = _1854 * ((cbModelParam._m0[1u].w * (_1840 - _1742)) + _1742);
    float _1857 = _1854 * ((cbModelParam._m0[1u].w * (_1842 - _1744)) + _1744);
    float _1860 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1855 * cbSceneParam._m0[91u].x));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1913 = _1900 / _1912;
    float _1914 = _1904 / _1912;
    float _1915 = _1908 / _1912;
    float _2062;
    float _2063;
    float _2064;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1942 = ((uint(_1915 > cbSceneParam._m0[59u].y) + uint(_1915 > cbSceneParam._m0[59u].x)) + uint(_1915 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1943 = _1942 + 43u;
        uint _1951 = _1942 + 44u;
        uint _1959 = _1942 + 45u;
        uint _1967 = _1942 + 46u;
        float _1978 = fma(_1912, cbSceneParam._m0[_1943].w, fma(_1908, cbSceneParam._m0[_1943].z, fma(_1904, cbSceneParam._m0[_1943].y, _1900 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1912, cbSceneParam._m0[_1951].w, fma(_1908, cbSceneParam._m0[_1951].z, fma(_1904, cbSceneParam._m0[_1951].y, _1900 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1912, cbSceneParam._m0[_1967].w, fma(_1908, cbSceneParam._m0[_1967].z, fma(_1904, cbSceneParam._m0[_1967].y, _1900 * cbSceneParam._m0[_1967].x)));
        float _1995 = cbSceneParam._m0[33u].z * _1990;
        float _1997 = cbSceneParam._m0[33u].w * _1990;
        float _2000 = fma(_1912, cbSceneParam._m0[_1959].w, fma(_1908, cbSceneParam._m0[_1959].z, fma(_1904, cbSceneParam._m0[_1959].y, _1900 * cbSceneParam._m0[_1959].x))) / _1990;
        float _2048 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
        float _4336 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2055 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 + _1978) / _1990, (_1997 + _1982) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 + _1978) / _1990, (_1982 - _1995) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1995) / _1990, (_1982 - _1997) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1997) / _1990, (_1995 + _1982) / _1990), _2000), 0.0)).x), vec4(0.25)));
        _2062 = 1.0 - (_2055 * cbSceneParam._m0[34u].x);
        _2063 = 1.0 - (_2055 * cbSceneParam._m0[34u].y);
        _2064 = 1.0 - (_2055 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2062 = 1.0;
        _2063 = 1.0;
        _2064 = 1.0;
    }
    float _2128;
    float _2130;
    float _2132;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2116 = fma(_1912, cbSceneParam._m0[63u].w, fma(_1908, cbSceneParam._m0[63u].z, fma(_1904, cbSceneParam._m0[63u].y, _1900 * cbSceneParam._m0[63u].x)));
        float _2117 = fma(_1912, cbSceneParam._m0[60u].w, fma(_1908, cbSceneParam._m0[60u].z, fma(_1904, cbSceneParam._m0[60u].y, _1900 * cbSceneParam._m0[60u].x))) / _2116;
        float _2118 = fma(_1912, cbSceneParam._m0[61u].w, fma(_1908, cbSceneParam._m0[61u].z, fma(_1904, cbSceneParam._m0[61u].y, _1900 * cbSceneParam._m0[61u].x))) / _2116;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2117 >= cbSceneParam._m0[64u].x) && (_2118 >= cbSceneParam._m0[64u].y)) && (_2117 <= cbSceneParam._m0[64u].z)) && (_2118 <= cbSceneParam._m0[64u].w))
        {
            float _2256 = fma(_1912, cbSceneParam._m0[62u].w, fma(_1908, cbSceneParam._m0[62u].z, fma(_1904, cbSceneParam._m0[62u].y, _1900 * cbSceneParam._m0[62u].x))) / _2116;
            float _2260 = isnan(cbSceneParam._m0[41u].w) ? _2256 : (isnan(_2256) ? cbSceneParam._m0[41u].w : max(_2256, cbSceneParam._m0[41u].w));
            float _2303 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
            float _4352 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
            float _2310 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2117, cbSceneParam._m0[33u].w + _2118), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2117, _2118 - cbSceneParam._m0[33u].z), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].z, _2118 - cbSceneParam._m0[33u].w), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2118), _2260), 0.0)).x), vec4(0.25)));
            float _2314 = 1.0 - (_2310 * cbSceneParam._m0[34u].x);
            float _2315 = 1.0 - (_2310 * cbSceneParam._m0[34u].y);
            float _2316 = 1.0 - (_2310 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2316) ? _2064 : (isnan(_2064) ? _2316 : min(_2064, _2316));
            frontier_phi_34_33_ladder_1 = isnan(_2315) ? _2063 : (isnan(_2063) ? _2315 : min(_2063, _2315));
            frontier_phi_34_33_ladder_2 = isnan(_2314) ? _2062 : (isnan(_2062) ? _2314 : min(_2062, _2314));
        }
        else
        {
            frontier_phi_34_33_ladder = _2064;
            frontier_phi_34_33_ladder_1 = _2063;
            frontier_phi_34_33_ladder_2 = _2062;
        }
        _2128 = frontier_phi_34_33_ladder_2;
        _2130 = frontier_phi_34_33_ladder_1;
        _2132 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2128 = _2062;
        _2130 = _2063;
        _2132 = _2064;
    }
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _844 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2175 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2179 = _2139 | 1u;
    float _2190 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_693, _694, _695));
    float _2193 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_693, _694, _695));
    float _4388 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _4399 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2200 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2207 = ((cbLight._m0[_2156].x * _2162) * _2200) + (((cbLight._m0[_2166].x * _2128) * _2175) * _2198);
    float _2208 = ((_2162 * cbLight._m0[_2156].y) * _2200) + (((cbLight._m0[_2166].y * _2130) * _2175) * _2198);
    float _2209 = ((_2162 * cbLight._m0[_2156].z) * _2200) + (((cbLight._m0[_2166].z * _2132) * _2175) * _2198);
    uvec4 _2213 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2215 = _2213.x == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2215)
    {
        _2317 = _2207;
        _2319 = _2208;
        _2321 = _2209;
    }
    else
    {
        uint _2325 = _2139 + 6u;
        float _2341 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4410 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2344 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2317 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2207;
        _2319 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2208;
        _2321 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2209;
    }
    bool _2324 = _2213.y == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2324)
    {
        _2379 = _2317;
        _2381 = _2319;
        _2383 = _2321;
    }
    else
    {
        uint _2541 = _2139 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4426 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2560 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2379 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2317;
        _2381 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2319;
        _2383 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2321;
    }
    uint _2386 = _2139 + 8u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _696) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2139].x + _773;
    float _2402 = cbLight._m0[_2139].y + _774;
    float _2403 = cbLight._m0[_2139].z + _775;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2139].xyz));
    float _4442 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2415 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2416 = dot(vec3(_693, _694, _695), vec3(_2408, _2409, _2410));
    float _4464 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2408, _2409, _2410));
    float _4475 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2400 * _2400;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2400;
    float _2451 = (0.5 / (((_2415 * ((_2414 * _2440) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2440) + _2400) * _2414))) * _2414;
    float _4486 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    uint _2467 = _2139 + 9u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _696) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2179].x + _773;
    float _2481 = cbLight._m0[_2179].y + _774;
    float _2482 = cbLight._m0[_2179].z + _775;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2179].xyz));
    float _4497 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2494 = dot(vec3(_693, _694, _695), vec3(_2487, _2488, _2489));
    float _4508 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2487, _2488, _2489));
    float _4519 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2479 * _2479;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2516 = 1.0 - _2479;
    float _2526 = (0.5 / (((_2415 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2516) + _2479) * _2493))) * _2493;
    float _4530 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    float _2538 = (((_2515 * cbLight._m0[_2467].x) * _2528) * _2162) + ((((cbLight._m0[_2386].x * _2128) * _2439) * _2453) * _2175);
    float _2539 = (((_2515 * cbLight._m0[_2467].y) * _2528) * _2162) + ((((cbLight._m0[_2386].y * _2130) * _2439) * _2453) * _2175);
    float _2540 = (((_2515 * cbLight._m0[_2467].z) * _2528) * _2162) + ((((cbLight._m0[_2386].z * _2132) * _2439) * _2453) * _2175);
    float _2596;
    float _2598;
    float _2600;
    if (_2215)
    {
        _2596 = _2538;
        _2598 = _2539;
        _2600 = _2540;
    }
    else
    {
        uint _2602 = _2139 + 2u;
        uint _2606 = _2139 + 10u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _696) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _773;
        float _2623 = cbLight._m0[_2602].y + _774;
        float _2624 = cbLight._m0[_2602].z + _775;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2602].xyz));
        float _4541 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2636 = dot(vec3(_693, _694, _695), vec3(_2629, _2630, _2631));
        float _4552 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4563 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2657 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2658 = 1.0 - _2621;
        float _2668 = (0.5 / (((_2415 * ((_2635 * _2658) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2658) + _2621) * _2635))) * _2635;
        float _4574 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2670 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2671 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2596 = (((_2657 * cbLight._m0[_2606].x) * _2670) * _2671) + _2538;
        _2598 = (((_2657 * cbLight._m0[_2606].y) * _2670) * _2671) + _2539;
        _2600 = (((_2657 * cbLight._m0[_2606].z) * _2670) * _2671) + _2540;
    }
    float _2702;
    float _2704;
    float _2706;
    if (_2324)
    {
        _2702 = _2596;
        _2704 = _2598;
        _2706 = _2600;
    }
    else
    {
        uint _2713 = _2139 + 3u;
        uint _2717 = _2139 + 11u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _696) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _773;
        float _2734 = cbLight._m0[_2713].y + _774;
        float _2735 = cbLight._m0[_2713].z + _775;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2713].xyz));
        float _4590 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2747 = dot(vec3(_693, _694, _695), vec3(_2740, _2741, _2742));
        float _4601 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4612 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2768 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2769 = 1.0 - _2732;
        float _2779 = (0.5 / (((_2415 * ((_2746 * _2769) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2769) + _2732) * _2746))) * _2746;
        float _4623 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2702 = (((_2768 * cbLight._m0[_2717].x) * _2781) * _2782) + _2596;
        _2704 = (((_2768 * cbLight._m0[_2717].y) * _2781) * _2782) + _2598;
        _2706 = (((_2768 * cbLight._m0[_2717].z) * _2781) * _2782) + _2600;
    }
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_2137.y == 0u)
    {
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2804)));
        float _2825 = (log2(_1915 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3076)
                {
                    frontier_phi_66_pred = _3065;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3075;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3066 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _1913;
                        float _3251 = _3210.y - _1914;
                        float _3252 = _3210.z - _1915;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_800, _803, _806), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4649 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _1913;
                        float _3286 = (-0.0) - _1914;
                        float _3287 = (-0.0) - _1915;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3301 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _860;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3314 = _3294 + _3259;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_800, _803, _806), vec3(_3292, _3293, _3294));
                        float _4665 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3326 = dot(vec3(_800, _803, _806), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4676 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3270 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3260) + _3335;
                        float _4687 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4698 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3333 * _3333) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3119 = (_3281 * _3229.x) + _3187;
                        _3120 = (_3281 * _3229.y) + _3188;
                        _3121 = (_3281 * _3229.z) + _3189;
                        _3116 = (_3361 * _3246.x) + _3184;
                        _3117 = (_3361 * _3246.y) + _3185;
                        _3118 = (_3361 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_66_pred = _3121;
                    frontier_phi_66_pred_1 = _3120;
                    frontier_phi_66_pred_2 = _3119;
                    frontier_phi_66_pred_3 = _3118;
                    frontier_phi_66_pred_4 = _3117;
                    frontier_phi_66_pred_5 = _3116;
                }
                _2926 = frontier_phi_66_pred;
                _2924 = frontier_phi_66_pred_1;
                _2922 = frontier_phi_66_pred_2;
                _2920 = frontier_phi_66_pred_3;
                _2918 = frontier_phi_66_pred_4;
                _2916 = frontier_phi_66_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2916;
                    _3061 = _2918;
                    _3062 = _2920;
                    _3063 = _2922;
                    _3064 = _2924;
                    _3065 = _2926;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2932) & _2835) == 0u)
        {
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
            float _3054 = _3053 * _1913;
            float _3055 = _3053 * _1914;
            float _3056 = _3053 * _1915;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3167 = _2915;
                float _3168 = _2917;
                float _3169 = _2919;
                float _3170 = _2921;
                float _3171 = _2923;
                float _3172 = _2925;
                uint _3173 = _2932;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3183)
                    {
                        frontier_phi_72_pred = _3172;
                        frontier_phi_72_pred_1 = _3171;
                        frontier_phi_72_pred_2 = _3170;
                        frontier_phi_72_pred_3 = _3169;
                        frontier_phi_72_pred_4 = _3168;
                        frontier_phi_72_pred_5 = _3167;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        uint _3385 = _3182;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3396 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3396 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3396 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3396 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_1915, _3503.z, fma(_1914, _3503.y, _3503.x * _1913)) + _3503.w;
                            _3516 = !((fma(_1915, _3484.z, fma(_1914, _3484.y, _3484.x * _1913)) + _3484.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3411.x - _1913;
                                float _3544 = _3411.y - _1914;
                                float _3545 = _3411.z - _1915;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3412 * _3412));
                                float _4709 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3561 = sqrt(_3546) * _3427.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_800, _803, _806))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_1915, _3454.z, fma(_1914, _3454.y, _3454.x * _1913)) + _3454.w) / _3515;
                                float _3575 = (fma(_1915, _3469.z, fma(_1914, _3469.y, _3469.x * _1913)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4725 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _860;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3054;
                                float _3605 = _3551 - _3055;
                                float _3606 = _3552 - _3056;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_800, _803, _806), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4736 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3618 = dot(vec3(_800, _803, _806), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4747 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_800, _803, _806), vec3(_3550, _3551, _3552))) + _3627;
                                float _4758 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4769 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3581 * _3427.y;
                                frontier_phi_78_pred_1 = _3581 * _3427.x;
                                frontier_phi_78_pred_2 = _3655 * _3439.z;
                                frontier_phi_78_pred_3 = _3655 * _3439.y;
                                frontier_phi_78_pred_4 = _3655 * _3439.x;
                                frontier_phi_78_pred_5 = _3581 * _3427.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_78_pred;
                            _3662 = frontier_phi_78_pred_1;
                            _3661 = frontier_phi_78_pred_2;
                            _3660 = frontier_phi_78_pred_3;
                            _3659 = frontier_phi_78_pred_4;
                            _3664 = frontier_phi_78_pred_5;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3371;
                        frontier_phi_72_pred_1 = _3370;
                        frontier_phi_72_pred_2 = _3369;
                        frontier_phi_72_pred_3 = _3368;
                        frontier_phi_72_pred_4 = _3367;
                        frontier_phi_72_pred_5 = _3366;
                    }
                    _3039 = frontier_phi_72_pred;
                    _3037 = frontier_phi_72_pred_1;
                    _3035 = frontier_phi_72_pred_2;
                    _3033 = frontier_phi_72_pred_3;
                    _3031 = frontier_phi_72_pred_4;
                    _3029 = frontier_phi_72_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3029;
                        _3168 = _3031;
                        _3169 = _3033;
                        _3170 = _3035;
                        _3171 = _3037;
                        _3172 = _3039;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3039;
                frontier_phi_60_61_ladder_1 = _3037;
                frontier_phi_60_61_ladder_2 = _3033;
                frontier_phi_60_61_ladder_3 = _3031;
                frontier_phi_60_61_ladder_4 = _3029;
                frontier_phi_60_61_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2923;
                frontier_phi_60_61_ladder_2 = _2919;
                frontier_phi_60_61_ladder_3 = _2917;
                frontier_phi_60_61_ladder_4 = _2915;
                frontier_phi_60_61_ladder_5 = _2921;
            }
            _3028 = frontier_phi_60_61_ladder_4;
            _3030 = frontier_phi_60_61_ladder_3;
            _3032 = frontier_phi_60_61_ladder_2;
            _3034 = frontier_phi_60_61_ladder_5;
            _3036 = frontier_phi_60_61_ladder_1;
            _3038 = frontier_phi_60_61_ladder;
        }
        float _3043 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2848 = (_3043 * _3034) + _2379;
        _2850 = (_3043 * _3036) + _2381;
        _2852 = (_3043 * _3038) + _2383;
        _2854 = ((_3028 * 0.039999999105930328369140625) * _3043) + _2702;
        _2856 = ((_3030 * 0.039999999105930328369140625) * _3043) + _2704;
        _2858 = ((_3032 * 0.039999999105930328369140625) * _3043) + _2706;
    }
    else
    {
        _2848 = _2379;
        _2850 = _2381;
        _2852 = _2383;
        _2854 = _2702;
        _2856 = _2704;
        _2858 = _2706;
    }
    float _4785 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4796 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4807 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    uint _2878 = _266 + 6u;
    float _2886 = _781 / cbSceneParam._m0[86u].x;
    float _2887 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2941 = _2940 / _714;
        float _2952 = _2941 * _766;
        float _2953 = _767 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _768;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3091 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3129 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2976 * _3100) - exp2(_2976 * _3101)) * _3089))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2906);
        _2978 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2903;
        _2980 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2904;
        _2982 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2905;
        _2984 = _3140 * _2906;
    }
    else
    {
        _2978 = _2903;
        _2980 = _2904;
        _2982 = _2905;
        _2984 = _2906;
    }
    float _2996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2997 = _2996 == 3.0;
    float _2998 = log2(_2984);
    float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2848 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _844))) + ((_2854 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2850 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _844))) + ((_2856 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2852 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _844))) + ((_2858 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3016 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3016 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.y = _3016 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.z = _3016 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.w = cbInstanceData._m0[_2878].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
}


