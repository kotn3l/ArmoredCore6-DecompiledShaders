#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1277;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3864 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _390) + _484;
    float _496 = ((((_463.x - _482) * _390) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _390) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3875 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _553 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _556 = ((isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : min(_553, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _565 = (_556 - ((((((_546 - _547) * cbMtdParam._m0[24u].z) + _547) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _556))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3896 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _573 = (_566 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _574 = (_566 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _575 = (_566 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    vec4 _587 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _617 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].w) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3907 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _626 = ((((cbMtdParam._m0[10u].x - _573) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _618) + _573;
    float _627 = ((((cbMtdParam._m0[10u].y - _574) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _618) + _574;
    float _628 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _575)) * _618) + _575;
    float _633 = (((_438.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    float _637 = ((_519.z - _633) * cbMtdParam._m0[19u].w) + _633;
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3918 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _668 = (_566 * (_651.z - _637)) + _637;
    float _671 = ((cbMtdParam._m0[23u].y - _668) * _618) + _668;
    vec4 _690 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _696 = (_690.x * 2.0) + (-1.0);
    float _697 = (_690.y * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _3929 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _712 = (_496 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_438.x * 2.0) + (-1.0)))) + (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _713 = (_497 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_438.y * 2.0) + (-1.0)))) + (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _725 = (((_658 - _712) + (cbMtdParam._m0[21u].x * _712)) * _566) + _712;
    float _726 = (((_659 - _713) + (cbMtdParam._m0[21u].x * _713)) * _566) + _713;
    float _727 = (_566 * (sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) - _503)) + _503;
    float _738 = (((_696 - _725) + (_725 * cbMtdParam._m0[22u].z)) * _618) + _725;
    float _739 = (((_697 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _618) + _726;
    float _740 = ((sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) - _727) * _618) + _727;
    float _742 = cbMtdParam._m0[22u].x + _519.w;
    float _745 = fma(_740, _242 * NORMAL.x, fma(_739, _249 * TANGENT.x, (_235 * _227) * _738));
    float _748 = fma(_740, _242 * NORMAL.y, fma(_739, _249 * TANGENT.y, (_235 * _228) * _738));
    float _751 = fma(_740, _242 * NORMAL.z, fma(_739, _249 * TANGENT.z, (_235 * _229) * _738));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3940 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _759 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3962 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3973 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3984 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _828 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _818);
    float _829 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _818);
    float _830 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _818);
    float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
    float _835 = _828 * _834;
    float _836 = _829 * _834;
    float _837 = _830 * _834;
    float _843 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _844 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _865 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _868 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _882 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3995 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _843, cbSceneParam._m0[86u].y * _844));
    float _906 = ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * TEXCOORD_5.w) * _902.x;
    float _907 = dot(vec3(_756, _757, _758), vec3(_835, _836, _837));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _756) - _835;
    float _915 = (_910 * _757) - _836;
    float _916 = (_910 * _758) - _837;
    float _920 = abs(dot(vec3(_835, _836, _837), vec3(_756, _757, _758)));
    float _4028 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_759);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1005 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1009 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1034 = _967 + _756;
        float _1035 = _971 + _757;
        float _1036 = _975 + _758;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_756, _757, _758), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4076 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_756, _757, _758), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4109 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_756, _757, _758), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4142 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1320 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1324 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1347 = _967 + _756;
        float _1348 = _971 + _757;
        float _1349 = _975 + _758;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_756, _757, _758), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4205 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_756, _757, _758), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4238 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_756, _757, _758), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4271 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1277;
        _1586 = _1277;
        _1587 = _1277;
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1289)) + _1289;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1290)) + _1290;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _914 * 0.5;
    float _1654 = _915 * 0.5;
    float _1655 = _916 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1783 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1786 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1814 = frontier_phi_14_12_ladder;
        }
        float _1983;
        if (_1783 > 0.0)
        {
            _1983 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1983 = frontier_phi_23_19_ladder;
        }
        float _2278;
        if (_1786 > 0.0)
        {
            _2278 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2278 = frontier_phi_35_30_ladder;
        }
        float _2280 = isnan(_1983) ? _1814 : (isnan(_1814) ? _1983 : min(_1814, _1983));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1780) + _1769;
        float _2286 = (_2281 * _1783) + _1773;
        float _2287 = (_2281 * _1786) + _1777;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_13_35_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_13_35_ladder_2;
        _1804 = frontier_phi_13_35_ladder_1;
        _1806 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1878 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1881 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _1988;
        if (_1875 > 0.0)
        {
            _1988 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1988 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1878 > 0.0)
        {
            _2305 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2632;
        if (_1881 > 0.0)
        {
            _2632 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2632 = frontier_phi_47_44_ladder;
        }
        float _2634 = isnan(_2305) ? _1988 : (isnan(_1988) ? _2305 : min(_1988, _2305));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1875) + _1864;
        float _2640 = (_2635 * _1878) + _1868;
        float _2641 = (_2635 * _1881) + _1872;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_22_47_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_22_47_ladder_2;
        _1902 = frontier_phi_22_47_ladder_1;
        _1904 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1811);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1916 = ((((1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _922)) * _906;
    float _1917 = _1916 * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1918 = _1916 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1919 = _1916 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1918, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1918, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1918, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1975 = _1962 / _1974;
    float _1976 = _1966 / _1974;
    float _1977 = _1970 / _1974;
    float _2124;
    float _2125;
    float _2126;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2004 = ((uint(_1977 > cbSceneParam._m0[59u].y) + uint(_1977 > cbSceneParam._m0[59u].x)) + uint(_1977 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2005 = _2004 + 43u;
        uint _2013 = _2004 + 44u;
        uint _2021 = _2004 + 45u;
        uint _2029 = _2004 + 46u;
        float _2040 = fma(_1974, cbSceneParam._m0[_2005].w, fma(_1970, cbSceneParam._m0[_2005].z, fma(_1966, cbSceneParam._m0[_2005].y, _1962 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1974, cbSceneParam._m0[_2013].w, fma(_1970, cbSceneParam._m0[_2013].z, fma(_1966, cbSceneParam._m0[_2013].y, _1962 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1974, cbSceneParam._m0[_2029].w, fma(_1970, cbSceneParam._m0[_2029].z, fma(_1966, cbSceneParam._m0[_2029].y, _1962 * cbSceneParam._m0[_2029].x)));
        float _2057 = cbSceneParam._m0[33u].z * _2052;
        float _2059 = cbSceneParam._m0[33u].w * _2052;
        float _2062 = fma(_1974, cbSceneParam._m0[_2021].w, fma(_1970, cbSceneParam._m0[_2021].z, fma(_1966, cbSceneParam._m0[_2021].y, _1962 * cbSceneParam._m0[_2021].x))) / _2052;
        float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
        float _4397 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2117 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2040) / _2052, (_2059 + _2044) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2040) / _2052, (_2044 - _2057) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2057) / _2052, (_2044 - _2059) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2059) / _2052, (_2057 + _2044) / _2052), _2062), 0.0)).x), vec4(0.25)));
        _2124 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
        _2125 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
        _2126 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2124 = 1.0;
        _2125 = 1.0;
        _2126 = 1.0;
    }
    float _2190;
    float _2192;
    float _2194;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2178 = fma(_1974, cbSceneParam._m0[63u].w, fma(_1970, cbSceneParam._m0[63u].z, fma(_1966, cbSceneParam._m0[63u].y, _1962 * cbSceneParam._m0[63u].x)));
        float _2179 = fma(_1974, cbSceneParam._m0[60u].w, fma(_1970, cbSceneParam._m0[60u].z, fma(_1966, cbSceneParam._m0[60u].y, _1962 * cbSceneParam._m0[60u].x))) / _2178;
        float _2180 = fma(_1974, cbSceneParam._m0[61u].w, fma(_1970, cbSceneParam._m0[61u].z, fma(_1966, cbSceneParam._m0[61u].y, _1962 * cbSceneParam._m0[61u].x))) / _2178;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2179 >= cbSceneParam._m0[64u].x) && (_2180 >= cbSceneParam._m0[64u].y)) && (_2179 <= cbSceneParam._m0[64u].z)) && (_2180 <= cbSceneParam._m0[64u].w))
        {
            float _2318 = fma(_1974, cbSceneParam._m0[62u].w, fma(_1970, cbSceneParam._m0[62u].z, fma(_1966, cbSceneParam._m0[62u].y, _1962 * cbSceneParam._m0[62u].x))) / _2178;
            float _2322 = isnan(cbSceneParam._m0[41u].w) ? _2318 : (isnan(_2318) ? cbSceneParam._m0[41u].w : max(_2318, cbSceneParam._m0[41u].w));
            float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
            float _4413 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
            float _2372 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2179, cbSceneParam._m0[33u].w + _2180), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2179, _2180 - cbSceneParam._m0[33u].z), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].z, _2180 - cbSceneParam._m0[33u].w), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2180), _2322), 0.0)).x), vec4(0.25)));
            float _2376 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
            float _2377 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
            float _2378 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_34_33_ladder_1 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_34_33_ladder_2 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
        }
        else
        {
            frontier_phi_34_33_ladder = _2126;
            frontier_phi_34_33_ladder_1 = _2125;
            frontier_phi_34_33_ladder_2 = _2124;
        }
        _2190 = frontier_phi_34_33_ladder_2;
        _2192 = frontier_phi_34_33_ladder_1;
        _2194 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2190 = _2124;
        _2192 = _2125;
        _2194 = _2126;
    }
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _906 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2237 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2241 = _2201 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_756, _757, _758));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_756, _757, _758));
    float _4449 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4460 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2218].x * _2224) * _2262) + (((cbLight._m0[_2228].x * _2190) * _2237) * _2260);
    float _2270 = ((_2224 * cbLight._m0[_2218].y) * _2262) + (((cbLight._m0[_2228].y * _2192) * _2237) * _2260);
    float _2271 = ((_2224 * cbLight._m0[_2218].z) * _2262) + (((cbLight._m0[_2228].z * _2194) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2277)
    {
        _2379 = _2269;
        _2381 = _2270;
        _2383 = _2271;
    }
    else
    {
        uint _2387 = _2201 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4471 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2406 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2269;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2270;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2271;
    }
    bool _2386 = _2275.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2386)
    {
        _2441 = _2379;
        _2443 = _2381;
        _2445 = _2383;
    }
    else
    {
        uint _2603 = _2201 + 7u;
        float _2619 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2620 = _2619 * _2619;
        float _4487 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2621 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2622 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2441 = (((cbLight._m0[_2603].x * 0.3183098733425140380859375) * _2621) * _2622) + _2379;
        _2443 = (((cbLight._m0[_2603].y * 0.3183098733425140380859375) * _2621) * _2622) + _2381;
        _2445 = (((cbLight._m0[_2603].z * 0.3183098733425140380859375) * _2621) * _2622) + _2383;
    }
    uint _2448 = _2201 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _759) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2201].x + _835;
    float _2464 = cbLight._m0[_2201].y + _836;
    float _2465 = cbLight._m0[_2201].z + _837;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2201].xyz));
    float _4503 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _4514 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2477 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2478 = dot(vec3(_756, _757, _758), vec3(_2470, _2471, _2472));
    float _4525 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2470, _2471, _2472));
    float _4536 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2502 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2477 * ((_2476 * _2502) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2502) + _2462) * _2476))) * _2476;
    float _4547 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2529 = _2201 + 9u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _759) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2241].x + _835;
    float _2543 = cbLight._m0[_2241].y + _836;
    float _2544 = cbLight._m0[_2241].z + _837;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2241].xyz));
    float _4558 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2556 = dot(vec3(_756, _757, _758), vec3(_2549, _2550, _2551));
    float _4569 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2549, _2550, _2551));
    float _4580 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2541 * _2541;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2577 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2578 = 1.0 - _2541;
    float _2588 = (0.5 / (((_2477 * ((_2555 * _2578) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2578) + _2541) * _2555))) * _2555;
    float _4591 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    float _2600 = (((_2577 * cbLight._m0[_2529].x) * _2590) * _2224) + ((((cbLight._m0[_2448].x * _2190) * _2501) * _2515) * _2237);
    float _2601 = (((_2577 * cbLight._m0[_2529].y) * _2590) * _2224) + ((((cbLight._m0[_2448].y * _2192) * _2501) * _2515) * _2237);
    float _2602 = (((_2577 * cbLight._m0[_2529].z) * _2590) * _2224) + ((((cbLight._m0[_2448].z * _2194) * _2501) * _2515) * _2237);
    float _2658;
    float _2660;
    float _2662;
    if (_2277)
    {
        _2658 = _2600;
        _2660 = _2601;
        _2662 = _2602;
    }
    else
    {
        uint _2664 = _2201 + 2u;
        uint _2668 = _2201 + 10u;
        float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2664].w)) * _759) * 0.949999988079071044921875);
        float _2683 = _2682 * _2682;
        float _2684 = cbLight._m0[_2664].x + _835;
        float _2685 = cbLight._m0[_2664].y + _836;
        float _2686 = cbLight._m0[_2664].z + _837;
        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
        float _2691 = _2690 * _2684;
        float _2692 = _2690 * _2685;
        float _2693 = _2690 * _2686;
        float _2694 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2664].xyz));
        float _4602 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2698 = dot(vec3(_756, _757, _758), vec3(_2691, _2692, _2693));
        float _4613 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2702 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_2691, _2692, _2693));
        float _4624 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2706 = _2683 * _2683;
        float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
        float _2719 = (exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2720 = 1.0 - _2683;
        float _2730 = (0.5 / (((_2477 * ((_2697 * _2720) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2720) + _2683) * _2697))) * _2697;
        float _4635 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2658 = (((_2719 * cbLight._m0[_2668].x) * _2732) * _2733) + _2600;
        _2660 = (((_2719 * cbLight._m0[_2668].y) * _2732) * _2733) + _2601;
        _2662 = (((_2719 * cbLight._m0[_2668].z) * _2732) * _2733) + _2602;
    }
    float _2764;
    float _2766;
    float _2768;
    if (_2386)
    {
        _2764 = _2658;
        _2766 = _2660;
        _2768 = _2662;
    }
    else
    {
        uint _2775 = _2201 + 3u;
        uint _2779 = _2201 + 11u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _759) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _835;
        float _2796 = cbLight._m0[_2775].y + _836;
        float _2797 = cbLight._m0[_2775].z + _837;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2775].xyz));
        float _4651 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2809 = dot(vec3(_756, _757, _758), vec3(_2802, _2803, _2804));
        float _4662 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4673 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2830 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2831 = 1.0 - _2794;
        float _2841 = (0.5 / (((_2477 * ((_2808 * _2831) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2831) + _2794) * _2808))) * _2808;
        float _4684 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2843 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2844 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2764 = (((_2830 * cbLight._m0[_2779].x) * _2843) * _2844) + _2658;
        _2766 = (((_2830 * cbLight._m0[_2779].y) * _2843) * _2844) + _2660;
        _2768 = (((_2830 * cbLight._m0[_2779].z) * _2843) * _2844) + _2662;
    }
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_2199.y == 0u)
    {
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.x;
        uint _2877 = uint((float(_2865.y) * floor(float(uint(cbSceneParam._m0[85u].y * _844) / _2866))) + floor(float(uint(cbSceneParam._m0[85u].x * _843) / _2866)));
        float _2887 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2888 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        uint _2891 = uint(isnan(14.0) ? _2888 : (isnan(_2888) ? 14.0 : min(_2888, 14.0)));
        uvec4 _2896 = texelFetch(g_lightClusterGridBuffer, int(((_2891 << 2u) + (_2877 << 6u)) >> 2u));
        uint _2897 = _2896.x;
        uint _2898 = _2865.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2898 >> 4u) & 15u)) + 4294967295u) & _2897) == 0u) || ((_2898 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            uint _3128 = 0u;
            uint _3137;
            bool _3138;
            for (;;)
            {
                _3137 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                _3138 = _3137 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3138)
                {
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3126;
                    frontier_phi_66_pred_2 = _3125;
                    frontier_phi_66_pred_3 = _3124;
                    frontier_phi_66_pred_4 = _3123;
                    frontier_phi_66_pred_5 = _3122;
                }
                else
                {
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    uint _3252;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3137;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    for (;;)
                    {
                        uint _3256 = uint(findLSB(_3252)) + (_3128 << 5u);
                        uint _3253 = (_3252 + 4294967295u) & _3252;
                        uint _3258 = _3256 * 48u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3278 = (_3256 * 48u) + 4u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3297 = (_3256 * 48u) + 8u;
                        vec3 _3308 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x));
                        float _3312 = _3272.x - _1975;
                        float _3313 = _3272.y - _1976;
                        float _3314 = _3272.z - _1977;
                        float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                        float _3318 = inversesqrt(_3315);
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3322 = dot(vec3(_862, _865, _868), vec3(_3319, _3320, _3321));
                        float _3327 = 1.0 - (_3315 * _3272.w);
                        float _4710 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3329 = sqrt(_3315) * _3291.w;
                        float _3332 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3322) + _3333;
                        float _3339 = _3329 * _3329;
                        float _3343 = ((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3328) / ((_3339 * 0.699999988079071044921875) + 1.0);
                        float _3347 = (-0.0) - _1975;
                        float _3348 = (-0.0) - _1976;
                        float _3349 = (-0.0) - _1977;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3363 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                        float _3364 = 1.0 - _922;
                        float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                        float _3372 = _3371 * _3371;
                        float _3373 = _3372 * _3372;
                        float _3374 = _3354 + _3319;
                        float _3375 = _3355 + _3320;
                        float _3376 = _3356 + _3321;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3384 = dot(vec3(_862, _865, _868), vec3(_3354, _3355, _3356));
                        float _4726 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3388 = dot(vec3(_862, _865, _868), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                        float _4737 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                        float _3396 = _3332 * _3372;
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3322) + _3397;
                        float _4748 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3402 = 1.0 - _3372;
                        float _3412 = (0.5 / (((_3401 * ((_3387 * _3402) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3372) * _3387))) * _3401;
                        float _4759 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3423 = (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3395 * _3395) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125))) * _3328;
                        _3181 = (_3343 * _3291.x) + _3249;
                        _3182 = (_3343 * _3291.y) + _3250;
                        _3183 = (_3343 * _3291.z) + _3251;
                        _3178 = (_3423 * _3308.x) + _3246;
                        _3179 = (_3423 * _3308.y) + _3247;
                        _3180 = (_3423 * _3308.z) + _3248;
                        if (_3253 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3253;
                        }
                    }
                    frontier_phi_66_pred = _3183;
                    frontier_phi_66_pred_1 = _3182;
                    frontier_phi_66_pred_2 = _3181;
                    frontier_phi_66_pred_3 = _3180;
                    frontier_phi_66_pred_4 = _3179;
                    frontier_phi_66_pred_5 = _3178;
                }
                _2988 = frontier_phi_66_pred;
                _2986 = frontier_phi_66_pred_1;
                _2984 = frontier_phi_66_pred_2;
                _2982 = frontier_phi_66_pred_3;
                _2980 = frontier_phi_66_pred_4;
                _2978 = frontier_phi_66_pred_5;
                uint _3129 = _3128 + 1u;
                if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3122 = _2978;
                    _3123 = _2980;
                    _3124 = _2982;
                    _3125 = _2984;
                    _3126 = _2986;
                    _3127 = _2988;
                    _3128 = _3129;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((4294967295u << _2994) & _2897) == 0u)
        {
            _3090 = _2977;
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
            _3100 = _2987;
        }
        else
        {
            float _3115 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _3116 = _3115 * _1975;
            float _3117 = _3115 * _1976;
            float _3118 = _3115 * _1977;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3229 = _2977;
                float _3230 = _2979;
                float _3231 = _2981;
                float _3232 = _2983;
                float _3233 = _2985;
                float _3234 = _2987;
                uint _3235 = _2994;
                uint _3244;
                bool _3245;
                for (;;)
                {
                    _3244 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                    _3245 = _3244 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3245)
                    {
                        frontier_phi_72_pred = _3234;
                        frontier_phi_72_pred_1 = _3233;
                        frontier_phi_72_pred_2 = _3232;
                        frontier_phi_72_pred_3 = _3231;
                        frontier_phi_72_pred_4 = _3230;
                        frontier_phi_72_pred_5 = _3229;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        uint _3447 = _3244;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_1977, _3565.z, fma(_1976, _3565.y, _3565.x * _1975)) + _3565.w;
                            _3578 = !((fma(_1977, _3546.z, fma(_1976, _3546.y, _3546.x * _1975)) + _3546.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _1975;
                                float _3606 = _3473.y - _1976;
                                float _3607 = _3473.z - _1977;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4770 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_862, _865, _868))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_1977, _3516.z, fma(_1976, _3516.y, _3516.x * _1975)) + _3516.w) / _3577;
                                float _3637 = (fma(_1977, _3531.z, fma(_1976, _3531.y, _3531.x * _1975)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4786 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _922;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3116;
                                float _3667 = _3613 - _3117;
                                float _3668 = _3614 - _3118;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_862, _865, _868), vec3((-0.0) - _3116, (-0.0) - _3117, (-0.0) - _3118));
                                float _4797 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3680 = dot(vec3(_862, _865, _868), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4808 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_862, _865, _868), vec3(_3612, _3613, _3614))) + _3689;
                                float _4819 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4830 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3643 * _3489.y;
                                frontier_phi_78_pred_1 = _3643 * _3489.x;
                                frontier_phi_78_pred_2 = _3717 * _3501.z;
                                frontier_phi_78_pred_3 = _3717 * _3501.y;
                                frontier_phi_78_pred_4 = _3717 * _3501.x;
                                frontier_phi_78_pred_5 = _3643 * _3489.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3725 = frontier_phi_78_pred;
                            _3724 = frontier_phi_78_pred_1;
                            _3723 = frontier_phi_78_pred_2;
                            _3722 = frontier_phi_78_pred_3;
                            _3721 = frontier_phi_78_pred_4;
                            _3726 = frontier_phi_78_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3433;
                        frontier_phi_72_pred_1 = _3432;
                        frontier_phi_72_pred_2 = _3431;
                        frontier_phi_72_pred_3 = _3430;
                        frontier_phi_72_pred_4 = _3429;
                        frontier_phi_72_pred_5 = _3428;
                    }
                    _3101 = frontier_phi_72_pred;
                    _3099 = frontier_phi_72_pred_1;
                    _3097 = frontier_phi_72_pred_2;
                    _3095 = frontier_phi_72_pred_3;
                    _3093 = frontier_phi_72_pred_4;
                    _3091 = frontier_phi_72_pred_5;
                    uint _3236 = _3235 + 1u;
                    if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3229 = _3091;
                        _3230 = _3093;
                        _3231 = _3095;
                        _3232 = _3097;
                        _3233 = _3099;
                        _3234 = _3101;
                        _3235 = _3236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3101;
                frontier_phi_60_61_ladder_1 = _3099;
                frontier_phi_60_61_ladder_2 = _3095;
                frontier_phi_60_61_ladder_3 = _3093;
                frontier_phi_60_61_ladder_4 = _3091;
                frontier_phi_60_61_ladder_5 = _3097;
            }
            else
            {
                frontier_phi_60_61_ladder = _2987;
                frontier_phi_60_61_ladder_1 = _2985;
                frontier_phi_60_61_ladder_2 = _2981;
                frontier_phi_60_61_ladder_3 = _2979;
                frontier_phi_60_61_ladder_4 = _2977;
                frontier_phi_60_61_ladder_5 = _2983;
            }
            _3090 = frontier_phi_60_61_ladder_4;
            _3092 = frontier_phi_60_61_ladder_3;
            _3094 = frontier_phi_60_61_ladder_2;
            _3096 = frontier_phi_60_61_ladder_5;
            _3098 = frontier_phi_60_61_ladder_1;
            _3100 = frontier_phi_60_61_ladder;
        }
        float _3105 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2910 = (_3105 * _3096) + _2441;
        _2912 = (_3105 * _3098) + _2443;
        _2914 = (_3105 * _3100) + _2445;
        _2916 = ((_3090 * 0.039999999105930328369140625) * _3105) + _2764;
        _2918 = ((_3092 * 0.039999999105930328369140625) * _3105) + _2766;
        _2920 = ((_3094 * 0.039999999105930328369140625) * _3105) + _2768;
    }
    else
    {
        _2910 = _2441;
        _2912 = _2443;
        _2914 = _2445;
        _2916 = _2764;
        _2918 = _2766;
        _2920 = _2768;
    }
    float _4846 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4857 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4868 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    uint _2940 = _255 + 6u;
    float _2948 = _843 / cbSceneParam._m0[86u].x;
    float _2949 = _844 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _3003 = _3002 / _777;
        float _3014 = _3003 * _828;
        float _3015 = _829 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3018 = _3003 * _830;
        float _3020 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3021 = _3020 + cbSceneParam._m0[79u].w;
        float _3022 = cbSceneParam._m0[79u].w - _3015;
        float _3028 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3018 * _3018));
        float _3031 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3028;
        float _3036 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3038 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3191;
        if (abs((_3016 - _3020) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3191 = ((((_3021 > 0.0) ? exp2(_3036 * _3021) : (2.0 - exp2(_3038 * _3021))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3031;
        }
        else
        {
            float _3151 = 1.0 / cbSceneParam._m0[80u].x;
            float _3152 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : max(_3021, _3022));
            float _3153 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : min(_3021, _3022));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            _3191 = ((abs(_3028 / _3016) * cbSceneParam._m0[80u].y) * ((((_3162 - _3163) * 2.0) - ((exp2(_3036 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0)))) - exp2(_3036 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))))) * _3151)) - ((exp2(_3038 * _3162) - exp2(_3038 * _3163)) * _3151))) + (_3031 * cbSceneParam._m0[80u].z);
        }
        vec4 _3193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3202 = exp2((_3191 * (-1.44269502162933349609375)) * (1.0 - _3193.w));
        float _3203 = log2(_3202);
        float _3219 = log2(_2968);
        _3040 = (exp2(_3219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].x)) * _3193.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3042 = (exp2(_3219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].y)) * _3193.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3044 = (exp2(_3219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].z)) * _3193.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3046 = _3202 * _2968;
    }
    else
    {
        _3040 = _2965;
        _3042 = _2966;
        _3044 = _2967;
        _3046 = _2968;
    }
    float _3058 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3059 = _3058 == 3.0;
    float _3060 = log2(_3046);
    float _3067 = exp2(_3060 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2910 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _906))) + ((_2916 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3068 = exp2(_3060 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2912 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _906))) + ((_2918 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3069 = exp2(_3060 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2914 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _906))) + ((_2920 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3078 = (_3058 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3078 * (_3059 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.y = _3078 * (_3059 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.z = _3078 * (_3059 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.w = cbInstanceData._m0[_2940].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2940].w;
}


