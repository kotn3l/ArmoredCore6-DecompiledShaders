#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1298;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _369 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _369) * cbMtdParam._m0[24u].x) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3627 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _394 = (_387 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _395 = (_387 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _396 = (_387 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].x) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3638 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _515 = ((_487.x - _506) * _387) + _506;
    float _516 = ((_487.y - _507) * _387) + _507;
    float _517 = ((_487.z - _508) * _387) + _508;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _542 = ((_529.z - _517) * _460) + _517;
    float _545 = ((((_529.x - _515) * _460) + _515) * 2.0) + (-1.0);
    float _547 = ((((_529.y - _516) * _460) + _516) * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _3649 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))));
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _593 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _596 = ((isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : min(_593, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _605 = (_596 - ((((((_586 - _587) * cbMtdParam._m0[24u].z) + _587) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _596))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3670 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _613 = (_606 * (cbMtdParam._m0[17u].x - _467)) + _467;
    float _614 = (_606 * (cbMtdParam._m0[17u].y - _468)) + _468;
    float _615 = (_606 * (cbMtdParam._m0[17u].z - _469)) + _469;
    vec4 _627 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_629 - _630) * cbMtdParam._m0[24u].w) + _630) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3681 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _613) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _658) + _613;
    float _667 = ((((cbMtdParam._m0[10u].y - _614) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _658) + _614;
    float _668 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _615)) * _658) + _615;
    vec4 _682 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _690 = (_682.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3692 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = (_606 * (_682.z - _542)) + _542;
    float _702 = ((cbMtdParam._m0[23u].y - _699) * _658) + _699;
    vec4 _721 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _727 = (_721.x * 2.0) + (-1.0);
    float _728 = (_721.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3703 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _746 = (((_689 - _545) + (cbMtdParam._m0[21u].x * _545)) * _606) + _545;
    float _747 = (((_690 - _547) + (cbMtdParam._m0[21u].x * _547)) * _606) + _547;
    float _748 = (_606 * (sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) - _553)) + _553;
    float _759 = (((_727 - _746) + (_746 * cbMtdParam._m0[22u].z)) * _658) + _746;
    float _760 = (((_728 - _747) + (_747 * cbMtdParam._m0[22u].z)) * _658) + _747;
    float _761 = ((sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) - _748) * _658) + _748;
    float _763 = cbMtdParam._m0[22u].x + _566.w;
    float _766 = fma(_761, _238 * NORMAL.x, fma(_760, _245 * TANGENT.x, (_231 * _223) * _759));
    float _769 = fma(_761, _238 * NORMAL.y, fma(_760, _245 * TANGENT.y, (_231 * _224) * _759));
    float _772 = fma(_761, _238 * NORMAL.z, fma(_760, _245 * TANGENT.z, (_231 * _225) * _759));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3714 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _780 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3736 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3747 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3758 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _798 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _886 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _889 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _903 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_903].z;
    float _3769 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _927 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * TEXCOORD_5.w) * _923.x;
    float _928 = dot(vec3(_777, _778, _779), vec3(_856, _857, _858));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _777) - _856;
    float _936 = (_931 * _778) - _857;
    float _937 = (_931 * _779) - _858;
    float _941 = abs(dot(vec3(_856, _857, _858), vec3(_777, _778, _779)));
    float _3802 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_780);
    float _956 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1022 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1026 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1030 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1055 = _988 + _777;
        float _1056 = _992 + _778;
        float _1057 = _996 + _779;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1022;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1026;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1030;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1022 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1026 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1030 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_777, _778, _779), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3850 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_777, _778, _779), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3883 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_777, _778, _779), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3916 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1340 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1344 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1367 = _988 + _777;
        float _1368 = _992 + _778;
        float _1369 = _996 + _779;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_777, _778, _779), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3979 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_777, _778, _779), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4012 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_777, _778, _779), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4045 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1298;
        _1606 = _1298;
        _1607 = _1298;
        _1608 = _1298;
        _1609 = _1298;
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1310)) + _1310;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1311)) + _1311;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1312)) + _1312;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _935 * 0.5;
    float _1674 = _936 * 0.5;
    float _1675 = _937 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1804 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1807 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1835 = frontier_phi_14_12_ladder;
        }
        float _2057;
        if (_1804 > 0.0)
        {
            _2057 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2057 = frontier_phi_23_19_ladder;
        }
        float _2303;
        if (_1807 > 0.0)
        {
            _2303 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2303 = frontier_phi_35_30_ladder;
        }
        float _2305 = isnan(_2057) ? _1835 : (isnan(_1835) ? _2057 : min(_1835, _2057));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1801) + _1790;
        float _2311 = (_2306 * _1804) + _1794;
        float _2312 = (_2306 * _1807) + _1798;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2315 = (-1.0) - _2313;
        float _2317 = _2313 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2312 > _2317) || ((_2312 < _2315) || ((_2311 > _2317) || ((_2311 < _2315) || ((_2310 < _2315) || (_2310 > _2317))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2312, cbModelParam._m0[9u].z, fma(_2311, cbModelParam._m0[9u].y, _2310 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2312, cbModelParam._m0[10u].z, fma(_2311, cbModelParam._m0[10u].y, _2310 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2312, cbModelParam._m0[11u].z, fma(_2311, cbModelParam._m0[11u].y, _2310 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_13_35_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_13_35_ladder_2;
        _1825 = frontier_phi_13_35_ladder_1;
        _1827 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1742);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1900 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1903 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2062;
        if (_1897 > 0.0)
        {
            _2062 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2062 = frontier_phi_25_21_ladder;
        }
        float _2330;
        if (_1900 > 0.0)
        {
            _2330 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2330 = frontier_phi_37_32_ladder;
        }
        float _2535;
        if (_1903 > 0.0)
        {
            _2535 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2535 = frontier_phi_46_43_ladder;
        }
        float _2537 = isnan(_2330) ? _2062 : (isnan(_2062) ? _2330 : min(_2062, _2330));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1897) + _1886;
        float _2543 = (_2538 * _1900) + _1890;
        float _2544 = (_2538 * _1903) + _1894;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_22_46_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_22_46_ladder_2;
        _1924 = frontier_phi_22_46_ladder_1;
        _1926 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1832);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1938 = ((((1.0 - _956) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_956 * _943)) * _927;
    float _1939 = _1938 * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1940 = _1938 * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1941 = _1938 * ((cbModelParam._m0[1u].w * (_1926 - _1827)) + _1827);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    vec4 _1958 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_864, _865));
    float _1960 = _1958.w;
    float _1972 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1960);
    float _1973 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1960);
    float _1974 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1960);
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1988 = _927 + (-1.0);
    float _1993 = (cbLight._m0[_1981].x * _1988) + 1.0;
    float _1994 = (cbLight._m0[_1981].y * _1988) + 1.0;
    float _1995 = (cbLight._m0[_1981].z * _1988) + 1.0;
    float _1996 = (cbLight._m0[_1981].w * _1988) + 1.0;
    uint _1997 = _1980 + 5u;
    float _2003 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2007 = _1980 + 4u;
    float _2016 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2020 = _1980 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_777, _778, _779));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_777, _778, _779));
    float _4181 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4192 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1997].x * _2003) * _2041) + (((cbLight._m0[_2007].x * _1972) * _2016) * _2039);
    float _2049 = ((_2003 * cbLight._m0[_1997].y) * _2041) + (((cbLight._m0[_2007].y * _1973) * _2016) * _2039);
    float _2050 = ((_2003 * cbLight._m0[_1997].z) * _2041) + (((cbLight._m0[_2007].z * _1974) * _2016) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1980 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1980 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1980 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4203 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2094 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2274 = _1980 + 7u;
        float _2290 = (dot(vec3(cbLight._m0[_1980 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4219 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2293 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2112 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2067;
        _2114 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2069;
        _2116 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2071;
    }
    uint _2119 = _1980 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _780) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1980].x + _856;
    float _2135 = cbLight._m0[_1980].y + _857;
    float _2136 = cbLight._m0[_1980].z + _858;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_1980].xyz));
    float _4235 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2148 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2149 = dot(vec3(_777, _778, _779), vec3(_2141, _2142, _2143));
    float _4257 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2141, _2142, _2143));
    float _4268 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2148 * ((_2147 * _2173) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2173) + _2133) * _2147))) * _2147;
    float _4279 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2200 = _1980 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _780) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2020].x + _856;
    float _2214 = cbLight._m0[_2020].y + _857;
    float _2215 = cbLight._m0[_2020].z + _858;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2020].xyz));
    float _4290 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2227 = dot(vec3(_777, _778, _779), vec3(_2220, _2221, _2222));
    float _4301 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2220, _2221, _2222));
    float _4312 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2249 = 1.0 - _2212;
    float _2259 = (0.5 / (((_2148 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2249) + _2212) * _2226))) * _2226;
    float _4323 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2271 = (((_2248 * cbLight._m0[_2200].x) * _2261) * _2003) + ((((cbLight._m0[_2119].x * _1972) * _2172) * _2186) * _2016);
    float _2272 = (((_2248 * cbLight._m0[_2200].y) * _2261) * _2003) + ((((cbLight._m0[_2119].y * _1973) * _2172) * _2186) * _2016);
    float _2273 = (((_2248 * cbLight._m0[_2200].z) * _2261) * _2003) + ((((cbLight._m0[_2119].z * _1974) * _2172) * _2186) * _2016);
    float _2335;
    float _2337;
    float _2339;
    if (_2056)
    {
        _2335 = _2271;
        _2337 = _2272;
        _2339 = _2273;
    }
    else
    {
        uint _2341 = _1980 + 2u;
        uint _2345 = _1980 + 10u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _780) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _856;
        float _2362 = cbLight._m0[_2341].y + _857;
        float _2363 = cbLight._m0[_2341].z + _858;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2341].xyz));
        float _4334 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2375 = dot(vec3(_777, _778, _779), vec3(_2368, _2369, _2370));
        float _4345 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4356 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2396 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2397 = 1.0 - _2360;
        float _2407 = (0.5 / (((_2148 * ((_2374 * _2397) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2397) + _2360) * _2374))) * _2374;
        float _4367 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2335 = (((_2396 * cbLight._m0[_2345].x) * _2409) * _2410) + _2271;
        _2337 = (((_2396 * cbLight._m0[_2345].y) * _2409) * _2410) + _2272;
        _2339 = (((_2396 * cbLight._m0[_2345].z) * _2409) * _2410) + _2273;
    }
    float _2445;
    float _2447;
    float _2449;
    if (_2074)
    {
        _2445 = _2335;
        _2447 = _2337;
        _2449 = _2339;
    }
    else
    {
        uint _2456 = _1980 + 3u;
        uint _2460 = _1980 + 11u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _780) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _856;
        float _2477 = cbLight._m0[_2456].y + _857;
        float _2478 = cbLight._m0[_2456].z + _858;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2456].xyz));
        float _4383 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2490 = dot(vec3(_777, _778, _779), vec3(_2483, _2484, _2485));
        float _4394 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4405 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2511 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2512 = 1.0 - _2475;
        float _2522 = (0.5 / (((_2148 * ((_2489 * _2512) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2512) + _2475) * _2489))) * _2489;
        float _4416 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2445 = (((_2511 * cbLight._m0[_2460].x) * _2524) * _2525) + _2335;
        _2447 = (((_2511 * cbLight._m0[_2460].y) * _2524) * _2525) + _2337;
        _2449 = (((_2511 * cbLight._m0[_2460].z) * _2524) * _2525) + _2339;
    }
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_1978.y == 0u)
    {
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2600;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2600;
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2600;
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.x;
        uint _2627 = uint((float(_2615.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2616))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2616)));
        float _2637 = (log2(_2603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2638 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        uint _2641 = uint(isnan(14.0) ? _2638 : (isnan(_2638) ? 14.0 : min(_2638, 14.0)));
        uvec4 _2646 = texelFetch(g_lightClusterGridBuffer, int(((_2641 << 2u) + (_2627 << 6u)) >> 2u));
        uint _2647 = _2646.x;
        uint _2648 = _2615.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2648 >> 4u) & 15u)) + 4294967295u) & _2647) == 0u) || ((_2648 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            uint _2899 = 0u;
            uint _2908;
            bool _2909;
            for (;;)
            {
                _2908 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                _2909 = _2908 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2909)
                {
                    frontier_phi_61_pred = _2893;
                    frontier_phi_61_pred_1 = _2898;
                    frontier_phi_61_pred_2 = _2897;
                    frontier_phi_61_pred_3 = _2896;
                    frontier_phi_61_pred_4 = _2895;
                    frontier_phi_61_pred_5 = _2894;
                }
                else
                {
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2908;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2899 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3049 = (_3027 * 48u) + 4u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        uint _3068 = (_3027 * 48u) + 8u;
                        vec3 _3079 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x));
                        float _3083 = _3043.x - _2601;
                        float _3084 = _3043.y - _2602;
                        float _3085 = _3043.z - _2603;
                        float _3086 = dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085));
                        float _3089 = inversesqrt(_3086);
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3093 = dot(vec3(_883, _886, _889), vec3(_3090, _3091, _3092));
                        float _3098 = 1.0 - (_3086 * _3043.w);
                        float _4442 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3100 = sqrt(_3086) * _3062.w;
                        float _3103 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3093) + _3104;
                        float _3110 = _3100 * _3100;
                        float _3114 = ((isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))) * _3099) / ((_3110 * 0.699999988079071044921875) + 1.0);
                        float _3118 = (-0.0) - _2601;
                        float _3119 = (-0.0) - _2602;
                        float _3120 = (-0.0) - _2603;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3135 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                        float _3136 = 1.0 - _943;
                        float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                        float _3144 = _3143 * _3143;
                        float _3145 = _3144 * _3144;
                        float _3146 = _3125 + _3090;
                        float _3147 = _3126 + _3091;
                        float _3148 = _3127 + _3092;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3156 = dot(vec3(_883, _886, _889), vec3(_3125, _3126, _3127));
                        float _4458 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3160 = dot(vec3(_883, _886, _889), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                        float _4469 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                        float _3168 = _3103 * _3144;
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3093) + _3169;
                        float _4480 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3174 = 1.0 - _3144;
                        float _3184 = (0.5 / (((_3173 * ((_3159 * _3174) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3144) * _3159))) * _3173;
                        float _4491 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3195 = (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3167 * _3167) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125))) * _3099;
                        _2952 = (_3114 * _3062.x) + _3020;
                        _2953 = (_3114 * _3062.y) + _3021;
                        _2954 = (_3114 * _3062.z) + _3022;
                        _2949 = (_3195 * _3079.x) + _3017;
                        _2950 = (_3195 * _3079.y) + _3018;
                        _2951 = (_3195 * _3079.z) + _3019;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_61_pred = _2949;
                    frontier_phi_61_pred_1 = _2954;
                    frontier_phi_61_pred_2 = _2953;
                    frontier_phi_61_pred_3 = _2952;
                    frontier_phi_61_pred_4 = _2951;
                    frontier_phi_61_pred_5 = _2950;
                }
                _2749 = frontier_phi_61_pred;
                _2759 = frontier_phi_61_pred_1;
                _2757 = frontier_phi_61_pred_2;
                _2755 = frontier_phi_61_pred_3;
                _2753 = frontier_phi_61_pred_4;
                _2751 = frontier_phi_61_pred_5;
                uint _2900 = _2899 + 1u;
                if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2893 = _2749;
                    _2894 = _2751;
                    _2895 = _2753;
                    _2896 = _2755;
                    _2897 = _2757;
                    _2898 = _2759;
                    _2899 = _2900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((4294967295u << _2765) & _2647) == 0u)
        {
            _2861 = _2748;
            _2863 = _2750;
            _2865 = _2752;
            _2867 = _2754;
            _2869 = _2756;
            _2871 = _2758;
        }
        else
        {
            float _2886 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
            float _2887 = _2886 * _2601;
            float _2888 = _2886 * _2602;
            float _2889 = _2886 * _2603;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _3000 = _2748;
                float _3001 = _2750;
                float _3002 = _2752;
                float _3003 = _2754;
                float _3004 = _2756;
                float _3005 = _2758;
                uint _3006 = _2765;
                uint _3015;
                bool _3016;
                for (;;)
                {
                    _3015 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                    _3016 = _3015 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3016)
                    {
                        frontier_phi_67_pred = _3003;
                        frontier_phi_67_pred_1 = _3004;
                        frontier_phi_67_pred_2 = _3005;
                        frontier_phi_67_pred_3 = _3002;
                        frontier_phi_67_pred_4 = _3001;
                        frontier_phi_67_pred_5 = _3000;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        uint _3219 = _3015;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3288;
                        vec4 _3303;
                        float _3349;
                        bool _3350;
                        for (;;)
                        {
                            uint _3230 = ((_3006 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3275 = (_3230 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3230 * 40u) + 20u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3230 * 40u) + 24u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3324 = (_3230 * 40u) + 28u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3349 = fma(_2603, _3337.z, fma(_2602, _3337.y, _3337.x * _2601)) + _3337.w;
                            _3350 = !((fma(_2603, _3318.z, fma(_2602, _3318.y, _3318.x * _2601)) + _3318.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3350)
                            {
                                float _3377 = _3245.x - _2601;
                                float _3378 = _3245.y - _2602;
                                float _3379 = _3245.z - _2603;
                                float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                                float _3383 = inversesqrt(_3380);
                                float _3384 = _3383 * _3377;
                                float _3385 = _3383 * _3378;
                                float _3386 = _3383 * _3379;
                                float _3390 = 1.0 - (_3380 / (_3246 * _3246));
                                float _4502 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3395 = sqrt(_3380) * _3261.w;
                                float _3397 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                                float _3398 = _3397 * _3397;
                                float _3401 = ((1.0 - _3398) * dot(vec3(_3384, _3385, _3386), vec3(_883, _886, _889))) + _3398;
                                float _3404 = _3395 * _3395;
                                float _3408 = (fma(_2603, _3288.z, fma(_2602, _3288.y, _3288.x * _2601)) + _3288.w) / _3349;
                                float _3409 = (fma(_2603, _3303.z, fma(_2602, _3303.y, _3303.x * _2601)) + _3303.w) / _3349;
                                float _3413 = 1.0 - dot(vec2(_3408, _3409), vec2(_3408, _3409));
                                float _4518 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3415 = _3414 * (((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3391) / ((_3404 * 0.699999988079071044921875) + 1.0));
                                float _3427 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3428 = 1.0 - _943;
                                float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                                float _3436 = _3435 * _3435;
                                float _3437 = _3436 * _3436;
                                float _3438 = _3384 - _2887;
                                float _3439 = _3385 - _2888;
                                float _3440 = _3386 - _2889;
                                float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                                float _3448 = dot(vec3(_883, _886, _889), vec3((-0.0) - _2887, (-0.0) - _2888, (-0.0) - _2889));
                                float _4529 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3452 = dot(vec3(_883, _886, _889), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                                float _4540 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                                float _3460 = _3397 * _3436;
                                float _3461 = _3460 * _3460;
                                float _3467 = ((1.0 - _3461) * dot(vec3(_883, _886, _889), vec3(_3384, _3385, _3386))) + _3461;
                                float _4551 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3469 = 1.0 - _3436;
                                float _3479 = (0.5 / (((_3468 * ((_3451 * _3469) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3436) * _3451))) * _3468;
                                float _4562 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3489 = (_3414 * _3391) * (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3459 * _3459) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3489 * _3273.x;
                                frontier_phi_73_pred_1 = _3489 * _3273.y;
                                frontier_phi_73_pred_2 = _3415 * _3261.z;
                                frontier_phi_73_pred_3 = _3415 * _3261.y;
                                frontier_phi_73_pred_4 = _3415 * _3261.x;
                                frontier_phi_73_pred_5 = _3489 * _3273.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3493 = frontier_phi_73_pred;
                            _3494 = frontier_phi_73_pred_1;
                            _3498 = frontier_phi_73_pred_2;
                            _3497 = frontier_phi_73_pred_3;
                            _3496 = frontier_phi_73_pred_4;
                            _3495 = frontier_phi_73_pred_5;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3203;
                        frontier_phi_67_pred_1 = _3204;
                        frontier_phi_67_pred_2 = _3205;
                        frontier_phi_67_pred_3 = _3202;
                        frontier_phi_67_pred_4 = _3201;
                        frontier_phi_67_pred_5 = _3200;
                    }
                    _2868 = frontier_phi_67_pred;
                    _2870 = frontier_phi_67_pred_1;
                    _2872 = frontier_phi_67_pred_2;
                    _2866 = frontier_phi_67_pred_3;
                    _2864 = frontier_phi_67_pred_4;
                    _2862 = frontier_phi_67_pred_5;
                    uint _3007 = _3006 + 1u;
                    if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3000 = _2862;
                        _3001 = _2864;
                        _3002 = _2866;
                        _3003 = _2868;
                        _3004 = _2870;
                        _3005 = _2872;
                        _3006 = _3007;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2870;
                frontier_phi_55_56_ladder_1 = _2872;
                frontier_phi_55_56_ladder_2 = _2868;
                frontier_phi_55_56_ladder_3 = _2866;
                frontier_phi_55_56_ladder_4 = _2864;
                frontier_phi_55_56_ladder_5 = _2862;
            }
            else
            {
                frontier_phi_55_56_ladder = _2756;
                frontier_phi_55_56_ladder_1 = _2758;
                frontier_phi_55_56_ladder_2 = _2754;
                frontier_phi_55_56_ladder_3 = _2752;
                frontier_phi_55_56_ladder_4 = _2750;
                frontier_phi_55_56_ladder_5 = _2748;
            }
            _2861 = frontier_phi_55_56_ladder_5;
            _2863 = frontier_phi_55_56_ladder_4;
            _2865 = frontier_phi_55_56_ladder_3;
            _2867 = frontier_phi_55_56_ladder_2;
            _2869 = frontier_phi_55_56_ladder;
            _2871 = frontier_phi_55_56_ladder_1;
        }
        float _2876 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2660 = (_2876 * _2867) + _2112;
        _2662 = (_2876 * _2869) + _2114;
        _2664 = (_2876 * _2871) + _2116;
        _2666 = ((_2861 * 0.039999999105930328369140625) * _2876) + _2445;
        _2668 = ((_2863 * 0.039999999105930328369140625) * _2876) + _2447;
        _2670 = ((_2865 * 0.039999999105930328369140625) * _2876) + _2449;
    }
    else
    {
        _2660 = _2112;
        _2662 = _2114;
        _2664 = _2116;
        _2666 = _2445;
        _2668 = _2447;
        _2670 = _2449;
    }
    float _4578 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4589 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4600 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    uint _2690 = _251 + 6u;
    float _2698 = _864 / cbSceneParam._m0[86u].x;
    float _2699 = _865 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _798 : (isnan(_798) ? cbSceneParam._m0[77u].w : min(_798, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_798 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_798) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _798 : min(cbSceneParam._m0[80u].w, _798));
        float _2774 = _2773 / _798;
        float _2785 = _2774 * _849;
        float _2786 = _850 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2789 = _2774 * _851;
        float _2791 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2792 = _2791 + cbSceneParam._m0[79u].w;
        float _2793 = cbSceneParam._m0[79u].w - _2786;
        float _2799 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2789 * _2789));
        float _2802 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2799;
        float _2807 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2809 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2962;
        if (abs((_2787 - _2791) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2962 = ((((_2792 > 0.0) ? exp2(_2807 * _2792) : (2.0 - exp2(_2809 * _2792))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2802;
        }
        else
        {
            float _2922 = 1.0 / cbSceneParam._m0[80u].x;
            float _2923 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : max(_2792, _2793));
            float _2924 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : min(_2792, _2793));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            _2962 = ((abs(_2799 / _2787) * cbSceneParam._m0[80u].y) * ((((_2933 - _2934) * 2.0) - ((exp2(_2807 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0)))) - exp2(_2807 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))))) * _2922)) - ((exp2(_2809 * _2933) - exp2(_2809 * _2934)) * _2922))) + (_2802 * cbSceneParam._m0[80u].z);
        }
        vec4 _2964 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2973 = exp2((_2962 * (-1.44269502162933349609375)) * (1.0 - _2964.w));
        float _2974 = log2(_2973);
        float _2990 = log2(_2718);
        _2811 = (exp2(_2990 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].x)) * _2964.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2813 = (exp2(_2990 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].y)) * _2964.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2815 = (exp2(_2990 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].z)) * _2964.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2817 = _2973 * _2718;
    }
    else
    {
        _2811 = _2715;
        _2813 = _2716;
        _2815 = _2717;
        _2817 = _2718;
    }
    float _2829 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2830 = _2829 == 3.0;
    float _2831 = log2(_2817);
    float _2838 = exp2(_2831 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2660 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _927))) + ((_2666 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1731)) * cbPerFrame._m0[3u].x));
    float _2839 = exp2(_2831 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2662 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _927))) + ((_2668 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1731)) * cbPerFrame._m0[3u].x));
    float _2840 = exp2(_2831 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2664 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _927))) + ((_2670 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1731)) * cbPerFrame._m0[3u].x));
    float _2849 = (_2829 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2849 * (_2830 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2811)));
    SV_Target.y = _2849 * (_2830 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
    SV_Target.z = _2849 * (_2830 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
    SV_Target.w = cbInstanceData._m0[_2690].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
}


