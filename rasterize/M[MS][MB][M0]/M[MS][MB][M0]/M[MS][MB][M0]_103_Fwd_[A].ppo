#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3622;
float _3623;
float _3624;
float _3625;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3634 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3645 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))));
    float _451 = fma(_448, _233, fma(_442, _240, _440 * _226));
    float _454 = fma(_448, _234, fma(_442, _241, _440 * _227));
    float _457 = fma(_448, _235, fma(_442, _242, _440 * _228));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _514 = (cbMtdParam._m0[19u].x + dot(vec4(_461 * _451, _461 * _454, _461 * _457, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_507 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[21u].z);
    float _3656 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _517 = (-0.0) - cbMtdParam._m0[24u].y;
    float _519 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
    float _527 = _515 - ((_515 * TEXCOORD_8.x) * _520);
    float _528 = _515 - ((_515 * TEXCOORD_8.y) * _520);
    float _529 = _515 - ((_515 * TEXCOORD_8.z) * _520);
    float _536 = (_527 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _537 = (_528 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _538 = (_529 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _552 = _550.x;
    float _553 = 1.0 - _552;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_552 - _553) * cbMtdParam._m0[24u].w) + _553) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3677 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _536) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _582) + _536;
    float _591 = ((((cbMtdParam._m0[10u].y - _537) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _582) + _537;
    float _592 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _538)) * _582) + _538;
    vec4 _606 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _613 = (_606.x * 2.0) + (-1.0);
    float _614 = (_606.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3688 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _623 = ((_606.z - _437) * _527) + _437;
    float _626 = ((cbMtdParam._m0[23u].y - _623) * _582) + _623;
    vec4 _645 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _651 = (_645.x * 2.0) + (-1.0);
    float _652 = (_645.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3699 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _668 = ((sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _448) * _529) + _448;
    float _671 = (((_613 - _440) * _527) + _440) + (cbMtdParam._m0[21u].x * _440);
    float _672 = (((_614 - _442) * _528) + _442) + (cbMtdParam._m0[21u].x * _442);
    float _683 = (((_651 - _671) + (_671 * cbMtdParam._m0[22u].z)) * _582) + _671;
    float _684 = (((_652 - _672) + (_672 * cbMtdParam._m0[22u].z)) * _582) + _672;
    float _685 = (_582 * (sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) - _668)) + _668;
    float _687 = cbMtdParam._m0[22u].x + _477.w;
    float _690 = fma(_685, _233, fma(_684, _240, _683 * _226));
    float _693 = fma(_685, _234, fma(_684, _241, _683 * _227));
    float _696 = fma(_685, _235, fma(_684, _242, _683 * _228));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _3710 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _704 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3732 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3743 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3754 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _722 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _3765 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _3776 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) - _950)) + _950) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _822 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _825 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _838 = _245 + 9u;
    uint _839 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_839].z;
    float _3787 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _863 = ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * TEXCOORD_5.w) * _859.x;
    float _864 = dot(vec3(_701, _702, _703), vec3(_780, _781, _782));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _701) - _780;
    float _872 = (_867 * _702) - _781;
    float _873 = (_867 * _703) - _782;
    float _877 = abs(dot(vec3(_780, _781, _782), vec3(_701, _702, _703)));
    float _3820 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_704);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _990 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _994 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1019 = _924 + _701;
        float _1020 = _928 + _702;
        float _1021 = _932 + _703;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_701, _702, _703), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3868 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_701, _702, _703), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3901 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_701, _702, _703), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3934 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1308 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1312 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1335 = _924 + _701;
        float _1336 = _928 + _702;
        float _1337 = _932 + _703;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_701, _702, _703), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3997 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_701, _702, _703), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4030 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_701, _702, _703), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4063 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1275)) + _1275;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _871 * 0.5;
    float _1642 = _872 * 0.5;
    float _1643 = _873 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1758 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1762 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1766 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1769 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1772 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1775 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1803;
        if (_1769 > 0.0)
        {
            _1803 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1803 = frontier_phi_17_15_ladder;
        }
        float _2004;
        if (_1772 > 0.0)
        {
            _2004 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2004 = frontier_phi_26_22_ladder;
        }
        float _2247;
        if (_1775 > 0.0)
        {
            _2247 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2247 = frontier_phi_38_33_ladder;
        }
        float _2249 = isnan(_2004) ? _1803 : (isnan(_1803) ? _2004 : min(_1803, _2004));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1769) + _1758;
        float _2255 = (_2250 * _1772) + _1762;
        float _2256 = (_2250 * _1775) + _1766;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1791 = frontier_phi_16_38_ladder_2;
        _1793 = frontier_phi_16_38_ladder_1;
        _1795 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1710);
        _1791 = _1779.x * cbModelParam._m0[1u].y;
        _1793 = _1779.y * cbModelParam._m0[1u].y;
        _1795 = _1779.z * cbModelParam._m0[1u].y;
    }
    float _1799 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1799 : min(cbModelParam._m0[25u].w, _1799));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1868 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1871 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _2009;
        if (_1865 > 0.0)
        {
            _2009 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2009 = frontier_phi_28_24_ladder;
        }
        float _2274;
        if (_1868 > 0.0)
        {
            _2274 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2274 = frontier_phi_40_35_ladder;
        }
        float _2479;
        if (_1871 > 0.0)
        {
            _2479 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2479 = frontier_phi_49_46_ladder;
        }
        float _2481 = isnan(_2274) ? _2009 : (isnan(_2009) ? _2274 : min(_2009, _2274));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1865) + _1854;
        float _2487 = (_2482 * _1868) + _1858;
        float _2488 = (_2482 * _1871) + _1862;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2489;
        float _2492 = _2489 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2488 > _2492) || ((_2488 < _2490) || ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 < _2490) || (_2486 > _2492))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2488, cbModelParam._m0[17u].z, fma(_2487, cbModelParam._m0[17u].y, _2486 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2488, cbModelParam._m0[18u].z, fma(_2487, cbModelParam._m0[18u].y, _2486 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2488, cbModelParam._m0[19u].z, fma(_2487, cbModelParam._m0[19u].y, _2486 * cbModelParam._m0[19u].x))), _1800);
            frontier_phi_25_49_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_25_49_ladder_2;
        _1892 = frontier_phi_25_49_ladder_1;
        _1894 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1800);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1906 = ((((1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_892 * _879)) * _863;
    float _1907 = _1906 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1908 = _1906 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1909 = _1906 * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _863 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1963 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1967 = _1930 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_701, _702, _703));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_701, _702, _703));
    float _4199 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _4210 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1947].x * _1953) * _1988) + ((cbLight._m0[_1957].x * _1963) * _1986);
    float _1996 = ((_1953 * cbLight._m0[_1947].y) * _1988) + ((_1963 * cbLight._m0[_1957].y) * _1986);
    float _1997 = ((_1953 * cbLight._m0[_1947].z) * _1988) + ((_1963 * cbLight._m0[_1957].z) * _1986);
    uvec4 _2001 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2003 = _2001.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_2003)
    {
        _2014 = _1995;
        _2016 = _1996;
        _2018 = _1997;
    }
    else
    {
        uint _2022 = _1930 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4221 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2041 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1995;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1996;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1997;
    }
    bool _2021 = _2001.y == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2021)
    {
        _2059 = _2014;
        _2061 = _2016;
        _2063 = _2018;
    }
    else
    {
        uint _2218 = _1930 + 7u;
        float _2234 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4237 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2237 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2059 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2014;
        _2061 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2016;
        _2063 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2018;
    }
    uint _2066 = _1930 + 8u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _704) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1930].x + _780;
    float _2082 = cbLight._m0[_1930].y + _781;
    float _2083 = cbLight._m0[_1930].z + _782;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_1930].xyz));
    float _4253 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2095 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2096 = dot(vec3(_701, _702, _703), vec3(_2088, _2089, _2090));
    float _4275 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2088, _2089, _2090));
    float _4286 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2080 * _2080;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2120 = 1.0 - _2080;
    float _2131 = (0.5 / (((_2095 * ((_2094 * _2120) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2120) + _2080) * _2094))) * _2094;
    float _4297 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    uint _2144 = _1930 + 9u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _704) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_1967].x + _780;
    float _2158 = cbLight._m0[_1967].y + _781;
    float _2159 = cbLight._m0[_1967].z + _782;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_1967].xyz));
    float _4308 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2171 = dot(vec3(_701, _702, _703), vec3(_2164, _2165, _2166));
    float _4319 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2164, _2165, _2166));
    float _4330 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2156 * _2156;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2193 = 1.0 - _2156;
    float _2203 = (0.5 / (((_2095 * ((_2170 * _2193) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2193) + _2156) * _2170))) * _2170;
    float _4341 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    float _2215 = (((_2192 * cbLight._m0[_2144].x) * _2205) * _1953) + (((_2119 * cbLight._m0[_2066].x) * _2133) * _1963);
    float _2216 = (((_2192 * cbLight._m0[_2144].y) * _2205) * _1953) + (((_2119 * cbLight._m0[_2066].y) * _2133) * _1963);
    float _2217 = (((_2192 * cbLight._m0[_2144].z) * _2205) * _1953) + (((_2119 * cbLight._m0[_2066].z) * _2133) * _1963);
    float _2279;
    float _2281;
    float _2283;
    if (_2003)
    {
        _2279 = _2215;
        _2281 = _2216;
        _2283 = _2217;
    }
    else
    {
        uint _2285 = _1930 + 2u;
        uint _2289 = _1930 + 10u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _704) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _780;
        float _2306 = cbLight._m0[_2285].y + _781;
        float _2307 = cbLight._m0[_2285].z + _782;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2285].xyz));
        float _4352 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2319 = dot(vec3(_701, _702, _703), vec3(_2312, _2313, _2314));
        float _4363 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4374 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2340 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2341 = 1.0 - _2304;
        float _2351 = (0.5 / (((_2095 * ((_2318 * _2341) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2341) + _2304) * _2318))) * _2318;
        float _4385 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2279 = (((_2340 * cbLight._m0[_2289].x) * _2353) * _2354) + _2215;
        _2281 = (((_2340 * cbLight._m0[_2289].y) * _2353) * _2354) + _2216;
        _2283 = (((_2340 * cbLight._m0[_2289].z) * _2353) * _2354) + _2217;
    }
    float _2389;
    float _2391;
    float _2393;
    if (_2021)
    {
        _2389 = _2279;
        _2391 = _2281;
        _2393 = _2283;
    }
    else
    {
        uint _2400 = _1930 + 3u;
        uint _2404 = _1930 + 11u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _704) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _780;
        float _2421 = cbLight._m0[_2400].y + _781;
        float _2422 = cbLight._m0[_2400].z + _782;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2400].xyz));
        float _4401 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2434 = dot(vec3(_701, _702, _703), vec3(_2427, _2428, _2429));
        float _4412 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4423 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2456 = 1.0 - _2419;
        float _2466 = (0.5 / (((_2095 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2456) + _2419) * _2433))) * _2433;
        float _4434 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2389 = (((_2455 * cbLight._m0[_2404].x) * _2468) * _2469) + _2279;
        _2391 = (((_2455 * cbLight._m0[_2404].y) * _2468) * _2469) + _2281;
        _2393 = (((_2455 * cbLight._m0[_2404].z) * _2468) * _2469) + _2283;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1928.y == 0u)
    {
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2544;
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2544;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2544;
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.x;
        uint _2571 = uint((float(_2559.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2560))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2560)));
        float _2581 = (log2(_2547 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2582 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        uint _2585 = uint(isnan(14.0) ? _2582 : (isnan(_2582) ? 14.0 : min(_2582, 14.0)));
        uvec4 _2590 = texelFetch(g_lightClusterGridBuffer, int(((_2585 << 2u) + (_2571 << 6u)) >> 2u));
        uint _2591 = _2590.x;
        uint _2592 = _2559.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2592 >> 4u) & 15u)) + 4294967295u) & _2591) == 0u) || ((_2592 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2860)
                {
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                else
                {
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    uint _2995;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2859;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    for (;;)
                    {
                        uint _2999 = uint(findLSB(_2995)) + (_2850 << 5u);
                        uint _2996 = (_2995 + 4294967295u) & _2995;
                        uint _3001 = _2999 * 48u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3021 = (_2999 * 48u) + 4u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3040 = (_2999 * 48u) + 8u;
                        vec3 _3051 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x));
                        float _3055 = _3015.x - _2545;
                        float _3056 = _3015.y - _2546;
                        float _3057 = _3015.z - _2547;
                        float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                        float _3061 = inversesqrt(_3058);
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3065 = dot(vec3(_819, _822, _825), vec3(_3062, _3063, _3064));
                        float _3070 = 1.0 - (_3058 * _3015.w);
                        float _4460 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3072 = sqrt(_3058) * _3034.w;
                        float _3075 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3065) + _3076;
                        float _3082 = _3072 * _3072;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3071) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _2545;
                        float _3091 = (-0.0) - _2546;
                        float _3092 = (-0.0) - _2547;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3107 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _879;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_819, _822, _825), vec3(_3097, _3098, _3099));
                        float _4476 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3132 = dot(vec3(_819, _822, _825), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4487 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3075 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3065) + _3141;
                        float _4498 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4509 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3139 * _3139) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3071;
                        _2919 = (_3086 * _3034.x) + _2992;
                        _2920 = (_3086 * _3034.y) + _2993;
                        _2921 = (_3086 * _3034.z) + _2994;
                        _2916 = (_3167 * _3051.x) + _2989;
                        _2917 = (_3167 * _3051.y) + _2990;
                        _2918 = (_3167 * _3051.z) + _2991;
                        if (_2996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2996;
                        }
                    }
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2921;
                    frontier_phi_66_pred_2 = _2920;
                    frontier_phi_66_pred_3 = _2919;
                    frontier_phi_66_pred_4 = _2918;
                    frontier_phi_66_pred_5 = _2917;
                }
                _2693 = frontier_phi_66_pred;
                _2703 = frontier_phi_66_pred_1;
                _2701 = frontier_phi_66_pred_2;
                _2699 = frontier_phi_66_pred_3;
                _2697 = frontier_phi_66_pred_4;
                _2695 = frontier_phi_66_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2693;
                    _2845 = _2695;
                    _2846 = _2697;
                    _2847 = _2699;
                    _2848 = _2701;
                    _2849 = _2703;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2709) & _2591) == 0u)
        {
            _2812 = _2692;
            _2814 = _2694;
            _2816 = _2696;
            _2818 = _2698;
            _2820 = _2700;
            _2822 = _2702;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
            float _2838 = _2837 * _2545;
            float _2839 = _2837 * _2546;
            float _2840 = _2837 * _2547;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2972 = _2692;
                float _2973 = _2694;
                float _2974 = _2696;
                float _2975 = _2698;
                float _2976 = _2700;
                float _2977 = _2702;
                uint _2978 = _2709;
                uint _2987;
                bool _2988;
                for (;;)
                {
                    _2987 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                    _2988 = _2987 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2988)
                    {
                        frontier_phi_77_pred = _2977;
                        frontier_phi_77_pred_1 = _2976;
                        frontier_phi_77_pred_2 = _2975;
                        frontier_phi_77_pred_3 = _2974;
                        frontier_phi_77_pred_4 = _2973;
                        frontier_phi_77_pred_5 = _2972;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        uint _3200 = _2987;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3285;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3211 = ((_2978 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3272 = (_3211 * 40u) + 20u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3211 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3211 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_2547, _3319.z, fma(_2546, _3319.y, _3319.x * _2545)) + _3319.w;
                            _3332 = !((fma(_2547, _3300.z, fma(_2546, _3300.y, _3300.x * _2545)) + _3300.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3226.x - _2545;
                                float _3360 = _3226.y - _2546;
                                float _3361 = _3226.z - _2547;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3227 * _3227));
                                float _4520 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3377 = sqrt(_3362) * _3242.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_819, _822, _825))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_2547, _3269.z, fma(_2546, _3269.y, _3269.x * _2545)) + _3269.w) / _3331;
                                float _3391 = (fma(_2547, _3285.z, fma(_2546, _3285.y, _3285.x * _2545)) + _3285.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4536 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _879;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2838;
                                float _3421 = _3367 - _2839;
                                float _3422 = _3368 - _2840;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_819, _822, _825), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4547 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3434 = dot(vec3(_819, _822, _825), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4558 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_819, _822, _825), vec3(_3366, _3367, _3368))) + _3443;
                                float _4569 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4580 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3397 * _3242.y;
                                frontier_phi_83_pred_1 = _3397 * _3242.x;
                                frontier_phi_83_pred_2 = _3471 * _3254.z;
                                frontier_phi_83_pred_3 = _3471 * _3254.y;
                                frontier_phi_83_pred_4 = _3471 * _3254.x;
                                frontier_phi_83_pred_5 = _3397 * _3242.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3479 = frontier_phi_83_pred;
                            _3478 = frontier_phi_83_pred_1;
                            _3477 = frontier_phi_83_pred_2;
                            _3476 = frontier_phi_83_pred_3;
                            _3475 = frontier_phi_83_pred_4;
                            _3480 = frontier_phi_83_pred_5;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3181 = _3475 + _3194;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3186;
                        frontier_phi_77_pred_1 = _3185;
                        frontier_phi_77_pred_2 = _3184;
                        frontier_phi_77_pred_3 = _3183;
                        frontier_phi_77_pred_4 = _3182;
                        frontier_phi_77_pred_5 = _3181;
                    }
                    _2823 = frontier_phi_77_pred;
                    _2821 = frontier_phi_77_pred_1;
                    _2819 = frontier_phi_77_pred_2;
                    _2817 = frontier_phi_77_pred_3;
                    _2815 = frontier_phi_77_pred_4;
                    _2813 = frontier_phi_77_pred_5;
                    uint _2979 = _2978 + 1u;
                    if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2972 = _2813;
                        _2973 = _2815;
                        _2974 = _2817;
                        _2975 = _2819;
                        _2976 = _2821;
                        _2977 = _2823;
                        _2978 = _2979;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2817;
                frontier_phi_58_59_ladder_1 = _2823;
                frontier_phi_58_59_ladder_2 = _2821;
                frontier_phi_58_59_ladder_3 = _2819;
                frontier_phi_58_59_ladder_4 = _2815;
                frontier_phi_58_59_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_58_59_ladder = _2696;
                frontier_phi_58_59_ladder_1 = _2702;
                frontier_phi_58_59_ladder_2 = _2700;
                frontier_phi_58_59_ladder_3 = _2698;
                frontier_phi_58_59_ladder_4 = _2694;
                frontier_phi_58_59_ladder_5 = _2692;
            }
            _2812 = frontier_phi_58_59_ladder_5;
            _2814 = frontier_phi_58_59_ladder_4;
            _2816 = frontier_phi_58_59_ladder;
            _2818 = frontier_phi_58_59_ladder_3;
            _2820 = frontier_phi_58_59_ladder_2;
            _2822 = frontier_phi_58_59_ladder_1;
        }
        float _2827 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2604 = (_2827 * _2818) + _2059;
        _2606 = (_2827 * _2820) + _2061;
        _2608 = (_2827 * _2822) + _2063;
        _2610 = ((_2812 * 0.039999999105930328369140625) * _2827) + _2389;
        _2612 = ((_2814 * 0.039999999105930328369140625) * _2827) + _2391;
        _2614 = ((_2816 * 0.039999999105930328369140625) * _2827) + _2393;
    }
    else
    {
        _2604 = _2059;
        _2606 = _2061;
        _2608 = _2063;
        _2610 = _2389;
        _2612 = _2391;
        _2614 = _2393;
    }
    float _4596 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4607 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4618 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2631 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2604 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _863))) + ((_2610 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2632 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2606 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _863))) + ((_2612 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2633 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2608 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _863))) + ((_2614 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2634 = _245 + 6u;
    float _2642 = _800 / cbSceneParam._m0[86u].x;
    float _2643 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2657 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, (log2((isnan(cbSceneParam._m0[77u].w) ? _722 : (isnan(_722) ? cbSceneParam._m0[77u].w : min(_722, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2659 = _2657.x;
    float _2660 = _2657.y;
    float _2661 = _2657.z;
    float _2662 = _2657.w;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_722 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_722) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _722 : min(cbSceneParam._m0[80u].w, _722));
        float _2718 = _2717 / _722;
        float _2729 = _2718 * _773;
        float _2730 = _774 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2732 = _2718 * _775;
        float _2734 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2735 = _2734 + cbSceneParam._m0[79u].w;
        float _2736 = cbSceneParam._m0[79u].w - _2730;
        float _2742 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2732 * _2732));
        float _2745 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2742;
        float _2750 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2752 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2731 - _2734) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2735 > 0.0) ? exp2(_2750 * _2735) : (2.0 - exp2(_2752 * _2735))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2745;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : max(_2735, _2736));
            float _2875 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : min(_2735, _2736));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2929 = ((abs(_2742 / _2731) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2750 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2750 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2752 * _2884) - exp2(_2752 * _2885)) * _2873))) + (_2745 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2662);
        _2754 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2659;
        _2756 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2660;
        _2758 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2661;
        _2760 = _2940 * _2662;
    }
    else
    {
        _2754 = _2659;
        _2756 = _2660;
        _2758 = _2661;
        _2760 = _2662;
    }
    bool _2967;
    vec4 _2770;
    vec4 _2792;
    float _2794;
    float _2798;
    float _2799;
    float _2800;
    float _2801;
    bool _2811;
    for (;;)
    {
        _2770 = cbMatDynParam._m0[0u];
        float _2772 = roundEven(_2770.y);
        bool _2773 = _2772 == 3.0;
        float _2774 = log2(_2760);
        float _2781 = exp2(_2774 * cbSceneParam._m0[78u].x) * _2631;
        float _2782 = exp2(_2774 * cbSceneParam._m0[78u].y) * _2632;
        float _2783 = exp2(_2774 * cbSceneParam._m0[78u].z) * _2633;
        float _2790 = _789 + (-0.5);
        _2792 = cbMtdParam._m0[1u];
        _2794 = _2792.y * _2790;
        float _2797 = (_2772 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2798 = _2797 * (_2773 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2754)));
        _2799 = _2797 * (_2773 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2756)));
        _2800 = _2797 * (_2773 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2758)));
        _2801 = _2790 * 0.999000012874603271484375;
        _2811 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2811)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2801) < 0.5)
            {
                _2967 = true;
                break;
            }
        }
        uint _2908 = _838 + uint(_2770.w);
        if ((cbInstanceData._m0[_2908].w < 1.0) && ((cbInstanceData._m0[_2908].w + _2801) < 0.5))
        {
            _2967 = true;
            break;
        }
        if ((_2794 + 1.0) < _2792.x)
        {
            _2967 = true;
            break;
        }
        _2967 = false;
        break;
    }
    float _3172;
    if (_2967)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2634].w;
    }
    SV_Target.x = _2798;
    SV_Target.y = _2799;
    SV_Target.z = _2800;
    SV_Target.w = _3172;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2634].w;
    discard_exit();
}


