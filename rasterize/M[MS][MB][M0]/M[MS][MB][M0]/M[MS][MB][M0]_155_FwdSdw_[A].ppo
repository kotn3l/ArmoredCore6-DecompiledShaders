#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1277;
float _3918;
float _3919;
float _3920;
float _3921;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3930 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3941 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3952 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _401 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _401) * cbMtdParam._m0[24u].x) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3963 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _426 = (_419 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _427 = (_419 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _428 = (_419 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _438;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _543 = ((_513.z - _534) * _419) + _534;
    float _546 = ((((_513.x - _532) * _419) + _532) * 2.0) + (-1.0);
    float _547 = ((((_513.y - _533) * _419) + _533) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3974 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    float _556 = _546 + ((((_486.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _557 = _547 + ((((_486.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _560 = fma(_553, _237, fma(_557, _244, _556 * _230));
    float _563 = fma(_553, _238, fma(_557, _245, _556 * _231));
    float _566 = fma(_553, _239, fma(_557, _246, _556 * _232));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _621 = ((_616 - _617) * cbMtdParam._m0[24u].z) + _617;
    float _623 = (cbMtdParam._m0[19u].x + dot(vec4(_570 * _560, _570 * _563, _570 * _566, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_621 * cbMtdParam._m0[21u].z);
    float _3985 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _639 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_621 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3996 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _644 = ((_624 * ((_466.x * cbMtdParam._m0[18u].x) - _445)) * _640) + _445;
    float _645 = ((_624 * ((_466.y * cbMtdParam._m0[18u].y) - _446)) * _640) + _446;
    float _646 = ((_624 * ((_466.z * cbMtdParam._m0[18u].z) - _447)) * _640) + _447;
    float _651 = (((_486.z - _543) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _543;
    vec4 _664 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _671 = (_664.x * 2.0) + (-1.0);
    float _672 = (_664.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _4007 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _682 = (((_664.z - _651) * _624) * _640) + _651;
    float _697 = (((cbMtdParam._m0[21u].x * _556) + ((_671 - _556) * _624)) * _640) + _556;
    float _698 = (((cbMtdParam._m0[21u].x * _557) + ((_672 - _557) * _624)) * _640) + _557;
    float _699 = (((sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _553) * _624) * _640) + _553;
    float _701 = cbMtdParam._m0[22u].x + _586.w;
    float _704 = fma(_699, _237, fma(_698, _244, _697 * _230));
    float _707 = fma(_699, _238, fma(_698, _245, _697 * _231));
    float _710 = fma(_699, _239, fma(_698, _246, _697 * _232));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _4018 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _718 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4040 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4051 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4062 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _788 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _778);
    float _789 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _778);
    float _790 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _778);
    float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
    float _795 = _788 * _794;
    float _796 = _789 * _794;
    float _797 = _790 * _794;
    vec4 _802 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _804 = _802.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _958 = sqrt(((_788 * _788) + (_789 * _789)) + (_790 * _790));
        float _964 = (cbMatDynParam._m0[5u].x * _958) + cbMatDynParam._m0[5u].y;
        float _4073 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _969 = (cbMatDynParam._m0[5u].z * _958) + cbMatDynParam._m0[5u].w;
        float _4084 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _965)) + _965) < ((_804 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _815 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _816 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _837 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _840 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _853 = _270 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_854].z;
    float _4095 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _815, cbSceneParam._m0[86u].y * _816));
    float _878 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * TEXCOORD_5.w) * _874.x;
    float _879 = dot(vec3(_715, _716, _717), vec3(_795, _796, _797));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _715) - _795;
    float _887 = (_882 * _716) - _796;
    float _888 = (_882 * _717) - _797;
    float _892 = abs(dot(vec3(_795, _796, _797), vec3(_715, _716, _717)));
    float _4128 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_718);
    float _907 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _1005 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _1009 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1034 = _939 + _715;
        float _1035 = _943 + _716;
        float _1036 = _947 + _717;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_715, _716, _717), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4176 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_715, _716, _717), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4209 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_715, _716, _717), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4242 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1319 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1323 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1327 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1350 = _939 + _715;
        float _1351 = _943 + _716;
        float _1352 = _947 + _717;
        float _1362 = fma(_1352, cbModelParam._m0[30u].z, fma(_1351, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1350)) - _1319;
        float _1363 = fma(_1352, cbModelParam._m0[31u].z, fma(_1351, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1350)) - _1323;
        float _1364 = fma(_1352, cbModelParam._m0[32u].z, fma(_1351, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1350)) - _1327;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1319 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1323 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[35u].z) + ((((((_1327 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1418 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1385.x + (-0.5));
        float _1420 = _1418 * (_1385.y + (-0.5));
        float _1421 = _1418 * (_1385.z + (-0.5));
        float _1428 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1392.x + (-0.5));
        float _1430 = _1428 * (_1392.y + (-0.5));
        float _1431 = _1428 * (_1392.z + (-0.5));
        float _1438 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1399.x + (-0.5));
        float _1440 = _1438 * (_1399.y + (-0.5));
        float _1441 = _1438 * (_1399.z + (-0.5));
        float _1448 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1406.x + (-0.5));
        float _1450 = _1448 * (_1406.y + (-0.5));
        float _1451 = _1448 * (_1406.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_715, _716, _717), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4305 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1482 + 1.0))) + _1487) * _1452;
        float _1497 = _1420 * 0.5;
        float _1498 = _1430 * 0.5;
        float _1499 = _1440 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_715, _716, _717), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4338 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1524 + 1.0))) + _1529) * _1453;
        float _1539 = _1421 * 0.5;
        float _1540 = _1431 * 0.5;
        float _1541 = _1441 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_715, _716, _717), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4371 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1566 + 1.0))) + _1571) * _1454;
        _1588 = _1421;
        _1589 = _1420;
        _1590 = _1419;
        _1591 = _1431;
        _1592 = _1430;
        _1593 = _1429;
        _1594 = _1441;
        _1595 = _1440;
        _1596 = _1439;
        _1597 = _1454;
        _1598 = _1453;
        _1599 = _1452;
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = _1277;
        _1598 = _1277;
        _1599 = _1277;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1291)) + _1291;
    float _1635 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1612));
    float _1656 = _886 * 0.5;
    float _1657 = _887 * 0.5;
    float _1658 = _888 * 0.5;
    float _1659 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1662 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1665 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1672 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1676 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1680 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1687 = dot(vec4(cbModelParam._m0[39u]), vec4(_1656, _1657, _1658, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1656, _1657, _1658, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1786 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1789 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1817 = frontier_phi_17_15_ladder;
        }
        float _1986;
        if (_1786 > 0.0)
        {
            _1986 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1986 = frontier_phi_26_22_ladder;
        }
        float _2281;
        if (_1789 > 0.0)
        {
            _2281 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2281 = frontier_phi_38_33_ladder;
        }
        float _2283 = isnan(_1986) ? _1817 : (isnan(_1817) ? _1986 : min(_1817, _1986));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1783) + _1772;
        float _2289 = (_2284 * _1786) + _1776;
        float _2290 = (_2284 * _1789) + _1780;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_16_38_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_16_38_ladder_2;
        _1807 = frontier_phi_16_38_ladder_1;
        _1809 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1725);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1881 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1884 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _1991;
        if (_1878 > 0.0)
        {
            _1991 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1991 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1881 > 0.0)
        {
            _2308 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_1884 > 0.0)
        {
            _2635 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2635 = frontier_phi_50_47_ladder;
        }
        float _2637 = isnan(_2308) ? _1991 : (isnan(_1991) ? _2308 : min(_1991, _2308));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1878) + _1867;
        float _2643 = (_2638 * _1881) + _1871;
        float _2644 = (_2638 * _1884) + _1875;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_25_50_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_25_50_ladder_2;
        _1905 = frontier_phi_25_50_ladder_1;
        _1907 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1814);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1919 = ((((1.0 - _907) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_907 * _894)) * _878;
    float _1920 = _1919 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1921 = _1919 * ((cbModelParam._m0[1u].w * (_1905 - _1807)) + _1807);
    float _1922 = _1919 * ((cbModelParam._m0[1u].w * (_1907 - _1809)) + _1809);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1978 = _1965 / _1977;
    float _1979 = _1969 / _1977;
    float _1980 = _1973 / _1977;
    float _2127;
    float _2128;
    float _2129;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2007 = ((uint(_1980 > cbSceneParam._m0[59u].y) + uint(_1980 > cbSceneParam._m0[59u].x)) + uint(_1980 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2008 = _2007 + 43u;
        uint _2016 = _2007 + 44u;
        uint _2024 = _2007 + 45u;
        uint _2032 = _2007 + 46u;
        float _2043 = fma(_1977, cbSceneParam._m0[_2008].w, fma(_1973, cbSceneParam._m0[_2008].z, fma(_1969, cbSceneParam._m0[_2008].y, _1965 * cbSceneParam._m0[_2008].x)));
        float _2047 = fma(_1977, cbSceneParam._m0[_2016].w, fma(_1973, cbSceneParam._m0[_2016].z, fma(_1969, cbSceneParam._m0[_2016].y, _1965 * cbSceneParam._m0[_2016].x)));
        float _2055 = fma(_1977, cbSceneParam._m0[_2032].w, fma(_1973, cbSceneParam._m0[_2032].z, fma(_1969, cbSceneParam._m0[_2032].y, _1965 * cbSceneParam._m0[_2032].x)));
        float _2060 = cbSceneParam._m0[33u].z * _2055;
        float _2062 = cbSceneParam._m0[33u].w * _2055;
        float _2065 = fma(_1977, cbSceneParam._m0[_2024].w, fma(_1973, cbSceneParam._m0[_2024].z, fma(_1969, cbSceneParam._m0[_2024].y, _1965 * cbSceneParam._m0[_2024].x))) / _2055;
        float _2113 = (cbSceneParam._m0[33u].x - sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980))) * cbSceneParam._m0[33u].y;
        float _4497 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2120 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 + _2043) / _2055, (_2062 + _2047) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 + _2043) / _2055, (_2047 - _2060) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 - _2060) / _2055, (_2047 - _2062) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 - _2062) / _2055, (_2060 + _2047) / _2055), _2065), 0.0)).x), vec4(0.25)));
        _2127 = 1.0 - (_2120 * cbSceneParam._m0[34u].x);
        _2128 = 1.0 - (_2120 * cbSceneParam._m0[34u].y);
        _2129 = 1.0 - (_2120 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2127 = 1.0;
        _2128 = 1.0;
        _2129 = 1.0;
    }
    float _2193;
    float _2195;
    float _2197;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2181 = fma(_1977, cbSceneParam._m0[63u].w, fma(_1973, cbSceneParam._m0[63u].z, fma(_1969, cbSceneParam._m0[63u].y, _1965 * cbSceneParam._m0[63u].x)));
        float _2182 = fma(_1977, cbSceneParam._m0[60u].w, fma(_1973, cbSceneParam._m0[60u].z, fma(_1969, cbSceneParam._m0[60u].y, _1965 * cbSceneParam._m0[60u].x))) / _2181;
        float _2183 = fma(_1977, cbSceneParam._m0[61u].w, fma(_1973, cbSceneParam._m0[61u].z, fma(_1969, cbSceneParam._m0[61u].y, _1965 * cbSceneParam._m0[61u].x))) / _2181;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2182 >= cbSceneParam._m0[64u].x) && (_2183 >= cbSceneParam._m0[64u].y)) && (_2182 <= cbSceneParam._m0[64u].z)) && (_2183 <= cbSceneParam._m0[64u].w))
        {
            float _2321 = fma(_1977, cbSceneParam._m0[62u].w, fma(_1973, cbSceneParam._m0[62u].z, fma(_1969, cbSceneParam._m0[62u].y, _1965 * cbSceneParam._m0[62u].x))) / _2181;
            float _2325 = isnan(cbSceneParam._m0[41u].w) ? _2321 : (isnan(_2321) ? cbSceneParam._m0[41u].w : max(_2321, cbSceneParam._m0[41u].w));
            float _2368 = (cbSceneParam._m0[33u].x - sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980))) * cbSceneParam._m0[33u].y;
            float _4513 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
            float _2375 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2182, cbSceneParam._m0[33u].w + _2183), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2182, _2183 - cbSceneParam._m0[33u].z), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2182 - cbSceneParam._m0[33u].z, _2183 - cbSceneParam._m0[33u].w), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2182 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2183), _2325), 0.0)).x), vec4(0.25)));
            float _2379 = 1.0 - (_2375 * cbSceneParam._m0[34u].x);
            float _2380 = 1.0 - (_2375 * cbSceneParam._m0[34u].y);
            float _2381 = 1.0 - (_2375 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_37_36_ladder_1 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
            frontier_phi_37_36_ladder_2 = isnan(_2379) ? _2127 : (isnan(_2127) ? _2379 : min(_2127, _2379));
        }
        else
        {
            frontier_phi_37_36_ladder = _2129;
            frontier_phi_37_36_ladder_1 = _2128;
            frontier_phi_37_36_ladder_2 = _2127;
        }
        _2193 = frontier_phi_37_36_ladder_2;
        _2195 = frontier_phi_37_36_ladder_1;
        _2197 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2193 = _2127;
        _2195 = _2128;
        _2197 = _2129;
    }
    uvec4 _2202 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2204 = _2202.x * 14u;
    uint _2205 = _2204 + 13u;
    float _2212 = _878 + (-1.0);
    float _2217 = (cbLight._m0[_2205].x * _2212) + 1.0;
    float _2218 = (cbLight._m0[_2205].y * _2212) + 1.0;
    float _2219 = (cbLight._m0[_2205].z * _2212) + 1.0;
    float _2220 = (cbLight._m0[_2205].w * _2212) + 1.0;
    uint _2221 = _2204 + 5u;
    float _2227 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2231 = _2204 + 4u;
    float _2240 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2244 = _2204 | 1u;
    float _2255 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_715, _716, _717));
    float _2258 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_715, _716, _717));
    float _4549 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _4560 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2263 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2265 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2272 = ((cbLight._m0[_2221].x * _2227) * _2265) + (((cbLight._m0[_2231].x * _2193) * _2240) * _2263);
    float _2273 = ((_2227 * cbLight._m0[_2221].y) * _2265) + (((cbLight._m0[_2231].y * _2195) * _2240) * _2263);
    float _2274 = ((_2227 * cbLight._m0[_2221].z) * _2265) + (((cbLight._m0[_2231].z * _2197) * _2240) * _2263);
    uvec4 _2278 = floatBitsToUint(cbLight._m0[_2204 + 12u]);
    bool _2280 = _2278.x == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2280)
    {
        _2382 = _2272;
        _2384 = _2273;
        _2386 = _2274;
    }
    else
    {
        uint _2390 = _2204 + 6u;
        float _2406 = (dot(vec3(cbLight._m0[_2204 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4571 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2409 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2382 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2272;
        _2384 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2273;
        _2386 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2274;
    }
    bool _2389 = _2278.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2389)
    {
        _2444 = _2382;
        _2446 = _2384;
        _2448 = _2386;
    }
    else
    {
        uint _2606 = _2204 + 7u;
        float _2622 = (dot(vec3(cbLight._m0[_2204 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4587 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2625 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2444 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2382;
        _2446 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2384;
        _2448 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2386;
    }
    uint _2451 = _2204 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _718) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2204].x + _795;
    float _2467 = cbLight._m0[_2204].y + _796;
    float _2468 = cbLight._m0[_2204].z + _797;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2204].xyz));
    float _4603 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _4614 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2480 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2481 = dot(vec3(_715, _716, _717), vec3(_2473, _2474, _2475));
    float _4625 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2473, _2474, _2475));
    float _4636 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2505 = 1.0 - _2465;
    float _2516 = (0.5 / (((_2480 * ((_2479 * _2505) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2505) + _2465) * _2479))) * _2479;
    float _4647 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2532 = _2204 + 9u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _718) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2244].x + _795;
    float _2546 = cbLight._m0[_2244].y + _796;
    float _2547 = cbLight._m0[_2244].z + _797;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2244].xyz));
    float _4658 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2559 = dot(vec3(_715, _716, _717), vec3(_2552, _2553, _2554));
    float _4669 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2552, _2553, _2554));
    float _4680 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2544 * _2544;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2581 = 1.0 - _2544;
    float _2591 = (0.5 / (((_2480 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2581) + _2544) * _2558))) * _2558;
    float _4691 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    float _2603 = (((_2580 * cbLight._m0[_2532].x) * _2593) * _2227) + ((((cbLight._m0[_2451].x * _2193) * _2504) * _2518) * _2240);
    float _2604 = (((_2580 * cbLight._m0[_2532].y) * _2593) * _2227) + ((((cbLight._m0[_2451].y * _2195) * _2504) * _2518) * _2240);
    float _2605 = (((_2580 * cbLight._m0[_2532].z) * _2593) * _2227) + ((((cbLight._m0[_2451].z * _2197) * _2504) * _2518) * _2240);
    float _2661;
    float _2663;
    float _2665;
    if (_2280)
    {
        _2661 = _2603;
        _2663 = _2604;
        _2665 = _2605;
    }
    else
    {
        uint _2667 = _2204 + 2u;
        uint _2671 = _2204 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _718) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _795;
        float _2688 = cbLight._m0[_2667].y + _796;
        float _2689 = cbLight._m0[_2667].z + _797;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2667].xyz));
        float _4702 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2701 = dot(vec3(_715, _716, _717), vec3(_2694, _2695, _2696));
        float _4713 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4724 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2480 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2723) + _2686) * _2700))) * _2700;
        float _4735 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2661 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2603;
        _2663 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2604;
        _2665 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2605;
    }
    float _2767;
    float _2769;
    float _2771;
    if (_2389)
    {
        _2767 = _2661;
        _2769 = _2663;
        _2771 = _2665;
    }
    else
    {
        uint _2778 = _2204 + 3u;
        uint _2782 = _2204 + 11u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _718) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _795;
        float _2799 = cbLight._m0[_2778].y + _796;
        float _2800 = cbLight._m0[_2778].z + _797;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2778].xyz));
        float _4751 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2812 = dot(vec3(_715, _716, _717), vec3(_2805, _2806, _2807));
        float _4762 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4773 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2833 = (exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2834 = 1.0 - _2797;
        float _2844 = (0.5 / (((_2480 * ((_2811 * _2834) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2834) + _2797) * _2811))) * _2811;
        float _4784 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2767 = (((_2833 * cbLight._m0[_2782].x) * _2846) * _2847) + _2661;
        _2769 = (((_2833 * cbLight._m0[_2782].y) * _2846) * _2847) + _2663;
        _2771 = (((_2833 * cbLight._m0[_2782].z) * _2846) * _2847) + _2665;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2202.y == 0u)
    {
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _816) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _815) / _2869)));
        float _2890 = (log2(_1980 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3149)
                {
                    frontier_phi_71_pred = _3138;
                    frontier_phi_71_pred_1 = _3137;
                    frontier_phi_71_pred_2 = _3136;
                    frontier_phi_71_pred_3 = _3135;
                    frontier_phi_71_pred_4 = _3134;
                    frontier_phi_71_pred_5 = _3133;
                }
                else
                {
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    uint _3284;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3148;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3288 = uint(findLSB(_3284)) + (_3139 << 5u);
                        uint _3285 = (_3284 + 4294967295u) & _3284;
                        uint _3290 = _3288 * 48u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3310 = (_3288 * 48u) + 4u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3329 = (_3288 * 48u) + 8u;
                        vec3 _3340 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x));
                        float _3344 = _3304.x - _1978;
                        float _3345 = _3304.y - _1979;
                        float _3346 = _3304.z - _1980;
                        float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                        float _3350 = inversesqrt(_3347);
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3354 = dot(vec3(_834, _837, _840), vec3(_3351, _3352, _3353));
                        float _3359 = 1.0 - (_3347 * _3304.w);
                        float _4810 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3361 = sqrt(_3347) * _3323.w;
                        float _3364 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3354) + _3365;
                        float _3371 = _3361 * _3361;
                        float _3375 = ((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3360) / ((_3371 * 0.699999988079071044921875) + 1.0);
                        float _3379 = (-0.0) - _1978;
                        float _3380 = (-0.0) - _1979;
                        float _3381 = (-0.0) - _1980;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3395 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                        float _3396 = 1.0 - _894;
                        float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                        float _3404 = _3403 * _3403;
                        float _3405 = _3404 * _3404;
                        float _3406 = _3386 + _3351;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3416 = dot(vec3(_834, _837, _840), vec3(_3386, _3387, _3388));
                        float _4826 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3420 = dot(vec3(_834, _837, _840), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                        float _4837 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                        float _3428 = _3364 * _3404;
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3354) + _3429;
                        float _4848 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3433 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3434 = 1.0 - _3404;
                        float _3444 = (0.5 / (((_3433 * ((_3419 * _3434) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3404) * _3419))) * _3433;
                        float _4859 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3455 = (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3427 * _3427) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125))) * _3360;
                        _3208 = (_3375 * _3323.x) + _3281;
                        _3209 = (_3375 * _3323.y) + _3282;
                        _3210 = (_3375 * _3323.z) + _3283;
                        _3205 = (_3455 * _3340.x) + _3278;
                        _3206 = (_3455 * _3340.y) + _3279;
                        _3207 = (_3455 * _3340.z) + _3280;
                        if (_3285 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3285;
                        }
                    }
                    frontier_phi_71_pred = _3210;
                    frontier_phi_71_pred_1 = _3209;
                    frontier_phi_71_pred_2 = _3208;
                    frontier_phi_71_pred_3 = _3207;
                    frontier_phi_71_pred_4 = _3206;
                    frontier_phi_71_pred_5 = _3205;
                }
                _2991 = frontier_phi_71_pred;
                _2989 = frontier_phi_71_pred_1;
                _2987 = frontier_phi_71_pred_2;
                _2985 = frontier_phi_71_pred_3;
                _2983 = frontier_phi_71_pred_4;
                _2981 = frontier_phi_71_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2981;
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _2997) & _2900) == 0u)
        {
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
            float _3127 = _3126 * _1978;
            float _3128 = _3126 * _1979;
            float _3129 = _3126 * _1980;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3261 = _2980;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                uint _3267 = _2997;
                uint _3276;
                bool _3277;
                for (;;)
                {
                    _3276 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                    _3277 = _3276 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3277)
                    {
                        frontier_phi_82_pred = _3266;
                        frontier_phi_82_pred_1 = _3265;
                        frontier_phi_82_pred_2 = _3264;
                        frontier_phi_82_pred_3 = _3263;
                        frontier_phi_82_pred_4 = _3262;
                        frontier_phi_82_pred_5 = _3261;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3261;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        uint _3488 = _3276;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3267 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_1980, _3606.z, fma(_1979, _3606.y, _3606.x * _1978)) + _3606.w;
                            _3619 = !((fma(_1980, _3587.z, fma(_1979, _3587.y, _3587.x * _1978)) + _3587.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _1978;
                                float _3647 = _3514.y - _1979;
                                float _3648 = _3514.z - _1980;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4870 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_834, _837, _840))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_1980, _3557.z, fma(_1979, _3557.y, _3557.x * _1978)) + _3557.w) / _3618;
                                float _3678 = (fma(_1980, _3572.z, fma(_1979, _3572.y, _3572.x * _1978)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4886 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _894;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3127;
                                float _3708 = _3654 - _3128;
                                float _3709 = _3655 - _3129;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_834, _837, _840), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4897 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3721 = dot(vec3(_834, _837, _840), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4908 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_834, _837, _840), vec3(_3653, _3654, _3655))) + _3730;
                                float _4919 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4930 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3684 * _3530.z;
                                frontier_phi_88_pred_1 = _3684 * _3530.y;
                                frontier_phi_88_pred_2 = _3684 * _3530.x;
                                frontier_phi_88_pred_3 = _3758 * _3542.z;
                                frontier_phi_88_pred_4 = _3758 * _3542.y;
                                frontier_phi_88_pred_5 = _3758 * _3542.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_88_pred;
                            _3766 = frontier_phi_88_pred_1;
                            _3765 = frontier_phi_88_pred_2;
                            _3764 = frontier_phi_88_pred_3;
                            _3763 = frontier_phi_88_pred_4;
                            _3762 = frontier_phi_88_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3474;
                        frontier_phi_82_pred_1 = _3473;
                        frontier_phi_82_pred_2 = _3472;
                        frontier_phi_82_pred_3 = _3471;
                        frontier_phi_82_pred_4 = _3470;
                        frontier_phi_82_pred_5 = _3469;
                    }
                    _3112 = frontier_phi_82_pred;
                    _3110 = frontier_phi_82_pred_1;
                    _3108 = frontier_phi_82_pred_2;
                    _3106 = frontier_phi_82_pred_3;
                    _3104 = frontier_phi_82_pred_4;
                    _3102 = frontier_phi_82_pred_5;
                    uint _3268 = _3267 + 1u;
                    if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3261 = _3102;
                        _3262 = _3104;
                        _3263 = _3106;
                        _3264 = _3108;
                        _3265 = _3110;
                        _3266 = _3112;
                        _3267 = _3268;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_63_64_ladder = _2986;
                frontier_phi_63_64_ladder_1 = _2990;
                frontier_phi_63_64_ladder_2 = _2988;
                frontier_phi_63_64_ladder_3 = _2984;
                frontier_phi_63_64_ladder_4 = _2982;
                frontier_phi_63_64_ladder_5 = _2980;
            }
            _3101 = frontier_phi_63_64_ladder_5;
            _3103 = frontier_phi_63_64_ladder_4;
            _3105 = frontier_phi_63_64_ladder_3;
            _3107 = frontier_phi_63_64_ladder;
            _3109 = frontier_phi_63_64_ladder_2;
            _3111 = frontier_phi_63_64_ladder_1;
        }
        float _3116 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2913 = (_3116 * _3107) + _2444;
        _2915 = (_3116 * _3109) + _2446;
        _2917 = (_3116 * _3111) + _2448;
        _2919 = ((_3101 * 0.039999999105930328369140625) * _3116) + _2767;
        _2921 = ((_3103 * 0.039999999105930328369140625) * _3116) + _2769;
        _2923 = ((_3105 * 0.039999999105930328369140625) * _3116) + _2771;
    }
    else
    {
        _2913 = _2444;
        _2915 = _2446;
        _2917 = _2448;
        _2919 = _2767;
        _2921 = _2769;
        _2923 = _2771;
    }
    float _4946 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4957 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4968 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2940 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2913 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _878))) + ((_2919 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2941 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2915 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _878))) + ((_2921 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2917 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _878))) + ((_2923 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    uint _2943 = _270 + 6u;
    float _2951 = _815 / cbSceneParam._m0[86u].x;
    float _2952 = _816 / cbSceneParam._m0[86u].y;
    vec4 _2966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2968 = _2966.x;
    float _2969 = _2966.y;
    float _2970 = _2966.z;
    float _2971 = _2966.w;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _3005 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _3006 = _3005 / _736;
        float _3017 = _3006 * _788;
        float _3018 = _789 * _3006;
        float _3019 = (-0.0) - _3018;
        float _3021 = _3006 * _790;
        float _3023 = (cbSceneParam._m0[77u].w * _3019) / _3005;
        float _3024 = _3023 + cbSceneParam._m0[79u].w;
        float _3025 = cbSceneParam._m0[79u].w - _3018;
        float _3031 = sqrt(((_3017 * _3017) + (_3018 * _3018)) + (_3021 * _3021));
        float _3034 = (1.0 - (cbSceneParam._m0[77u].w / _3005)) * _3031;
        float _3039 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3041 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3019 - _3023) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3024 > 0.0) ? exp2(_3039 * _3024) : (2.0 - exp2(_3041 * _3024))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3034;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : max(_3024, _3025));
            float _3164 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : min(_3024, _3025));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3218 = ((abs(_3031 / _3019) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3039 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3039 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3041 * _3173) - exp2(_3041 * _3174)) * _3162))) + (_3034 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2971);
        _3043 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2968;
        _3045 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2969;
        _3047 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2970;
        _3049 = _3229 * _2971;
    }
    else
    {
        _3043 = _2968;
        _3045 = _2969;
        _3047 = _2970;
        _3049 = _2971;
    }
    bool _3256;
    vec4 _3059;
    vec4 _3081;
    float _3083;
    float _3087;
    float _3088;
    float _3089;
    float _3090;
    bool _3100;
    for (;;)
    {
        _3059 = cbMatDynParam._m0[0u];
        float _3061 = roundEven(_3059.y);
        bool _3062 = _3061 == 3.0;
        float _3063 = log2(_3049);
        float _3070 = exp2(_3063 * cbSceneParam._m0[78u].x) * _2940;
        float _3071 = exp2(_3063 * cbSceneParam._m0[78u].y) * _2941;
        float _3072 = exp2(_3063 * cbSceneParam._m0[78u].z) * _2942;
        float _3079 = _804 + (-0.5);
        _3081 = cbMtdParam._m0[1u];
        _3083 = _3081.y * _3079;
        float _3086 = (_3061 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3087 = _3086 * (_3062 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3043)));
        _3088 = _3086 * (_3062 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3045)));
        _3089 = _3086 * (_3062 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3047)));
        _3090 = _3079 * 0.999000012874603271484375;
        _3100 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3100)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _3090) < 0.5)
            {
                _3256 = true;
                break;
            }
        }
        uint _3197 = _853 + uint(_3059.w);
        if ((cbInstanceData._m0[_3197].w < 1.0) && ((cbInstanceData._m0[_3197].w + _3090) < 0.5))
        {
            _3256 = true;
            break;
        }
        if ((_3083 + 1.0) < _3081.x)
        {
            _3256 = true;
            break;
        }
        _3256 = false;
        break;
    }
    float _3460;
    if (_3256)
    {
        discard_state = true;
        _3460 = 0.0;
    }
    else
    {
        _3460 = cbInstanceData._m0[_2943].w;
    }
    SV_Target.x = _3087;
    SV_Target.y = _3088;
    SV_Target.z = _3089;
    SV_Target.w = _3460;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2943].w;
    discard_exit();
}


