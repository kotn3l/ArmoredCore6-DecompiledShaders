#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1092;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3399 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _421 = ((_391.z - _412) * _364) + _412;
    float _424 = ((((_391.x - _410) * _364) + _410) * 2.0) + (-1.0);
    float _426 = ((((_391.y - _411) * _364) + _411) * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3410 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _489 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_475 - _476) * cbMtdParam._m0[24u].z) + _476) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3421 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _497 = (_490 * (cbMtdParam._m0[17u].x - _371)) + _371;
    float _498 = (_490 * (cbMtdParam._m0[17u].y - _372)) + _372;
    float _499 = (_490 * (cbMtdParam._m0[17u].z - _373)) + _373;
    float _503 = (cbMtdParam._m0[19u].w * (_448.z - _421)) + _421;
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3432 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _533 = (_490 * (_516.z - _503)) + _503;
    float _536 = (((_448.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _424;
    float _537 = (((_448.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _426;
    float _549 = (((_523 - _536) + (cbMtdParam._m0[21u].x * _536)) * _490) + _536;
    float _550 = (((_524 - _537) + (cbMtdParam._m0[21u].x * _537)) * _490) + _537;
    float _551 = (_490 * (sqrt(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) - _432)) + _432;
    float _556 = cbMtdParam._m0[22u].x + _448.w;
    float _559 = fma(_551, _215 * NORMAL.x, fma(_550, _222 * TANGENT.x, (_208 * _200) * _549));
    float _562 = fma(_551, _215 * NORMAL.y, fma(_550, _222 * TANGENT.y, (_208 * _201) * _549));
    float _565 = fma(_551, _215 * NORMAL.z, fma(_550, _222 * TANGENT.z, (_208 * _202) * _549));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3443 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _573 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3465 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3476 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3487 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _677 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _680 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _683 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _697 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _703 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_697].x;
    float _704 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_697].y;
    float _705 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_697].z;
    float _3498 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _721 = ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * TEXCOORD_5.w) * _717.x;
    float _722 = dot(vec3(_570, _571, _572), vec3(_650, _651, _652));
    float _725 = _722 * 2.0;
    float _729 = (_725 * _570) - _650;
    float _730 = (_725 * _571) - _651;
    float _731 = (_725 * _572) - _652;
    float _735 = abs(dot(vec3(_650, _651, _652), vec3(_570, _571, _572)));
    float _3531 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _737 = sqrt(_573);
    float _750 = exp2((_737 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_737 * 3.0));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_790, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782));
        float _820 = fma(_790, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782));
        float _824 = fma(_790, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782));
        float _849 = _782 + _570;
        float _850 = _786 + _571;
        float _851 = _790 + _572;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_570, _571, _572), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3579 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_570, _571, _572), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3612 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_570, _571, _572), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3645 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_790, cbModelParam._m0[30u].z, fma(_786, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _782));
        float _1135 = fma(_790, cbModelParam._m0[31u].z, fma(_786, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _782));
        float _1139 = fma(_790, cbModelParam._m0[32u].z, fma(_786, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _782));
        float _1162 = _782 + _570;
        float _1163 = _786 + _571;
        float _1164 = _790 + _572;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_570, _571, _572), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3708 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_570, _571, _572), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3741 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_570, _571, _572), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3774 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1092;
        _1401 = _1092;
        _1402 = _1092;
        _1403 = _1092;
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1104)) + _1104;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _729 * 0.5;
    float _1469 = _730 * 0.5;
    float _1470 = _731 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1585 = fma(_790, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _782)) + cbModelParam._m0[13u].w;
        float _1589 = fma(_790, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _782)) + cbModelParam._m0[14u].w;
        float _1593 = fma(_790, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _782)) + cbModelParam._m0[15u].w;
        float _1596 = fma(_731, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729));
        float _1599 = fma(_731, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729));
        float _1602 = fma(_731, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729));
        float _1630;
        if (_1596 > 0.0)
        {
            _1630 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1630 = frontier_phi_14_12_ladder;
        }
        float _1831;
        if (_1599 > 0.0)
        {
            _1831 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1831 = frontier_phi_23_19_ladder;
        }
        float _2074;
        if (_1602 > 0.0)
        {
            _2074 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2074 = frontier_phi_35_30_ladder;
        }
        float _2076 = isnan(_1831) ? _1630 : (isnan(_1630) ? _1831 : min(_1630, _1831));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1596) + _1585;
        float _2082 = (_2077 * _1599) + _1589;
        float _2083 = (_2077 * _1602) + _1593;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_13_35_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1618 = frontier_phi_13_35_ladder_2;
        _1620 = frontier_phi_13_35_ladder_1;
        _1622 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_729, _730, _731), _1537);
        _1618 = _1606.x * cbModelParam._m0[1u].y;
        _1620 = _1606.y * cbModelParam._m0[1u].y;
        _1622 = _1606.z * cbModelParam._m0[1u].y;
    }
    float _1626 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1626 : min(cbModelParam._m0[25u].w, _1626));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_790, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _782)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_790, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _782)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_790, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _782)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_731, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729));
        float _1695 = fma(_731, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729));
        float _1698 = fma(_731, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729));
        float _1836;
        if (_1692 > 0.0)
        {
            _1836 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1836 = frontier_phi_25_21_ladder;
        }
        float _2101;
        if (_1695 > 0.0)
        {
            _2101 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2101 = frontier_phi_37_32_ladder;
        }
        float _2306;
        if (_1698 > 0.0)
        {
            _2306 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2306 = frontier_phi_46_43_ladder;
        }
        float _2308 = isnan(_2101) ? _1836 : (isnan(_1836) ? _2101 : min(_1836, _2101));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1692) + _1681;
        float _2314 = (_2309 * _1695) + _1685;
        float _2315 = (_2309 * _1698) + _1689;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1627);
            frontier_phi_22_46_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_22_46_ladder_2;
        _1719 = frontier_phi_22_46_ladder_1;
        _1721 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_729, _730, _731), _1627);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1733 = ((((1.0 - _750) * ((_737 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_750 * _737)) * _721;
    float _1734 = _1733 * ((cbModelParam._m0[1u].w * (_1717 - _1618)) + _1618);
    float _1735 = _1733 * ((cbModelParam._m0[1u].w * (_1719 - _1620)) + _1620);
    float _1736 = _1733 * ((cbModelParam._m0[1u].w * (_1721 - _1622)) + _1622);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    uvec4 _1755 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1757 = _1755.x * 14u;
    uint _1758 = _1757 + 13u;
    float _1765 = _721 + (-1.0);
    float _1770 = (cbLight._m0[_1758].x * _1765) + 1.0;
    float _1771 = (cbLight._m0[_1758].y * _1765) + 1.0;
    float _1772 = (cbLight._m0[_1758].z * _1765) + 1.0;
    float _1773 = (cbLight._m0[_1758].w * _1765) + 1.0;
    uint _1774 = _1757 + 5u;
    float _1780 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1784 = _1757 + 4u;
    float _1790 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1794 = _1757 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_570, _571, _572));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_570, _571, _572));
    float _3910 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3921 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1774].x * _1780) * _1815) + ((cbLight._m0[_1784].x * _1790) * _1813);
    float _1823 = ((_1780 * cbLight._m0[_1774].y) * _1815) + ((_1790 * cbLight._m0[_1784].y) * _1813);
    float _1824 = ((_1780 * cbLight._m0[_1774].z) * _1815) + ((_1790 * cbLight._m0[_1784].z) * _1813);
    uvec4 _1828 = floatBitsToUint(cbLight._m0[_1757 + 12u]);
    bool _1830 = _1828.x == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1830)
    {
        _1841 = _1822;
        _1843 = _1823;
        _1845 = _1824;
    }
    else
    {
        uint _1849 = _1757 + 6u;
        float _1865 = (dot(vec3(cbLight._m0[_1757 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _3932 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1868 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1841 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1822;
        _1843 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1823;
        _1845 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1824;
    }
    bool _1848 = _1828.y == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1848)
    {
        _1886 = _1841;
        _1888 = _1843;
        _1890 = _1845;
    }
    else
    {
        uint _2045 = _1757 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1757 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _3948 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2064 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1886 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1841;
        _1888 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1843;
        _1890 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1845;
    }
    uint _1893 = _1757 + 8u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _573) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1757].x + _650;
    float _1909 = cbLight._m0[_1757].y + _651;
    float _1910 = cbLight._m0[_1757].z + _652;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1757].xyz));
    float _3964 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _1922 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1923 = dot(vec3(_570, _571, _572), vec3(_1915, _1916, _1917));
    float _3986 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1915, _1916, _1917));
    float _3997 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1907 * _1907;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1907;
    float _1958 = (0.5 / (((_1922 * ((_1921 * _1947) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _1947) + _1907) * _1921))) * _1921;
    float _4008 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    uint _1971 = _1757 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _573) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1794].x + _650;
    float _1985 = cbLight._m0[_1794].y + _651;
    float _1986 = cbLight._m0[_1794].z + _652;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1794].xyz));
    float _4019 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1998 = dot(vec3(_570, _571, _572), vec3(_1991, _1992, _1993));
    float _4030 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1991, _1992, _1993));
    float _4041 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1983;
    float _2030 = (0.5 / (((_1922 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2020) + _1983) * _1997))) * _1997;
    float _4052 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2042 = (((_2019 * cbLight._m0[_1971].x) * _2032) * _1780) + (((_1946 * cbLight._m0[_1893].x) * _1960) * _1790);
    float _2043 = (((_2019 * cbLight._m0[_1971].y) * _2032) * _1780) + (((_1946 * cbLight._m0[_1893].y) * _1960) * _1790);
    float _2044 = (((_2019 * cbLight._m0[_1971].z) * _2032) * _1780) + (((_1946 * cbLight._m0[_1893].z) * _1960) * _1790);
    float _2106;
    float _2108;
    float _2110;
    if (_1830)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1757 + 2u;
        uint _2116 = _1757 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _573) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _650;
        float _2133 = cbLight._m0[_2112].y + _651;
        float _2134 = cbLight._m0[_2112].z + _652;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2112].xyz));
        float _4063 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2146 = dot(vec3(_570, _571, _572), vec3(_2139, _2140, _2141));
        float _4074 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4085 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1922 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2168) + _2131) * _2145))) * _2145;
        float _4096 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2106 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _2042;
        _2108 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _2043;
        _2110 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _2044;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1848)
    {
        _2216 = _2106;
        _2218 = _2108;
        _2220 = _2110;
    }
    else
    {
        uint _2227 = _1757 + 3u;
        uint _2231 = _1757 + 11u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _573) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _650;
        float _2248 = cbLight._m0[_2227].y + _651;
        float _2249 = cbLight._m0[_2227].z + _652;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2227].xyz));
        float _4112 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2261 = dot(vec3(_570, _571, _572), vec3(_2254, _2255, _2256));
        float _4123 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4134 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_1922 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2283) + _2246) * _2260))) * _2260;
        float _4145 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2216 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2106;
        _2218 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2108;
        _2220 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2110;
    }
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_1755.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
        }
        else
        {
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2680)
                {
                    frontier_phi_61_pred = _2664;
                    frontier_phi_61_pred_1 = _2669;
                    frontier_phi_61_pred_2 = _2668;
                    frontier_phi_61_pred_3 = _2667;
                    frontier_phi_61_pred_4 = _2666;
                    frontier_phi_61_pred_5 = _2665;
                }
                else
                {
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    uint _2794;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2679;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2798 = uint(findLSB(_2794)) + (_2670 << 5u);
                        uint _2795 = (_2794 + 4294967295u) & _2794;
                        uint _2800 = _2798 * 48u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2820 = (_2798 * 48u) + 4u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2839 = (_2798 * 48u) + 8u;
                        vec3 _2850 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x));
                        float _2854 = _2814.x - _2372;
                        float _2855 = _2814.y - _2373;
                        float _2856 = _2814.z - _2374;
                        float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                        float _2860 = inversesqrt(_2857);
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2864 = dot(vec3(_677, _680, _683), vec3(_2861, _2862, _2863));
                        float _2869 = 1.0 - (_2857 * _2814.w);
                        float _4171 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2871 = sqrt(_2857) * _2833.w;
                        float _2874 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2864) + _2875;
                        float _2881 = _2871 * _2871;
                        float _2885 = ((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2870) / ((_2881 * 0.699999988079071044921875) + 1.0);
                        float _2889 = (-0.0) - _2372;
                        float _2890 = (-0.0) - _2373;
                        float _2891 = (-0.0) - _2374;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2906 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                        float _2907 = 1.0 - _737;
                        float _2914 = sqrt(1.0 - ((1.0 - (_2907 * _2907)) * (1.0 - (_2906 * _2906))));
                        float _2915 = _2914 * _2914;
                        float _2916 = _2915 * _2915;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2927 = dot(vec3(_677, _680, _683), vec3(_2896, _2897, _2898));
                        float _4187 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2931 = dot(vec3(_677, _680, _683), vec3(_2923 * _2917, _2923 * _2918, _2923 * _2919));
                        float _4198 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2938 = ((_2934 * _2934) * (_2916 + (-1.0))) + 1.0;
                        float _2939 = _2874 * _2915;
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2864) + _2940;
                        float _4209 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2945 = 1.0 - _2915;
                        float _2955 = (0.5 / (((_2944 * ((_2930 * _2945) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2944 * _2945) + _2915) * _2930))) * _2944;
                        float _4220 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2966 = (((_2916 * 3.1415927410125732421875) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) / ((_2938 * _2938) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125))) * _2870;
                        _2723 = (_2885 * _2833.x) + _2791;
                        _2724 = (_2885 * _2833.y) + _2792;
                        _2725 = (_2885 * _2833.z) + _2793;
                        _2720 = (_2966 * _2850.x) + _2788;
                        _2721 = (_2966 * _2850.y) + _2789;
                        _2722 = (_2966 * _2850.z) + _2790;
                        if (_2795 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2795;
                        }
                    }
                    frontier_phi_61_pred = _2720;
                    frontier_phi_61_pred_1 = _2725;
                    frontier_phi_61_pred_2 = _2724;
                    frontier_phi_61_pred_3 = _2723;
                    frontier_phi_61_pred_4 = _2722;
                    frontier_phi_61_pred_5 = _2721;
                }
                _2520 = frontier_phi_61_pred;
                _2530 = frontier_phi_61_pred_1;
                _2528 = frontier_phi_61_pred_2;
                _2526 = frontier_phi_61_pred_3;
                _2524 = frontier_phi_61_pred_4;
                _2522 = frontier_phi_61_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2520;
                    _2665 = _2522;
                    _2666 = _2524;
                    _2667 = _2526;
                    _2668 = _2528;
                    _2669 = _2530;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
        }
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.z;
        uint _2536 = (_2534 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2536) & _2418) == 0u)
        {
            _2632 = _2519;
            _2634 = _2521;
            _2636 = _2523;
            _2638 = _2525;
            _2640 = _2527;
            _2642 = _2529;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2658 = _2657 * _2372;
            float _2659 = _2657 * _2373;
            float _2660 = _2657 * _2374;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2536 < ((_2534 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2771 = _2519;
                float _2772 = _2521;
                float _2773 = _2523;
                float _2774 = _2525;
                float _2775 = _2527;
                float _2776 = _2529;
                uint _2777 = _2536;
                uint _2786;
                bool _2787;
                for (;;)
                {
                    _2786 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                    _2787 = _2786 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2787)
                    {
                        frontier_phi_67_pred = _2774;
                        frontier_phi_67_pred_1 = _2775;
                        frontier_phi_67_pred_2 = _2776;
                        frontier_phi_67_pred_3 = _2773;
                        frontier_phi_67_pred_4 = _2772;
                        frontier_phi_67_pred_5 = _2771;
                    }
                    else
                    {
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _2984 = _2771;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        uint _2990 = _2786;
                        uint _2991;
                        vec4 _3016;
                        float _3017;
                        vec4 _3032;
                        vec3 _3044;
                        vec4 _3059;
                        vec4 _3075;
                        float _3121;
                        bool _3122;
                        for (;;)
                        {
                            uint _3001 = ((_2777 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2990));
                            _2991 = (_2990 + 4294967295u) & _2990;
                            uint _3003 = _3001 * 40u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3017 = _3016.w;
                            uint _3019 = (_3001 * 40u) + 4u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3034 = (_3001 * 40u) + 8u;
                            _3044 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x));
                            uint _3046 = (_3001 * 40u) + 16u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3062 = (_3001 * 40u) + 20u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3001 * 40u) + 24u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3096 = (_3001 * 40u) + 28u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3121 = fma(_2374, _3109.z, fma(_2373, _3109.y, _3109.x * _2372)) + _3109.w;
                            _3122 = !((fma(_2374, _3090.z, fma(_2373, _3090.y, _3090.x * _2372)) + _3090.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3122)
                            {
                                float _3149 = _3016.x - _2372;
                                float _3150 = _3016.y - _2373;
                                float _3151 = _3016.z - _2374;
                                float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                                float _3155 = inversesqrt(_3152);
                                float _3156 = _3155 * _3149;
                                float _3157 = _3155 * _3150;
                                float _3158 = _3155 * _3151;
                                float _3162 = 1.0 - (_3152 / (_3017 * _3017));
                                float _4231 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3167 = sqrt(_3152) * _3032.w;
                                float _3169 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                                float _3170 = _3169 * _3169;
                                float _3173 = ((1.0 - _3170) * dot(vec3(_3156, _3157, _3158), vec3(_677, _680, _683))) + _3170;
                                float _3176 = _3167 * _3167;
                                float _3180 = (fma(_2374, _3059.z, fma(_2373, _3059.y, _3059.x * _2372)) + _3059.w) / _3121;
                                float _3181 = (fma(_2374, _3075.z, fma(_2373, _3075.y, _3075.x * _2372)) + _3075.w) / _3121;
                                float _3185 = 1.0 - dot(vec2(_3180, _3181), vec2(_3180, _3181));
                                float _4247 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3187 = _3186 * (((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3163) / ((_3176 * 0.699999988079071044921875) + 1.0));
                                float _3199 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                                float _3200 = 1.0 - _737;
                                float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                                float _3208 = _3207 * _3207;
                                float _3209 = _3208 * _3208;
                                float _3210 = _3156 - _2658;
                                float _3211 = _3157 - _2659;
                                float _3212 = _3158 - _2660;
                                float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                                float _3220 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4258 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3224 = dot(vec3(_677, _680, _683), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                                float _4269 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3227 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                                float _3232 = _3169 * _3208;
                                float _3233 = _3232 * _3232;
                                float _3239 = ((1.0 - _3233) * dot(vec3(_677, _680, _683), vec3(_3156, _3157, _3158))) + _3233;
                                float _4280 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3241 = 1.0 - _3208;
                                float _3251 = (0.5 / (((_3240 * ((_3223 * _3241) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3208) * _3223))) * _3240;
                                float _4291 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3261 = (_3186 * _3163) * (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) / ((_3231 * _3231) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3261 * _3044.x;
                                frontier_phi_73_pred_1 = _3261 * _3044.y;
                                frontier_phi_73_pred_2 = _3187 * _3032.z;
                                frontier_phi_73_pred_3 = _3187 * _3032.y;
                                frontier_phi_73_pred_4 = _3187 * _3032.x;
                                frontier_phi_73_pred_5 = _3261 * _3044.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_73_pred;
                            _3266 = frontier_phi_73_pred_1;
                            _3270 = frontier_phi_73_pred_2;
                            _3269 = frontier_phi_73_pred_3;
                            _3268 = frontier_phi_73_pred_4;
                            _3267 = frontier_phi_73_pred_5;
                            _2974 = _3268 + _2987;
                            _2975 = _3269 + _2988;
                            _2976 = _3270 + _2989;
                            _2971 = _3265 + _2984;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            if (_2991 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2991;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2974;
                        frontier_phi_67_pred_1 = _2975;
                        frontier_phi_67_pred_2 = _2976;
                        frontier_phi_67_pred_3 = _2973;
                        frontier_phi_67_pred_4 = _2972;
                        frontier_phi_67_pred_5 = _2971;
                    }
                    _2639 = frontier_phi_67_pred;
                    _2641 = frontier_phi_67_pred_1;
                    _2643 = frontier_phi_67_pred_2;
                    _2637 = frontier_phi_67_pred_3;
                    _2635 = frontier_phi_67_pred_4;
                    _2633 = frontier_phi_67_pred_5;
                    uint _2778 = _2777 + 1u;
                    if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2771 = _2633;
                        _2772 = _2635;
                        _2773 = _2637;
                        _2774 = _2639;
                        _2775 = _2641;
                        _2776 = _2643;
                        _2777 = _2778;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2641;
                frontier_phi_55_56_ladder_1 = _2643;
                frontier_phi_55_56_ladder_2 = _2639;
                frontier_phi_55_56_ladder_3 = _2637;
                frontier_phi_55_56_ladder_4 = _2635;
                frontier_phi_55_56_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_55_56_ladder = _2527;
                frontier_phi_55_56_ladder_1 = _2529;
                frontier_phi_55_56_ladder_2 = _2525;
                frontier_phi_55_56_ladder_3 = _2523;
                frontier_phi_55_56_ladder_4 = _2521;
                frontier_phi_55_56_ladder_5 = _2519;
            }
            _2632 = frontier_phi_55_56_ladder_5;
            _2634 = frontier_phi_55_56_ladder_4;
            _2636 = frontier_phi_55_56_ladder_3;
            _2638 = frontier_phi_55_56_ladder_2;
            _2640 = frontier_phi_55_56_ladder;
            _2642 = frontier_phi_55_56_ladder_1;
        }
        float _2647 = isnan(1.0) ? _721 : (isnan(_721) ? 1.0 : min(_721, 1.0));
        _2431 = (_2647 * _2638) + _1886;
        _2433 = (_2647 * _2640) + _1888;
        _2435 = (_2647 * _2642) + _1890;
        _2437 = ((_2632 * 0.039999999105930328369140625) * _2647) + _2216;
        _2439 = ((_2634 * 0.039999999105930328369140625) * _2647) + _2218;
        _2441 = ((_2636 * 0.039999999105930328369140625) * _2647) + _2220;
    }
    else
    {
        _2431 = _1886;
        _2433 = _1888;
        _2435 = _1890;
        _2437 = _2216;
        _2439 = _2218;
        _2441 = _2220;
    }
    float _4307 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4318 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4329 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    uint _2461 = _228 + 6u;
    float _2469 = _658 / cbSceneParam._m0[86u].x;
    float _2470 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2484 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2486 = _2484.x;
    float _2487 = _2484.y;
    float _2488 = _2484.z;
    float _2489 = _2484.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2544 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2545 = _2544 / _591;
        float _2556 = _2545 * _643;
        float _2557 = _644 * _2545;
        float _2558 = (-0.0) - _2557;
        float _2560 = _2545 * _645;
        float _2562 = (cbSceneParam._m0[77u].w * _2558) / _2544;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2557;
        float _2570 = sqrt(((_2556 * _2556) + (_2557 * _2557)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2544)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2558 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2695 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2733 = ((abs(_2570 / _2558) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2580 * _2704) - exp2(_2580 * _2705)) * _2693))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2489);
        _2582 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2486;
        _2584 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2487;
        _2586 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2488;
        _2588 = _2744 * _2489;
    }
    else
    {
        _2582 = _2486;
        _2584 = _2487;
        _2586 = _2488;
        _2588 = _2489;
    }
    float _2600 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2601 = _2600 == 3.0;
    float _2602 = log2(_2588);
    float _2609 = exp2(_2602 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2431 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _721))) + ((_2437 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2610 = exp2(_2602 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2433 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _721))) + ((_2439 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2602 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2435 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _721))) + ((_2441 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2620 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2620 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.y = _2620 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
    SV_Target.z = _2620 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.w = cbInstanceData._m0[_2461].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2461].w;
}


