#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _3735;
float _3736;
float _3737;
float _3738;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3747 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3758 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3769 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3780 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _431 = (_424 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _432 = (_424 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _433 = (_424 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) + _443;
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _424) + _518;
    float _530 = ((((_497.x - _516) * _424) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _424) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3791 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _569 = (_530 + ((((_470.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_557.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _570 = (_531 + ((((_470.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_557.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _573 = fma(_537, _244, fma(_570, _251, _569 * _237));
    float _576 = fma(_537, _245, fma(_570, _252, _569 * _238));
    float _579 = fma(_537, _246, fma(_570, _253, _569 * _239));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    vec4 _612 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _614 = _612.x;
    float _615 = 1.0 - _614;
    float _621 = (cbMtdParam._m0[19u].x + dot(vec4(_583 * _573, _583 * _576, _583 * _579, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_614 - _615) * cbMtdParam._m0[24u].z) + _615) * cbMtdParam._m0[21u].z);
    float _3802 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _624 = (-0.0) - cbMtdParam._m0[24u].y;
    float _626 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
    float _634 = _622 - ((_622 * TEXCOORD_8.x) * _627);
    float _635 = _622 - ((_622 * TEXCOORD_8.y) * _627);
    float _636 = _622 - ((_622 * TEXCOORD_8.z) * _627);
    float _643 = (_634 * (cbMtdParam._m0[17u].x - _450)) + _450;
    float _644 = (_635 * (cbMtdParam._m0[17u].y - _451)) + _451;
    float _645 = (_636 * (cbMtdParam._m0[17u].z - _452)) + _452;
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _659 = _657.x;
    float _660 = 1.0 - _659;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_659 - _660) * cbMtdParam._m0[24u].w) + _660) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3823 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _643) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _643;
    float _696 = ((((cbMtdParam._m0[10u].y - _644) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _644;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _645)) * _687) + _645;
    float _702 = (((_470.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    float _706 = ((_557.z - _702) * cbMtdParam._m0[19u].w) + _702;
    vec4 _720 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3834 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = ((_720.z - _706) * _634) + _706;
    float _740 = ((cbMtdParam._m0[23u].y - _737) * _687) + _737;
    vec4 _759 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _765 = (_759.x * 2.0) + (-1.0);
    float _766 = (_759.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3845 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _782 = ((sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) - _537) * _636) + _537;
    float _785 = (((_727 - _569) * _634) + _569) + (cbMtdParam._m0[21u].x * _569);
    float _786 = (((_728 - _570) * _635) + _570) + (cbMtdParam._m0[21u].x * _570);
    float _797 = (((_765 - _785) + (_785 * cbMtdParam._m0[22u].z)) * _687) + _785;
    float _798 = (((_766 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _687) + _786;
    float _799 = (_687 * (sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _782)) + _782;
    float _801 = cbMtdParam._m0[22u].x + _557.w;
    float _804 = fma(_799, _244, fma(_798, _251, _797 * _237));
    float _807 = fma(_799, _245, fma(_798, _252, _797 * _238));
    float _810 = fma(_799, _246, fma(_798, _253, _797 * _239));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    float _815 = _814 * _804;
    float _816 = _814 * _807;
    float _817 = _814 * _810;
    float _3856 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _818 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3878 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3889 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3900 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _836 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_887 * _887) + (_888 * _888)) + (_889 * _889));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _1064)) + _1064) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _815));
    float _936 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _815));
    float _939 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _815));
    uint _952 = _275 + 9u;
    uint _953 = _952 + uint(cbMatDynParam._m0[0u].w);
    float _959 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_953].x;
    float _960 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_953].y;
    float _961 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_953].z;
    float _3933 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _977 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_815, _816, _817), vec3(_894, _895, _896));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _815) - _894;
    float _986 = (_981 * _816) - _895;
    float _987 = (_981 * _817) - _896;
    float _991 = abs(dot(vec3(_894, _895, _896), vec3(_815, _816, _817)));
    float _3966 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_818);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1104 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1108 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1133 = _1038 + _815;
        float _1134 = _1042 + _816;
        float _1135 = _1046 + _817;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_815, _816, _817), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4014 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_815, _816, _817), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4047 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_815, _816, _817), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4080 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1422 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1426 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1449 = _1038 + _815;
        float _1450 = _1042 + _816;
        float _1451 = _1046 + _817;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_815, _816, _817), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4143 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_815, _816, _817), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4176 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_815, _816, _817), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4209 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = _1376;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _985 * 0.5;
    float _1756 = _986 * 0.5;
    float _1757 = _987 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _818);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1886 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1889 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2118;
        if (_1886 > 0.0)
        {
            _2118 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2118 = frontier_phi_26_22_ladder;
        }
        float _2361;
        if (_1889 > 0.0)
        {
            _2361 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2361 = frontier_phi_38_33_ladder;
        }
        float _2363 = isnan(_2118) ? _1917 : (isnan(_1917) ? _2118 : min(_1917, _2118));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1883) + _1872;
        float _2369 = (_2364 * _1886) + _1876;
        float _2370 = (_2364 * _1889) + _1880;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_16_38_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1824);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _818);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1982 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1985 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2123;
        if (_1979 > 0.0)
        {
            _2123 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2123 = frontier_phi_28_24_ladder;
        }
        float _2388;
        if (_1982 > 0.0)
        {
            _2388 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2388 = frontier_phi_40_35_ladder;
        }
        float _2593;
        if (_1985 > 0.0)
        {
            _2593 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2593 = frontier_phi_49_46_ladder;
        }
        float _2595 = isnan(_2388) ? _2123 : (isnan(_2123) ? _2388 : min(_2123, _2388));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1979) + _1968;
        float _2601 = (_2596 * _1982) + _1972;
        float _2602 = (_2596 * _1985) + _1976;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_49_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_25_49_ladder_2;
        _2006 = frontier_phi_25_49_ladder_1;
        _2008 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1914);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2020 = ((((1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1006 * _993)) * _977;
    float _2021 = _2020 * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2022 = _2020 * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2023 = _2020 * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _977 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2077 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2081 = _2044 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_815, _816, _817));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_815, _816, _817));
    float _4345 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4356 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2061].x * _2067) * _2102) + ((cbLight._m0[_2071].x * _2077) * _2100);
    float _2110 = ((_2067 * cbLight._m0[_2061].y) * _2102) + ((_2077 * cbLight._m0[_2071].y) * _2100);
    float _2111 = ((_2067 * cbLight._m0[_2061].z) * _2102) + ((_2077 * cbLight._m0[_2071].z) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2117)
    {
        _2128 = _2109;
        _2130 = _2110;
        _2132 = _2111;
    }
    else
    {
        uint _2136 = _2044 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4367 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2155 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2109;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2110;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2111;
    }
    bool _2135 = _2115.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2135)
    {
        _2173 = _2128;
        _2175 = _2130;
        _2177 = _2132;
    }
    else
    {
        uint _2332 = _2044 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4383 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2351 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2173 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2128;
        _2175 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2130;
        _2177 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2132;
    }
    uint _2180 = _2044 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _818) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2044].x + _894;
    float _2196 = cbLight._m0[_2044].y + _895;
    float _2197 = cbLight._m0[_2044].z + _896;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2044].xyz));
    float _4399 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2209 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2210 = dot(vec3(_815, _816, _817), vec3(_2202, _2203, _2204));
    float _4421 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2202, _2203, _2204));
    float _4432 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2234 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2209 * ((_2208 * _2234) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2234) + _2194) * _2208))) * _2208;
    float _4443 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2258 = _2044 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _818) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2081].x + _894;
    float _2272 = cbLight._m0[_2081].y + _895;
    float _2273 = cbLight._m0[_2081].z + _896;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2081].xyz));
    float _4454 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2285 = dot(vec3(_815, _816, _817), vec3(_2278, _2279, _2280));
    float _4465 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2278, _2279, _2280));
    float _4476 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2270;
    float _2317 = (0.5 / (((_2209 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2307) + _2270) * _2284))) * _2284;
    float _4487 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2329 = (((_2306 * cbLight._m0[_2258].x) * _2319) * _2067) + (((_2233 * cbLight._m0[_2180].x) * _2247) * _2077);
    float _2330 = (((_2306 * cbLight._m0[_2258].y) * _2319) * _2067) + (((_2233 * cbLight._m0[_2180].y) * _2247) * _2077);
    float _2331 = (((_2306 * cbLight._m0[_2258].z) * _2319) * _2067) + (((_2233 * cbLight._m0[_2180].z) * _2247) * _2077);
    float _2393;
    float _2395;
    float _2397;
    if (_2117)
    {
        _2393 = _2329;
        _2395 = _2330;
        _2397 = _2331;
    }
    else
    {
        uint _2399 = _2044 + 2u;
        uint _2403 = _2044 + 10u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _818) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _894;
        float _2420 = cbLight._m0[_2399].y + _895;
        float _2421 = cbLight._m0[_2399].z + _896;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2399].xyz));
        float _4498 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2433 = dot(vec3(_815, _816, _817), vec3(_2426, _2427, _2428));
        float _4509 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4520 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2455 = 1.0 - _2418;
        float _2465 = (0.5 / (((_2209 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2455) + _2418) * _2432))) * _2432;
        float _4531 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2393 = (((_2454 * cbLight._m0[_2403].x) * _2467) * _2468) + _2329;
        _2395 = (((_2454 * cbLight._m0[_2403].y) * _2467) * _2468) + _2330;
        _2397 = (((_2454 * cbLight._m0[_2403].z) * _2467) * _2468) + _2331;
    }
    float _2503;
    float _2505;
    float _2507;
    if (_2135)
    {
        _2503 = _2393;
        _2505 = _2395;
        _2507 = _2397;
    }
    else
    {
        uint _2514 = _2044 + 3u;
        uint _2518 = _2044 + 11u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _818) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _894;
        float _2535 = cbLight._m0[_2514].y + _895;
        float _2536 = cbLight._m0[_2514].z + _896;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2514].xyz));
        float _4547 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2548 = dot(vec3(_815, _816, _817), vec3(_2541, _2542, _2543));
        float _4558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4569 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2570 = 1.0 - _2533;
        float _2580 = (0.5 / (((_2209 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2570) + _2533) * _2547))) * _2547;
        float _4580 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2503 = (((_2569 * cbLight._m0[_2518].x) * _2582) * _2583) + _2393;
        _2505 = (((_2569 * cbLight._m0[_2518].y) * _2582) * _2583) + _2395;
        _2507 = (((_2569 * cbLight._m0[_2518].z) * _2582) * _2583) + _2397;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2042.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2974)
                {
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2973;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2964 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2659;
                        float _3170 = _3129.y - _2660;
                        float _3171 = _3129.z - _2661;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_933, _936, _939), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4606 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2659;
                        float _3205 = (-0.0) - _2660;
                        float _3206 = (-0.0) - _2661;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _993;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_933, _936, _939), vec3(_3211, _3212, _3213));
                        float _4622 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3246 = dot(vec3(_933, _936, _939), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4633 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4644 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4655 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3033 = (_3200 * _3148.x) + _3106;
                        _3034 = (_3200 * _3148.y) + _3107;
                        _3035 = (_3200 * _3148.z) + _3108;
                        _3030 = (_3281 * _3165.x) + _3103;
                        _3031 = (_3281 * _3165.y) + _3104;
                        _3032 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                _2807 = frontier_phi_66_pred;
                _2817 = frontier_phi_66_pred_1;
                _2815 = frontier_phi_66_pred_2;
                _2813 = frontier_phi_66_pred_3;
                _2811 = frontier_phi_66_pred_4;
                _2809 = frontier_phi_66_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2807;
                    _2959 = _2809;
                    _2960 = _2811;
                    _2961 = _2813;
                    _2962 = _2815;
                    _2963 = _2817;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2823) & _2705) == 0u)
        {
            _2926 = _2806;
            _2928 = _2808;
            _2930 = _2810;
            _2932 = _2812;
            _2934 = _2814;
            _2936 = _2816;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _2952 = _2951 * _2659;
            float _2953 = _2951 * _2660;
            float _2954 = _2951 * _2661;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3086 = _2806;
                float _3087 = _2808;
                float _3088 = _2810;
                float _3089 = _2812;
                float _3090 = _2814;
                float _3091 = _2816;
                uint _3092 = _2823;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3102)
                    {
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    else
                    {
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        uint _3314 = _3101;
                        uint _3315;
                        vec4 _3340;
                        float _3341;
                        vec4 _3356;
                        vec3 _3368;
                        vec4 _3383;
                        vec4 _3398;
                        float _3444;
                        bool _3445;
                        for (;;)
                        {
                            uint _3325 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3314));
                            _3315 = (_3314 + 4294967295u) & _3314;
                            uint _3327 = _3325 * 40u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3341 = _3340.w;
                            uint _3343 = (_3325 * 40u) + 4u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3325 * 40u) + 8u;
                            _3368 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x));
                            uint _3370 = (_3325 * 40u) + 16u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3325 * 40u) + 20u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3325 * 40u) + 24u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3419 = (_3325 * 40u) + 28u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3444 = fma(_2661, _3432.z, fma(_2660, _3432.y, _3432.x * _2659)) + _3432.w;
                            _3445 = !((fma(_2661, _3413.z, fma(_2660, _3413.y, _3413.x * _2659)) + _3413.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3445)
                            {
                                float _3472 = _3340.x - _2659;
                                float _3473 = _3340.y - _2660;
                                float _3474 = _3340.z - _2661;
                                float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                                float _3478 = inversesqrt(_3475);
                                float _3479 = _3478 * _3472;
                                float _3480 = _3478 * _3473;
                                float _3481 = _3478 * _3474;
                                float _3485 = 1.0 - (_3475 / (_3341 * _3341));
                                float _4666 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3490 = sqrt(_3475) * _3356.w;
                                float _3492 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                                float _3493 = _3492 * _3492;
                                float _3496 = ((1.0 - _3493) * dot(vec3(_3479, _3480, _3481), vec3(_933, _936, _939))) + _3493;
                                float _3499 = _3490 * _3490;
                                float _3503 = (fma(_2661, _3383.z, fma(_2660, _3383.y, _3383.x * _2659)) + _3383.w) / _3444;
                                float _3504 = (fma(_2661, _3398.z, fma(_2660, _3398.y, _3398.x * _2659)) + _3398.w) / _3444;
                                float _3508 = 1.0 - dot(vec2(_3503, _3504), vec2(_3503, _3504));
                                float _4682 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3510 = _3509 * (((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3486) / ((_3499 * 0.699999988079071044921875) + 1.0));
                                float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _993;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3479 - _2952;
                                float _3534 = _3480 - _2953;
                                float _3535 = _3481 - _2954;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_933, _936, _939), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4693 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3547 = dot(vec3(_933, _936, _939), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4704 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3492 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_933, _936, _939), vec3(_3479, _3480, _3481))) + _3556;
                                float _4715 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4726 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3509 * _3486) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3510 * _3356.y;
                                frontier_phi_83_pred_1 = _3510 * _3356.x;
                                frontier_phi_83_pred_2 = _3584 * _3368.z;
                                frontier_phi_83_pred_3 = _3584 * _3368.y;
                                frontier_phi_83_pred_4 = _3584 * _3368.x;
                                frontier_phi_83_pred_5 = _3510 * _3356.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_83_pred;
                            _3591 = frontier_phi_83_pred_1;
                            _3590 = frontier_phi_83_pred_2;
                            _3589 = frontier_phi_83_pred_3;
                            _3588 = frontier_phi_83_pred_4;
                            _3593 = frontier_phi_83_pred_5;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            if (_3315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3315;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3300;
                        frontier_phi_77_pred_1 = _3299;
                        frontier_phi_77_pred_2 = _3298;
                        frontier_phi_77_pred_3 = _3297;
                        frontier_phi_77_pred_4 = _3296;
                        frontier_phi_77_pred_5 = _3295;
                    }
                    _2937 = frontier_phi_77_pred;
                    _2935 = frontier_phi_77_pred_1;
                    _2933 = frontier_phi_77_pred_2;
                    _2931 = frontier_phi_77_pred_3;
                    _2929 = frontier_phi_77_pred_4;
                    _2927 = frontier_phi_77_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2927;
                        _3087 = _2929;
                        _3088 = _2931;
                        _3089 = _2933;
                        _3090 = _2935;
                        _3091 = _2937;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_58_59_ladder = _2810;
                frontier_phi_58_59_ladder_1 = _2816;
                frontier_phi_58_59_ladder_2 = _2814;
                frontier_phi_58_59_ladder_3 = _2812;
                frontier_phi_58_59_ladder_4 = _2808;
                frontier_phi_58_59_ladder_5 = _2806;
            }
            _2926 = frontier_phi_58_59_ladder_5;
            _2928 = frontier_phi_58_59_ladder_4;
            _2930 = frontier_phi_58_59_ladder;
            _2932 = frontier_phi_58_59_ladder_3;
            _2934 = frontier_phi_58_59_ladder_2;
            _2936 = frontier_phi_58_59_ladder_1;
        }
        float _2941 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _2718 = (_2941 * _2932) + _2173;
        _2720 = (_2941 * _2934) + _2175;
        _2722 = (_2941 * _2936) + _2177;
        _2724 = ((_2926 * 0.039999999105930328369140625) * _2941) + _2503;
        _2726 = ((_2928 * 0.039999999105930328369140625) * _2941) + _2505;
        _2728 = ((_2930 * 0.039999999105930328369140625) * _2941) + _2507;
    }
    else
    {
        _2718 = _2173;
        _2720 = _2175;
        _2722 = _2177;
        _2724 = _2503;
        _2726 = _2505;
        _2728 = _2507;
    }
    float _4742 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4753 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4764 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2745 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2718 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _977))) + ((_2724 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2746 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2720 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _977))) + ((_2726 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2747 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2722 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _977))) + ((_2728 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _2748 = _275 + 6u;
    float _2756 = _914 / cbSceneParam._m0[86u].x;
    float _2757 = _915 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _836 : (isnan(_836) ? cbSceneParam._m0[77u].w : min(_836, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_836 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_836) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _836 : min(cbSceneParam._m0[80u].w, _836));
        float _2832 = _2831 / _836;
        float _2843 = _2832 * _887;
        float _2844 = _888 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2846 = _2832 * _889;
        float _2848 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2844;
        float _2856 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2845 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2989 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3043 = ((abs(_2856 / _2845) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2866 * _2998) - exp2(_2866 * _2999)) * _2987))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2776);
        _2868 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2870 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2872 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2874 = _3054 * _2776;
    }
    else
    {
        _2868 = _2773;
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
    }
    bool _3081;
    vec4 _2884;
    vec4 _2906;
    float _2908;
    float _2912;
    float _2913;
    float _2914;
    float _2915;
    bool _2925;
    for (;;)
    {
        _2884 = cbMatDynParam._m0[0u];
        float _2886 = roundEven(_2884.y);
        bool _2887 = _2886 == 3.0;
        float _2888 = log2(_2874);
        float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * _2745;
        float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * _2746;
        float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * _2747;
        float _2904 = _903 + (-0.5);
        _2906 = cbMtdParam._m0[1u];
        _2908 = _2906.y * _2904;
        float _2911 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2912 = _2911 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
        _2913 = _2911 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
        _2914 = _2911 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
        _2915 = _2904 * 0.999000012874603271484375;
        _2925 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2925)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _2915) < 0.5)
            {
                _3081 = true;
                break;
            }
        }
        uint _3022 = _952 + uint(_2884.w);
        if ((cbInstanceData._m0[_3022].w < 1.0) && ((cbInstanceData._m0[_3022].w + _2915) < 0.5))
        {
            _3081 = true;
            break;
        }
        if ((_2908 + 1.0) < _2906.x)
        {
            _3081 = true;
            break;
        }
        _3081 = false;
        break;
    }
    float _3286;
    if (_3081)
    {
        discard_state = true;
        _3286 = 0.0;
    }
    else
    {
        _3286 = cbInstanceData._m0[_2748].w;
    }
    SV_Target.x = _2912;
    SV_Target.y = _2913;
    SV_Target.z = _2914;
    SV_Target.w = _3286;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
    discard_exit();
}


