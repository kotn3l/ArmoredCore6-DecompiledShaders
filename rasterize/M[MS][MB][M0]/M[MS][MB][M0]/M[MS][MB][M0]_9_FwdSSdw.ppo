#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1034;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _274 = _270.z;
    float _279 = (_270.x * 2.0) + (-1.0);
    float _281 = (_270.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3368 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _324 = _322.x;
    float _325 = 1.0 - _324;
    float _358 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_324 - _325) * cbMtdParam._m0[24u].w) + _325) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3379 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _367 = ((((cbMtdParam._m0[10u].x - _255) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _359) + _255;
    float _368 = ((((cbMtdParam._m0[10u].y - _256) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _359) + _256;
    float _369 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _257)) * _359) + _257;
    float _373 = ((cbMtdParam._m0[23u].y - _274) * _359) + _274;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _397 = _395.x;
    float _398 = _395.y;
    float _407 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_219, _220, _221, 0.0));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _308) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _309) + cbTextureTilingScale._m0[18u].w));
    float _424 = _422.x;
    float _429 = fract(_422.w + cbPerFrame._m0[22u].x);
    float _431 = (1.0 - _429) * _424;
    float _436 = ((_429 + (-1.0)) + _424) * 9.0;
    float _438 = ((_424 + (-1.0)) + _429) * 9.0;
    float _439 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _440 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _454 = (_431 * ((_422.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _439 : (isnan(_439) ? 3.0 : min(_439, 3.0))) * 3.1415927410125732421875);
    float _456 = (_431 * ((_422.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _440 : (isnan(_440) ? 3.0 : min(_440, 3.0))) * 3.1415927410125732421875);
    float _460 = inversesqrt(dot(vec3(_454, _456, 1.0), vec3(_454, _456, 1.0)));
    float _476 = (((((0.5 - _397) + ((_454 * 0.5) * _460)) * _407) + _397) * 2.0) + (-1.0);
    float _477 = (((((0.5 - _398) + ((_460 * 0.5) * _456)) * _407) + _398) * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _3410 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _494 = ((((cbMtdParam._m0[22u].z * _279) - _279) + _476) * _359) + _279;
    float _495 = ((((cbMtdParam._m0[22u].z * _281) - _281) + _477) * _359) + _281;
    float _496 = (_359 * (sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) - _288)) + _288;
    float _498 = cbMtdParam._m0[22u].x + _270.w;
    float _501 = fma(_496, _219, fma(_495, _225 * TANGENT.x, (_211 * _203) * _494));
    float _504 = fma(_496, _220, fma(_495, _225 * TANGENT.y, (_211 * _204) * _494));
    float _507 = fma(_496, _221, fma(_495, _225 * TANGENT.z, (_211 * _205) * _494));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3421 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _515 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3443 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3454 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3465 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _624 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _627 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _641 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3476 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _665 = ((isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * TEXCOORD_5.w) * _661.x;
    float _666 = dot(vec3(_512, _513, _514), vec3(_591, _592, _593));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _512) - _591;
    float _674 = (_669 * _513) - _592;
    float _675 = (_669 * _514) - _593;
    float _679 = abs(dot(vec3(_591, _592, _593), vec3(_512, _513, _514)));
    float _3509 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_515);
    float _693 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _763 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _767 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _791 = _725 + _512;
        float _792 = _729 + _513;
        float _793 = _733 + _514;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _759;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _763;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _767;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_512, _513, _514), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3557 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_512, _513, _514), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3590 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_512, _513, _514), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3623 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1073 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1077 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1081 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1104 = _725 + _512;
        float _1105 = _729 + _513;
        float _1106 = _733 + _514;
        float _1116 = fma(_1106, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104)) - _1073;
        float _1117 = fma(_1106, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104)) - _1077;
        float _1118 = fma(_1106, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104)) - _1081;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1073 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1077 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[35u].z) + ((((((_1081 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1172 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1139.x + (-0.5));
        float _1174 = _1172 * (_1139.y + (-0.5));
        float _1175 = _1172 * (_1139.z + (-0.5));
        float _1182 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1146.x + (-0.5));
        float _1184 = _1182 * (_1146.y + (-0.5));
        float _1185 = _1182 * (_1146.z + (-0.5));
        float _1192 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1153.x + (-0.5));
        float _1194 = _1192 * (_1153.y + (-0.5));
        float _1195 = _1192 * (_1153.z + (-0.5));
        float _1202 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1160.x + (-0.5));
        float _1204 = _1202 * (_1160.y + (-0.5));
        float _1205 = _1202 * (_1160.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_512, _513, _514), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3686 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1236 + 1.0))) + _1241) * _1206;
        float _1251 = _1174 * 0.5;
        float _1252 = _1184 * 0.5;
        float _1253 = _1194 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_512, _513, _514), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3719 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1278 + 1.0))) + _1283) * _1207;
        float _1293 = _1175 * 0.5;
        float _1294 = _1185 * 0.5;
        float _1295 = _1195 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_512, _513, _514), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3752 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1320 + 1.0))) + _1325) * _1208;
        _1342 = _1175;
        _1343 = _1174;
        _1344 = _1173;
        _1345 = _1185;
        _1346 = _1184;
        _1347 = _1183;
        _1348 = _1195;
        _1349 = _1194;
        _1350 = _1193;
        _1351 = _1208;
        _1352 = _1207;
        _1353 = _1206;
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1034;
        _1343 = _1034;
        _1344 = _1034;
        _1345 = _1034;
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1046)) + _1046;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1047)) + _1047;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1048)) + _1048;
    float _1389 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1366));
    float _1410 = _673 * 0.5;
    float _1411 = _674 * 0.5;
    float _1412 = _675 * 0.5;
    float _1413 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1416 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1419 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1453;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1426 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1430 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1434 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1441 = dot(vec4(cbModelParam._m0[39u]), vec4(_1410, _1411, _1412, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1464;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1455 = dot(vec4(cbModelParam._m0[40u]), vec4(_1410, _1411, _1412, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1468 = (_1464 * cbModelParam._m0[1u].x) + (_1453 * (1.0 - cbModelParam._m0[1u].x));
    float _1478 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _515);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1478 : min(cbModelParam._m0[25u].z, _1478));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1528 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1532 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1536 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1539 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1542 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1545 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1573;
        if (_1539 > 0.0)
        {
            _1573 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1573 = frontier_phi_14_12_ladder;
        }
        float _1797;
        if (_1542 > 0.0)
        {
            _1797 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1797 = frontier_phi_23_19_ladder;
        }
        float _2043;
        if (_1545 > 0.0)
        {
            _2043 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2043 = frontier_phi_35_30_ladder;
        }
        float _2045 = isnan(_1797) ? _1573 : (isnan(_1573) ? _1797 : min(_1573, _1797));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1539) + _1528;
        float _2051 = (_2046 * _1542) + _1532;
        float _2052 = (_2046 * _1545) + _1536;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2053;
        float _2057 = _2053 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 > _2057) || ((_2051 < _2055) || ((_2050 < _2055) || (_2050 > _2057))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2052, cbModelParam._m0[9u].z, fma(_2051, cbModelParam._m0[9u].y, _2050 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2052, cbModelParam._m0[10u].z, fma(_2051, cbModelParam._m0[10u].y, _2050 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2052, cbModelParam._m0[11u].z, fma(_2051, cbModelParam._m0[11u].y, _2050 * cbModelParam._m0[11u].x))), _1479);
            frontier_phi_13_35_ladder = _2176.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2176.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2176.x * cbModelParam._m0[1u].y;
        }
        _1561 = frontier_phi_13_35_ladder_2;
        _1563 = frontier_phi_13_35_ladder_1;
        _1565 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1479);
        _1561 = _1549.x * cbModelParam._m0[1u].y;
        _1563 = _1549.y * cbModelParam._m0[1u].y;
        _1565 = _1549.z * cbModelParam._m0[1u].y;
    }
    float _1569 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _515);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1569 : min(cbModelParam._m0[25u].w, _1569));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1638 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1641 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1802;
        if (_1635 > 0.0)
        {
            _1802 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1802 = frontier_phi_25_21_ladder;
        }
        float _2070;
        if (_1638 > 0.0)
        {
            _2070 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2070 = frontier_phi_37_32_ladder;
        }
        float _2275;
        if (_1641 > 0.0)
        {
            _2275 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2275 = frontier_phi_46_43_ladder;
        }
        float _2277 = isnan(_2070) ? _1802 : (isnan(_1802) ? _2070 : min(_1802, _2070));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1635) + _1624;
        float _2283 = (_2278 * _1638) + _1628;
        float _2284 = (_2278 * _1641) + _1632;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2284, cbModelParam._m0[17u].z, fma(_2283, cbModelParam._m0[17u].y, _2282 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2284, cbModelParam._m0[18u].z, fma(_2283, cbModelParam._m0[18u].y, _2282 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2284, cbModelParam._m0[19u].z, fma(_2283, cbModelParam._m0[19u].y, _2282 * cbModelParam._m0[19u].x))), _1570);
            frontier_phi_22_46_ladder = _2483.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2483.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2483.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_22_46_ladder_2;
        _1662 = frontier_phi_22_46_ladder_1;
        _1664 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1570);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1676 = ((((1.0 - _693) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_693 * _681)) * _665;
    float _1677 = _1676 * ((cbModelParam._m0[1u].w * (_1660 - _1561)) + _1561);
    float _1678 = _1676 * ((cbModelParam._m0[1u].w * (_1662 - _1563)) + _1563);
    float _1679 = _1676 * ((cbModelParam._m0[1u].w * (_1664 - _1565)) + _1565);
    float _1682 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    vec4 _1696 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_599, _600));
    float _1698 = _1696.w;
    float _1710 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1698);
    float _1711 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1698);
    float _1712 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1698);
    uvec4 _1716 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _1718 = _1716.x * 14u;
    uint _1719 = _1718 + 13u;
    float _1726 = _665 + (-1.0);
    float _1731 = (cbLight._m0[_1719].x * _1726) + 1.0;
    float _1732 = (cbLight._m0[_1719].y * _1726) + 1.0;
    float _1733 = (cbLight._m0[_1719].z * _1726) + 1.0;
    float _1734 = (cbLight._m0[_1719].w * _1726) + 1.0;
    uint _1735 = _1718 + 5u;
    float _1741 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1745 = _1718 + 4u;
    float _1755 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1759 = _1718 | 1u;
    float _1770 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_512, _513, _514));
    float _1773 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_512, _513, _514));
    float _3888 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _3899 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1778 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1780 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1787 = ((cbLight._m0[_1735].x * _1741) * _1780) + (((cbLight._m0[_1745].x * _1710) * _1755) * _1778);
    float _1788 = ((_1741 * cbLight._m0[_1735].y) * _1780) + (((cbLight._m0[_1745].y * _1711) * _1755) * _1778);
    float _1789 = ((_1741 * cbLight._m0[_1735].z) * _1780) + (((cbLight._m0[_1745].z * _1712) * _1755) * _1778);
    uvec4 _1794 = floatBitsToUint(cbLight._m0[_1718 + 12u]);
    bool _1796 = _1794.x == 0u;
    float _1807;
    float _1809;
    float _1811;
    if (_1796)
    {
        _1807 = _1787;
        _1809 = _1788;
        _1811 = _1789;
    }
    else
    {
        uint _1815 = _1718 + 6u;
        float _1831 = (dot(vec3(cbLight._m0[_1718 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1832 = _1831 * _1831;
        float _3910 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1834 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1807 = (((cbLight._m0[_1815].x * 0.3183098733425140380859375) * _1833) * _1834) + _1787;
        _1809 = (((cbLight._m0[_1815].y * 0.3183098733425140380859375) * _1833) * _1834) + _1788;
        _1811 = (((cbLight._m0[_1815].z * 0.3183098733425140380859375) * _1833) * _1834) + _1789;
    }
    bool _1814 = _1794.y == 0u;
    float _1852;
    float _1854;
    float _1856;
    if (_1814)
    {
        _1852 = _1807;
        _1854 = _1809;
        _1856 = _1811;
    }
    else
    {
        uint _2014 = _1718 + 7u;
        float _2030 = (dot(vec3(cbLight._m0[_1718 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _3926 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2033 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _1852 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1807;
        _1854 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1809;
        _1856 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1811;
    }
    uint _1859 = _1718 + 8u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _515) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1718].x + _591;
    float _1875 = cbLight._m0[_1718].y + _592;
    float _1876 = cbLight._m0[_1718].z + _593;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1718].xyz));
    float _3942 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1888 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1889 = dot(vec3(_512, _513, _514), vec3(_1881, _1882, _1883));
    float _3964 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1881, _1882, _1883));
    float _3975 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1873 * _1873;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1913 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1888 * ((_1887 * _1913) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1913) + _1873) * _1887))) * _1887;
    float _3986 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    uint _1940 = _1718 + 9u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _515) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1759].x + _591;
    float _1954 = cbLight._m0[_1759].y + _592;
    float _1955 = cbLight._m0[_1759].z + _593;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1759].xyz));
    float _3997 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1967 = dot(vec3(_512, _513, _514), vec3(_1960, _1961, _1962));
    float _4008 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1960, _1961, _1962));
    float _4019 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1952 * _1952;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = 1.0 - _1952;
    float _1999 = (0.5 / (((_1888 * ((_1966 * _1989) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1989) + _1952) * _1966))) * _1966;
    float _4030 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    float _2011 = (((_1988 * cbLight._m0[_1940].x) * _2001) * _1741) + ((((cbLight._m0[_1859].x * _1710) * _1912) * _1926) * _1755);
    float _2012 = (((_1988 * cbLight._m0[_1940].y) * _2001) * _1741) + ((((cbLight._m0[_1859].y * _1711) * _1912) * _1926) * _1755);
    float _2013 = (((_1988 * cbLight._m0[_1940].z) * _2001) * _1741) + ((((cbLight._m0[_1859].z * _1712) * _1912) * _1926) * _1755);
    float _2075;
    float _2077;
    float _2079;
    if (_1796)
    {
        _2075 = _2011;
        _2077 = _2012;
        _2079 = _2013;
    }
    else
    {
        uint _2081 = _1718 + 2u;
        uint _2085 = _1718 + 10u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _515) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _591;
        float _2102 = cbLight._m0[_2081].y + _592;
        float _2103 = cbLight._m0[_2081].z + _593;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2081].xyz));
        float _4041 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2115 = dot(vec3(_512, _513, _514), vec3(_2108, _2109, _2110));
        float _4052 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4063 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2137 = 1.0 - _2100;
        float _2147 = (0.5 / (((_1888 * ((_2114 * _2137) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2137) + _2100) * _2114))) * _2114;
        float _4074 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2075 = (((_2136 * cbLight._m0[_2085].x) * _2149) * _2150) + _2011;
        _2077 = (((_2136 * cbLight._m0[_2085].y) * _2149) * _2150) + _2012;
        _2079 = (((_2136 * cbLight._m0[_2085].z) * _2149) * _2150) + _2013;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1814)
    {
        _2185 = _2075;
        _2187 = _2077;
        _2189 = _2079;
    }
    else
    {
        uint _2196 = _1718 + 3u;
        uint _2200 = _1718 + 11u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _515) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _591;
        float _2217 = cbLight._m0[_2196].y + _592;
        float _2218 = cbLight._m0[_2196].z + _593;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2196].xyz));
        float _4090 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2230 = dot(vec3(_512, _513, _514), vec3(_2223, _2224, _2225));
        float _4101 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4112 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = 1.0 - _2215;
        float _2262 = (0.5 / (((_1888 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2252) + _2215) * _2229))) * _2229;
        float _4123 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _2185 = (((_2251 * cbLight._m0[_2200].x) * _2264) * _2265) + _2075;
        _2187 = (((_2251 * cbLight._m0[_2200].y) * _2264) * _2265) + _2077;
        _2189 = (((_2251 * cbLight._m0[_2200].z) * _2264) * _2265) + _2079;
    }
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_1716.y == 0u)
    {
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2340;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2340;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2340;
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.x;
        uint _2367 = uint((float(_2355.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2356))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2356)));
        float _2377 = (log2(_2343 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2378 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        uint _2381 = uint(isnan(14.0) ? _2378 : (isnan(_2378) ? 14.0 : min(_2378, 14.0)));
        uvec4 _2386 = texelFetch(g_lightClusterGridBuffer, int(((_2381 << 2u) + (_2367 << 6u)) >> 2u));
        uint _2387 = _2386.x;
        uint _2388 = _2355.z;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((((1u << ((_2388 >> 4u) & 15u)) + 4294967295u) & _2387) == 0u) || ((_2388 & 240u) == 0u))
        {
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
        }
        else
        {
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2649)
                {
                    frontier_phi_61_pred = _2633;
                    frontier_phi_61_pred_1 = _2638;
                    frontier_phi_61_pred_2 = _2637;
                    frontier_phi_61_pred_3 = _2636;
                    frontier_phi_61_pred_4 = _2635;
                    frontier_phi_61_pred_5 = _2634;
                }
                else
                {
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    uint _2763;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2648;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    for (;;)
                    {
                        uint _2767 = uint(findLSB(_2763)) + (_2639 << 5u);
                        uint _2764 = (_2763 + 4294967295u) & _2763;
                        uint _2769 = _2767 * 48u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2789 = (_2767 * 48u) + 4u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2808 = (_2767 * 48u) + 8u;
                        vec3 _2819 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x));
                        float _2823 = _2783.x - _2341;
                        float _2824 = _2783.y - _2342;
                        float _2825 = _2783.z - _2343;
                        float _2826 = dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825));
                        float _2829 = inversesqrt(_2826);
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2833 = dot(vec3(_621, _624, _627), vec3(_2830, _2831, _2832));
                        float _2838 = 1.0 - (_2826 * _2783.w);
                        float _4149 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2840 = sqrt(_2826) * _2802.w;
                        float _2843 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2833) + _2844;
                        float _2850 = _2840 * _2840;
                        float _2854 = ((isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))) * _2839) / ((_2850 * 0.699999988079071044921875) + 1.0);
                        float _2858 = (-0.0) - _2341;
                        float _2859 = (-0.0) - _2342;
                        float _2860 = (-0.0) - _2343;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2875 = exp2(log2(1.0 / ((_2850 * 3.5) + 5.0)) * 0.25);
                        float _2876 = 1.0 - _681;
                        float _2883 = sqrt(1.0 - ((1.0 - (_2876 * _2876)) * (1.0 - (_2875 * _2875))));
                        float _2884 = _2883 * _2883;
                        float _2885 = _2884 * _2884;
                        float _2886 = _2865 + _2830;
                        float _2887 = _2866 + _2831;
                        float _2888 = _2867 + _2832;
                        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
                        float _2896 = dot(vec3(_621, _624, _627), vec3(_2865, _2866, _2867));
                        float _4165 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2899 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2900 = dot(vec3(_621, _624, _627), vec3(_2892 * _2886, _2892 * _2887, _2892 * _2888));
                        float _4176 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2907 = ((_2903 * _2903) * (_2885 + (-1.0))) + 1.0;
                        float _2908 = _2843 * _2884;
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2833) + _2909;
                        float _4187 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2914 = 1.0 - _2884;
                        float _2924 = (0.5 / (((_2913 * ((_2899 * _2914) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2913 * _2914) + _2884) * _2899))) * _2913;
                        float _4198 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2934 = (((_2885 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2907 * _2907) * ((_2850 * 2.1991131305694580078125) + 3.141590118408203125))) * _2839;
                        _2692 = (_2854 * _2802.x) + _2760;
                        _2693 = (_2854 * _2802.y) + _2761;
                        _2694 = (_2854 * _2802.z) + _2762;
                        _2689 = (_2934 * _2819.x) + _2757;
                        _2690 = (_2934 * _2819.y) + _2758;
                        _2691 = (_2934 * _2819.z) + _2759;
                        if (_2764 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2764;
                        }
                    }
                    frontier_phi_61_pred = _2689;
                    frontier_phi_61_pred_1 = _2694;
                    frontier_phi_61_pred_2 = _2693;
                    frontier_phi_61_pred_3 = _2692;
                    frontier_phi_61_pred_4 = _2691;
                    frontier_phi_61_pred_5 = _2690;
                }
                _2489 = frontier_phi_61_pred;
                _2499 = frontier_phi_61_pred_1;
                _2497 = frontier_phi_61_pred_2;
                _2495 = frontier_phi_61_pred_3;
                _2493 = frontier_phi_61_pred_4;
                _2491 = frontier_phi_61_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2489;
                    _2634 = _2491;
                    _2635 = _2493;
                    _2636 = _2495;
                    _2637 = _2497;
                    _2638 = _2499;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
        }
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.z;
        uint _2505 = (_2503 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2505) & _2387) == 0u)
        {
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
            _2611 = _2498;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
            float _2627 = _2626 * _2341;
            float _2628 = _2626 * _2342;
            float _2629 = _2626 * _2343;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2505 < ((_2503 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2740 = _2488;
                float _2741 = _2490;
                float _2742 = _2492;
                float _2743 = _2494;
                float _2744 = _2496;
                float _2745 = _2498;
                uint _2746 = _2505;
                uint _2755;
                bool _2756;
                for (;;)
                {
                    _2755 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                    _2756 = _2755 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2756)
                    {
                        frontier_phi_67_pred = _2743;
                        frontier_phi_67_pred_1 = _2744;
                        frontier_phi_67_pred_2 = _2745;
                        frontier_phi_67_pred_3 = _2742;
                        frontier_phi_67_pred_4 = _2741;
                        frontier_phi_67_pred_5 = _2740;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2952 = _2740;
                        float _2953 = _2741;
                        float _2954 = _2742;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        uint _2958 = _2755;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3028;
                        vec4 _3044;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2969 = ((_2746 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3015 = (_2969 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2969 * 40u) + 20u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_2969 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2969 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2343, _3078.z, fma(_2342, _3078.y, _3078.x * _2341)) + _3078.w;
                            _3091 = !((fma(_2343, _3059.z, fma(_2342, _3059.y, _3059.x * _2341)) + _3059.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2984.x - _2341;
                                float _3119 = _2984.y - _2342;
                                float _3120 = _2984.z - _2343;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2985 * _2985));
                                float _4209 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3136 = sqrt(_3121) * _3000.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_621, _624, _627))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2343, _3028.z, fma(_2342, _3028.y, _3028.x * _2341)) + _3028.w) / _3090;
                                float _3150 = (fma(_2343, _3044.z, fma(_2342, _3044.y, _3044.x * _2341)) + _3044.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4225 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _681;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2627;
                                float _3180 = _3126 - _2628;
                                float _3181 = _3127 - _2629;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4236 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3193 = dot(vec3(_621, _624, _627), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4247 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_621, _624, _627), vec3(_3125, _3126, _3127))) + _3202;
                                float _4258 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4269 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3230 * _3012.x;
                                frontier_phi_73_pred_1 = _3230 * _3012.y;
                                frontier_phi_73_pred_2 = _3156 * _3000.z;
                                frontier_phi_73_pred_3 = _3156 * _3000.y;
                                frontier_phi_73_pred_4 = _3156 * _3000.x;
                                frontier_phi_73_pred_5 = _3230 * _3012.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_73_pred;
                            _3235 = frontier_phi_73_pred_1;
                            _3239 = frontier_phi_73_pred_2;
                            _3238 = frontier_phi_73_pred_3;
                            _3237 = frontier_phi_73_pred_4;
                            _3236 = frontier_phi_73_pred_5;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2944 = _3239 + _2957;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            _2941 = _3236 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2942;
                        frontier_phi_67_pred_1 = _2943;
                        frontier_phi_67_pred_2 = _2944;
                        frontier_phi_67_pred_3 = _2941;
                        frontier_phi_67_pred_4 = _2940;
                        frontier_phi_67_pred_5 = _2939;
                    }
                    _2608 = frontier_phi_67_pred;
                    _2610 = frontier_phi_67_pred_1;
                    _2612 = frontier_phi_67_pred_2;
                    _2606 = frontier_phi_67_pred_3;
                    _2604 = frontier_phi_67_pred_4;
                    _2602 = frontier_phi_67_pred_5;
                    uint _2747 = _2746 + 1u;
                    if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2740 = _2602;
                        _2741 = _2604;
                        _2742 = _2606;
                        _2743 = _2608;
                        _2744 = _2610;
                        _2745 = _2612;
                        _2746 = _2747;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2610;
                frontier_phi_55_56_ladder_1 = _2612;
                frontier_phi_55_56_ladder_2 = _2608;
                frontier_phi_55_56_ladder_3 = _2606;
                frontier_phi_55_56_ladder_4 = _2604;
                frontier_phi_55_56_ladder_5 = _2602;
            }
            else
            {
                frontier_phi_55_56_ladder = _2496;
                frontier_phi_55_56_ladder_1 = _2498;
                frontier_phi_55_56_ladder_2 = _2494;
                frontier_phi_55_56_ladder_3 = _2492;
                frontier_phi_55_56_ladder_4 = _2490;
                frontier_phi_55_56_ladder_5 = _2488;
            }
            _2601 = frontier_phi_55_56_ladder_5;
            _2603 = frontier_phi_55_56_ladder_4;
            _2605 = frontier_phi_55_56_ladder_3;
            _2607 = frontier_phi_55_56_ladder_2;
            _2609 = frontier_phi_55_56_ladder;
            _2611 = frontier_phi_55_56_ladder_1;
        }
        float _2616 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2400 = (_2616 * _2607) + _1852;
        _2402 = (_2616 * _2609) + _1854;
        _2404 = (_2616 * _2611) + _1856;
        _2406 = ((_2601 * 0.039999999105930328369140625) * _2616) + _2185;
        _2408 = ((_2603 * 0.039999999105930328369140625) * _2616) + _2187;
        _2410 = ((_2605 * 0.039999999105930328369140625) * _2616) + _2189;
    }
    else
    {
        _2400 = _1852;
        _2402 = _1854;
        _2404 = _1856;
        _2406 = _2185;
        _2408 = _2187;
        _2410 = _2189;
    }
    float _4285 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4296 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4307 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    uint _2430 = _289 + 6u;
    float _2438 = _599 / cbSceneParam._m0[86u].x;
    float _2439 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2453 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2455 = _2453.x;
    float _2456 = _2453.y;
    float _2457 = _2453.z;
    float _2458 = _2453.w;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2513 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2514 = _2513 / _533;
        float _2525 = _2514 * _584;
        float _2526 = _585 * _2514;
        float _2527 = (-0.0) - _2526;
        float _2529 = _2514 * _586;
        float _2531 = (cbSceneParam._m0[77u].w * _2527) / _2513;
        float _2532 = _2531 + cbSceneParam._m0[79u].w;
        float _2533 = cbSceneParam._m0[79u].w - _2526;
        float _2539 = sqrt(((_2525 * _2525) + (_2526 * _2526)) + (_2529 * _2529));
        float _2542 = (1.0 - (cbSceneParam._m0[77u].w / _2513)) * _2539;
        float _2547 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2549 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2702;
        if (abs((_2527 - _2531) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2702 = ((((_2532 > 0.0) ? exp2(_2547 * _2532) : (2.0 - exp2(_2549 * _2532))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2542;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : max(_2532, _2533));
            float _2664 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : min(_2532, _2533));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2702 = ((abs(_2539 / _2527) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2547 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2547 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2549 * _2673) - exp2(_2549 * _2674)) * _2662))) + (_2542 * cbSceneParam._m0[80u].z);
        }
        vec4 _2704 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, 1.0), 0.0);
        float _2713 = exp2((_2702 * (-1.44269502162933349609375)) * (1.0 - _2704.w));
        float _2714 = log2(_2713);
        float _2730 = log2(_2458);
        _2551 = (exp2(_2730 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].x)) * _2704.x) / cbSceneParam._m0[78u].x)) + _2455;
        _2553 = (exp2(_2730 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].y)) * _2704.y) / cbSceneParam._m0[78u].y)) + _2456;
        _2555 = (exp2(_2730 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].z)) * _2704.z) / cbSceneParam._m0[78u].z)) + _2457;
        _2557 = _2713 * _2458;
    }
    else
    {
        _2551 = _2455;
        _2553 = _2456;
        _2555 = _2457;
        _2557 = _2458;
    }
    float _2569 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2570 = _2569 == 3.0;
    float _2571 = log2(_2557);
    float _2578 = exp2(_2571 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2400 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _665))) + ((_2406 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1468)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2571 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2402 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _665))) + ((_2408 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1468)) * cbPerFrame._m0[3u].x));
    float _2580 = exp2(_2571 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2404 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _665))) + ((_2410 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1468)) * cbPerFrame._m0[3u].x));
    float _2589 = (_2569 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2589 * (_2570 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.y = _2589 * (_2570 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.z = _2589 * (_2570 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.w = cbInstanceData._m0[_2430].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2430].w;
}


