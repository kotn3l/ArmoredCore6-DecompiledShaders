#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1206;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3512 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3523 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3534 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3545 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) + _428;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _512 = ((_482.z - _503) * _409) + _503;
    float _515 = ((((_482.x - _501) * _409) + _501) * 2.0) + (-1.0);
    float _516 = ((((_482.y - _502) * _409) + _502) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3556 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))));
    float _525 = _515 + ((((_455.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _526 = _516 + ((((_455.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _529 = fma(_522, _227, fma(_526, _234, _525 * _220));
    float _532 = fma(_522, _228, fma(_526, _235, _525 * _221));
    float _535 = fma(_522, _229, fma(_526, _236, _525 * _222));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _583 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _590 = ((_585 - _586) * cbMtdParam._m0[24u].z) + _586;
    float _592 = (cbMtdParam._m0[19u].x + dot(vec4(_539 * _529, _539 * _532, _539 * _535, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_590 * cbMtdParam._m0[21u].z);
    float _3567 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _608 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_590 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3578 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _613 = ((_593 * (cbMtdParam._m0[17u].x - _435)) * _609) + _435;
    float _614 = ((_593 * (cbMtdParam._m0[17u].y - _436)) * _609) + _436;
    float _615 = ((_593 * (cbMtdParam._m0[17u].z - _437)) * _609) + _437;
    float _620 = (((_455.z - _512) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _512;
    vec4 _633 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _640 = (_633.x * 2.0) + (-1.0);
    float _641 = (_633.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3589 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _651 = (((_633.z - _620) * _593) * _609) + _620;
    float _666 = (((cbMtdParam._m0[21u].x * _525) + ((_640 - _525) * _593)) * _609) + _525;
    float _667 = (((cbMtdParam._m0[21u].x * _526) + ((_641 - _526) * _593)) * _609) + _526;
    float _668 = (((sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _522) * _593) * _609) + _522;
    float _670 = cbMtdParam._m0[22u].x + _555.w;
    float _673 = fma(_668, _227, fma(_667, _234, _666 * _220));
    float _676 = fma(_668, _228, fma(_667, _235, _666 * _221));
    float _679 = fma(_668, _229, fma(_667, _236, _666 * _222));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3600 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _687 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3622 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3633 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3644 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _791 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _794 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _797 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _811 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3655 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _835 = ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * TEXCOORD_5.w) * _831.x;
    float _836 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _684) - _764;
    float _844 = (_839 * _685) - _765;
    float _845 = (_839 * _686) - _766;
    float _849 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _3688 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_687);
    float _864 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _930 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _934 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _938 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _963 = _896 + _684;
        float _964 = _900 + _685;
        float _965 = _904 + _686;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _930;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _934;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _938;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_930 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_934 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_938 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_684, _685, _686), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3736 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_684, _685, _686), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3769 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_684, _685, _686), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3802 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1245 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1249 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1253 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1276 = _896 + _684;
        float _1277 = _900 + _685;
        float _1278 = _904 + _686;
        float _1288 = fma(_1278, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276)) - _1245;
        float _1289 = fma(_1278, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276)) - _1249;
        float _1290 = fma(_1278, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276)) - _1253;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1245 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1249 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[35u].z) + ((((((_1253 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1344 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1311.x + (-0.5));
        float _1346 = _1344 * (_1311.y + (-0.5));
        float _1347 = _1344 * (_1311.z + (-0.5));
        float _1354 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1318.x + (-0.5));
        float _1356 = _1354 * (_1318.y + (-0.5));
        float _1357 = _1354 * (_1318.z + (-0.5));
        float _1364 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1325.x + (-0.5));
        float _1366 = _1364 * (_1325.y + (-0.5));
        float _1367 = _1364 * (_1325.z + (-0.5));
        float _1374 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1332.x + (-0.5));
        float _1376 = _1374 * (_1332.y + (-0.5));
        float _1377 = _1374 * (_1332.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_684, _685, _686), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3865 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1408 + 1.0))) + _1413) * _1378;
        float _1423 = _1346 * 0.5;
        float _1424 = _1356 * 0.5;
        float _1425 = _1366 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_684, _685, _686), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3898 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1450 + 1.0))) + _1455) * _1379;
        float _1465 = _1347 * 0.5;
        float _1466 = _1357 * 0.5;
        float _1467 = _1367 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_684, _685, _686), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3931 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1492 + 1.0))) + _1497) * _1380;
        _1514 = _1347;
        _1515 = _1346;
        _1516 = _1345;
        _1517 = _1357;
        _1518 = _1356;
        _1519 = _1355;
        _1520 = _1367;
        _1521 = _1366;
        _1522 = _1365;
        _1523 = _1380;
        _1524 = _1379;
        _1525 = _1378;
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1206;
        _1515 = _1206;
        _1516 = _1206;
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1218)) + _1218;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1561 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1538));
    float _1582 = _843 * 0.5;
    float _1583 = _844 * 0.5;
    float _1584 = _845 * 0.5;
    float _1585 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1588 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1591 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1625;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1598 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1602 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1606 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1613 = dot(vec4(cbModelParam._m0[39u]), vec4(_1582, _1583, _1584, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1636;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1627 = dot(vec4(cbModelParam._m0[40u]), vec4(_1582, _1583, _1584, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1640 = (_1636 * cbModelParam._m0[1u].x) + (_1625 * (1.0 - cbModelParam._m0[1u].x));
    float _1650 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1650 : min(cbModelParam._m0[25u].z, _1650));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1713 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1716 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1744 = frontier_phi_14_12_ladder;
        }
        float _1945;
        if (_1713 > 0.0)
        {
            _1945 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1945 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1716 > 0.0)
        {
            _2188 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1945) ? _1744 : (isnan(_1744) ? _1945 : min(_1744, _1945));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1710) + _1699;
        float _2196 = (_2191 * _1713) + _1703;
        float _2197 = (_2191 * _1716) + _1707;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1651);
            frontier_phi_13_35_ladder = _2321.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2321.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2321.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_13_35_ladder_2;
        _1734 = frontier_phi_13_35_ladder_1;
        _1736 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1651);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1809 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1812 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _1950;
        if (_1806 > 0.0)
        {
            _1950 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1950 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1809 > 0.0)
        {
            _2215 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2420;
        if (_1812 > 0.0)
        {
            _2420 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2420 = frontier_phi_46_43_ladder;
        }
        float _2422 = isnan(_2215) ? _1950 : (isnan(_1950) ? _2215 : min(_1950, _2215));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1806) + _1795;
        float _2428 = (_2423 * _1809) + _1799;
        float _2429 = (_2423 * _1812) + _1803;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2430;
        float _2433 = _2430 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2429 > _2433) || ((_2429 < _2431) || ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 < _2431) || (_2427 > _2433))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2429, cbModelParam._m0[17u].z, fma(_2428, cbModelParam._m0[17u].y, _2427 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2429, cbModelParam._m0[18u].z, fma(_2428, cbModelParam._m0[18u].y, _2427 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2429, cbModelParam._m0[19u].z, fma(_2428, cbModelParam._m0[19u].y, _2427 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_22_46_ladder = _2628.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2628.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2628.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_22_46_ladder_2;
        _1833 = frontier_phi_22_46_ladder_1;
        _1835 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1741);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1847 = ((((1.0 - _864) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_864 * _851)) * _835;
    float _1848 = _1847 * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1849 = _1847 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1850 = _1847 * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1853 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    uvec4 _1869 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1871 = _1869.x * 14u;
    uint _1872 = _1871 + 13u;
    float _1879 = _835 + (-1.0);
    float _1884 = (cbLight._m0[_1872].x * _1879) + 1.0;
    float _1885 = (cbLight._m0[_1872].y * _1879) + 1.0;
    float _1886 = (cbLight._m0[_1872].z * _1879) + 1.0;
    float _1887 = (cbLight._m0[_1872].w * _1879) + 1.0;
    uint _1888 = _1871 + 5u;
    float _1894 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1898 = _1871 + 4u;
    float _1904 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1908 = _1871 | 1u;
    float _1919 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_684, _685, _686));
    float _1922 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_684, _685, _686));
    float _4067 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _4078 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1927 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1929 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1936 = ((cbLight._m0[_1888].x * _1894) * _1929) + ((cbLight._m0[_1898].x * _1904) * _1927);
    float _1937 = ((_1894 * cbLight._m0[_1888].y) * _1929) + ((_1904 * cbLight._m0[_1898].y) * _1927);
    float _1938 = ((_1894 * cbLight._m0[_1888].z) * _1929) + ((_1904 * cbLight._m0[_1898].z) * _1927);
    uvec4 _1942 = floatBitsToUint(cbLight._m0[_1871 + 12u]);
    bool _1944 = _1942.x == 0u;
    float _1955;
    float _1957;
    float _1959;
    if (_1944)
    {
        _1955 = _1936;
        _1957 = _1937;
        _1959 = _1938;
    }
    else
    {
        uint _1963 = _1871 + 6u;
        float _1979 = (dot(vec3(cbLight._m0[_1871 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _1980 = _1979 * _1979;
        float _4089 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1982 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _1955 = (((cbLight._m0[_1963].x * 0.3183098733425140380859375) * _1981) * _1982) + _1936;
        _1957 = (((cbLight._m0[_1963].y * 0.3183098733425140380859375) * _1981) * _1982) + _1937;
        _1959 = (((cbLight._m0[_1963].z * 0.3183098733425140380859375) * _1981) * _1982) + _1938;
    }
    bool _1962 = _1942.y == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1962)
    {
        _2000 = _1955;
        _2002 = _1957;
        _2004 = _1959;
    }
    else
    {
        uint _2159 = _1871 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1871 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4105 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2178 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2000 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1955;
        _2002 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1957;
        _2004 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1959;
    }
    uint _2007 = _1871 + 8u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _687) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1871].x + _764;
    float _2023 = cbLight._m0[_1871].y + _765;
    float _2024 = cbLight._m0[_1871].z + _766;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1871].xyz));
    float _4121 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2036 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2037 = dot(vec3(_684, _685, _686), vec3(_2029, _2030, _2031));
    float _4143 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2029, _2030, _2031));
    float _4154 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2021 * _2021;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2021;
    float _2072 = (0.5 / (((_2036 * ((_2035 * _2061) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2061) + _2021) * _2035))) * _2035;
    float _4165 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    uint _2085 = _1871 + 9u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _687) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1908].x + _764;
    float _2099 = cbLight._m0[_1908].y + _765;
    float _2100 = cbLight._m0[_1908].z + _766;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1908].xyz));
    float _4176 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2112 = dot(vec3(_684, _685, _686), vec3(_2105, _2106, _2107));
    float _4187 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2105, _2106, _2107));
    float _4198 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2097 * _2097;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2097;
    float _2144 = (0.5 / (((_2036 * ((_2111 * _2134) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2134) + _2097) * _2111))) * _2111;
    float _4209 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    float _2156 = (((_2133 * cbLight._m0[_2085].x) * _2146) * _1894) + (((_2060 * cbLight._m0[_2007].x) * _2074) * _1904);
    float _2157 = (((_2133 * cbLight._m0[_2085].y) * _2146) * _1894) + (((_2060 * cbLight._m0[_2007].y) * _2074) * _1904);
    float _2158 = (((_2133 * cbLight._m0[_2085].z) * _2146) * _1894) + (((_2060 * cbLight._m0[_2007].z) * _2074) * _1904);
    float _2220;
    float _2222;
    float _2224;
    if (_1944)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1871 + 2u;
        uint _2230 = _1871 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _687) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _764;
        float _2247 = cbLight._m0[_2226].y + _765;
        float _2248 = cbLight._m0[_2226].z + _766;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2226].xyz));
        float _4220 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2260 = dot(vec3(_684, _685, _686), vec3(_2253, _2254, _2255));
        float _4231 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4242 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2282 = 1.0 - _2245;
        float _2292 = (0.5 / (((_2036 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2282) + _2245) * _2259))) * _2259;
        float _4253 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2220 = (((_2281 * cbLight._m0[_2230].x) * _2294) * _2295) + _2156;
        _2222 = (((_2281 * cbLight._m0[_2230].y) * _2294) * _2295) + _2157;
        _2224 = (((_2281 * cbLight._m0[_2230].z) * _2294) * _2295) + _2158;
    }
    float _2330;
    float _2332;
    float _2334;
    if (_1962)
    {
        _2330 = _2220;
        _2332 = _2222;
        _2334 = _2224;
    }
    else
    {
        uint _2341 = _1871 + 3u;
        uint _2345 = _1871 + 11u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _687) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _764;
        float _2362 = cbLight._m0[_2341].y + _765;
        float _2363 = cbLight._m0[_2341].z + _766;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2341].xyz));
        float _4269 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2375 = dot(vec3(_684, _685, _686), vec3(_2368, _2369, _2370));
        float _4280 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4291 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2396 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2397 = 1.0 - _2360;
        float _2407 = (0.5 / (((_2036 * ((_2374 * _2397) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2397) + _2360) * _2374))) * _2374;
        float _4302 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2330 = (((_2396 * cbLight._m0[_2345].x) * _2409) * _2410) + _2220;
        _2332 = (((_2396 * cbLight._m0[_2345].y) * _2409) * _2410) + _2222;
        _2334 = (((_2396 * cbLight._m0[_2345].z) * _2409) * _2410) + _2224;
    }
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_1869.y == 0u)
    {
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2485;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2485;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2485;
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.x;
        uint _2512 = uint((float(_2500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2501))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2501)));
        float _2522 = (log2(_2488 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2523 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        uint _2526 = uint(isnan(14.0) ? _2523 : (isnan(_2523) ? 14.0 : min(_2523, 14.0)));
        uvec4 _2531 = texelFetch(g_lightClusterGridBuffer, int(((_2526 << 2u) + (_2512 << 6u)) >> 2u));
        uint _2532 = _2531.x;
        uint _2533 = _2500.z;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((((1u << ((_2533 >> 4u) & 15u)) + 4294967295u) & _2532) == 0u) || ((_2533 & 240u) == 0u))
        {
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
        }
        else
        {
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            uint _2784 = 0u;
            uint _2793;
            bool _2794;
            for (;;)
            {
                _2793 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                _2794 = _2793 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2794)
                {
                    frontier_phi_61_pred = _2778;
                    frontier_phi_61_pred_1 = _2783;
                    frontier_phi_61_pred_2 = _2782;
                    frontier_phi_61_pred_3 = _2781;
                    frontier_phi_61_pred_4 = _2780;
                    frontier_phi_61_pred_5 = _2779;
                }
                else
                {
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    uint _2908;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2793;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    for (;;)
                    {
                        uint _2912 = uint(findLSB(_2908)) + (_2784 << 5u);
                        uint _2909 = (_2908 + 4294967295u) & _2908;
                        uint _2914 = _2912 * 48u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2934 = (_2912 * 48u) + 4u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2953 = (_2912 * 48u) + 8u;
                        vec3 _2964 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x));
                        float _2968 = _2928.x - _2486;
                        float _2969 = _2928.y - _2487;
                        float _2970 = _2928.z - _2488;
                        float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                        float _2974 = inversesqrt(_2971);
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2978 = dot(vec3(_791, _794, _797), vec3(_2975, _2976, _2977));
                        float _2983 = 1.0 - (_2971 * _2928.w);
                        float _4328 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2985 = sqrt(_2971) * _2947.w;
                        float _2988 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2978) + _2989;
                        float _2995 = _2985 * _2985;
                        float _2999 = ((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2984) / ((_2995 * 0.699999988079071044921875) + 1.0);
                        float _3003 = (-0.0) - _2486;
                        float _3004 = (-0.0) - _2487;
                        float _3005 = (-0.0) - _2488;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3020 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                        float _3021 = 1.0 - _851;
                        float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                        float _3029 = _3028 * _3028;
                        float _3030 = _3029 * _3029;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3041 = dot(vec3(_791, _794, _797), vec3(_3010, _3011, _3012));
                        float _4344 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3045 = dot(vec3(_791, _794, _797), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                        float _4355 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                        float _3053 = _2988 * _3029;
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _2978) + _3054;
                        float _4366 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3059 = 1.0 - _3029;
                        float _3069 = (0.5 / (((_3058 * ((_3044 * _3059) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3029) * _3044))) * _3058;
                        float _4377 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3080 = (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3052 * _3052) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125))) * _2984;
                        _2837 = (_2999 * _2947.x) + _2905;
                        _2838 = (_2999 * _2947.y) + _2906;
                        _2839 = (_2999 * _2947.z) + _2907;
                        _2834 = (_3080 * _2964.x) + _2902;
                        _2835 = (_3080 * _2964.y) + _2903;
                        _2836 = (_3080 * _2964.z) + _2904;
                        if (_2909 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2909;
                        }
                    }
                    frontier_phi_61_pred = _2834;
                    frontier_phi_61_pred_1 = _2839;
                    frontier_phi_61_pred_2 = _2838;
                    frontier_phi_61_pred_3 = _2837;
                    frontier_phi_61_pred_4 = _2836;
                    frontier_phi_61_pred_5 = _2835;
                }
                _2634 = frontier_phi_61_pred;
                _2644 = frontier_phi_61_pred_1;
                _2642 = frontier_phi_61_pred_2;
                _2640 = frontier_phi_61_pred_3;
                _2638 = frontier_phi_61_pred_4;
                _2636 = frontier_phi_61_pred_5;
                uint _2785 = _2784 + 1u;
                if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2778 = _2634;
                    _2779 = _2636;
                    _2780 = _2638;
                    _2781 = _2640;
                    _2782 = _2642;
                    _2783 = _2644;
                    _2784 = _2785;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
        }
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.z;
        uint _2650 = (_2648 >> 8u) & 15u;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((4294967295u << _2650) & _2532) == 0u)
        {
            _2746 = _2633;
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
            _2756 = _2643;
        }
        else
        {
            float _2771 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
            float _2772 = _2771 * _2486;
            float _2773 = _2771 * _2487;
            float _2774 = _2771 * _2488;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2650 < ((_2648 >> 12u) & 15u))
            {
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2885 = _2633;
                float _2886 = _2635;
                float _2887 = _2637;
                float _2888 = _2639;
                float _2889 = _2641;
                float _2890 = _2643;
                uint _2891 = _2650;
                uint _2900;
                bool _2901;
                for (;;)
                {
                    _2900 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                    _2901 = _2900 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2901)
                    {
                        frontier_phi_67_pred = _2888;
                        frontier_phi_67_pred_1 = _2889;
                        frontier_phi_67_pred_2 = _2890;
                        frontier_phi_67_pred_3 = _2887;
                        frontier_phi_67_pred_4 = _2886;
                        frontier_phi_67_pred_5 = _2885;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        uint _3104 = _2900;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        vec3 _3158;
                        vec4 _3173;
                        vec4 _3188;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3115 = ((_2891 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3115 * 40u) + 8u;
                            _3158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x));
                            uint _3160 = (_3115 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3115 * 40u) + 20u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3115 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3115 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_2488, _3222.z, fma(_2487, _3222.y, _3222.x * _2486)) + _3222.w;
                            _3235 = !((fma(_2488, _3203.z, fma(_2487, _3203.y, _3203.x * _2486)) + _3203.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3130.x - _2486;
                                float _3263 = _3130.y - _2487;
                                float _3264 = _3130.z - _2488;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3131 * _3131));
                                float _4388 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3280 = sqrt(_3265) * _3146.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_791, _794, _797))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_2488, _3173.z, fma(_2487, _3173.y, _3173.x * _2486)) + _3173.w) / _3234;
                                float _3294 = (fma(_2488, _3188.z, fma(_2487, _3188.y, _3188.x * _2486)) + _3188.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4404 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _851;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2772;
                                float _3324 = _3270 - _2773;
                                float _3325 = _3271 - _2774;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_791, _794, _797), vec3((-0.0) - _2772, (-0.0) - _2773, (-0.0) - _2774));
                                float _4415 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3337 = dot(vec3(_791, _794, _797), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4426 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_791, _794, _797), vec3(_3269, _3270, _3271))) + _3346;
                                float _4437 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4448 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3374 * _3158.x;
                                frontier_phi_73_pred_1 = _3374 * _3158.y;
                                frontier_phi_73_pred_2 = _3300 * _3146.z;
                                frontier_phi_73_pred_3 = _3300 * _3146.y;
                                frontier_phi_73_pred_4 = _3300 * _3146.x;
                                frontier_phi_73_pred_5 = _3374 * _3158.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_73_pred;
                            _3379 = frontier_phi_73_pred_1;
                            _3383 = frontier_phi_73_pred_2;
                            _3382 = frontier_phi_73_pred_3;
                            _3381 = frontier_phi_73_pred_4;
                            _3380 = frontier_phi_73_pred_5;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            _3090 = _3383 + _3103;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3088;
                        frontier_phi_67_pred_1 = _3089;
                        frontier_phi_67_pred_2 = _3090;
                        frontier_phi_67_pred_3 = _3087;
                        frontier_phi_67_pred_4 = _3086;
                        frontier_phi_67_pred_5 = _3085;
                    }
                    _2753 = frontier_phi_67_pred;
                    _2755 = frontier_phi_67_pred_1;
                    _2757 = frontier_phi_67_pred_2;
                    _2751 = frontier_phi_67_pred_3;
                    _2749 = frontier_phi_67_pred_4;
                    _2747 = frontier_phi_67_pred_5;
                    uint _2892 = _2891 + 1u;
                    if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2885 = _2747;
                        _2886 = _2749;
                        _2887 = _2751;
                        _2888 = _2753;
                        _2889 = _2755;
                        _2890 = _2757;
                        _2891 = _2892;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2755;
                frontier_phi_55_56_ladder_1 = _2757;
                frontier_phi_55_56_ladder_2 = _2753;
                frontier_phi_55_56_ladder_3 = _2751;
                frontier_phi_55_56_ladder_4 = _2749;
                frontier_phi_55_56_ladder_5 = _2747;
            }
            else
            {
                frontier_phi_55_56_ladder = _2641;
                frontier_phi_55_56_ladder_1 = _2643;
                frontier_phi_55_56_ladder_2 = _2639;
                frontier_phi_55_56_ladder_3 = _2637;
                frontier_phi_55_56_ladder_4 = _2635;
                frontier_phi_55_56_ladder_5 = _2633;
            }
            _2746 = frontier_phi_55_56_ladder_5;
            _2748 = frontier_phi_55_56_ladder_4;
            _2750 = frontier_phi_55_56_ladder_3;
            _2752 = frontier_phi_55_56_ladder_2;
            _2754 = frontier_phi_55_56_ladder;
            _2756 = frontier_phi_55_56_ladder_1;
        }
        float _2761 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2545 = (_2761 * _2752) + _2000;
        _2547 = (_2761 * _2754) + _2002;
        _2549 = (_2761 * _2756) + _2004;
        _2551 = ((_2746 * 0.039999999105930328369140625) * _2761) + _2330;
        _2553 = ((_2748 * 0.039999999105930328369140625) * _2761) + _2332;
        _2555 = ((_2750 * 0.039999999105930328369140625) * _2761) + _2334;
    }
    else
    {
        _2545 = _2000;
        _2547 = _2002;
        _2549 = _2004;
        _2551 = _2330;
        _2553 = _2332;
        _2555 = _2334;
    }
    float _4464 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4475 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4486 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    uint _2575 = _260 + 6u;
    float _2583 = _772 / cbSceneParam._m0[86u].x;
    float _2584 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2658 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2659 = _2658 / _705;
        float _2670 = _2659 * _757;
        float _2671 = _758 * _2659;
        float _2672 = (-0.0) - _2671;
        float _2674 = _2659 * _759;
        float _2676 = (cbSceneParam._m0[77u].w * _2672) / _2658;
        float _2677 = _2676 + cbSceneParam._m0[79u].w;
        float _2678 = cbSceneParam._m0[79u].w - _2671;
        float _2684 = sqrt(((_2670 * _2670) + (_2671 * _2671)) + (_2674 * _2674));
        float _2687 = (1.0 - (cbSceneParam._m0[77u].w / _2658)) * _2684;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2847;
        if (abs((_2672 - _2676) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2847 = ((((_2677 > 0.0) ? exp2(_2692 * _2677) : (2.0 - exp2(_2694 * _2677))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2687;
        }
        else
        {
            float _2807 = 1.0 / cbSceneParam._m0[80u].x;
            float _2808 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : max(_2677, _2678));
            float _2809 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : min(_2677, _2678));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            _2847 = ((abs(_2684 / _2672) * cbSceneParam._m0[80u].y) * ((((_2818 - _2819) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))))) * _2807)) - ((exp2(_2694 * _2818) - exp2(_2694 * _2819)) * _2807))) + (_2687 * cbSceneParam._m0[80u].z);
        }
        vec4 _2849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2858 = exp2((_2847 * (-1.44269502162933349609375)) * (1.0 - _2849.w));
        float _2859 = log2(_2858);
        float _2875 = log2(_2603);
        _2696 = (exp2(_2875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].x)) * _2849.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2698 = (exp2(_2875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].y)) * _2849.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2700 = (exp2(_2875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].z)) * _2849.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2702 = _2858 * _2603;
    }
    else
    {
        _2696 = _2600;
        _2698 = _2601;
        _2700 = _2602;
        _2702 = _2603;
    }
    float _2714 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2715 = _2714 == 3.0;
    float _2716 = log2(_2702);
    float _2723 = exp2(_2716 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2545 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _835))) + ((_2551 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _2724 = exp2(_2716 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2547 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _835))) + ((_2553 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _2725 = exp2(_2716 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2549 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _835))) + ((_2555 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _2734 = (_2714 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2734 * (_2715 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.y = _2734 * (_2715 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.z = _2734 * (_2715 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.w = cbInstanceData._m0[_2575].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2575].w;
}


