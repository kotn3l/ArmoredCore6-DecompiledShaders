#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1131;
float _3494;
float _3495;
float _3496;
float _3497;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3506 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _321 = fma(_318, _223, fma(_311, _230, _309 * _216));
    float _324 = fma(_318, _224, fma(_311, _231, _309 * _217));
    float _327 = fma(_318, _225, fma(_311, _232, _309 * _218));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _367 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _369 = _367.x;
    float _370 = 1.0 - _369;
    float _379 = (cbMtdParam._m0[19u].x + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_369 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[21u].z);
    float _3517 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _382 = (-0.0) - cbMtdParam._m0[24u].y;
    float _384 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _392 = _380 - ((_380 * TEXCOORD_8.x) * _385);
    float _393 = _380 - ((_380 * TEXCOORD_8.y) * _385);
    float _394 = _380 - ((_380 * TEXCOORD_8.z) * _385);
    float _401 = (_392 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _402 = (_393 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _403 = (_394 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _417 = _415.x;
    float _418 = 1.0 - _417;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_417 - _418) * cbMtdParam._m0[24u].w) + _418) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3538 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _401) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _449) + _401;
    float _458 = ((((cbMtdParam._m0[10u].y - _402) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _449) + _402;
    float _459 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _403)) * _449) + _403;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _480 = (_473.x * 2.0) + (-1.0);
    float _481 = (_473.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3549 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _490 = ((_473.z - _304) * _392) + _304;
    float _493 = ((cbMtdParam._m0[23u].y - _490) * _449) + _490;
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _518 = (_512.x * 2.0) + (-1.0);
    float _519 = (_512.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3560 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _535 = ((sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) - _318) * _394) + _318;
    float _538 = (((_480 - _309) * _392) + _309) + (cbMtdParam._m0[21u].x * _309);
    float _539 = (((_481 - _311) * _393) + _311) + (cbMtdParam._m0[21u].x * _311);
    float _550 = (((_518 - _538) + (_538 * cbMtdParam._m0[22u].z)) * _449) + _538;
    float _551 = (((_519 - _539) + (_539 * cbMtdParam._m0[22u].z)) * _449) + _539;
    float _552 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) - _535)) + _535;
    float _554 = cbMtdParam._m0[22u].x + _300.w;
    float _557 = fma(_552, _223, fma(_551, _230, _550 * _216));
    float _560 = fma(_552, _224, fma(_551, _231, _550 * _217));
    float _563 = fma(_552, _225, fma(_551, _232, _550 * _218));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3571 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _571 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3593 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3604 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3615 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    vec4 _653 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _655 = _653.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _812 = sqrt(((_639 * _639) + (_640 * _640)) + (_641 * _641));
        float _818 = (cbMatDynParam._m0[5u].x * _812) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _823 = (cbMatDynParam._m0[5u].z * _812) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _819)) + _819) < ((_655 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _667 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _668 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _688 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _691 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _694 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _707 = _235 + 9u;
    uint _708 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_708].z;
    float _3648 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    vec4 _728 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _667, cbSceneParam._m0[86u].y * _668));
    float _732 = ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * TEXCOORD_5.w) * _728.x;
    float _733 = dot(vec3(_568, _569, _570), vec3(_646, _647, _648));
    float _736 = _733 * 2.0;
    float _740 = (_736 * _568) - _646;
    float _741 = (_736 * _569) - _647;
    float _742 = (_736 * _570) - _648;
    float _746 = abs(dot(vec3(_646, _647, _648), vec3(_568, _569, _570)));
    float _3681 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _748 = sqrt(_571);
    float _761 = exp2((_748 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_748 * 3.0));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_801, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793));
        float _859 = fma(_801, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793));
        float _863 = fma(_801, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793));
        float _888 = _793 + _568;
        float _889 = _797 + _569;
        float _890 = _801 + _570;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _855;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _859;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _863;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_568, _569, _570), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3729 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_568, _569, _570), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3762 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_568, _569, _570), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3795 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_801, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793));
        float _1177 = fma(_801, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793));
        float _1181 = fma(_801, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793));
        float _1204 = _793 + _568;
        float _1205 = _797 + _569;
        float _1206 = _801 + _570;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_568, _569, _570), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3858 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_568, _569, _570), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3891 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_568, _569, _570), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3924 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1131;
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = _1131;
        _1452 = _1131;
        _1453 = _1131;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1143)) + _1143;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1144)) + _1144;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1145)) + _1145;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _740 * 0.5;
    float _1511 = _741 * 0.5;
    float _1512 = _742 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_801, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_801, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_801, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_742, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740));
        float _1641 = fma(_742, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740));
        float _1644 = fma(_742, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1672 = frontier_phi_17_15_ladder;
        }
        float _1875;
        if (_1641 > 0.0)
        {
            _1875 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1875 = frontier_phi_26_22_ladder;
        }
        float _2118;
        if (_1644 > 0.0)
        {
            _2118 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2118 = frontier_phi_38_33_ladder;
        }
        float _2120 = isnan(_1875) ? _1672 : (isnan(_1672) ? _1875 : min(_1672, _1875));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1638) + _1627;
        float _2126 = (_2121 * _1641) + _1631;
        float _2127 = (_2121 * _1644) + _1635;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2128;
        float _2132 = _2128 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 > _2132) || ((_2126 < _2130) || ((_2125 < _2130) || (_2125 > _2132))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2127, cbModelParam._m0[9u].z, fma(_2126, cbModelParam._m0[9u].y, _2125 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2127, cbModelParam._m0[10u].z, fma(_2126, cbModelParam._m0[10u].y, _2125 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2127, cbModelParam._m0[11u].z, fma(_2126, cbModelParam._m0[11u].y, _2125 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_16_38_ladder = _2251.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2251.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2251.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_16_38_ladder_2;
        _1662 = frontier_phi_16_38_ladder_1;
        _1664 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_740, _741, _742), _1579);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_801, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_801, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_801, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_742, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740));
        float _1737 = fma(_742, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740));
        float _1740 = fma(_742, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740));
        float _1880;
        if (_1734 > 0.0)
        {
            _1880 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1880 = frontier_phi_28_24_ladder;
        }
        float _2145;
        if (_1737 > 0.0)
        {
            _2145 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2145 = frontier_phi_40_35_ladder;
        }
        float _2350;
        if (_1740 > 0.0)
        {
            _2350 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2350 = frontier_phi_49_46_ladder;
        }
        float _2352 = isnan(_2145) ? _1880 : (isnan(_1880) ? _2145 : min(_1880, _2145));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1734) + _1723;
        float _2358 = (_2353 * _1737) + _1727;
        float _2359 = (_2353 * _1740) + _1731;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_25_49_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_25_49_ladder_2;
        _1761 = frontier_phi_25_49_ladder_1;
        _1763 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_740, _741, _742), _1669);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _761) * ((_748 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_761 * _748)) * _732;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    uvec4 _1797 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1799 = _1797.x * 14u;
    uint _1800 = _1799 + 13u;
    float _1807 = _732 + (-1.0);
    float _1812 = (cbLight._m0[_1800].x * _1807) + 1.0;
    float _1813 = (cbLight._m0[_1800].y * _1807) + 1.0;
    float _1814 = (cbLight._m0[_1800].z * _1807) + 1.0;
    float _1815 = (cbLight._m0[_1800].w * _1807) + 1.0;
    uint _1816 = _1799 + 5u;
    float _1822 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1826 = _1799 + 4u;
    float _1833 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1837 = _1799 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_568, _569, _570));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_568, _569, _570));
    float _4060 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _4071 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1816].x * _1822) * _1858) + ((cbLight._m0[_1826].x * _1833) * _1856);
    float _1866 = ((_1822 * cbLight._m0[_1816].y) * _1858) + ((_1833 * cbLight._m0[_1826].y) * _1856);
    float _1867 = ((_1822 * cbLight._m0[_1816].z) * _1858) + ((_1833 * cbLight._m0[_1826].z) * _1856);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1799 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1865;
        _1887 = _1866;
        _1889 = _1867;
    }
    else
    {
        uint _1893 = _1799 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1799 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4082 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1912 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1865;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2089 = _1799 + 7u;
        float _2105 = (dot(vec3(cbLight._m0[_1799 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4098 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2108 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _1930 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _1885;
        _1932 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _1887;
        _1934 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _1889;
    }
    uint _1937 = _1799 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _571) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1799].x + _646;
    float _1953 = cbLight._m0[_1799].y + _647;
    float _1954 = cbLight._m0[_1799].z + _648;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1799].xyz));
    float _4114 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _1966 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1967 = dot(vec3(_568, _569, _570), vec3(_1959, _1960, _1961));
    float _4136 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1959, _1960, _1961));
    float _4147 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1966 * ((_1965 * _1991) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1991) + _1951) * _1965))) * _1965;
    float _4158 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2015 = _1799 + 9u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _571) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1837].x + _646;
    float _2029 = cbLight._m0[_1837].y + _647;
    float _2030 = cbLight._m0[_1837].z + _648;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1837].xyz));
    float _4169 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2042 = dot(vec3(_568, _569, _570), vec3(_2035, _2036, _2037));
    float _4180 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2035, _2036, _2037));
    float _4191 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2027 * _2027;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2027;
    float _2074 = (0.5 / (((_1966 * ((_2041 * _2064) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2064) + _2027) * _2041))) * _2041;
    float _4202 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    float _2086 = (((_2063 * cbLight._m0[_2015].x) * _2076) * _1822) + (((_1990 * cbLight._m0[_1937].x) * _2004) * _1833);
    float _2087 = (((_2063 * cbLight._m0[_2015].y) * _2076) * _1822) + (((_1990 * cbLight._m0[_1937].y) * _2004) * _1833);
    float _2088 = (((_2063 * cbLight._m0[_2015].z) * _2076) * _1822) + (((_1990 * cbLight._m0[_1937].z) * _2004) * _1833);
    float _2150;
    float _2152;
    float _2154;
    if (_1874)
    {
        _2150 = _2086;
        _2152 = _2087;
        _2154 = _2088;
    }
    else
    {
        uint _2156 = _1799 + 2u;
        uint _2160 = _1799 + 10u;
        float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _571) * 0.949999988079071044921875);
        float _2175 = _2174 * _2174;
        float _2176 = cbLight._m0[_2156].x + _646;
        float _2177 = cbLight._m0[_2156].y + _647;
        float _2178 = cbLight._m0[_2156].z + _648;
        float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
        float _2183 = _2182 * _2176;
        float _2184 = _2182 * _2177;
        float _2185 = _2182 * _2178;
        float _2186 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2156].xyz));
        float _4213 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2190 = dot(vec3(_568, _569, _570), vec3(_2183, _2184, _2185));
        float _4224 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2183, _2184, _2185));
        float _4235 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2198 = _2175 * _2175;
        float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
        float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = 1.0 - _2175;
        float _2222 = (0.5 / (((_1966 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2212) + _2175) * _2189))) * _2189;
        float _4246 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
        float _2225 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2150 = (((_2211 * cbLight._m0[_2160].x) * _2224) * _2225) + _2086;
        _2152 = (((_2211 * cbLight._m0[_2160].y) * _2224) * _2225) + _2087;
        _2154 = (((_2211 * cbLight._m0[_2160].z) * _2224) * _2225) + _2088;
    }
    float _2260;
    float _2262;
    float _2264;
    if (_1892)
    {
        _2260 = _2150;
        _2262 = _2152;
        _2264 = _2154;
    }
    else
    {
        uint _2271 = _1799 + 3u;
        uint _2275 = _1799 + 11u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _571) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _646;
        float _2292 = cbLight._m0[_2271].y + _647;
        float _2293 = cbLight._m0[_2271].z + _648;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2271].xyz));
        float _4262 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2305 = dot(vec3(_568, _569, _570), vec3(_2298, _2299, _2300));
        float _4273 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4284 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_1966 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2327) + _2290) * _2304))) * _2304;
        float _4295 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2260 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2150;
        _2262 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2152;
        _2264 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2154;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1797.y == 0u)
    {
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2415;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2415;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2415;
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.x;
        uint _2442 = uint((float(_2430.y) * floor(float(uint(cbSceneParam._m0[85u].y * _668) / _2431))) + floor(float(uint(cbSceneParam._m0[85u].x * _667) / _2431)));
        float _2452 = (log2(_2418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2453 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        uint _2456 = uint(isnan(14.0) ? _2453 : (isnan(_2453) ? 14.0 : min(_2453, 14.0)));
        uvec4 _2461 = texelFetch(g_lightClusterGridBuffer, int(((_2456 << 2u) + (_2442 << 6u)) >> 2u));
        uint _2462 = _2461.x;
        uint _2463 = _2430.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2463 >> 4u) & 15u)) + 4294967295u) & _2462) == 0u) || ((_2463 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2731)
                {
                    frontier_phi_66_pred = _2715;
                    frontier_phi_66_pred_1 = _2720;
                    frontier_phi_66_pred_2 = _2719;
                    frontier_phi_66_pred_3 = _2718;
                    frontier_phi_66_pred_4 = _2717;
                    frontier_phi_66_pred_5 = _2716;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _2416;
                        float _2927 = _2886.y - _2417;
                        float _2928 = _2886.z - _2418;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_688, _691, _694), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4321 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _2416;
                        float _2962 = (-0.0) - _2417;
                        float _2963 = (-0.0) - _2418;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2978 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2979 = 1.0 - _748;
                        float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                        float _2987 = _2986 * _2986;
                        float _2988 = _2987 * _2987;
                        float _2989 = _2968 + _2933;
                        float _2990 = _2969 + _2934;
                        float _2991 = _2970 + _2935;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2999 = dot(vec3(_688, _691, _694), vec3(_2968, _2969, _2970));
                        float _4337 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3003 = dot(vec3(_688, _691, _694), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                        float _4348 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                        float _3011 = _2946 * _2987;
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _2936) + _3012;
                        float _4359 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3017 = 1.0 - _2987;
                        float _3027 = (0.5 / (((_3016 * ((_3002 * _3017) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2987) * _3002))) * _3016;
                        float _4370 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3038 = (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3010 * _3010) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2790 = (_2957 * _2905.x) + _2863;
                        _2791 = (_2957 * _2905.y) + _2864;
                        _2792 = (_2957 * _2905.z) + _2865;
                        _2787 = (_3038 * _2922.x) + _2860;
                        _2788 = (_3038 * _2922.y) + _2861;
                        _2789 = (_3038 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_66_pred = _2787;
                    frontier_phi_66_pred_1 = _2792;
                    frontier_phi_66_pred_2 = _2791;
                    frontier_phi_66_pred_3 = _2790;
                    frontier_phi_66_pred_4 = _2789;
                    frontier_phi_66_pred_5 = _2788;
                }
                _2564 = frontier_phi_66_pred;
                _2574 = frontier_phi_66_pred_1;
                _2572 = frontier_phi_66_pred_2;
                _2570 = frontier_phi_66_pred_3;
                _2568 = frontier_phi_66_pred_4;
                _2566 = frontier_phi_66_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2564;
                    _2716 = _2566;
                    _2717 = _2568;
                    _2718 = _2570;
                    _2719 = _2572;
                    _2720 = _2574;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2580) & _2462) == 0u)
        {
            _2683 = _2563;
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
            float _2709 = _2708 * _2416;
            float _2710 = _2708 * _2417;
            float _2711 = _2708 * _2418;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2563;
                float _2844 = _2565;
                float _2845 = _2567;
                float _2846 = _2569;
                float _2847 = _2571;
                float _2848 = _2573;
                uint _2849 = _2580;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2859)
                    {
                        frontier_phi_77_pred = _2848;
                        frontier_phi_77_pred_1 = _2847;
                        frontier_phi_77_pred_2 = _2846;
                        frontier_phi_77_pred_3 = _2845;
                        frontier_phi_77_pred_4 = _2844;
                        frontier_phi_77_pred_5 = _2843;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        uint _3071 = _2858;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3141;
                        vec4 _3157;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3082 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3128 = (_3082 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3082 * 40u) + 20u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3082 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3082 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_2418, _3191.z, fma(_2417, _3191.y, _3191.x * _2416)) + _3191.w;
                            _3204 = !((fma(_2418, _3172.z, fma(_2417, _3172.y, _3172.x * _2416)) + _3172.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3097.x - _2416;
                                float _3232 = _3097.y - _2417;
                                float _3233 = _3097.z - _2418;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3098 * _3098));
                                float _4381 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3249 = sqrt(_3234) * _3113.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_688, _691, _694))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_2418, _3141.z, fma(_2417, _3141.y, _3141.x * _2416)) + _3141.w) / _3203;
                                float _3263 = (fma(_2418, _3157.z, fma(_2417, _3157.y, _3157.x * _2416)) + _3157.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4397 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _748;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2709;
                                float _3293 = _3239 - _2710;
                                float _3294 = _3240 - _2711;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_688, _691, _694), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4408 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3306 = dot(vec3(_688, _691, _694), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4419 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_688, _691, _694), vec3(_3238, _3239, _3240))) + _3315;
                                float _4430 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4441 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3269 * _3113.y;
                                frontier_phi_83_pred_1 = _3269 * _3113.x;
                                frontier_phi_83_pred_2 = _3343 * _3125.z;
                                frontier_phi_83_pred_3 = _3343 * _3125.y;
                                frontier_phi_83_pred_4 = _3343 * _3125.x;
                                frontier_phi_83_pred_5 = _3269 * _3113.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_83_pred;
                            _3350 = frontier_phi_83_pred_1;
                            _3349 = frontier_phi_83_pred_2;
                            _3348 = frontier_phi_83_pred_3;
                            _3347 = frontier_phi_83_pred_4;
                            _3352 = frontier_phi_83_pred_5;
                            _3055 = _3350 + _3068;
                            _3056 = _3351 + _3069;
                            _3057 = _3352 + _3070;
                            _3052 = _3347 + _3065;
                            _3053 = _3348 + _3066;
                            _3054 = _3349 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3057;
                        frontier_phi_77_pred_1 = _3056;
                        frontier_phi_77_pred_2 = _3055;
                        frontier_phi_77_pred_3 = _3054;
                        frontier_phi_77_pred_4 = _3053;
                        frontier_phi_77_pred_5 = _3052;
                    }
                    _2694 = frontier_phi_77_pred;
                    _2692 = frontier_phi_77_pred_1;
                    _2690 = frontier_phi_77_pred_2;
                    _2688 = frontier_phi_77_pred_3;
                    _2686 = frontier_phi_77_pred_4;
                    _2684 = frontier_phi_77_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2688;
                frontier_phi_58_59_ladder_1 = _2694;
                frontier_phi_58_59_ladder_2 = _2692;
                frontier_phi_58_59_ladder_3 = _2690;
                frontier_phi_58_59_ladder_4 = _2686;
                frontier_phi_58_59_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_58_59_ladder = _2567;
                frontier_phi_58_59_ladder_1 = _2573;
                frontier_phi_58_59_ladder_2 = _2571;
                frontier_phi_58_59_ladder_3 = _2569;
                frontier_phi_58_59_ladder_4 = _2565;
                frontier_phi_58_59_ladder_5 = _2563;
            }
            _2683 = frontier_phi_58_59_ladder_5;
            _2685 = frontier_phi_58_59_ladder_4;
            _2687 = frontier_phi_58_59_ladder;
            _2689 = frontier_phi_58_59_ladder_3;
            _2691 = frontier_phi_58_59_ladder_2;
            _2693 = frontier_phi_58_59_ladder_1;
        }
        float _2698 = isnan(1.0) ? _732 : (isnan(_732) ? 1.0 : min(_732, 1.0));
        _2475 = (_2698 * _2689) + _1930;
        _2477 = (_2698 * _2691) + _1932;
        _2479 = (_2698 * _2693) + _1934;
        _2481 = ((_2683 * 0.039999999105930328369140625) * _2698) + _2260;
        _2483 = ((_2685 * 0.039999999105930328369140625) * _2698) + _2262;
        _2485 = ((_2687 * 0.039999999105930328369140625) * _2698) + _2264;
    }
    else
    {
        _2475 = _1930;
        _2477 = _1932;
        _2479 = _1934;
        _2481 = _2260;
        _2483 = _2262;
        _2485 = _2264;
    }
    float _4457 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4468 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4479 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _2502 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2475 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _732))) + ((_2481 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2503 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2477 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _732))) + ((_2483 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2504 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2479 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _732))) + ((_2485 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    uint _2505 = _235 + 6u;
    float _2513 = _667 / cbSceneParam._m0[86u].x;
    float _2514 = _668 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2589 = _2588 / _589;
        float _2600 = _2589 * _639;
        float _2601 = _640 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2603 = _2589 * _641;
        float _2605 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2601;
        float _2613 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2602 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2746 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2800 = ((abs(_2613 / _2602) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2623 * _2755) - exp2(_2623 * _2756)) * _2744))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2533);
        _2625 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2627 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2629 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2631 = _2811 * _2533;
    }
    else
    {
        _2625 = _2530;
        _2627 = _2531;
        _2629 = _2532;
        _2631 = _2533;
    }
    bool _2838;
    vec4 _2641;
    vec4 _2663;
    float _2665;
    float _2669;
    float _2670;
    float _2671;
    float _2672;
    bool _2682;
    for (;;)
    {
        _2641 = cbMatDynParam._m0[0u];
        float _2643 = roundEven(_2641.y);
        bool _2644 = _2643 == 3.0;
        float _2645 = log2(_2631);
        float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * _2502;
        float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * _2503;
        float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * _2504;
        float _2661 = _655 + (-0.5);
        _2663 = cbMtdParam._m0[1u];
        _2665 = _2663.y * _2661;
        float _2668 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2669 = _2668 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
        _2670 = _2668 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
        _2671 = _2668 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
        _2672 = _2661 * 0.999000012874603271484375;
        _2682 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2682)
        {
            if ((cbInstanceData._m0[_235 + 7u].x + _2672) < 0.5)
            {
                _2838 = true;
                break;
            }
        }
        uint _2779 = _707 + uint(_2641.w);
        if ((cbInstanceData._m0[_2779].w < 1.0) && ((cbInstanceData._m0[_2779].w + _2672) < 0.5))
        {
            _2838 = true;
            break;
        }
        if ((_2665 + 1.0) < _2663.x)
        {
            _2838 = true;
            break;
        }
        _2838 = false;
        break;
    }
    float _3043;
    if (_2838)
    {
        discard_state = true;
        _3043 = 0.0;
    }
    else
    {
        _3043 = cbInstanceData._m0[_2505].w;
    }
    SV_Target.x = _2669;
    SV_Target.y = _2670;
    SV_Target.z = _2671;
    SV_Target.w = _3043;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
    discard_exit();
}


