#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1166;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3756 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3767 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))));
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _470 = _468.x;
    float _471 = 1.0 - _470;
    float _499 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_470 - _471) * cbMtdParam._m0[24u].w) + _471) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3778 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _508 = ((((cbMtdParam._m0[10u].x - _385) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _500) + _385;
    float _509 = ((((cbMtdParam._m0[10u].y - _386) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _500) + _386;
    float _510 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _387)) * _500) + _387;
    float _514 = ((cbMtdParam._m0[23u].y - _430) * _500) + _430;
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _542 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _559 = _557.x;
    float _564 = fract(_557.w + cbPerFrame._m0[22u].x);
    float _566 = (1.0 - _564) * _559;
    float _571 = ((_564 + (-1.0)) + _559) * 9.0;
    float _573 = ((_559 + (-1.0)) + _564) * 9.0;
    float _574 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _589 = (_566 * ((_557.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _574 : (isnan(_574) ? 3.0 : min(_574, 3.0))) * 3.1415927410125732421875);
    float _591 = (_566 * ((_557.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _575 : (isnan(_575) ? 3.0 : min(_575, 3.0))) * 3.1415927410125732421875);
    float _595 = inversesqrt(dot(vec3(_589, _591, 1.0), vec3(_589, _591, 1.0)));
    float _611 = (((((0.5 - _535) + ((_589 * 0.5) * _595)) * _542) + _535) * 2.0) + (-1.0);
    float _612 = (((((0.5 - _536) + ((_595 * 0.5) * _591)) * _542) + _536) * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _3809 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _629 = ((((cbMtdParam._m0[22u].z * _433) - _433) + _611) * _500) + _433;
    float _630 = ((((cbMtdParam._m0[22u].z * _435) - _435) + _612) * _500) + _435;
    float _631 = (_500 * (sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _441)) + _441;
    float _633 = cbMtdParam._m0[22u].x + _454.w;
    float _636 = fma(_631, _231, fma(_630, _237 * TANGENT.x, (_223 * _215) * _629));
    float _639 = fma(_631, _232, fma(_630, _237 * TANGENT.y, (_223 * _216) * _629));
    float _642 = fma(_631, _233, fma(_630, _237 * TANGENT.z, (_223 * _217) * _629));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3820 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _650 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3842 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3853 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3864 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _668 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _756 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _759 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _773 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3875 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _797 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _793.x;
    float _798 = dot(vec3(_647, _648, _649), vec3(_726, _727, _728));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _647) - _726;
    float _806 = (_801 * _648) - _727;
    float _807 = (_801 * _649) - _728;
    float _811 = abs(dot(vec3(_726, _727, _728), vec3(_647, _648, _649)));
    float _3908 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_650);
    float _825 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _895 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _899 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _923 = _857 + _647;
        float _924 = _861 + _648;
        float _925 = _865 + _649;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _891;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _895;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _899;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_647, _648, _649), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3956 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_647, _648, _649), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3989 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_647, _648, _649), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4022 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1209 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1213 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1236 = _857 + _647;
        float _1237 = _861 + _648;
        float _1238 = _865 + _649;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_647, _648, _649), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4085 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_647, _648, _649), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4118 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_647, _648, _649), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4151 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1166;
        _1475 = _1166;
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = _1166;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1178)) + _1178;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _805 * 0.5;
    float _1543 = _806 * 0.5;
    float _1544 = _807 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1674 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1677 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1705 = frontier_phi_14_12_ladder;
        }
        float _1875;
        if (_1674 > 0.0)
        {
            _1875 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1875 = frontier_phi_23_19_ladder;
        }
        float _2170;
        if (_1677 > 0.0)
        {
            _2170 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2170 = frontier_phi_35_30_ladder;
        }
        float _2172 = isnan(_1875) ? _1705 : (isnan(_1705) ? _1875 : min(_1705, _1875));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1671) + _1660;
        float _2178 = (_2173 * _1674) + _1664;
        float _2179 = (_2173 * _1677) + _1668;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_13_35_ladder = _2324.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2324.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2324.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_13_35_ladder_2;
        _1695 = frontier_phi_13_35_ladder_1;
        _1697 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1611);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1770 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1773 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1880;
        if (_1767 > 0.0)
        {
            _1880 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1880 = frontier_phi_25_21_ladder;
        }
        float _2197;
        if (_1770 > 0.0)
        {
            _2197 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2197 = frontier_phi_37_32_ladder;
        }
        float _2524;
        if (_1773 > 0.0)
        {
            _2524 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2524 = frontier_phi_47_44_ladder;
        }
        float _2526 = isnan(_2197) ? _1880 : (isnan(_1880) ? _2197 : min(_1880, _2197));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1767) + _1756;
        float _2532 = (_2527 * _1770) + _1760;
        float _2533 = (_2527 * _1773) + _1764;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_22_47_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_22_47_ladder_2;
        _1794 = frontier_phi_22_47_ladder_1;
        _1796 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1702);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1808 = ((((1.0 - _825) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _813)) * _797;
    float _1809 = _1808 * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1810 = _1808 * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1811 = _1808 * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1814 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    float _1854 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1858 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1862 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1867 = _1854 / _1866;
    float _1868 = _1858 / _1866;
    float _1869 = _1862 / _1866;
    float _2016;
    float _2017;
    float _2018;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1896 = ((uint(_1869 > cbSceneParam._m0[59u].y) + uint(_1869 > cbSceneParam._m0[59u].x)) + uint(_1869 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1897 = _1896 + 43u;
        uint _1905 = _1896 + 44u;
        uint _1913 = _1896 + 45u;
        uint _1921 = _1896 + 46u;
        float _1932 = fma(_1866, cbSceneParam._m0[_1897].w, fma(_1862, cbSceneParam._m0[_1897].z, fma(_1858, cbSceneParam._m0[_1897].y, _1854 * cbSceneParam._m0[_1897].x)));
        float _1936 = fma(_1866, cbSceneParam._m0[_1905].w, fma(_1862, cbSceneParam._m0[_1905].z, fma(_1858, cbSceneParam._m0[_1905].y, _1854 * cbSceneParam._m0[_1905].x)));
        float _1944 = fma(_1866, cbSceneParam._m0[_1921].w, fma(_1862, cbSceneParam._m0[_1921].z, fma(_1858, cbSceneParam._m0[_1921].y, _1854 * cbSceneParam._m0[_1921].x)));
        float _1949 = cbSceneParam._m0[33u].z * _1944;
        float _1951 = cbSceneParam._m0[33u].w * _1944;
        float _1954 = fma(_1866, cbSceneParam._m0[_1913].w, fma(_1862, cbSceneParam._m0[_1913].z, fma(_1858, cbSceneParam._m0[_1913].y, _1854 * cbSceneParam._m0[_1913].x))) / _1944;
        float _2002 = (cbSceneParam._m0[33u].x - sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869))) * cbSceneParam._m0[33u].y;
        float _4277 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2009 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 + _1932) / _1944, (_1951 + _1936) / _1944), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 + _1932) / _1944, (_1936 - _1949) / _1944), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 - _1949) / _1944, (_1936 - _1951) / _1944), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 - _1951) / _1944, (_1949 + _1936) / _1944), _1954), 0.0)).x), vec4(0.25)));
        _2016 = 1.0 - (_2009 * cbSceneParam._m0[34u].x);
        _2017 = 1.0 - (_2009 * cbSceneParam._m0[34u].y);
        _2018 = 1.0 - (_2009 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2016 = 1.0;
        _2017 = 1.0;
        _2018 = 1.0;
    }
    float _2082;
    float _2084;
    float _2086;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2070 = fma(_1866, cbSceneParam._m0[63u].w, fma(_1862, cbSceneParam._m0[63u].z, fma(_1858, cbSceneParam._m0[63u].y, _1854 * cbSceneParam._m0[63u].x)));
        float _2071 = fma(_1866, cbSceneParam._m0[60u].w, fma(_1862, cbSceneParam._m0[60u].z, fma(_1858, cbSceneParam._m0[60u].y, _1854 * cbSceneParam._m0[60u].x))) / _2070;
        float _2072 = fma(_1866, cbSceneParam._m0[61u].w, fma(_1862, cbSceneParam._m0[61u].z, fma(_1858, cbSceneParam._m0[61u].y, _1854 * cbSceneParam._m0[61u].x))) / _2070;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2071 >= cbSceneParam._m0[64u].x) && (_2072 >= cbSceneParam._m0[64u].y)) && (_2071 <= cbSceneParam._m0[64u].z)) && (_2072 <= cbSceneParam._m0[64u].w))
        {
            float _2210 = fma(_1866, cbSceneParam._m0[62u].w, fma(_1862, cbSceneParam._m0[62u].z, fma(_1858, cbSceneParam._m0[62u].y, _1854 * cbSceneParam._m0[62u].x))) / _2070;
            float _2214 = isnan(cbSceneParam._m0[41u].w) ? _2210 : (isnan(_2210) ? cbSceneParam._m0[41u].w : max(_2210, cbSceneParam._m0[41u].w));
            float _2257 = (cbSceneParam._m0[33u].x - sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869))) * cbSceneParam._m0[33u].y;
            float _4293 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
            float _2264 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2071, cbSceneParam._m0[33u].w + _2072), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2071, _2072 - cbSceneParam._m0[33u].z), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2071 - cbSceneParam._m0[33u].z, _2072 - cbSceneParam._m0[33u].w), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2071 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2072), _2214), 0.0)).x), vec4(0.25)));
            float _2268 = 1.0 - (_2264 * cbSceneParam._m0[34u].x);
            float _2269 = 1.0 - (_2264 * cbSceneParam._m0[34u].y);
            float _2270 = 1.0 - (_2264 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2270) ? _2018 : (isnan(_2018) ? _2270 : min(_2018, _2270));
            frontier_phi_34_33_ladder_1 = isnan(_2269) ? _2017 : (isnan(_2017) ? _2269 : min(_2017, _2269));
            frontier_phi_34_33_ladder_2 = isnan(_2268) ? _2016 : (isnan(_2016) ? _2268 : min(_2016, _2268));
        }
        else
        {
            frontier_phi_34_33_ladder = _2018;
            frontier_phi_34_33_ladder_1 = _2017;
            frontier_phi_34_33_ladder_2 = _2016;
        }
        _2082 = frontier_phi_34_33_ladder_2;
        _2084 = frontier_phi_34_33_ladder_1;
        _2086 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2082 = _2016;
        _2084 = _2017;
        _2086 = _2018;
    }
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2101 = _797 + (-1.0);
    float _2106 = (cbLight._m0[_2094].x * _2101) + 1.0;
    float _2107 = (cbLight._m0[_2094].y * _2101) + 1.0;
    float _2108 = (cbLight._m0[_2094].z * _2101) + 1.0;
    float _2109 = (cbLight._m0[_2094].w * _2101) + 1.0;
    uint _2110 = _2093 + 5u;
    float _2116 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2120 = _2093 + 4u;
    float _2129 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2133 = _2093 | 1u;
    float _2144 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_647, _648, _649));
    float _2147 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_647, _648, _649));
    float _4329 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _4340 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2154 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2161 = ((cbLight._m0[_2110].x * _2116) * _2154) + (((cbLight._m0[_2120].x * _2082) * _2129) * _2152);
    float _2162 = ((_2116 * cbLight._m0[_2110].y) * _2154) + (((cbLight._m0[_2120].y * _2084) * _2129) * _2152);
    float _2163 = ((_2116 * cbLight._m0[_2110].z) * _2154) + (((cbLight._m0[_2120].z * _2086) * _2129) * _2152);
    uvec4 _2167 = floatBitsToUint(cbLight._m0[_2093 + 12u]);
    bool _2169 = _2167.x == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2169)
    {
        _2271 = _2161;
        _2273 = _2162;
        _2275 = _2163;
    }
    else
    {
        uint _2279 = _2093 + 6u;
        float _2295 = (dot(vec3(cbLight._m0[_2093 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4351 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2298 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2271 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2161;
        _2273 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2162;
        _2275 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2163;
    }
    bool _2278 = _2167.y == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2278)
    {
        _2333 = _2271;
        _2335 = _2273;
        _2337 = _2275;
    }
    else
    {
        uint _2495 = _2093 + 7u;
        float _2511 = (dot(vec3(cbLight._m0[_2093 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4367 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2514 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2333 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2271;
        _2335 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2273;
        _2337 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2275;
    }
    uint _2340 = _2093 + 8u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _650) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2093].x + _726;
    float _2356 = cbLight._m0[_2093].y + _727;
    float _2357 = cbLight._m0[_2093].z + _728;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2093].xyz));
    float _4383 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2369 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2370 = dot(vec3(_647, _648, _649), vec3(_2362, _2363, _2364));
    float _4405 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2362, _2363, _2364));
    float _4416 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2354 * _2354;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2393 = (exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2394 = 1.0 - _2354;
    float _2405 = (0.5 / (((_2369 * ((_2368 * _2394) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2394) + _2354) * _2368))) * _2368;
    float _4427 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    uint _2421 = _2093 + 9u;
    float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _650) * 0.949999988079071044921875);
    float _2433 = _2432 * _2432;
    float _2434 = cbLight._m0[_2133].x + _726;
    float _2435 = cbLight._m0[_2133].y + _727;
    float _2436 = cbLight._m0[_2133].z + _728;
    float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
    float _2441 = _2440 * _2434;
    float _2442 = _2440 * _2435;
    float _2443 = _2440 * _2436;
    float _2444 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2133].xyz));
    float _4438 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2448 = dot(vec3(_647, _648, _649), vec3(_2441, _2442, _2443));
    float _4449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2452 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2441, _2442, _2443));
    float _4460 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2456 = _2433 * _2433;
    float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
    float _2469 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2470 = 1.0 - _2433;
    float _2480 = (0.5 / (((_2369 * ((_2447 * _2470) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2470) + _2433) * _2447))) * _2447;
    float _4471 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
    float _2492 = (((_2469 * cbLight._m0[_2421].x) * _2482) * _2116) + ((((cbLight._m0[_2340].x * _2082) * _2393) * _2407) * _2129);
    float _2493 = (((_2469 * cbLight._m0[_2421].y) * _2482) * _2116) + ((((cbLight._m0[_2340].y * _2084) * _2393) * _2407) * _2129);
    float _2494 = (((_2469 * cbLight._m0[_2421].z) * _2482) * _2116) + ((((cbLight._m0[_2340].z * _2086) * _2393) * _2407) * _2129);
    float _2550;
    float _2552;
    float _2554;
    if (_2169)
    {
        _2550 = _2492;
        _2552 = _2493;
        _2554 = _2494;
    }
    else
    {
        uint _2556 = _2093 + 2u;
        uint _2560 = _2093 + 10u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _650) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _726;
        float _2577 = cbLight._m0[_2556].y + _727;
        float _2578 = cbLight._m0[_2556].z + _728;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2556].xyz));
        float _4482 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2590 = dot(vec3(_647, _648, _649), vec3(_2583, _2584, _2585));
        float _4493 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4504 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2611 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2612 = 1.0 - _2575;
        float _2622 = (0.5 / (((_2369 * ((_2589 * _2612) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2612) + _2575) * _2589))) * _2589;
        float _4515 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2550 = (((_2611 * cbLight._m0[_2560].x) * _2624) * _2625) + _2492;
        _2552 = (((_2611 * cbLight._m0[_2560].y) * _2624) * _2625) + _2493;
        _2554 = (((_2611 * cbLight._m0[_2560].z) * _2624) * _2625) + _2494;
    }
    float _2656;
    float _2658;
    float _2660;
    if (_2278)
    {
        _2656 = _2550;
        _2658 = _2552;
        _2660 = _2554;
    }
    else
    {
        uint _2667 = _2093 + 3u;
        uint _2671 = _2093 + 11u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _650) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _726;
        float _2688 = cbLight._m0[_2667].y + _727;
        float _2689 = cbLight._m0[_2667].z + _728;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2667].xyz));
        float _4531 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2701 = dot(vec3(_647, _648, _649), vec3(_2694, _2695, _2696));
        float _4542 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4553 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2369 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2723) + _2686) * _2700))) * _2700;
        float _4564 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2656 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2550;
        _2658 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2552;
        _2660 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2554;
    }
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_2091.y == 0u)
    {
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.x;
        uint _2769 = uint((float(_2757.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2758))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2758)));
        float _2779 = (log2(_1869 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2780 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        uint _2783 = uint(isnan(14.0) ? _2780 : (isnan(_2780) ? 14.0 : min(_2780, 14.0)));
        uvec4 _2788 = texelFetch(g_lightClusterGridBuffer, int(((_2783 << 2u) + (_2769 << 6u)) >> 2u));
        uint _2789 = _2788.x;
        uint _2790 = _2757.z;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((((1u << ((_2790 >> 4u) & 15u)) + 4294967295u) & _2789) == 0u) || ((_2790 & 240u) == 0u))
        {
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
        }
        else
        {
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            uint _3020 = 0u;
            uint _3029;
            bool _3030;
            for (;;)
            {
                _3029 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                _3030 = _3029 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3030)
                {
                    frontier_phi_66_pred = _3019;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                else
                {
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    uint _3144;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3029;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    for (;;)
                    {
                        uint _3148 = uint(findLSB(_3144)) + (_3020 << 5u);
                        uint _3145 = (_3144 + 4294967295u) & _3144;
                        uint _3150 = _3148 * 48u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3170 = (_3148 * 48u) + 4u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3189 = (_3148 * 48u) + 8u;
                        vec3 _3200 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x));
                        float _3204 = _3164.x - _1867;
                        float _3205 = _3164.y - _1868;
                        float _3206 = _3164.z - _1869;
                        float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                        float _3210 = inversesqrt(_3207);
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3214 = dot(vec3(_753, _756, _759), vec3(_3211, _3212, _3213));
                        float _3219 = 1.0 - (_3207 * _3164.w);
                        float _4590 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3221 = sqrt(_3207) * _3183.w;
                        float _3224 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3214) + _3225;
                        float _3231 = _3221 * _3221;
                        float _3235 = ((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3220) / ((_3231 * 0.699999988079071044921875) + 1.0);
                        float _3239 = (-0.0) - _1867;
                        float _3240 = (-0.0) - _1868;
                        float _3241 = (-0.0) - _1869;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3255 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _813;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3268 = _3248 + _3213;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_753, _756, _759), vec3(_3246, _3247, _3248));
                        float _4606 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3280 = dot(vec3(_753, _756, _759), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4617 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3224 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3214) + _3289;
                        float _4628 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4639 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3314 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3287 * _3287) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125))) * _3220;
                        _3073 = (_3235 * _3183.x) + _3141;
                        _3074 = (_3235 * _3183.y) + _3142;
                        _3075 = (_3235 * _3183.z) + _3143;
                        _3070 = (_3314 * _3200.x) + _3138;
                        _3071 = (_3314 * _3200.y) + _3139;
                        _3072 = (_3314 * _3200.z) + _3140;
                        if (_3145 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3145;
                        }
                    }
                    frontier_phi_66_pred = _3075;
                    frontier_phi_66_pred_1 = _3074;
                    frontier_phi_66_pred_2 = _3073;
                    frontier_phi_66_pred_3 = _3072;
                    frontier_phi_66_pred_4 = _3071;
                    frontier_phi_66_pred_5 = _3070;
                }
                _2880 = frontier_phi_66_pred;
                _2878 = frontier_phi_66_pred_1;
                _2876 = frontier_phi_66_pred_2;
                _2874 = frontier_phi_66_pred_3;
                _2872 = frontier_phi_66_pred_4;
                _2870 = frontier_phi_66_pred_5;
                uint _3021 = _3020 + 1u;
                if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3014 = _2870;
                    _3015 = _2872;
                    _3016 = _2874;
                    _3017 = _2876;
                    _3018 = _2878;
                    _3019 = _2880;
                    _3020 = _3021;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
        }
        uvec4 _2883 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2884 = _2883.z;
        uint _2886 = (_2884 >> 8u) & 15u;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((4294967295u << _2886) & _2789) == 0u)
        {
            _2982 = _2869;
            _2984 = _2871;
            _2986 = _2873;
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
        }
        else
        {
            float _3007 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
            float _3008 = _3007 * _1867;
            float _3009 = _3007 * _1868;
            float _3010 = _3007 * _1869;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2886 < ((_2884 >> 12u) & 15u))
            {
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _3121 = _2869;
                float _3122 = _2871;
                float _3123 = _2873;
                float _3124 = _2875;
                float _3125 = _2877;
                float _3126 = _2879;
                uint _3127 = _2886;
                uint _3136;
                bool _3137;
                for (;;)
                {
                    _3136 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                    _3137 = _3136 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3137)
                    {
                        frontier_phi_72_pred = _3126;
                        frontier_phi_72_pred_1 = _3125;
                        frontier_phi_72_pred_2 = _3124;
                        frontier_phi_72_pred_3 = _3123;
                        frontier_phi_72_pred_4 = _3122;
                        frontier_phi_72_pred_5 = _3121;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3332 = _3121;
                        float _3333 = _3122;
                        float _3334 = _3123;
                        float _3335 = _3124;
                        float _3336 = _3125;
                        float _3337 = _3126;
                        uint _3338 = _3136;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3423;
                        float _3469;
                        bool _3470;
                        for (;;)
                        {
                            uint _3349 = ((_3127 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3349 * 40u) + 20u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3349 * 40u) + 24u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3444 = (_3349 * 40u) + 28u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3469 = fma(_1869, _3457.z, fma(_1868, _3457.y, _3457.x * _1867)) + _3457.w;
                            _3470 = !((fma(_1869, _3438.z, fma(_1868, _3438.y, _3438.x * _1867)) + _3438.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3470)
                            {
                                float _3497 = _3364.x - _1867;
                                float _3498 = _3364.y - _1868;
                                float _3499 = _3364.z - _1869;
                                float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                                float _3503 = inversesqrt(_3500);
                                float _3504 = _3503 * _3497;
                                float _3505 = _3503 * _3498;
                                float _3506 = _3503 * _3499;
                                float _3510 = 1.0 - (_3500 / (_3365 * _3365));
                                float _4650 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3515 = sqrt(_3500) * _3380.w;
                                float _3517 = 1.39999997615814208984375 / (_3515 + 1.39999997615814208984375);
                                float _3518 = _3517 * _3517;
                                float _3521 = ((1.0 - _3518) * dot(vec3(_3504, _3505, _3506), vec3(_753, _756, _759))) + _3518;
                                float _3524 = _3515 * _3515;
                                float _3528 = (fma(_1869, _3407.z, fma(_1868, _3407.y, _3407.x * _1867)) + _3407.w) / _3469;
                                float _3529 = (fma(_1869, _3423.z, fma(_1868, _3423.y, _3423.x * _1867)) + _3423.w) / _3469;
                                float _3533 = 1.0 - dot(vec2(_3528, _3529), vec2(_3528, _3529));
                                float _4666 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3535 = _3534 * (((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3511) / ((_3524 * 0.699999988079071044921875) + 1.0));
                                float _3547 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                                float _3548 = 1.0 - _813;
                                float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                                float _3556 = _3555 * _3555;
                                float _3557 = _3556 * _3556;
                                float _3558 = _3504 - _3008;
                                float _3559 = _3505 - _3009;
                                float _3560 = _3506 - _3010;
                                float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                                float _3568 = dot(vec3(_753, _756, _759), vec3((-0.0) - _3008, (-0.0) - _3009, (-0.0) - _3010));
                                float _4677 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3572 = dot(vec3(_753, _756, _759), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                                float _4688 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                                float _3580 = _3517 * _3556;
                                float _3581 = _3580 * _3580;
                                float _3587 = ((1.0 - _3581) * dot(vec3(_753, _756, _759), vec3(_3504, _3505, _3506))) + _3581;
                                float _4699 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3589 = 1.0 - _3556;
                                float _3599 = (0.5 / (((_3588 * ((_3571 * _3589) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3556) * _3571))) * _3588;
                                float _4710 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3609 = (_3534 * _3511) * (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3579 * _3579) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3535 * _3380.y;
                                frontier_phi_78_pred_1 = _3535 * _3380.x;
                                frontier_phi_78_pred_2 = _3609 * _3392.z;
                                frontier_phi_78_pred_3 = _3609 * _3392.y;
                                frontier_phi_78_pred_4 = _3609 * _3392.x;
                                frontier_phi_78_pred_5 = _3535 * _3380.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3617 = frontier_phi_78_pred;
                            _3616 = frontier_phi_78_pred_1;
                            _3615 = frontier_phi_78_pred_2;
                            _3614 = frontier_phi_78_pred_3;
                            _3613 = frontier_phi_78_pred_4;
                            _3618 = frontier_phi_78_pred_5;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3324;
                        frontier_phi_72_pred_1 = _3323;
                        frontier_phi_72_pred_2 = _3322;
                        frontier_phi_72_pred_3 = _3321;
                        frontier_phi_72_pred_4 = _3320;
                        frontier_phi_72_pred_5 = _3319;
                    }
                    _2993 = frontier_phi_72_pred;
                    _2991 = frontier_phi_72_pred_1;
                    _2989 = frontier_phi_72_pred_2;
                    _2987 = frontier_phi_72_pred_3;
                    _2985 = frontier_phi_72_pred_4;
                    _2983 = frontier_phi_72_pred_5;
                    uint _3128 = _3127 + 1u;
                    if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3121 = _2983;
                        _3122 = _2985;
                        _3123 = _2987;
                        _3124 = _2989;
                        _3125 = _2991;
                        _3126 = _2993;
                        _3127 = _3128;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2993;
                frontier_phi_60_61_ladder_1 = _2991;
                frontier_phi_60_61_ladder_2 = _2987;
                frontier_phi_60_61_ladder_3 = _2985;
                frontier_phi_60_61_ladder_4 = _2983;
                frontier_phi_60_61_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_60_61_ladder = _2879;
                frontier_phi_60_61_ladder_1 = _2877;
                frontier_phi_60_61_ladder_2 = _2873;
                frontier_phi_60_61_ladder_3 = _2871;
                frontier_phi_60_61_ladder_4 = _2869;
                frontier_phi_60_61_ladder_5 = _2875;
            }
            _2982 = frontier_phi_60_61_ladder_4;
            _2984 = frontier_phi_60_61_ladder_3;
            _2986 = frontier_phi_60_61_ladder_2;
            _2988 = frontier_phi_60_61_ladder_5;
            _2990 = frontier_phi_60_61_ladder_1;
            _2992 = frontier_phi_60_61_ladder;
        }
        float _2997 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2802 = (_2997 * _2988) + _2333;
        _2804 = (_2997 * _2990) + _2335;
        _2806 = (_2997 * _2992) + _2337;
        _2808 = ((_2982 * 0.039999999105930328369140625) * _2997) + _2656;
        _2810 = ((_2984 * 0.039999999105930328369140625) * _2997) + _2658;
        _2812 = ((_2986 * 0.039999999105930328369140625) * _2997) + _2660;
    }
    else
    {
        _2802 = _2333;
        _2804 = _2335;
        _2806 = _2337;
        _2808 = _2656;
        _2810 = _2658;
        _2812 = _2660;
    }
    float _4726 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4737 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4748 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    uint _2832 = _243 + 6u;
    float _2840 = _734 / cbSceneParam._m0[86u].x;
    float _2841 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2855 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, (log2((isnan(cbSceneParam._m0[77u].w) ? _668 : (isnan(_668) ? cbSceneParam._m0[77u].w : min(_668, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2857 = _2855.x;
    float _2858 = _2855.y;
    float _2859 = _2855.z;
    float _2860 = _2855.w;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    if (_668 > cbSceneParam._m0[78u].w)
    {
        float _2894 = isnan(_668) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _668 : min(cbSceneParam._m0[80u].w, _668));
        float _2895 = _2894 / _668;
        float _2906 = _2895 * _719;
        float _2907 = _720 * _2895;
        float _2908 = (-0.0) - _2907;
        float _2910 = _2895 * _721;
        float _2912 = (cbSceneParam._m0[77u].w * _2908) / _2894;
        float _2913 = _2912 + cbSceneParam._m0[79u].w;
        float _2914 = cbSceneParam._m0[79u].w - _2907;
        float _2920 = sqrt(((_2906 * _2906) + (_2907 * _2907)) + (_2910 * _2910));
        float _2923 = (1.0 - (cbSceneParam._m0[77u].w / _2894)) * _2920;
        float _2928 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2930 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3083;
        if (abs((_2908 - _2912) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3083 = ((((_2913 > 0.0) ? exp2(_2928 * _2913) : (2.0 - exp2(_2930 * _2913))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2923;
        }
        else
        {
            float _3043 = 1.0 / cbSceneParam._m0[80u].x;
            float _3044 = isnan(_2914) ? _2913 : (isnan(_2913) ? _2914 : max(_2913, _2914));
            float _3045 = isnan(_2914) ? _2913 : (isnan(_2913) ? _2914 : min(_2913, _2914));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            _3083 = ((abs(_2920 / _2908) * cbSceneParam._m0[80u].y) * ((((_3054 - _3055) * 2.0) - ((exp2(_2928 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0)))) - exp2(_2928 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))))) * _3043)) - ((exp2(_2930 * _3054) - exp2(_2930 * _3055)) * _3043))) + (_2923 * cbSceneParam._m0[80u].z);
        }
        vec4 _3085 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, 1.0), 0.0);
        float _3094 = exp2((_3083 * (-1.44269502162933349609375)) * (1.0 - _3085.w));
        float _3095 = log2(_3094);
        float _3111 = log2(_2860);
        _2932 = (exp2(_3111 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].x)) * _3085.x) / cbSceneParam._m0[78u].x)) + _2857;
        _2934 = (exp2(_3111 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].y)) * _3085.y) / cbSceneParam._m0[78u].y)) + _2858;
        _2936 = (exp2(_3111 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].z)) * _3085.z) / cbSceneParam._m0[78u].z)) + _2859;
        _2938 = _3094 * _2860;
    }
    else
    {
        _2932 = _2857;
        _2934 = _2858;
        _2936 = _2859;
        _2938 = _2860;
    }
    float _2950 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2951 = _2950 == 3.0;
    float _2952 = log2(_2938);
    float _2959 = exp2(_2952 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2802 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _797))) + ((_2808 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2960 = exp2(_2952 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2804 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _797))) + ((_2810 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2961 = exp2(_2952 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2806 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _797))) + ((_2812 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2970 = (_2950 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2970 * (_2951 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2932)));
    SV_Target.y = _2970 * (_2951 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.z = _2970 * (_2951 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.w = cbInstanceData._m0[_2832].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2832].w;
}


