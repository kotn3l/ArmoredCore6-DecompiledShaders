#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _983;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _240) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _241) + cbTextureTilingScale._m0[14u].w));
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _311 = _307.z;
    float _316 = (_307.x * 2.0) + (-1.0);
    float _318 = (_307.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3315 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))));
    float _328 = fma(_325, _208, fma(_318, _215, _316 * _201));
    float _331 = fma(_325, _209, fma(_318, _216, _316 * _202));
    float _334 = fma(_325, _210, fma(_318, _217, _316 * _203));
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    vec4 _374 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _376 = _374.x;
    float _377 = 1.0 - _376;
    float _386 = (cbMtdParam._m0[19u].x + dot(vec4(_338 * _328, _338 * _331, _338 * _334, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_376 - _377) * cbMtdParam._m0[24u].z) + _377) * cbMtdParam._m0[21u].z);
    float _3326 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _394 = (_387 * ((_287.x * cbMtdParam._m0[18u].x) - _266)) + _266;
    float _395 = (_387 * ((_287.y * cbMtdParam._m0[18u].y) - _267)) + _267;
    float _396 = (_387 * ((_287.z * cbMtdParam._m0[18u].z) - _268)) + _268;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3337 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _426 = ((_409.z - _311) * _387) + _311;
    float _436 = ((sqrt(1.0 - (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) - _325) * _387) + _325;
    float _439 = (((_416 - _316) * _387) + _316) + (cbMtdParam._m0[21u].x * _316);
    float _440 = (((_417 - _318) * _387) + _318) + (cbMtdParam._m0[21u].x * _318);
    float _445 = cbMtdParam._m0[22u].x + _307.w;
    float _448 = fma(_436, _208, fma(_440, _215, _439 * _201));
    float _451 = fma(_436, _209, fma(_440, _216, _439 * _202));
    float _454 = fma(_436, _210, fma(_440, _217, _439 * _203));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3348 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _462 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3370 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3381 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3392 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _480 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _531 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _521);
    float _532 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _521);
    float _533 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _521);
    float _537 = inversesqrt(dot(vec3(_531, _532, _533), vec3(_531, _532, _533)));
    float _538 = _531 * _537;
    float _539 = _532 * _537;
    float _540 = _533 * _537;
    float _546 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _547 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _568 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _571 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _574 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _588 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _594 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_588].x;
    float _595 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_588].y;
    float _596 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_588].z;
    float _3403 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _546, cbSceneParam._m0[86u].y * _547));
    float _612 = ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * TEXCOORD_5.w) * _608.x;
    float _613 = dot(vec3(_459, _460, _461), vec3(_538, _539, _540));
    float _616 = _613 * 2.0;
    float _620 = (_616 * _459) - _538;
    float _621 = (_616 * _460) - _539;
    float _622 = (_616 * _461) - _540;
    float _626 = abs(dot(vec3(_538, _539, _540), vec3(_459, _460, _461)));
    float _3436 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _628 = sqrt(_462);
    float _641 = exp2((_628 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_628 * 3.0));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _711 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _715 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _740 = _673 + _459;
        float _741 = _677 + _460;
        float _742 = _681 + _461;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _707;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _711;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _715;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_459, _460, _461), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3484 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_459, _460, _461), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3517 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_459, _460, _461), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3550 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1022 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1026 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1030 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1053 = _673 + _459;
        float _1054 = _677 + _460;
        float _1055 = _681 + _461;
        float _1065 = fma(_1055, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053)) - _1022;
        float _1066 = fma(_1055, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053)) - _1026;
        float _1067 = fma(_1055, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053)) - _1030;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1022 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1026 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[35u].z) + ((((((_1030 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_459, _460, _461), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3613 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_459, _460, _461), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3646 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_459, _460, _461), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3679 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _983;
        _1292 = _983;
        _1293 = _983;
        _1294 = _983;
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _995)) + _995;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _996)) + _996;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _997)) + _997;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _620 * 0.5;
    float _1360 = _621 * 0.5;
    float _1361 = _622 * 0.5;
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_982, _986, _989, _992));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_984, _987, _990, _993));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_985, _988, _991, _994));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1427 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1427 : min(cbModelParam._m0[25u].z, _1427));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_622, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620));
        float _1489 = fma(_622, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620));
        float _1492 = fma(_622, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1520 = frontier_phi_14_12_ladder;
        }
        float _1743;
        if (_1489 > 0.0)
        {
            _1743 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1743 = frontier_phi_23_19_ladder;
        }
        float _1989;
        if (_1492 > 0.0)
        {
            _1989 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1989 = frontier_phi_35_30_ladder;
        }
        float _1991 = isnan(_1743) ? _1520 : (isnan(_1520) ? _1743 : min(_1520, _1743));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1486) + _1475;
        float _1997 = (_1992 * _1489) + _1479;
        float _1998 = (_1992 * _1492) + _1483;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _1999;
        float _2003 = _1999 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 > _2003) || ((_1997 < _2001) || ((_1996 < _2001) || (_1996 > _2003))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1998, cbModelParam._m0[9u].z, fma(_1997, cbModelParam._m0[9u].y, _1996 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1998, cbModelParam._m0[10u].z, fma(_1997, cbModelParam._m0[10u].y, _1996 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1998, cbModelParam._m0[11u].z, fma(_1997, cbModelParam._m0[11u].y, _1996 * cbModelParam._m0[11u].x))), _1428);
            frontier_phi_13_35_ladder = _2122.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2122.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2122.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_13_35_ladder_2;
        _1510 = frontier_phi_13_35_ladder_1;
        _1512 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_620, _621, _622), _1428);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_622, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620));
        float _1584 = fma(_622, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620));
        float _1587 = fma(_622, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620));
        float _1748;
        if (_1581 > 0.0)
        {
            _1748 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1748 = frontier_phi_25_21_ladder;
        }
        float _2016;
        if (_1584 > 0.0)
        {
            _2016 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2016 = frontier_phi_37_32_ladder;
        }
        float _2221;
        if (_1587 > 0.0)
        {
            _2221 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2221 = frontier_phi_46_43_ladder;
        }
        float _2223 = isnan(_2016) ? _1748 : (isnan(_1748) ? _2016 : min(_1748, _2016));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1581) + _1570;
        float _2229 = (_2224 * _1584) + _1574;
        float _2230 = (_2224 * _1587) + _1578;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_22_46_ladder = _2429.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2429.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2429.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_22_46_ladder_2;
        _1608 = frontier_phi_22_46_ladder_1;
        _1610 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_620, _621, _622), _1517);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1622 = ((((1.0 - _641) * ((_628 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_641 * _628)) * _612;
    float _1623 = _1622 * ((cbModelParam._m0[1u].w * (_1606 - _1508)) + _1508);
    float _1624 = _1622 * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1625 = _1622 * ((cbModelParam._m0[1u].w * (_1610 - _1512)) + _1512);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    vec4 _1642 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_546, _547));
    float _1644 = _1642.w;
    float _1656 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1644);
    float _1657 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1644);
    float _1658 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1644);
    uvec4 _1662 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1664 = _1662.x * 14u;
    uint _1665 = _1664 + 13u;
    float _1672 = _612 + (-1.0);
    float _1677 = (cbLight._m0[_1665].x * _1672) + 1.0;
    float _1678 = (cbLight._m0[_1665].y * _1672) + 1.0;
    float _1679 = (cbLight._m0[_1665].z * _1672) + 1.0;
    float _1680 = (cbLight._m0[_1665].w * _1672) + 1.0;
    uint _1681 = _1664 + 5u;
    float _1687 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1691 = _1664 + 4u;
    float _1701 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1705 = _1664 | 1u;
    float _1716 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_459, _460, _461));
    float _1719 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_459, _460, _461));
    float _3815 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _3826 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1724 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1726 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.3183098733425140380859375;
    float _1733 = ((cbLight._m0[_1681].x * _1687) * _1726) + (((cbLight._m0[_1691].x * _1656) * _1701) * _1724);
    float _1734 = ((_1687 * cbLight._m0[_1681].y) * _1726) + (((cbLight._m0[_1691].y * _1657) * _1701) * _1724);
    float _1735 = ((_1687 * cbLight._m0[_1681].z) * _1726) + (((cbLight._m0[_1691].z * _1658) * _1701) * _1724);
    uvec4 _1740 = floatBitsToUint(cbLight._m0[_1664 + 12u]);
    bool _1742 = _1740.x == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1742)
    {
        _1753 = _1733;
        _1755 = _1734;
        _1757 = _1735;
    }
    else
    {
        uint _1761 = _1664 + 6u;
        float _1777 = (dot(vec3(cbLight._m0[_1664 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1778 = _1777 * _1777;
        float _3837 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1780 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1753 = (((cbLight._m0[_1761].x * 0.3183098733425140380859375) * _1779) * _1780) + _1733;
        _1755 = (((cbLight._m0[_1761].y * 0.3183098733425140380859375) * _1779) * _1780) + _1734;
        _1757 = (((cbLight._m0[_1761].z * 0.3183098733425140380859375) * _1779) * _1780) + _1735;
    }
    bool _1760 = _1740.y == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1760)
    {
        _1798 = _1753;
        _1800 = _1755;
        _1802 = _1757;
    }
    else
    {
        uint _1960 = _1664 + 7u;
        float _1976 = (dot(vec3(cbLight._m0[_1664 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1977 = _1976 * _1976;
        float _3853 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1979 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _1798 = (((cbLight._m0[_1960].x * 0.3183098733425140380859375) * _1978) * _1979) + _1753;
        _1800 = (((cbLight._m0[_1960].y * 0.3183098733425140380859375) * _1978) * _1979) + _1755;
        _1802 = (((cbLight._m0[_1960].z * 0.3183098733425140380859375) * _1978) * _1979) + _1757;
    }
    uint _1805 = _1664 + 8u;
    float _1818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _462) * 0.949999988079071044921875);
    float _1819 = _1818 * _1818;
    float _1820 = cbLight._m0[_1664].x + _538;
    float _1821 = cbLight._m0[_1664].y + _539;
    float _1822 = cbLight._m0[_1664].z + _540;
    float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
    float _1827 = _1826 * _1820;
    float _1828 = _1826 * _1821;
    float _1829 = _1826 * _1822;
    float _1830 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1664].xyz));
    float _3869 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _1834 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1835 = dot(vec3(_459, _460, _461), vec3(_1827, _1828, _1829));
    float _3891 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1827, _1828, _1829));
    float _3902 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1819 * _1819;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1858 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1859 = 1.0 - _1819;
    float _1870 = (0.5 / (((_1834 * ((_1833 * _1859) + _1819)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _1859) + _1819) * _1833))) * _1833;
    float _3913 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    uint _1886 = _1664 + 9u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _462) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1705].x + _538;
    float _1900 = cbLight._m0[_1705].y + _539;
    float _1901 = cbLight._m0[_1705].z + _540;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1705].xyz));
    float _3924 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1913 = dot(vec3(_459, _460, _461), vec3(_1906, _1907, _1908));
    float _3935 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1906, _1907, _1908));
    float _3946 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1898 * _1898;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1934 = (exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1935 = 1.0 - _1898;
    float _1945 = (0.5 / (((_1834 * ((_1912 * _1935) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _1935) + _1898) * _1912))) * _1912;
    float _3957 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    float _1957 = (((_1934 * cbLight._m0[_1886].x) * _1947) * _1687) + ((((cbLight._m0[_1805].x * _1656) * _1858) * _1872) * _1701);
    float _1958 = (((_1934 * cbLight._m0[_1886].y) * _1947) * _1687) + ((((cbLight._m0[_1805].y * _1657) * _1858) * _1872) * _1701);
    float _1959 = (((_1934 * cbLight._m0[_1886].z) * _1947) * _1687) + ((((cbLight._m0[_1805].z * _1658) * _1858) * _1872) * _1701);
    float _2021;
    float _2023;
    float _2025;
    if (_1742)
    {
        _2021 = _1957;
        _2023 = _1958;
        _2025 = _1959;
    }
    else
    {
        uint _2027 = _1664 + 2u;
        uint _2031 = _1664 + 10u;
        float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _462) * 0.949999988079071044921875);
        float _2046 = _2045 * _2045;
        float _2047 = cbLight._m0[_2027].x + _538;
        float _2048 = cbLight._m0[_2027].y + _539;
        float _2049 = cbLight._m0[_2027].z + _540;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2054 = _2053 * _2047;
        float _2055 = _2053 * _2048;
        float _2056 = _2053 * _2049;
        float _2057 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2027].xyz));
        float _3968 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2061 = dot(vec3(_459, _460, _461), vec3(_2054, _2055, _2056));
        float _3979 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2065 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2054, _2055, _2056));
        float _3990 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2069 = _2046 * _2046;
        float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
        float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2083 = 1.0 - _2046;
        float _2093 = (0.5 / (((_1834 * ((_2060 * _2083) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _2083) + _2046) * _2060))) * _2060;
        float _4001 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2021 = (((_2082 * cbLight._m0[_2031].x) * _2095) * _2096) + _1957;
        _2023 = (((_2082 * cbLight._m0[_2031].y) * _2095) * _2096) + _1958;
        _2025 = (((_2082 * cbLight._m0[_2031].z) * _2095) * _2096) + _1959;
    }
    float _2131;
    float _2133;
    float _2135;
    if (_1760)
    {
        _2131 = _2021;
        _2133 = _2023;
        _2135 = _2025;
    }
    else
    {
        uint _2142 = _1664 + 3u;
        uint _2146 = _1664 + 11u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _462) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _538;
        float _2163 = cbLight._m0[_2142].y + _539;
        float _2164 = cbLight._m0[_2142].z + _540;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2142].xyz));
        float _4017 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2176 = dot(vec3(_459, _460, _461), vec3(_2169, _2170, _2171));
        float _4028 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4039 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2198 = 1.0 - _2161;
        float _2208 = (0.5 / (((_1834 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _2198) + _2161) * _2175))) * _2175;
        float _4050 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _2131 = (((_2197 * cbLight._m0[_2146].x) * _2210) * _2211) + _2021;
        _2133 = (((_2197 * cbLight._m0[_2146].y) * _2210) * _2211) + _2023;
        _2135 = (((_2197 * cbLight._m0[_2146].z) * _2210) * _2211) + _2025;
    }
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    if (_1662.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _547) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _546) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
        }
        else
        {
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            uint _2585 = 0u;
            uint _2594;
            bool _2595;
            for (;;)
            {
                _2594 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                _2595 = _2594 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2595)
                {
                    frontier_phi_61_pred = _2579;
                    frontier_phi_61_pred_1 = _2584;
                    frontier_phi_61_pred_2 = _2583;
                    frontier_phi_61_pred_3 = _2582;
                    frontier_phi_61_pred_4 = _2581;
                    frontier_phi_61_pred_5 = _2580;
                }
                else
                {
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    uint _2709;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2584;
                    _2709 = _2594;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    for (;;)
                    {
                        uint _2713 = uint(findLSB(_2709)) + (_2585 << 5u);
                        uint _2710 = (_2709 + 4294967295u) & _2709;
                        uint _2715 = _2713 * 48u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2735 = (_2713 * 48u) + 4u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2754 = (_2713 * 48u) + 8u;
                        vec3 _2765 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x));
                        float _2769 = _2729.x - _2287;
                        float _2770 = _2729.y - _2288;
                        float _2771 = _2729.z - _2289;
                        float _2772 = dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771));
                        float _2775 = inversesqrt(_2772);
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2779 = dot(vec3(_568, _571, _574), vec3(_2776, _2777, _2778));
                        float _2784 = 1.0 - (_2772 * _2729.w);
                        float _4076 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2786 = sqrt(_2772) * _2748.w;
                        float _2789 = 1.39999997615814208984375 / (_2786 + 1.39999997615814208984375);
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2779) + _2790;
                        float _2796 = _2786 * _2786;
                        float _2800 = ((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2785) / ((_2796 * 0.699999988079071044921875) + 1.0);
                        float _2804 = (-0.0) - _2287;
                        float _2805 = (-0.0) - _2288;
                        float _2806 = (-0.0) - _2289;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2821 = exp2(log2(1.0 / ((_2796 * 3.5) + 5.0)) * 0.25);
                        float _2822 = 1.0 - _628;
                        float _2829 = sqrt(1.0 - ((1.0 - (_2822 * _2822)) * (1.0 - (_2821 * _2821))));
                        float _2830 = _2829 * _2829;
                        float _2831 = _2830 * _2830;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2842 = dot(vec3(_568, _571, _574), vec3(_2811, _2812, _2813));
                        float _4092 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2845 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2846 = dot(vec3(_568, _571, _574), vec3(_2838 * _2832, _2838 * _2833, _2838 * _2834));
                        float _4103 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2853 = ((_2849 * _2849) * (_2831 + (-1.0))) + 1.0;
                        float _2854 = _2789 * _2830;
                        float _2855 = _2854 * _2854;
                        float _2858 = ((1.0 - _2855) * _2779) + _2855;
                        float _4114 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2860 = 1.0 - _2830;
                        float _2870 = (0.5 / (((_2859 * ((_2845 * _2860) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _2860) + _2830) * _2845))) * _2859;
                        float _4125 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2881 = (((_2831 * 3.1415927410125732421875) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) / ((_2853 * _2853) * ((_2796 * 2.1991131305694580078125) + 3.141590118408203125))) * _2785;
                        _2638 = (_2800 * _2748.x) + _2706;
                        _2639 = (_2800 * _2748.y) + _2707;
                        _2640 = (_2800 * _2748.z) + _2708;
                        _2635 = (_2881 * _2765.x) + _2703;
                        _2636 = (_2881 * _2765.y) + _2704;
                        _2637 = (_2881 * _2765.z) + _2705;
                        if (_2710 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2710;
                        }
                    }
                    frontier_phi_61_pred = _2635;
                    frontier_phi_61_pred_1 = _2640;
                    frontier_phi_61_pred_2 = _2639;
                    frontier_phi_61_pred_3 = _2638;
                    frontier_phi_61_pred_4 = _2637;
                    frontier_phi_61_pred_5 = _2636;
                }
                _2435 = frontier_phi_61_pred;
                _2445 = frontier_phi_61_pred_1;
                _2443 = frontier_phi_61_pred_2;
                _2441 = frontier_phi_61_pred_3;
                _2439 = frontier_phi_61_pred_4;
                _2437 = frontier_phi_61_pred_5;
                uint _2586 = _2585 + 1u;
                if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2579 = _2435;
                    _2580 = _2437;
                    _2581 = _2439;
                    _2582 = _2441;
                    _2583 = _2443;
                    _2584 = _2445;
                    _2585 = _2586;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
        }
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.z;
        uint _2451 = (_2449 >> 8u) & 15u;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((4294967295u << _2451) & _2333) == 0u)
        {
            _2547 = _2434;
            _2549 = _2436;
            _2551 = _2438;
            _2553 = _2440;
            _2555 = _2442;
            _2557 = _2444;
        }
        else
        {
            float _2572 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2573 = _2572 * _2287;
            float _2574 = _2572 * _2288;
            float _2575 = _2572 * _2289;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2451 < ((_2449 >> 12u) & 15u))
            {
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2686 = _2434;
                float _2687 = _2436;
                float _2688 = _2438;
                float _2689 = _2440;
                float _2690 = _2442;
                float _2691 = _2444;
                uint _2692 = _2451;
                uint _2701;
                bool _2702;
                for (;;)
                {
                    _2701 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                    _2702 = _2701 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2702)
                    {
                        frontier_phi_67_pred = _2689;
                        frontier_phi_67_pred_1 = _2690;
                        frontier_phi_67_pred_2 = _2691;
                        frontier_phi_67_pred_3 = _2688;
                        frontier_phi_67_pred_4 = _2687;
                        frontier_phi_67_pred_5 = _2686;
                    }
                    else
                    {
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        float _2903 = _2690;
                        float _2904 = _2691;
                        uint _2905 = _2701;
                        uint _2906;
                        vec4 _2931;
                        float _2932;
                        vec4 _2947;
                        vec3 _2959;
                        vec4 _2975;
                        vec4 _2991;
                        float _3037;
                        bool _3038;
                        for (;;)
                        {
                            uint _2916 = ((_2692 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2905));
                            _2906 = (_2905 + 4294967295u) & _2905;
                            uint _2918 = _2916 * 40u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2932 = _2931.w;
                            uint _2934 = (_2916 * 40u) + 4u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2949 = (_2916 * 40u) + 8u;
                            _2959 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x));
                            uint _2962 = (_2916 * 40u) + 16u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2916 * 40u) + 20u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2993 = (_2916 * 40u) + 24u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3012 = (_2916 * 40u) + 28u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3037 = fma(_2289, _3025.z, fma(_2288, _3025.y, _3025.x * _2287)) + _3025.w;
                            _3038 = !((fma(_2289, _3006.z, fma(_2288, _3006.y, _3006.x * _2287)) + _3006.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3038)
                            {
                                float _3065 = _2931.x - _2287;
                                float _3066 = _2931.y - _2288;
                                float _3067 = _2931.z - _2289;
                                float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                                float _3071 = inversesqrt(_3068);
                                float _3072 = _3071 * _3065;
                                float _3073 = _3071 * _3066;
                                float _3074 = _3071 * _3067;
                                float _3078 = 1.0 - (_3068 / (_2932 * _2932));
                                float _4136 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3083 = sqrt(_3068) * _2947.w;
                                float _3085 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                                float _3086 = _3085 * _3085;
                                float _3089 = ((1.0 - _3086) * dot(vec3(_3072, _3073, _3074), vec3(_568, _571, _574))) + _3086;
                                float _3092 = _3083 * _3083;
                                float _3096 = (fma(_2289, _2975.z, fma(_2288, _2975.y, _2975.x * _2287)) + _2975.w) / _3037;
                                float _3097 = (fma(_2289, _2991.z, fma(_2288, _2991.y, _2991.x * _2287)) + _2991.w) / _3037;
                                float _3101 = 1.0 - dot(vec2(_3096, _3097), vec2(_3096, _3097));
                                float _4152 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3103 = _3102 * (((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3079) / ((_3092 * 0.699999988079071044921875) + 1.0));
                                float _3115 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                                float _3116 = 1.0 - _628;
                                float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                                float _3124 = _3123 * _3123;
                                float _3125 = _3124 * _3124;
                                float _3126 = _3072 - _2573;
                                float _3127 = _3073 - _2574;
                                float _3128 = _3074 - _2575;
                                float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                                float _3136 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2573, (-0.0) - _2574, (-0.0) - _2575));
                                float _4163 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3139 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3140 = dot(vec3(_568, _571, _574), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                                float _4174 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3143 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                                float _3148 = _3085 * _3124;
                                float _3149 = _3148 * _3148;
                                float _3155 = ((1.0 - _3149) * dot(vec3(_568, _571, _574), vec3(_3072, _3073, _3074))) + _3149;
                                float _4185 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3156 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3157 = 1.0 - _3124;
                                float _3167 = (0.5 / (((_3156 * ((_3139 * _3157) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3124) * _3139))) * _3156;
                                float _4196 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3177 = (_3102 * _3079) * (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_3147 * _3147) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3177 * _2959.x;
                                frontier_phi_73_pred_1 = _3177 * _2959.y;
                                frontier_phi_73_pred_2 = _3103 * _2947.z;
                                frontier_phi_73_pred_3 = _3103 * _2947.y;
                                frontier_phi_73_pred_4 = _3103 * _2947.x;
                                frontier_phi_73_pred_5 = _3177 * _2959.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3181 = frontier_phi_73_pred;
                            _3182 = frontier_phi_73_pred_1;
                            _3186 = frontier_phi_73_pred_2;
                            _3185 = frontier_phi_73_pred_3;
                            _3184 = frontier_phi_73_pred_4;
                            _3183 = frontier_phi_73_pred_5;
                            _2889 = _3184 + _2902;
                            _2890 = _3185 + _2903;
                            _2891 = _3186 + _2904;
                            _2886 = _3181 + _2899;
                            _2887 = _3182 + _2900;
                            _2888 = _3183 + _2901;
                            if (_2906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2906;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2889;
                        frontier_phi_67_pred_1 = _2890;
                        frontier_phi_67_pred_2 = _2891;
                        frontier_phi_67_pred_3 = _2888;
                        frontier_phi_67_pred_4 = _2887;
                        frontier_phi_67_pred_5 = _2886;
                    }
                    _2554 = frontier_phi_67_pred;
                    _2556 = frontier_phi_67_pred_1;
                    _2558 = frontier_phi_67_pred_2;
                    _2552 = frontier_phi_67_pred_3;
                    _2550 = frontier_phi_67_pred_4;
                    _2548 = frontier_phi_67_pred_5;
                    uint _2693 = _2692 + 1u;
                    if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2686 = _2548;
                        _2687 = _2550;
                        _2688 = _2552;
                        _2689 = _2554;
                        _2690 = _2556;
                        _2691 = _2558;
                        _2692 = _2693;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2556;
                frontier_phi_55_56_ladder_1 = _2558;
                frontier_phi_55_56_ladder_2 = _2554;
                frontier_phi_55_56_ladder_3 = _2552;
                frontier_phi_55_56_ladder_4 = _2550;
                frontier_phi_55_56_ladder_5 = _2548;
            }
            else
            {
                frontier_phi_55_56_ladder = _2442;
                frontier_phi_55_56_ladder_1 = _2444;
                frontier_phi_55_56_ladder_2 = _2440;
                frontier_phi_55_56_ladder_3 = _2438;
                frontier_phi_55_56_ladder_4 = _2436;
                frontier_phi_55_56_ladder_5 = _2434;
            }
            _2547 = frontier_phi_55_56_ladder_5;
            _2549 = frontier_phi_55_56_ladder_4;
            _2551 = frontier_phi_55_56_ladder_3;
            _2553 = frontier_phi_55_56_ladder_2;
            _2555 = frontier_phi_55_56_ladder;
            _2557 = frontier_phi_55_56_ladder_1;
        }
        float _2562 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
        _2346 = (_2562 * _2553) + _1798;
        _2348 = (_2562 * _2555) + _1800;
        _2350 = (_2562 * _2557) + _1802;
        _2352 = ((_2547 * 0.039999999105930328369140625) * _2562) + _2131;
        _2354 = ((_2549 * 0.039999999105930328369140625) * _2562) + _2133;
        _2356 = ((_2551 * 0.039999999105930328369140625) * _2562) + _2135;
    }
    else
    {
        _2346 = _1798;
        _2348 = _1800;
        _2350 = _1802;
        _2352 = _2131;
        _2354 = _2133;
        _2356 = _2135;
    }
    float _4212 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4223 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4234 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    uint _2376 = _220 + 6u;
    float _2384 = _546 / cbSceneParam._m0[86u].x;
    float _2385 = _547 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _480 : (isnan(_480) ? cbSceneParam._m0[77u].w : min(_480, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_480 > cbSceneParam._m0[78u].w)
    {
        float _2459 = isnan(_480) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _480 : min(cbSceneParam._m0[80u].w, _480));
        float _2460 = _2459 / _480;
        float _2471 = _2460 * _531;
        float _2472 = _532 * _2460;
        float _2473 = (-0.0) - _2472;
        float _2475 = _2460 * _533;
        float _2477 = (cbSceneParam._m0[77u].w * _2473) / _2459;
        float _2478 = _2477 + cbSceneParam._m0[79u].w;
        float _2479 = cbSceneParam._m0[79u].w - _2472;
        float _2485 = sqrt(((_2471 * _2471) + (_2472 * _2472)) + (_2475 * _2475));
        float _2488 = (1.0 - (cbSceneParam._m0[77u].w / _2459)) * _2485;
        float _2493 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2495 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2648;
        if (abs((_2473 - _2477) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2648 = ((((_2478 > 0.0) ? exp2(_2493 * _2478) : (2.0 - exp2(_2495 * _2478))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2488;
        }
        else
        {
            float _2608 = 1.0 / cbSceneParam._m0[80u].x;
            float _2609 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : max(_2478, _2479));
            float _2610 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : min(_2478, _2479));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            _2648 = ((abs(_2485 / _2473) * cbSceneParam._m0[80u].y) * ((((_2619 - _2620) * 2.0) - ((exp2(_2493 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)))) - exp2(_2493 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))))) * _2608)) - ((exp2(_2495 * _2619) - exp2(_2495 * _2620)) * _2608))) + (_2488 * cbSceneParam._m0[80u].z);
        }
        vec4 _2650 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2659 = exp2((_2648 * (-1.44269502162933349609375)) * (1.0 - _2650.w));
        float _2660 = log2(_2659);
        float _2676 = log2(_2404);
        _2497 = (exp2(_2676 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].x)) * _2650.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2499 = (exp2(_2676 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].y)) * _2650.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2501 = (exp2(_2676 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].z)) * _2650.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2503 = _2659 * _2404;
    }
    else
    {
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
        _2503 = _2404;
    }
    float _2515 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2516 = _2515 == 3.0;
    float _2517 = log2(_2503);
    float _2524 = exp2(_2517 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2346 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _612))) + ((_2352 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1417)) * cbPerFrame._m0[3u].x));
    float _2525 = exp2(_2517 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2348 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _612))) + ((_2354 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1417)) * cbPerFrame._m0[3u].x));
    float _2526 = exp2(_2517 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2350 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _612))) + ((_2356 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1417)) * cbPerFrame._m0[3u].x));
    float _2535 = (_2515 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2535 * (_2516 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.y = _2535 * (_2516 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
    SV_Target.z = _2535 * (_2516 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
    SV_Target.w = cbInstanceData._m0[_2376].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2376].w;
}


