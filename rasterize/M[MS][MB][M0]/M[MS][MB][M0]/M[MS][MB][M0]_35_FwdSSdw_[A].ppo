#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1252;
float _3637;
float _3638;
float _3639;
float _3640;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3649 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3660 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3671 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3682 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    float _419 = fma(_410, _238, fma(_416, _245, _415 * _231));
    float _422 = fma(_410, _239, fma(_416, _246, _415 * _232));
    float _425 = fma(_410, _240, fma(_416, _247, _415 * _233));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _475 = ((_467 - _468) * cbMtdParam._m0[24u].z) + _468;
    float _477 = (cbMtdParam._m0[19u].x + dot(vec4(_429 * _419, _429 * _422, _429 * _425, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_475 * cbMtdParam._m0[21u].z);
    float _3693 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _480 = (-0.0) - cbMtdParam._m0[24u].y;
    float _482 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
    float _490 = _478 - ((_478 * TEXCOORD_8.x) * _483);
    float _491 = _478 - ((_478 * TEXCOORD_8.y) * _483);
    float _492 = _478 - ((_478 * TEXCOORD_8.z) * _483);
    float _499 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _503 = ((isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : min(_499, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _511 = (_503 - (((_475 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _503))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3724 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _516 = ((_490 * (cbMtdParam._m0[17u].x - _349)) * _512) + _349;
    float _517 = ((_491 * (cbMtdParam._m0[17u].y - _350)) * _512) + _350;
    float _518 = ((_492 * (cbMtdParam._m0[17u].z - _351)) * _512) + _351;
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _560 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_532 - _533) * cbMtdParam._m0[24u].w) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3735 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _569 = ((((cbMtdParam._m0[10u].x - _516) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _561) + _516;
    float _570 = ((((cbMtdParam._m0[10u].y - _517) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _561) + _517;
    float _571 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _518)) * _561) + _518;
    float _576 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _590 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _597 = (_590.x * 2.0) + (-1.0);
    float _598 = (_590.y * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _3746 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _608 = (((_590.z - _576) * _490) * _512) + _576;
    float _611 = ((cbMtdParam._m0[23u].y - _608) * _561) + _608;
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3757 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _658 = (((cbMtdParam._m0[21u].x * _415) + ((_597 - _415) * _490)) * _512) + _415;
    float _659 = (((cbMtdParam._m0[21u].x * _416) + ((_598 - _416) * _491)) * _512) + _416;
    float _660 = (((sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _410) * _492) * _512) + _410;
    float _671 = (((_636 - _658) + (_658 * cbMtdParam._m0[22u].z)) * _561) + _658;
    float _672 = (((_637 - _659) + (_659 * cbMtdParam._m0[22u].z)) * _561) + _659;
    float _673 = ((sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _660) * _561) + _660;
    float _675 = cbMtdParam._m0[22u].x + _395.w;
    float _678 = fma(_673, _238, fma(_672, _245, _671 * _231));
    float _681 = fma(_673, _239, fma(_672, _246, _671 * _232));
    float _684 = fma(_673, _240, fma(_672, _247, _671 * _233));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _3768 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _692 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3790 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3801 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3812 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _760 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _750);
    float _761 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _750);
    float _762 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _750);
    float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
    float _767 = _760 * _766;
    float _768 = _761 * _766;
    float _769 = _762 * _766;
    vec4 _774 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _776 = _774.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _933 = sqrt(((_760 * _760) + (_761 * _761)) + (_762 * _762));
        float _939 = (cbMatDynParam._m0[5u].x * _933) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _944 = (cbMatDynParam._m0[5u].z * _933) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _940)) + _940) < ((_776 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_691, cbSceneParam._m0[5u].z, fma(_690, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _689));
    float _812 = fma(_691, cbSceneParam._m0[6u].z, fma(_690, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _689));
    float _815 = fma(_691, cbSceneParam._m0[7u].z, fma(_690, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _689));
    uint _828 = _269 + 9u;
    uint _829 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3845 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _853 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _849.x;
    float _854 = dot(vec3(_689, _690, _691), vec3(_767, _768, _769));
    float _857 = _854 * 2.0;
    float _861 = (_857 * _689) - _767;
    float _862 = (_857 * _690) - _768;
    float _863 = (_857 * _691) - _769;
    float _867 = abs(dot(vec3(_767, _768, _769), vec3(_689, _690, _691)));
    float _3878 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _869 = sqrt(_692);
    float _882 = exp2((_869 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_869 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _980 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _984 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _1009 = _914 + _689;
        float _1010 = _918 + _690;
        float _1011 = _922 + _691;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_689, _690, _691), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3926 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_689, _690, _691), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3959 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_689, _690, _691), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3992 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1294 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1298 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1302 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1325 = _914 + _689;
        float _1326 = _918 + _690;
        float _1327 = _922 + _691;
        float _1337 = fma(_1327, cbModelParam._m0[30u].z, fma(_1326, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1325)) - _1294;
        float _1338 = fma(_1327, cbModelParam._m0[31u].z, fma(_1326, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1325)) - _1298;
        float _1339 = fma(_1327, cbModelParam._m0[32u].z, fma(_1326, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1325)) - _1302;
        float _1343 = inversesqrt(dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339)));
        float _1356 = ((_1343 * _1337) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1294 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1343 * _1338) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1298 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1343 * _1339) / cbModelParam._m0[35u].z) + ((((((_1302 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1393 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1360.x + (-0.5));
        float _1395 = _1393 * (_1360.y + (-0.5));
        float _1396 = _1393 * (_1360.z + (-0.5));
        float _1403 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1367.x + (-0.5));
        float _1405 = _1403 * (_1367.y + (-0.5));
        float _1406 = _1403 * (_1367.z + (-0.5));
        float _1413 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1374.x + (-0.5));
        float _1415 = _1413 * (_1374.y + (-0.5));
        float _1416 = _1413 * (_1374.z + (-0.5));
        float _1423 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1381.x + (-0.5));
        float _1425 = _1423 * (_1381.y + (-0.5));
        float _1426 = _1423 * (_1381.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_689, _690, _691), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4055 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1457 + 1.0))) + _1462) * _1427;
        float _1472 = _1395 * 0.5;
        float _1473 = _1405 * 0.5;
        float _1474 = _1415 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_689, _690, _691), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4088 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1499 + 1.0))) + _1504) * _1428;
        float _1514 = _1396 * 0.5;
        float _1515 = _1406 * 0.5;
        float _1516 = _1416 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_689, _690, _691), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4121 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1541 + 1.0))) + _1546) * _1429;
        _1563 = _1396;
        _1564 = _1395;
        _1565 = _1394;
        _1566 = _1406;
        _1567 = _1405;
        _1568 = _1404;
        _1569 = _1416;
        _1570 = _1415;
        _1571 = _1414;
        _1572 = _1429;
        _1573 = _1428;
        _1574 = _1427;
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = _1252;
        _1574 = _1252;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1264)) + _1264;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1610 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1587));
    float _1631 = _861 * 0.5;
    float _1632 = _862 * 0.5;
    float _1633 = _863 * 0.5;
    float _1634 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1637 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1640 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1674;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1647 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1651 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1655 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1662 = dot(vec4(cbModelParam._m0[39u]), vec4(_1631, _1632, _1633, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1685;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1676 = dot(vec4(cbModelParam._m0[40u]), vec4(_1631, _1632, _1633, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1689 = (_1685 * cbModelParam._m0[1u].x) + (_1674 * (1.0 - cbModelParam._m0[1u].x));
    float _1699 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1699 : min(cbModelParam._m0[25u].z, _1699));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_863, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861));
        float _1762 = fma(_863, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861));
        float _1765 = fma(_863, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861));
        float _1793;
        if (_1759 > 0.0)
        {
            _1793 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1793 = frontier_phi_17_15_ladder;
        }
        float _2017;
        if (_1762 > 0.0)
        {
            _2017 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2017 = frontier_phi_26_22_ladder;
        }
        float _2263;
        if (_1765 > 0.0)
        {
            _2263 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2263 = frontier_phi_38_33_ladder;
        }
        float _2265 = isnan(_2017) ? _1793 : (isnan(_1793) ? _2017 : min(_1793, _2017));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1759) + _1748;
        float _2271 = (_2266 * _1762) + _1752;
        float _2272 = (_2266 * _1765) + _1756;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1700);
            frontier_phi_16_38_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_16_38_ladder_2;
        _1783 = frontier_phi_16_38_ladder_1;
        _1785 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_861, _862, _863), _1700);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1789 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1789 : min(cbModelParam._m0[25u].w, _1789));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_863, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861));
        float _1858 = fma(_863, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861));
        float _1861 = fma(_863, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861));
        float _2022;
        if (_1855 > 0.0)
        {
            _2022 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2022 = frontier_phi_28_24_ladder;
        }
        float _2290;
        if (_1858 > 0.0)
        {
            _2290 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2290 = frontier_phi_40_35_ladder;
        }
        float _2495;
        if (_1861 > 0.0)
        {
            _2495 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2495 = frontier_phi_49_46_ladder;
        }
        float _2497 = isnan(_2290) ? _2022 : (isnan(_2022) ? _2290 : min(_2022, _2290));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1855) + _1844;
        float _2503 = (_2498 * _1858) + _1848;
        float _2504 = (_2498 * _1861) + _1852;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2505;
        float _2508 = _2505 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2504 > _2508) || ((_2504 < _2506) || ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 < _2506) || (_2502 > _2508))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2504, cbModelParam._m0[17u].z, fma(_2503, cbModelParam._m0[17u].y, _2502 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2504, cbModelParam._m0[18u].z, fma(_2503, cbModelParam._m0[18u].y, _2502 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2504, cbModelParam._m0[19u].z, fma(_2503, cbModelParam._m0[19u].y, _2502 * cbModelParam._m0[19u].x))), _1790);
            frontier_phi_25_49_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_25_49_ladder_2;
        _1882 = frontier_phi_25_49_ladder_1;
        _1884 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_861, _862, _863), _1790);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _882) * ((_869 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _869)) * _853;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_788, _789));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _853 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1975 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1979 = _1938 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_689, _690, _691));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_689, _690, _691));
    float _4257 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4268 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1955].x * _1961) * _2000) + (((cbLight._m0[_1965].x * _1930) * _1975) * _1998);
    float _2008 = ((_1961 * cbLight._m0[_1955].y) * _2000) + (((cbLight._m0[_1965].y * _1931) * _1975) * _1998);
    float _2009 = ((_1961 * cbLight._m0[_1955].z) * _2000) + (((cbLight._m0[_1965].z * _1932) * _1975) * _1998);
    uvec4 _2014 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2016 = _2014.x == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_2016)
    {
        _2027 = _2007;
        _2029 = _2008;
        _2031 = _2009;
    }
    else
    {
        uint _2035 = _1938 + 6u;
        float _2051 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4279 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2054 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2027 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _2007;
        _2029 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _2008;
        _2031 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _2009;
    }
    bool _2034 = _2014.y == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2034)
    {
        _2072 = _2027;
        _2074 = _2029;
        _2076 = _2031;
    }
    else
    {
        uint _2234 = _1938 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4295 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2253 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2072 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2027;
        _2074 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2029;
        _2076 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2031;
    }
    uint _2079 = _1938 + 8u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _692) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1938].x + _767;
    float _2095 = cbLight._m0[_1938].y + _768;
    float _2096 = cbLight._m0[_1938].z + _769;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_1938].xyz));
    float _4311 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2108 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2109 = dot(vec3(_689, _690, _691), vec3(_2101, _2102, _2103));
    float _4333 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2101, _2102, _2103));
    float _4344 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2093 * _2093;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2108 * ((_2107 * _2133) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2133) + _2093) * _2107))) * _2107;
    float _4355 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    uint _2160 = _1938 + 9u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _692) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1979].x + _767;
    float _2174 = cbLight._m0[_1979].y + _768;
    float _2175 = cbLight._m0[_1979].z + _769;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_1979].xyz));
    float _4366 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2187 = dot(vec3(_689, _690, _691), vec3(_2180, _2181, _2182));
    float _4377 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2180, _2181, _2182));
    float _4388 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2172 * _2172;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2209 = 1.0 - _2172;
    float _2219 = (0.5 / (((_2108 * ((_2186 * _2209) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2209) + _2172) * _2186))) * _2186;
    float _4399 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    float _2231 = (((_2208 * cbLight._m0[_2160].x) * _2221) * _1961) + ((((cbLight._m0[_2079].x * _1930) * _2132) * _2146) * _1975);
    float _2232 = (((_2208 * cbLight._m0[_2160].y) * _2221) * _1961) + ((((cbLight._m0[_2079].y * _1931) * _2132) * _2146) * _1975);
    float _2233 = (((_2208 * cbLight._m0[_2160].z) * _2221) * _1961) + ((((cbLight._m0[_2079].z * _1932) * _2132) * _2146) * _1975);
    float _2295;
    float _2297;
    float _2299;
    if (_2016)
    {
        _2295 = _2231;
        _2297 = _2232;
        _2299 = _2233;
    }
    else
    {
        uint _2301 = _1938 + 2u;
        uint _2305 = _1938 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _692) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _767;
        float _2322 = cbLight._m0[_2301].y + _768;
        float _2323 = cbLight._m0[_2301].z + _769;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2301].xyz));
        float _4410 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2335 = dot(vec3(_689, _690, _691), vec3(_2328, _2329, _2330));
        float _4421 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4432 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2356 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2357 = 1.0 - _2320;
        float _2367 = (0.5 / (((_2108 * ((_2334 * _2357) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2357) + _2320) * _2334))) * _2334;
        float _4443 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2369 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2370 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2295 = (((_2356 * cbLight._m0[_2305].x) * _2369) * _2370) + _2231;
        _2297 = (((_2356 * cbLight._m0[_2305].y) * _2369) * _2370) + _2232;
        _2299 = (((_2356 * cbLight._m0[_2305].z) * _2369) * _2370) + _2233;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2034)
    {
        _2405 = _2295;
        _2407 = _2297;
        _2409 = _2299;
    }
    else
    {
        uint _2416 = _1938 + 3u;
        uint _2420 = _1938 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _692) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _767;
        float _2437 = cbLight._m0[_2416].y + _768;
        float _2438 = cbLight._m0[_2416].z + _769;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2416].xyz));
        float _4459 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2450 = dot(vec3(_689, _690, _691), vec3(_2443, _2444, _2445));
        float _4470 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4481 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2472 = 1.0 - _2435;
        float _2482 = (0.5 / (((_2108 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2472) + _2435) * _2449))) * _2449;
        float _4492 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2405 = (((_2471 * cbLight._m0[_2420].x) * _2484) * _2485) + _2295;
        _2407 = (((_2471 * cbLight._m0[_2420].y) * _2484) * _2485) + _2297;
        _2409 = (((_2471 * cbLight._m0[_2420].z) * _2484) * _2485) + _2299;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1936.y == 0u)
    {
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2560;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2560;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2560;
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.x;
        uint _2587 = uint((float(_2575.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2576))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2576)));
        float _2597 = (log2(_2563 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        uint _2601 = uint(isnan(14.0) ? _2598 : (isnan(_2598) ? 14.0 : min(_2598, 14.0)));
        uvec4 _2606 = texelFetch(g_lightClusterGridBuffer, int(((_2601 << 2u) + (_2587 << 6u)) >> 2u));
        uint _2607 = _2606.x;
        uint _2608 = _2575.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2608 >> 4u) & 15u)) + 4294967295u) & _2607) == 0u) || ((_2608 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2876)
                {
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _2561;
                        float _3072 = _3031.y - _2562;
                        float _3073 = _3031.z - _2563;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_809, _812, _815), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4518 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _2561;
                        float _3107 = (-0.0) - _2562;
                        float _3108 = (-0.0) - _2563;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3123 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3124 = 1.0 - _869;
                        float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                        float _3132 = _3131 * _3131;
                        float _3133 = _3132 * _3132;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3144 = dot(vec3(_809, _812, _815), vec3(_3113, _3114, _3115));
                        float _4534 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3148 = dot(vec3(_809, _812, _815), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                        float _4545 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                        float _3156 = _3091 * _3132;
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3081) + _3157;
                        float _4556 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3162 = 1.0 - _3132;
                        float _3172 = (0.5 / (((_3161 * ((_3147 * _3162) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3132) * _3147))) * _3161;
                        float _4567 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3183 = (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3155 * _3155) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3183 * _3067.x) + _3005;
                        _2933 = (_3183 * _3067.y) + _3006;
                        _2934 = (_3183 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                _2709 = frontier_phi_66_pred;
                _2719 = frontier_phi_66_pred_1;
                _2717 = frontier_phi_66_pred_2;
                _2715 = frontier_phi_66_pred_3;
                _2713 = frontier_phi_66_pred_4;
                _2711 = frontier_phi_66_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2709;
                    _2861 = _2711;
                    _2862 = _2713;
                    _2863 = _2715;
                    _2864 = _2717;
                    _2865 = _2719;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2725) & _2607) == 0u)
        {
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
            float _2854 = _2853 * _2561;
            float _2855 = _2853 * _2562;
            float _2856 = _2853 * _2563;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2708;
                float _2989 = _2710;
                float _2990 = _2712;
                float _2991 = _2714;
                float _2992 = _2716;
                float _2993 = _2718;
                uint _2994 = _2725;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3004)
                    {
                        frontier_phi_77_pred = _2993;
                        frontier_phi_77_pred_1 = _2992;
                        frontier_phi_77_pred_2 = _2991;
                        frontier_phi_77_pred_3 = _2990;
                        frontier_phi_77_pred_4 = _2989;
                        frontier_phi_77_pred_5 = _2988;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        uint _3216 = _3003;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3285;
                        vec4 _3300;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3227 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3272 = (_3227 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3227 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3227 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3227 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_2563, _3334.z, fma(_2562, _3334.y, _3334.x * _2561)) + _3334.w;
                            _3347 = !((fma(_2563, _3315.z, fma(_2562, _3315.y, _3315.x * _2561)) + _3315.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3242.x - _2561;
                                float _3375 = _3242.y - _2562;
                                float _3376 = _3242.z - _2563;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3243 * _3243));
                                float _4578 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3392 = sqrt(_3377) * _3258.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_809, _812, _815))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_2563, _3285.z, fma(_2562, _3285.y, _3285.x * _2561)) + _3285.w) / _3346;
                                float _3406 = (fma(_2563, _3300.z, fma(_2562, _3300.y, _3300.x * _2561)) + _3300.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4594 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _869;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2854;
                                float _3436 = _3382 - _2855;
                                float _3437 = _3383 - _2856;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4605 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3449 = dot(vec3(_809, _812, _815), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4616 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_809, _812, _815), vec3(_3381, _3382, _3383))) + _3458;
                                float _4627 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4638 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3412 * _3258.y;
                                frontier_phi_83_pred_1 = _3412 * _3258.x;
                                frontier_phi_83_pred_2 = _3486 * _3270.z;
                                frontier_phi_83_pred_3 = _3486 * _3270.y;
                                frontier_phi_83_pred_4 = _3486 * _3270.x;
                                frontier_phi_83_pred_5 = _3412 * _3258.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_83_pred;
                            _3493 = frontier_phi_83_pred_1;
                            _3492 = frontier_phi_83_pred_2;
                            _3491 = frontier_phi_83_pred_3;
                            _3490 = frontier_phi_83_pred_4;
                            _3495 = frontier_phi_83_pred_5;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    _2839 = frontier_phi_77_pred;
                    _2837 = frontier_phi_77_pred_1;
                    _2835 = frontier_phi_77_pred_2;
                    _2833 = frontier_phi_77_pred_3;
                    _2831 = frontier_phi_77_pred_4;
                    _2829 = frontier_phi_77_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2833;
                frontier_phi_58_59_ladder_1 = _2839;
                frontier_phi_58_59_ladder_2 = _2837;
                frontier_phi_58_59_ladder_3 = _2835;
                frontier_phi_58_59_ladder_4 = _2831;
                frontier_phi_58_59_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_58_59_ladder = _2712;
                frontier_phi_58_59_ladder_1 = _2718;
                frontier_phi_58_59_ladder_2 = _2716;
                frontier_phi_58_59_ladder_3 = _2714;
                frontier_phi_58_59_ladder_4 = _2710;
                frontier_phi_58_59_ladder_5 = _2708;
            }
            _2828 = frontier_phi_58_59_ladder_5;
            _2830 = frontier_phi_58_59_ladder_4;
            _2832 = frontier_phi_58_59_ladder;
            _2834 = frontier_phi_58_59_ladder_3;
            _2836 = frontier_phi_58_59_ladder_2;
            _2838 = frontier_phi_58_59_ladder_1;
        }
        float _2843 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
        _2620 = (_2843 * _2834) + _2072;
        _2622 = (_2843 * _2836) + _2074;
        _2624 = (_2843 * _2838) + _2076;
        _2626 = ((_2828 * 0.039999999105930328369140625) * _2843) + _2405;
        _2628 = ((_2830 * 0.039999999105930328369140625) * _2843) + _2407;
        _2630 = ((_2832 * 0.039999999105930328369140625) * _2843) + _2409;
    }
    else
    {
        _2620 = _2072;
        _2622 = _2074;
        _2624 = _2076;
        _2626 = _2405;
        _2628 = _2407;
        _2630 = _2409;
    }
    float _4654 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4665 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4676 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2647 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2620 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _853))) + ((_2626 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1689)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2622 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _853))) + ((_2628 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1689)) * cbPerFrame._m0[3u].x);
    float _2649 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2624 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _853))) + ((_2630 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1689)) * cbPerFrame._m0[3u].x);
    uint _2650 = _269 + 6u;
    float _2658 = _788 / cbSceneParam._m0[86u].x;
    float _2659 = _789 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2734 = _2733 / _710;
        float _2745 = _2734 * _760;
        float _2746 = _761 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _762;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2678);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2776 = _2956 * _2678;
    }
    else
    {
        _2770 = _2675;
        _2772 = _2676;
        _2774 = _2677;
        _2776 = _2678;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2647;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2648;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2649;
        float _2806 = _776 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _828 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + 1.0) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3188;
    if (_2983)
    {
        discard_state = true;
        _3188 = 0.0;
    }
    else
    {
        _3188 = cbInstanceData._m0[_2650].w;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3188;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
    discard_exit();
}


