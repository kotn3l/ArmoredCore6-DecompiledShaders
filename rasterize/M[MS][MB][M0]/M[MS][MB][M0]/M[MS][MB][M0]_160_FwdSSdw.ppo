#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1306;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3633 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _388) + _484;
    float _496 = ((((_463.x - _482) * _388) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _388) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3644 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))));
    float _506 = _496 + ((((_436.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _507 = _497 + ((((_436.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _510 = fma(_503, _241, fma(_507, _248, _506 * _234));
    float _513 = fma(_503, _242, fma(_507, _249, _506 * _235));
    float _516 = fma(_503, _243, fma(_507, _250, _506 * _236));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _571 = ((_566 - _567) * cbMtdParam._m0[24u].z) + _567;
    float _573 = (cbMtdParam._m0[19u].x + dot(vec4(_520 * _510, _520 * _513, _520 * _516, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_571 * cbMtdParam._m0[21u].z);
    float _3655 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _576 = (-0.0) - cbMtdParam._m0[24u].y;
    float _578 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
    float _586 = _574 - ((_574 * TEXCOORD_8.x) * _579);
    float _587 = _574 - ((_574 * TEXCOORD_8.y) * _579);
    float _588 = _574 - ((_574 * TEXCOORD_8.z) * _579);
    float _595 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _599 = ((isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : min(_595, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _607 = (_599 - (((_571 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _599))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3686 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _612 = ((_586 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) * _608) + _395;
    float _613 = ((_587 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) * _608) + _396;
    float _614 = ((_588 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) * _608) + _397;
    vec4 _626 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _628 = _626.x;
    float _629 = 1.0 - _628;
    float _656 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_628 - _629) * cbMtdParam._m0[24u].w) + _629) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3697 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _665 = ((((cbMtdParam._m0[10u].x - _612) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _657) + _612;
    float _666 = ((((cbMtdParam._m0[10u].y - _613) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _657) + _613;
    float _667 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _614)) * _657) + _614;
    float _672 = (((_436.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    vec4 _686 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3708 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _704 = (((_686.z - _672) * _586) * _608) + _672;
    float _707 = ((cbMtdParam._m0[23u].y - _704) * _657) + _704;
    vec4 _726 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _732 = (_726.x * 2.0) + (-1.0);
    float _733 = (_726.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3719 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _754 = (((cbMtdParam._m0[21u].x * _506) + ((_693 - _506) * _586)) * _608) + _506;
    float _755 = (((cbMtdParam._m0[21u].x * _507) + ((_694 - _507) * _587)) * _608) + _507;
    float _756 = (((sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) - _503) * _588) * _608) + _503;
    float _767 = (((_732 - _754) + (_754 * cbMtdParam._m0[22u].z)) * _657) + _754;
    float _768 = (((_733 - _755) + (_755 * cbMtdParam._m0[22u].z)) * _657) + _755;
    float _769 = ((sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) - _756) * _657) + _756;
    float _771 = cbMtdParam._m0[22u].x + _536.w;
    float _774 = fma(_769, _241, fma(_768, _248, _767 * _234));
    float _777 = fma(_769, _242, fma(_768, _249, _767 * _235));
    float _780 = fma(_769, _243, fma(_768, _250, _767 * _236));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3730 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _788 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3752 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3763 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3774 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _806 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _857 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _847);
    float _858 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _847);
    float _859 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _847);
    float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
    float _864 = _857 * _863;
    float _865 = _858 * _863;
    float _866 = _859 * _863;
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _891 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _894 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _897 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _911 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _917 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_911].x;
    float _918 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_911].y;
    float _919 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_911].z;
    float _3785 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _935 = ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_785, _786, _787), vec3(_864, _865, _866));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _785) - _864;
    float _944 = (_939 * _786) - _865;
    float _945 = (_939 * _787) - _866;
    float _949 = abs(dot(vec3(_864, _865, _866), vec3(_785, _786, _787)));
    float _3818 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_788);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1034 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1038 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1063 = _996 + _785;
        float _1064 = _1000 + _786;
        float _1065 = _1004 + _787;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_785, _786, _787), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3866 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_785, _786, _787), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3899 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_785, _786, _787), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3932 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1349 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1353 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1376 = _996 + _785;
        float _1377 = _1000 + _786;
        float _1378 = _1004 + _787;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_785, _786, _787), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3995 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_785, _786, _787), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4028 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_785, _786, _787), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4061 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1306;
        _1615 = _1306;
        _1616 = _1306;
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1319)) + _1319;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _943 * 0.5;
    float _1683 = _944 * 0.5;
    float _1684 = _945 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1812 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1815 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1843 = frontier_phi_14_12_ladder;
        }
        float _2064;
        if (_1812 > 0.0)
        {
            _2064 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2064 = frontier_phi_23_19_ladder;
        }
        float _2310;
        if (_1815 > 0.0)
        {
            _2310 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2310 = frontier_phi_35_30_ladder;
        }
        float _2312 = isnan(_2064) ? _1843 : (isnan(_1843) ? _2064 : min(_1843, _2064));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1809) + _1798;
        float _2318 = (_2313 * _1812) + _1802;
        float _2319 = (_2313 * _1815) + _1806;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2320;
        float _2324 = _2320 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 > _2324) || ((_2318 < _2322) || ((_2317 < _2322) || (_2317 > _2324))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_13_35_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_13_35_ladder_2;
        _1833 = frontier_phi_13_35_ladder_1;
        _1835 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1907 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1910 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2069;
        if (_1904 > 0.0)
        {
            _2069 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2069 = frontier_phi_25_21_ladder;
        }
        float _2337;
        if (_1907 > 0.0)
        {
            _2337 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2337 = frontier_phi_37_32_ladder;
        }
        float _2542;
        if (_1910 > 0.0)
        {
            _2542 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2542 = frontier_phi_46_43_ladder;
        }
        float _2544 = isnan(_2337) ? _2069 : (isnan(_2069) ? _2337 : min(_2069, _2337));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1904) + _1893;
        float _2550 = (_2545 * _1907) + _1897;
        float _2551 = (_2545 * _1910) + _1901;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_22_46_ladder = _2750.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2750.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2750.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_22_46_ladder_2;
        _1931 = frontier_phi_22_46_ladder_1;
        _1933 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1840);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1945 = ((((1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_964 * _951)) * _935;
    float _1946 = _1945 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1947 = _1945 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1948 = _1945 * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1951 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    vec4 _1965 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_872, _873));
    float _1967 = _1965.w;
    float _1979 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1967);
    float _1980 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1967);
    float _1981 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1967);
    uvec4 _1985 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1987 = _1985.x * 14u;
    uint _1988 = _1987 + 13u;
    float _1995 = _935 + (-1.0);
    float _2000 = (cbLight._m0[_1988].x * _1995) + 1.0;
    float _2001 = (cbLight._m0[_1988].y * _1995) + 1.0;
    float _2002 = (cbLight._m0[_1988].z * _1995) + 1.0;
    float _2003 = (cbLight._m0[_1988].w * _1995) + 1.0;
    uint _2004 = _1987 + 5u;
    float _2010 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2014 = _1987 + 4u;
    float _2023 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2027 = _1987 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_785, _786, _787));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_785, _786, _787));
    float _4197 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4208 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2004].x * _2010) * _2048) + (((cbLight._m0[_2014].x * _1979) * _2023) * _2046);
    float _2056 = ((_2010 * cbLight._m0[_2004].y) * _2048) + (((cbLight._m0[_2014].y * _1980) * _2023) * _2046);
    float _2057 = ((_2010 * cbLight._m0[_2004].z) * _2048) + (((cbLight._m0[_2014].z * _1981) * _2023) * _2046);
    uvec4 _2061 = floatBitsToUint(cbLight._m0[_1987 + 12u]);
    bool _2063 = _2061.x == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2063)
    {
        _2074 = _2055;
        _2076 = _2056;
        _2078 = _2057;
    }
    else
    {
        uint _2082 = _1987 + 6u;
        float _2098 = (dot(vec3(cbLight._m0[_1987 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4219 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2101 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2074 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _2055;
        _2076 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _2056;
        _2078 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _2057;
    }
    bool _2081 = _2061.y == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2081)
    {
        _2119 = _2074;
        _2121 = _2076;
        _2123 = _2078;
    }
    else
    {
        uint _2281 = _1987 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1987 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4235 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2300 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2119 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2074;
        _2121 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2076;
        _2123 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2078;
    }
    uint _2126 = _1987 + 8u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _788) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1987].x + _864;
    float _2142 = cbLight._m0[_1987].y + _865;
    float _2143 = cbLight._m0[_1987].z + _866;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_1987].xyz));
    float _4251 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2155 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2156 = dot(vec3(_785, _786, _787), vec3(_2148, _2149, _2150));
    float _4273 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2148, _2149, _2150));
    float _4284 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2140 * _2140;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2180 = 1.0 - _2140;
    float _2191 = (0.5 / (((_2155 * ((_2154 * _2180) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2180) + _2140) * _2154))) * _2154;
    float _4295 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    uint _2207 = _1987 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _788) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2027].x + _864;
    float _2221 = cbLight._m0[_2027].y + _865;
    float _2222 = cbLight._m0[_2027].z + _866;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2027].xyz));
    float _4306 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2234 = dot(vec3(_785, _786, _787), vec3(_2227, _2228, _2229));
    float _4317 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2227, _2228, _2229));
    float _4328 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2256 = 1.0 - _2219;
    float _2266 = (0.5 / (((_2155 * ((_2233 * _2256) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2256) + _2219) * _2233))) * _2233;
    float _4339 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2278 = (((_2255 * cbLight._m0[_2207].x) * _2268) * _2010) + ((((cbLight._m0[_2126].x * _1979) * _2179) * _2193) * _2023);
    float _2279 = (((_2255 * cbLight._m0[_2207].y) * _2268) * _2010) + ((((cbLight._m0[_2126].y * _1980) * _2179) * _2193) * _2023);
    float _2280 = (((_2255 * cbLight._m0[_2207].z) * _2268) * _2010) + ((((cbLight._m0[_2126].z * _1981) * _2179) * _2193) * _2023);
    float _2342;
    float _2344;
    float _2346;
    if (_2063)
    {
        _2342 = _2278;
        _2344 = _2279;
        _2346 = _2280;
    }
    else
    {
        uint _2348 = _1987 + 2u;
        uint _2352 = _1987 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _788) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _864;
        float _2369 = cbLight._m0[_2348].y + _865;
        float _2370 = cbLight._m0[_2348].z + _866;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2348].xyz));
        float _4350 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2382 = dot(vec3(_785, _786, _787), vec3(_2375, _2376, _2377));
        float _4361 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4372 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2404 = 1.0 - _2367;
        float _2414 = (0.5 / (((_2155 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2404) + _2367) * _2381))) * _2381;
        float _4383 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2342 = (((_2403 * cbLight._m0[_2352].x) * _2416) * _2417) + _2278;
        _2344 = (((_2403 * cbLight._m0[_2352].y) * _2416) * _2417) + _2279;
        _2346 = (((_2403 * cbLight._m0[_2352].z) * _2416) * _2417) + _2280;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2081)
    {
        _2452 = _2342;
        _2454 = _2344;
        _2456 = _2346;
    }
    else
    {
        uint _2463 = _1987 + 3u;
        uint _2467 = _1987 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _788) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _864;
        float _2484 = cbLight._m0[_2463].y + _865;
        float _2485 = cbLight._m0[_2463].z + _866;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2463].xyz));
        float _4399 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2497 = dot(vec3(_785, _786, _787), vec3(_2490, _2491, _2492));
        float _4410 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4421 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2155 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2519) + _2482) * _2496))) * _2496;
        float _4432 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2452 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2342;
        _2454 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2344;
        _2456 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2346;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1985.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            uint _2905 = 0u;
            uint _2914;
            bool _2915;
            for (;;)
            {
                _2914 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                _2915 = _2914 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2915)
                {
                    frontier_phi_61_pred = _2899;
                    frontier_phi_61_pred_1 = _2904;
                    frontier_phi_61_pred_2 = _2903;
                    frontier_phi_61_pred_3 = _2902;
                    frontier_phi_61_pred_4 = _2901;
                    frontier_phi_61_pred_5 = _2900;
                }
                else
                {
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    uint _3029;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2914;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3033 = uint(findLSB(_3029)) + (_2905 << 5u);
                        uint _3030 = (_3029 + 4294967295u) & _3029;
                        uint _3035 = _3033 * 48u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3055 = (_3033 * 48u) + 4u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3074 = (_3033 * 48u) + 8u;
                        vec3 _3085 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x));
                        float _3089 = _3049.x - _2608;
                        float _3090 = _3049.y - _2609;
                        float _3091 = _3049.z - _2610;
                        float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                        float _3095 = inversesqrt(_3092);
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3099 = dot(vec3(_891, _894, _897), vec3(_3096, _3097, _3098));
                        float _3104 = 1.0 - (_3092 * _3049.w);
                        float _4458 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3106 = sqrt(_3092) * _3068.w;
                        float _3109 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3099) + _3110;
                        float _3116 = _3106 * _3106;
                        float _3120 = ((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3105) / ((_3116 * 0.699999988079071044921875) + 1.0);
                        float _3124 = (-0.0) - _2608;
                        float _3125 = (-0.0) - _2609;
                        float _3126 = (-0.0) - _2610;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3141 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _951;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3131 + _3096;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_891, _894, _897), vec3(_3131, _3132, _3133));
                        float _4474 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3166 = dot(vec3(_891, _894, _897), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4485 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3109 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3099) + _3175;
                        float _4496 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4507 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3173 * _3173) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125))) * _3105;
                        _2958 = (_3120 * _3068.x) + _3026;
                        _2959 = (_3120 * _3068.y) + _3027;
                        _2960 = (_3120 * _3068.z) + _3028;
                        _2955 = (_3201 * _3085.x) + _3023;
                        _2956 = (_3201 * _3085.y) + _3024;
                        _2957 = (_3201 * _3085.z) + _3025;
                        if (_3030 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _3030;
                        }
                    }
                    frontier_phi_61_pred = _2955;
                    frontier_phi_61_pred_1 = _2960;
                    frontier_phi_61_pred_2 = _2959;
                    frontier_phi_61_pred_3 = _2958;
                    frontier_phi_61_pred_4 = _2957;
                    frontier_phi_61_pred_5 = _2956;
                }
                _2756 = frontier_phi_61_pred;
                _2766 = frontier_phi_61_pred_1;
                _2764 = frontier_phi_61_pred_2;
                _2762 = frontier_phi_61_pred_3;
                _2760 = frontier_phi_61_pred_4;
                _2758 = frontier_phi_61_pred_5;
                uint _2906 = _2905 + 1u;
                if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2899 = _2756;
                    _2900 = _2758;
                    _2901 = _2760;
                    _2902 = _2762;
                    _2903 = _2764;
                    _2904 = _2766;
                    _2905 = _2906;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((4294967295u << _2772) & _2654) == 0u)
        {
            _2867 = _2755;
            _2869 = _2757;
            _2871 = _2759;
            _2873 = _2761;
            _2875 = _2763;
            _2877 = _2765;
        }
        else
        {
            float _2892 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2893 = _2892 * _2608;
            float _2894 = _2892 * _2609;
            float _2895 = _2892 * _2610;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _3006 = _2755;
                float _3007 = _2757;
                float _3008 = _2759;
                float _3009 = _2761;
                float _3010 = _2763;
                float _3011 = _2765;
                uint _3012 = _2772;
                uint _3021;
                bool _3022;
                for (;;)
                {
                    _3021 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                    _3022 = _3021 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3022)
                    {
                        frontier_phi_67_pred = _3009;
                        frontier_phi_67_pred_1 = _3010;
                        frontier_phi_67_pred_2 = _3011;
                        frontier_phi_67_pred_3 = _3008;
                        frontier_phi_67_pred_4 = _3007;
                        frontier_phi_67_pred_5 = _3006;
                    }
                    else
                    {
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        uint _3225 = _3021;
                        uint _3226;
                        vec4 _3251;
                        float _3252;
                        vec4 _3267;
                        vec3 _3279;
                        vec4 _3294;
                        vec4 _3309;
                        float _3355;
                        bool _3356;
                        for (;;)
                        {
                            uint _3236 = ((_3012 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3225));
                            _3226 = (_3225 + 4294967295u) & _3225;
                            uint _3238 = _3236 * 40u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3252 = _3251.w;
                            uint _3254 = (_3236 * 40u) + 4u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3236 * 40u) + 8u;
                            _3279 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x));
                            uint _3281 = (_3236 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3236 * 40u) + 20u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3236 * 40u) + 24u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3330 = (_3236 * 40u) + 28u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3355 = fma(_2610, _3343.z, fma(_2609, _3343.y, _3343.x * _2608)) + _3343.w;
                            _3356 = !((fma(_2610, _3324.z, fma(_2609, _3324.y, _3324.x * _2608)) + _3324.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3356)
                            {
                                float _3383 = _3251.x - _2608;
                                float _3384 = _3251.y - _2609;
                                float _3385 = _3251.z - _2610;
                                float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                                float _3389 = inversesqrt(_3386);
                                float _3390 = _3389 * _3383;
                                float _3391 = _3389 * _3384;
                                float _3392 = _3389 * _3385;
                                float _3396 = 1.0 - (_3386 / (_3252 * _3252));
                                float _4518 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3401 = sqrt(_3386) * _3267.w;
                                float _3403 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                                float _3404 = _3403 * _3403;
                                float _3407 = ((1.0 - _3404) * dot(vec3(_3390, _3391, _3392), vec3(_891, _894, _897))) + _3404;
                                float _3410 = _3401 * _3401;
                                float _3414 = (fma(_2610, _3294.z, fma(_2609, _3294.y, _3294.x * _2608)) + _3294.w) / _3355;
                                float _3415 = (fma(_2610, _3309.z, fma(_2609, _3309.y, _3309.x * _2608)) + _3309.w) / _3355;
                                float _3419 = 1.0 - dot(vec2(_3414, _3415), vec2(_3414, _3415));
                                float _4534 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3421 = _3420 * (((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3397) / ((_3410 * 0.699999988079071044921875) + 1.0));
                                float _3433 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                                float _3434 = 1.0 - _951;
                                float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                                float _3442 = _3441 * _3441;
                                float _3443 = _3442 * _3442;
                                float _3444 = _3390 - _2893;
                                float _3445 = _3391 - _2894;
                                float _3446 = _3392 - _2895;
                                float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                                float _3454 = dot(vec3(_891, _894, _897), vec3((-0.0) - _2893, (-0.0) - _2894, (-0.0) - _2895));
                                float _4545 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3458 = dot(vec3(_891, _894, _897), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                                float _4556 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                                float _3466 = _3403 * _3442;
                                float _3467 = _3466 * _3466;
                                float _3473 = ((1.0 - _3467) * dot(vec3(_891, _894, _897), vec3(_3390, _3391, _3392))) + _3467;
                                float _4567 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3475 = 1.0 - _3442;
                                float _3485 = (0.5 / (((_3474 * ((_3457 * _3475) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3442) * _3457))) * _3474;
                                float _4578 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3495 = (_3420 * _3397) * (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3465 * _3465) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3495 * _3279.x;
                                frontier_phi_73_pred_1 = _3495 * _3279.y;
                                frontier_phi_73_pred_2 = _3421 * _3267.z;
                                frontier_phi_73_pred_3 = _3421 * _3267.y;
                                frontier_phi_73_pred_4 = _3421 * _3267.x;
                                frontier_phi_73_pred_5 = _3495 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_73_pred;
                            _3500 = frontier_phi_73_pred_1;
                            _3504 = frontier_phi_73_pred_2;
                            _3503 = frontier_phi_73_pred_3;
                            _3502 = frontier_phi_73_pred_4;
                            _3501 = frontier_phi_73_pred_5;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3206 = _3499 + _3219;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            if (_3226 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3226;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3209;
                        frontier_phi_67_pred_1 = _3210;
                        frontier_phi_67_pred_2 = _3211;
                        frontier_phi_67_pred_3 = _3208;
                        frontier_phi_67_pred_4 = _3207;
                        frontier_phi_67_pred_5 = _3206;
                    }
                    _2874 = frontier_phi_67_pred;
                    _2876 = frontier_phi_67_pred_1;
                    _2878 = frontier_phi_67_pred_2;
                    _2872 = frontier_phi_67_pred_3;
                    _2870 = frontier_phi_67_pred_4;
                    _2868 = frontier_phi_67_pred_5;
                    uint _3013 = _3012 + 1u;
                    if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3006 = _2868;
                        _3007 = _2870;
                        _3008 = _2872;
                        _3009 = _2874;
                        _3010 = _2876;
                        _3011 = _2878;
                        _3012 = _3013;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2876;
                frontier_phi_55_56_ladder_1 = _2878;
                frontier_phi_55_56_ladder_2 = _2874;
                frontier_phi_55_56_ladder_3 = _2872;
                frontier_phi_55_56_ladder_4 = _2870;
                frontier_phi_55_56_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_55_56_ladder = _2763;
                frontier_phi_55_56_ladder_1 = _2765;
                frontier_phi_55_56_ladder_2 = _2761;
                frontier_phi_55_56_ladder_3 = _2759;
                frontier_phi_55_56_ladder_4 = _2757;
                frontier_phi_55_56_ladder_5 = _2755;
            }
            _2867 = frontier_phi_55_56_ladder_5;
            _2869 = frontier_phi_55_56_ladder_4;
            _2871 = frontier_phi_55_56_ladder_3;
            _2873 = frontier_phi_55_56_ladder_2;
            _2875 = frontier_phi_55_56_ladder;
            _2877 = frontier_phi_55_56_ladder_1;
        }
        float _2882 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2667 = (_2882 * _2873) + _2119;
        _2669 = (_2882 * _2875) + _2121;
        _2671 = (_2882 * _2877) + _2123;
        _2673 = ((_2867 * 0.039999999105930328369140625) * _2882) + _2452;
        _2675 = ((_2869 * 0.039999999105930328369140625) * _2882) + _2454;
        _2677 = ((_2871 * 0.039999999105930328369140625) * _2882) + _2456;
    }
    else
    {
        _2667 = _2119;
        _2669 = _2121;
        _2671 = _2123;
        _2673 = _2452;
        _2675 = _2454;
        _2677 = _2456;
    }
    float _4594 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4605 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4616 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    uint _2697 = _253 + 6u;
    float _2705 = _872 / cbSceneParam._m0[86u].x;
    float _2706 = _873 / cbSceneParam._m0[86u].y;
    vec4 _2720 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, (log2((isnan(cbSceneParam._m0[77u].w) ? _806 : (isnan(_806) ? cbSceneParam._m0[77u].w : min(_806, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2722 = _2720.x;
    float _2723 = _2720.y;
    float _2724 = _2720.z;
    float _2725 = _2720.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_806 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_806) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _806 : min(cbSceneParam._m0[80u].w, _806));
        float _2781 = _2780 / _806;
        float _2792 = _2781 * _857;
        float _2793 = _858 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2795 = _2781 * _859;
        float _2797 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2793;
        float _2805 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2794 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2928 = 1.0 / cbSceneParam._m0[80u].x;
            float _2929 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2930 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            _2968 = ((abs(_2805 / _2794) * cbSceneParam._m0[80u].y) * ((((_2939 - _2940) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))))) * _2928)) - ((exp2(_2815 * _2939) - exp2(_2815 * _2940)) * _2928))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2725);
        _2817 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2722;
        _2819 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2723;
        _2821 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2724;
        _2823 = _2979 * _2725;
    }
    else
    {
        _2817 = _2722;
        _2819 = _2723;
        _2821 = _2724;
        _2823 = _2725;
    }
    float _2835 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2836 = _2835 == 3.0;
    float _2837 = log2(_2823);
    float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2667 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _935))) + ((_2673 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2669 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _935))) + ((_2675 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2671 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _935))) + ((_2677 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2855 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2855 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.y = _2855 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.z = _2855 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.w = cbInstanceData._m0[_2697].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2697].w;
}


