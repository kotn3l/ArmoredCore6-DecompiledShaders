#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3912 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _390) + _486;
    float _498 = ((((_465.x - _484) * _390) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _390) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3923 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _537 = (_498 + ((((_438.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _538 = (_499 + ((((_438.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _541 = fma(_505, _243, fma(_538, _250, _537 * _236));
    float _544 = fma(_505, _244, fma(_538, _251, _537 * _237));
    float _547 = fma(_505, _245, fma(_538, _252, _537 * _238));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _587 = ((_582 - _583) * cbMtdParam._m0[24u].z) + _583;
    float _589 = (cbMtdParam._m0[19u].x + dot(vec4(_551 * _541, _551 * _544, _551 * _547, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_587 * cbMtdParam._m0[21u].z);
    float _3934 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _592 = (-0.0) - cbMtdParam._m0[24u].y;
    float _594 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
    float _602 = _590 - ((_590 * TEXCOORD_8.x) * _595);
    float _603 = _590 - ((_590 * TEXCOORD_8.y) * _595);
    float _604 = _590 - ((_590 * TEXCOORD_8.z) * _595);
    float _611 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _615 = ((isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : min(_611, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _623 = (_615 - (((_587 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3965 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _628 = ((_602 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) * _624) + _397;
    float _629 = ((_603 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) * _624) + _398;
    float _630 = ((_604 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) * _624) + _399;
    vec4 _642 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_644 - _645) * cbMtdParam._m0[24u].w) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3976 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _628) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _628;
    float _682 = ((((cbMtdParam._m0[10u].y - _629) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _629;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _630)) * _673) + _630;
    float _688 = (((_438.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    float _692 = ((_525.z - _688) * cbMtdParam._m0[19u].w) + _688;
    vec4 _706 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3987 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _724 = (((_706.z - _692) * _602) * _624) + _692;
    float _727 = ((cbMtdParam._m0[23u].y - _724) * _673) + _724;
    vec4 _746 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _752 = (_746.x * 2.0) + (-1.0);
    float _753 = (_746.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3998 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _774 = (((cbMtdParam._m0[21u].x * _537) + ((_713 - _537) * _602)) * _624) + _537;
    float _775 = (((cbMtdParam._m0[21u].x * _538) + ((_714 - _538) * _603)) * _624) + _538;
    float _776 = (((sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _505) * _604) * _624) + _505;
    float _787 = (((_752 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _673) + _774;
    float _788 = (((_753 - _775) + (_775 * cbMtdParam._m0[22u].z)) * _673) + _775;
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) - _776) * _673) + _776;
    float _791 = cbMtdParam._m0[22u].x + _525.w;
    float _794 = fma(_789, _243, fma(_788, _250, _787 * _236));
    float _797 = fma(_789, _244, fma(_788, _251, _787 * _237));
    float _800 = fma(_789, _245, fma(_788, _252, _787 * _238));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _4009 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _808 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4031 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4042 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4053 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _914 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _917 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _931 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_931].z;
    float _4064 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _955 = ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * TEXCOORD_5.w) * _951.x;
    float _956 = dot(vec3(_805, _806, _807), vec3(_884, _885, _886));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _805) - _884;
    float _964 = (_959 * _806) - _885;
    float _965 = (_959 * _807) - _886;
    float _969 = abs(dot(vec3(_884, _885, _886), vec3(_805, _806, _807)));
    float _4097 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_808);
    float _984 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1054 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1058 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _805;
        float _1084 = _1020 + _806;
        float _1085 = _1024 + _807;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_805, _806, _807), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4145 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_805, _806, _807), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4178 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_805, _806, _807), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4211 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1369 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1373 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1396 = _1016 + _805;
        float _1397 = _1020 + _806;
        float _1398 = _1024 + _807;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_805, _806, _807), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4274 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_805, _806, _807), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4307 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_805, _806, _807), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4340 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1326;
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1338)) + _1338;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1339)) + _1339;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1340)) + _1340;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _963 * 0.5;
    float _1703 = _964 * 0.5;
    float _1704 = _965 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1832 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1835 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1863 = frontier_phi_14_12_ladder;
        }
        float _2032;
        if (_1832 > 0.0)
        {
            _2032 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2032 = frontier_phi_23_19_ladder;
        }
        float _2327;
        if (_1835 > 0.0)
        {
            _2327 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2327 = frontier_phi_35_30_ladder;
        }
        float _2329 = isnan(_2032) ? _1863 : (isnan(_1863) ? _2032 : min(_1863, _2032));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1829) + _1818;
        float _2335 = (_2330 * _1832) + _1822;
        float _2336 = (_2330 * _1835) + _1826;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2337;
        float _2341 = _2337 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 > _2341) || ((_2335 < _2339) || ((_2334 < _2339) || (_2334 > _2341))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2336, cbModelParam._m0[9u].z, fma(_2335, cbModelParam._m0[9u].y, _2334 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2336, cbModelParam._m0[10u].z, fma(_2335, cbModelParam._m0[10u].y, _2334 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2336, cbModelParam._m0[11u].z, fma(_2335, cbModelParam._m0[11u].y, _2334 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_13_35_ladder = _2481.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2481.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2481.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_13_35_ladder_2;
        _1853 = frontier_phi_13_35_ladder_1;
        _1855 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1771);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1927 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1930 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2037;
        if (_1924 > 0.0)
        {
            _2037 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2037 = frontier_phi_25_21_ladder;
        }
        float _2354;
        if (_1927 > 0.0)
        {
            _2354 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2354 = frontier_phi_37_32_ladder;
        }
        float _2681;
        if (_1930 > 0.0)
        {
            _2681 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2681 = frontier_phi_47_44_ladder;
        }
        float _2683 = isnan(_2354) ? _2037 : (isnan(_2037) ? _2354 : min(_2037, _2354));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _1924) + _1913;
        float _2689 = (_2684 * _1927) + _1917;
        float _2690 = (_2684 * _1930) + _1921;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2692 = (-1.0) - _2691;
        float _2694 = _2691 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2690 > _2694) || ((_2690 < _2692) || ((_2689 > _2694) || ((_2689 < _2692) || ((_2688 < _2692) || (_2688 > _2694))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2690, cbModelParam._m0[17u].z, fma(_2689, cbModelParam._m0[17u].y, _2688 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2690, cbModelParam._m0[18u].z, fma(_2689, cbModelParam._m0[18u].y, _2688 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2690, cbModelParam._m0[19u].z, fma(_2689, cbModelParam._m0[19u].y, _2688 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_22_47_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_22_47_ladder_2;
        _1951 = frontier_phi_22_47_ladder_1;
        _1953 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1860);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1965 = ((((1.0 - _984) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_984 * _971)) * _955;
    float _1966 = _1965 * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1967 = _1965 * ((cbModelParam._m0[1u].w * (_1951 - _1853)) + _1853);
    float _1968 = _1965 * ((cbModelParam._m0[1u].w * (_1953 - _1855)) + _1855);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2024 = _2011 / _2023;
    float _2025 = _2015 / _2023;
    float _2026 = _2019 / _2023;
    float _2173;
    float _2174;
    float _2175;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2053 = ((uint(_2026 > cbSceneParam._m0[59u].y) + uint(_2026 > cbSceneParam._m0[59u].x)) + uint(_2026 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2054 = _2053 + 43u;
        uint _2062 = _2053 + 44u;
        uint _2070 = _2053 + 45u;
        uint _2078 = _2053 + 46u;
        float _2089 = fma(_2023, cbSceneParam._m0[_2054].w, fma(_2019, cbSceneParam._m0[_2054].z, fma(_2015, cbSceneParam._m0[_2054].y, _2011 * cbSceneParam._m0[_2054].x)));
        float _2093 = fma(_2023, cbSceneParam._m0[_2062].w, fma(_2019, cbSceneParam._m0[_2062].z, fma(_2015, cbSceneParam._m0[_2062].y, _2011 * cbSceneParam._m0[_2062].x)));
        float _2101 = fma(_2023, cbSceneParam._m0[_2078].w, fma(_2019, cbSceneParam._m0[_2078].z, fma(_2015, cbSceneParam._m0[_2078].y, _2011 * cbSceneParam._m0[_2078].x)));
        float _2106 = cbSceneParam._m0[33u].z * _2101;
        float _2108 = cbSceneParam._m0[33u].w * _2101;
        float _2111 = fma(_2023, cbSceneParam._m0[_2070].w, fma(_2019, cbSceneParam._m0[_2070].z, fma(_2015, cbSceneParam._m0[_2070].y, _2011 * cbSceneParam._m0[_2070].x))) / _2101;
        float _2159 = (cbSceneParam._m0[33u].x - sqrt(((_2025 * _2025) + (_2024 * _2024)) + (_2026 * _2026))) * cbSceneParam._m0[33u].y;
        float _4466 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2166 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 + _2089) / _2101, (_2108 + _2093) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 + _2089) / _2101, (_2093 - _2106) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 - _2106) / _2101, (_2093 - _2108) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 - _2108) / _2101, (_2106 + _2093) / _2101), _2111), 0.0)).x), vec4(0.25)));
        _2173 = 1.0 - (_2166 * cbSceneParam._m0[34u].x);
        _2174 = 1.0 - (_2166 * cbSceneParam._m0[34u].y);
        _2175 = 1.0 - (_2166 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2173 = 1.0;
        _2174 = 1.0;
        _2175 = 1.0;
    }
    float _2239;
    float _2241;
    float _2243;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2227 = fma(_2023, cbSceneParam._m0[63u].w, fma(_2019, cbSceneParam._m0[63u].z, fma(_2015, cbSceneParam._m0[63u].y, _2011 * cbSceneParam._m0[63u].x)));
        float _2228 = fma(_2023, cbSceneParam._m0[60u].w, fma(_2019, cbSceneParam._m0[60u].z, fma(_2015, cbSceneParam._m0[60u].y, _2011 * cbSceneParam._m0[60u].x))) / _2227;
        float _2229 = fma(_2023, cbSceneParam._m0[61u].w, fma(_2019, cbSceneParam._m0[61u].z, fma(_2015, cbSceneParam._m0[61u].y, _2011 * cbSceneParam._m0[61u].x))) / _2227;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2228 >= cbSceneParam._m0[64u].x) && (_2229 >= cbSceneParam._m0[64u].y)) && (_2228 <= cbSceneParam._m0[64u].z)) && (_2229 <= cbSceneParam._m0[64u].w))
        {
            float _2367 = fma(_2023, cbSceneParam._m0[62u].w, fma(_2019, cbSceneParam._m0[62u].z, fma(_2015, cbSceneParam._m0[62u].y, _2011 * cbSceneParam._m0[62u].x))) / _2227;
            float _2371 = isnan(cbSceneParam._m0[41u].w) ? _2367 : (isnan(_2367) ? cbSceneParam._m0[41u].w : max(_2367, cbSceneParam._m0[41u].w));
            float _2414 = (cbSceneParam._m0[33u].x - sqrt(((_2025 * _2025) + (_2024 * _2024)) + (_2026 * _2026))) * cbSceneParam._m0[33u].y;
            float _4482 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
            float _2421 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2228, cbSceneParam._m0[33u].w + _2229), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2228, _2229 - cbSceneParam._m0[33u].z), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2228 - cbSceneParam._m0[33u].z, _2229 - cbSceneParam._m0[33u].w), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2228 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2229), _2371), 0.0)).x), vec4(0.25)));
            float _2425 = 1.0 - (_2421 * cbSceneParam._m0[34u].x);
            float _2426 = 1.0 - (_2421 * cbSceneParam._m0[34u].y);
            float _2427 = 1.0 - (_2421 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_34_33_ladder_1 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
            frontier_phi_34_33_ladder_2 = isnan(_2425) ? _2173 : (isnan(_2173) ? _2425 : min(_2173, _2425));
        }
        else
        {
            frontier_phi_34_33_ladder = _2175;
            frontier_phi_34_33_ladder_1 = _2174;
            frontier_phi_34_33_ladder_2 = _2173;
        }
        _2239 = frontier_phi_34_33_ladder_2;
        _2241 = frontier_phi_34_33_ladder_1;
        _2243 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2239 = _2173;
        _2241 = _2174;
        _2243 = _2175;
    }
    uvec4 _2248 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2250 = _2248.x * 14u;
    uint _2251 = _2250 + 13u;
    float _2258 = _955 + (-1.0);
    float _2263 = (cbLight._m0[_2251].x * _2258) + 1.0;
    float _2264 = (cbLight._m0[_2251].y * _2258) + 1.0;
    float _2265 = (cbLight._m0[_2251].z * _2258) + 1.0;
    float _2266 = (cbLight._m0[_2251].w * _2258) + 1.0;
    uint _2267 = _2250 + 5u;
    float _2273 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2277 = _2250 + 4u;
    float _2286 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
    uint _2290 = _2250 | 1u;
    float _2301 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_805, _806, _807));
    float _2304 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_805, _806, _807));
    float _4518 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _4529 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2309 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2311 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2318 = ((cbLight._m0[_2267].x * _2273) * _2311) + (((cbLight._m0[_2277].x * _2239) * _2286) * _2309);
    float _2319 = ((_2273 * cbLight._m0[_2267].y) * _2311) + (((cbLight._m0[_2277].y * _2241) * _2286) * _2309);
    float _2320 = ((_2273 * cbLight._m0[_2267].z) * _2311) + (((cbLight._m0[_2277].z * _2243) * _2286) * _2309);
    uvec4 _2324 = floatBitsToUint(cbLight._m0[_2250 + 12u]);
    bool _2326 = _2324.x == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2326)
    {
        _2428 = _2318;
        _2430 = _2319;
        _2432 = _2320;
    }
    else
    {
        uint _2436 = _2250 + 6u;
        float _2452 = (dot(vec3(cbLight._m0[_2250 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4540 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2455 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2428 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2318;
        _2430 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2319;
        _2432 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2320;
    }
    bool _2435 = _2324.y == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2435)
    {
        _2490 = _2428;
        _2492 = _2430;
        _2494 = _2432;
    }
    else
    {
        uint _2652 = _2250 + 7u;
        float _2668 = (dot(vec3(cbLight._m0[_2250 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2669 = _2668 * _2668;
        float _4556 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2670 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2671 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2490 = (((cbLight._m0[_2652].x * 0.3183098733425140380859375) * _2670) * _2671) + _2428;
        _2492 = (((cbLight._m0[_2652].y * 0.3183098733425140380859375) * _2670) * _2671) + _2430;
        _2494 = (((cbLight._m0[_2652].z * 0.3183098733425140380859375) * _2670) * _2671) + _2432;
    }
    uint _2497 = _2250 + 8u;
    float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _808) * 0.949999988079071044921875);
    float _2511 = _2510 * _2510;
    float _2512 = cbLight._m0[_2250].x + _884;
    float _2513 = cbLight._m0[_2250].y + _885;
    float _2514 = cbLight._m0[_2250].z + _886;
    float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
    float _2519 = _2518 * _2512;
    float _2520 = _2518 * _2513;
    float _2521 = _2518 * _2514;
    float _2522 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2250].xyz));
    float _4572 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _4583 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2526 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2527 = dot(vec3(_805, _806, _807), vec3(_2519, _2520, _2521));
    float _4594 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2531 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2519, _2520, _2521));
    float _4605 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2535 = _2511 * _2511;
    float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
    float _2550 = (exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2551 = 1.0 - _2511;
    float _2562 = (0.5 / (((_2526 * ((_2525 * _2551) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2551) + _2511) * _2525))) * _2525;
    float _4616 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
    uint _2578 = _2250 + 9u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _808) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2290].x + _884;
    float _2592 = cbLight._m0[_2290].y + _885;
    float _2593 = cbLight._m0[_2290].z + _886;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2290].xyz));
    float _4627 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2605 = dot(vec3(_805, _806, _807), vec3(_2598, _2599, _2600));
    float _4638 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2598, _2599, _2600));
    float _4649 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2590 * _2590;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2627 = 1.0 - _2590;
    float _2637 = (0.5 / (((_2526 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2627) + _2590) * _2604))) * _2604;
    float _4660 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    float _2649 = (((_2626 * cbLight._m0[_2578].x) * _2639) * _2273) + ((((cbLight._m0[_2497].x * _2239) * _2550) * _2564) * _2286);
    float _2650 = (((_2626 * cbLight._m0[_2578].y) * _2639) * _2273) + ((((cbLight._m0[_2497].y * _2241) * _2550) * _2564) * _2286);
    float _2651 = (((_2626 * cbLight._m0[_2578].z) * _2639) * _2273) + ((((cbLight._m0[_2497].z * _2243) * _2550) * _2564) * _2286);
    float _2707;
    float _2709;
    float _2711;
    if (_2326)
    {
        _2707 = _2649;
        _2709 = _2650;
        _2711 = _2651;
    }
    else
    {
        uint _2713 = _2250 + 2u;
        uint _2717 = _2250 + 10u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _808) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _884;
        float _2734 = cbLight._m0[_2713].y + _885;
        float _2735 = cbLight._m0[_2713].z + _886;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2713].xyz));
        float _4671 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2747 = dot(vec3(_805, _806, _807), vec3(_2740, _2741, _2742));
        float _4682 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4693 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2768 = (exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2769 = 1.0 - _2732;
        float _2779 = (0.5 / (((_2526 * ((_2746 * _2769) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2769) + _2732) * _2746))) * _2746;
        float _4704 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2707 = (((_2768 * cbLight._m0[_2717].x) * _2781) * _2782) + _2649;
        _2709 = (((_2768 * cbLight._m0[_2717].y) * _2781) * _2782) + _2650;
        _2711 = (((_2768 * cbLight._m0[_2717].z) * _2781) * _2782) + _2651;
    }
    float _2813;
    float _2815;
    float _2817;
    if (_2435)
    {
        _2813 = _2707;
        _2815 = _2709;
        _2817 = _2711;
    }
    else
    {
        uint _2824 = _2250 + 3u;
        uint _2828 = _2250 + 11u;
        float _2842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2824].w)) * _808) * 0.949999988079071044921875);
        float _2843 = _2842 * _2842;
        float _2844 = cbLight._m0[_2824].x + _884;
        float _2845 = cbLight._m0[_2824].y + _885;
        float _2846 = cbLight._m0[_2824].z + _886;
        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
        float _2851 = _2850 * _2844;
        float _2852 = _2850 * _2845;
        float _2853 = _2850 * _2846;
        float _2854 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2824].xyz));
        float _4720 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2858 = dot(vec3(_805, _806, _807), vec3(_2851, _2852, _2853));
        float _4731 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2862 = dot(vec3(cbLight._m0[_2824].xyz), vec3(_2851, _2852, _2853));
        float _4742 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2866 = _2843 * _2843;
        float _2870 = ((_2861 * _2861) * (_2866 + (-1.0))) + 1.0;
        float _2879 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2880 = 1.0 - _2843;
        float _2890 = (0.5 / (((_2526 * ((_2857 * _2880) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2880) + _2843) * _2857))) * _2857;
        float _4753 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2892 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2866 / ((_2870 * _2870) * 3.141590118408203125));
        float _2893 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2813 = (((_2879 * cbLight._m0[_2828].x) * _2892) * _2893) + _2707;
        _2815 = (((_2879 * cbLight._m0[_2828].y) * _2892) * _2893) + _2709;
        _2817 = (((_2879 * cbLight._m0[_2828].z) * _2892) * _2893) + _2711;
    }
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_2248.y == 0u)
    {
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.x;
        uint _2926 = uint((float(_2914.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2915))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2915)));
        float _2936 = (log2(_2026 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2937 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        uint _2940 = uint(isnan(14.0) ? _2937 : (isnan(_2937) ? 14.0 : min(_2937, 14.0)));
        uvec4 _2945 = texelFetch(g_lightClusterGridBuffer, int(((_2940 << 2u) + (_2926 << 6u)) >> 2u));
        uint _2946 = _2945.x;
        uint _2947 = _2914.z;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((((1u << ((_2947 >> 4u) & 15u)) + 4294967295u) & _2946) == 0u) || ((_2947 & 240u) == 0u))
        {
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
        }
        else
        {
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2940 << 5u) + (_2926 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3186)
                {
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                else
                {
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    uint _3300;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3185;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3304 = uint(findLSB(_3300)) + (_3176 << 5u);
                        uint _3301 = (_3300 + 4294967295u) & _3300;
                        uint _3306 = _3304 * 48u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3326 = (_3304 * 48u) + 4u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3345 = (_3304 * 48u) + 8u;
                        vec3 _3356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x));
                        float _3360 = _3320.x - _2024;
                        float _3361 = _3320.y - _2025;
                        float _3362 = _3320.z - _2026;
                        float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                        float _3366 = inversesqrt(_3363);
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3370 = dot(vec3(_911, _914, _917), vec3(_3367, _3368, _3369));
                        float _3375 = 1.0 - (_3363 * _3320.w);
                        float _4779 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3377 = sqrt(_3363) * _3339.w;
                        float _3380 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3370) + _3381;
                        float _3387 = _3377 * _3377;
                        float _3391 = ((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3376) / ((_3387 * 0.699999988079071044921875) + 1.0);
                        float _3395 = (-0.0) - _2024;
                        float _3396 = (-0.0) - _2025;
                        float _3397 = (-0.0) - _2026;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3411 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                        float _3412 = 1.0 - _971;
                        float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                        float _3420 = _3419 * _3419;
                        float _3421 = _3420 * _3420;
                        float _3422 = _3402 + _3367;
                        float _3423 = _3403 + _3368;
                        float _3424 = _3404 + _3369;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3432 = dot(vec3(_911, _914, _917), vec3(_3402, _3403, _3404));
                        float _4795 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3436 = dot(vec3(_911, _914, _917), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                        float _4806 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                        float _3444 = _3380 * _3420;
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3370) + _3445;
                        float _4817 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3450 = 1.0 - _3420;
                        float _3460 = (0.5 / (((_3449 * ((_3435 * _3450) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3420) * _3435))) * _3449;
                        float _4828 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3471 = (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3443 * _3443) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125))) * _3376;
                        _3229 = (_3391 * _3339.x) + _3297;
                        _3230 = (_3391 * _3339.y) + _3298;
                        _3231 = (_3391 * _3339.z) + _3299;
                        _3226 = (_3471 * _3356.x) + _3294;
                        _3227 = (_3471 * _3356.y) + _3295;
                        _3228 = (_3471 * _3356.z) + _3296;
                        if (_3301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3301;
                        }
                    }
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                _3037 = frontier_phi_66_pred;
                _3035 = frontier_phi_66_pred_1;
                _3033 = frontier_phi_66_pred_2;
                _3031 = frontier_phi_66_pred_3;
                _3029 = frontier_phi_66_pred_4;
                _3027 = frontier_phi_66_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3027;
                    _3171 = _3029;
                    _3172 = _3031;
                    _3173 = _3033;
                    _3174 = _3035;
                    _3175 = _3037;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
        }
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.z;
        uint _3043 = (_3041 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3043) & _2946) == 0u)
        {
            _3138 = _3026;
            _3140 = _3028;
            _3142 = _3030;
            _3144 = _3032;
            _3146 = _3034;
            _3148 = _3036;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
            float _3164 = _3163 * _2024;
            float _3165 = _3163 * _2025;
            float _3166 = _3163 * _2026;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3043 < ((_3041 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3277 = _3026;
                float _3278 = _3028;
                float _3279 = _3030;
                float _3280 = _3032;
                float _3281 = _3034;
                float _3282 = _3036;
                uint _3283 = _3043;
                uint _3292;
                bool _3293;
                for (;;)
                {
                    _3292 = texelFetch(g_lightClassification, int((((_2940 << 5u) + (_2926 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                    _3293 = _3292 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3293)
                    {
                        frontier_phi_72_pred = _3282;
                        frontier_phi_72_pred_1 = _3281;
                        frontier_phi_72_pred_2 = _3280;
                        frontier_phi_72_pred_3 = _3279;
                        frontier_phi_72_pred_4 = _3278;
                        frontier_phi_72_pred_5 = _3277;
                    }
                    else
                    {
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        float _3492 = _3280;
                        float _3493 = _3281;
                        float _3494 = _3282;
                        uint _3495 = _3292;
                        uint _3496;
                        vec4 _3521;
                        float _3522;
                        vec4 _3537;
                        vec3 _3549;
                        vec4 _3564;
                        vec4 _3579;
                        float _3625;
                        bool _3626;
                        for (;;)
                        {
                            uint _3506 = ((_3283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3495));
                            _3496 = (_3495 + 4294967295u) & _3495;
                            uint _3508 = _3506 * 40u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3522 = _3521.w;
                            uint _3524 = (_3506 * 40u) + 4u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3506 * 40u) + 8u;
                            _3549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x));
                            uint _3551 = (_3506 * 40u) + 16u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3506 * 40u) + 20u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3506 * 40u) + 24u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3600 = (_3506 * 40u) + 28u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3625 = fma(_2026, _3613.z, fma(_2025, _3613.y, _3613.x * _2024)) + _3613.w;
                            _3626 = !((fma(_2026, _3594.z, fma(_2025, _3594.y, _3594.x * _2024)) + _3594.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3626)
                            {
                                float _3653 = _3521.x - _2024;
                                float _3654 = _3521.y - _2025;
                                float _3655 = _3521.z - _2026;
                                float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                                float _3659 = inversesqrt(_3656);
                                float _3660 = _3659 * _3653;
                                float _3661 = _3659 * _3654;
                                float _3662 = _3659 * _3655;
                                float _3666 = 1.0 - (_3656 / (_3522 * _3522));
                                float _4839 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3671 = sqrt(_3656) * _3537.w;
                                float _3673 = 1.39999997615814208984375 / (_3671 + 1.39999997615814208984375);
                                float _3674 = _3673 * _3673;
                                float _3677 = ((1.0 - _3674) * dot(vec3(_3660, _3661, _3662), vec3(_911, _914, _917))) + _3674;
                                float _3680 = _3671 * _3671;
                                float _3684 = (fma(_2026, _3564.z, fma(_2025, _3564.y, _3564.x * _2024)) + _3564.w) / _3625;
                                float _3685 = (fma(_2026, _3579.z, fma(_2025, _3579.y, _3579.x * _2024)) + _3579.w) / _3625;
                                float _3689 = 1.0 - dot(vec2(_3684, _3685), vec2(_3684, _3685));
                                float _4855 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3691 = _3690 * (((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3667) / ((_3680 * 0.699999988079071044921875) + 1.0));
                                float _3703 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                                float _3704 = 1.0 - _971;
                                float _3711 = sqrt(1.0 - ((1.0 - (_3704 * _3704)) * (1.0 - (_3703 * _3703))));
                                float _3712 = _3711 * _3711;
                                float _3713 = _3712 * _3712;
                                float _3714 = _3660 - _3164;
                                float _3715 = _3661 - _3165;
                                float _3716 = _3662 - _3166;
                                float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                                float _3724 = dot(vec3(_911, _914, _917), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4866 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3728 = dot(vec3(_911, _914, _917), vec3(_3720 * _3714, _3720 * _3715, _3720 * _3716));
                                float _4877 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3735 = ((_3731 * _3731) * (_3713 + (-1.0))) + 1.0;
                                float _3736 = _3673 * _3712;
                                float _3737 = _3736 * _3736;
                                float _3743 = ((1.0 - _3737) * dot(vec3(_911, _914, _917), vec3(_3660, _3661, _3662))) + _3737;
                                float _4888 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3745 = 1.0 - _3712;
                                float _3755 = (0.5 / (((_3744 * ((_3727 * _3745) + _3712)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3712) * _3727))) * _3744;
                                float _4899 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3765 = (_3690 * _3667) * (((_3713 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3735 * _3735) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3691 * _3537.y;
                                frontier_phi_78_pred_1 = _3691 * _3537.x;
                                frontier_phi_78_pred_2 = _3765 * _3549.z;
                                frontier_phi_78_pred_3 = _3765 * _3549.y;
                                frontier_phi_78_pred_4 = _3765 * _3549.x;
                                frontier_phi_78_pred_5 = _3691 * _3537.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3773 = frontier_phi_78_pred;
                            _3772 = frontier_phi_78_pred_1;
                            _3771 = frontier_phi_78_pred_2;
                            _3770 = frontier_phi_78_pred_3;
                            _3769 = frontier_phi_78_pred_4;
                            _3774 = frontier_phi_78_pred_5;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            if (_3496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3496;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3481;
                        frontier_phi_72_pred_1 = _3480;
                        frontier_phi_72_pred_2 = _3479;
                        frontier_phi_72_pred_3 = _3478;
                        frontier_phi_72_pred_4 = _3477;
                        frontier_phi_72_pred_5 = _3476;
                    }
                    _3149 = frontier_phi_72_pred;
                    _3147 = frontier_phi_72_pred_1;
                    _3145 = frontier_phi_72_pred_2;
                    _3143 = frontier_phi_72_pred_3;
                    _3141 = frontier_phi_72_pred_4;
                    _3139 = frontier_phi_72_pred_5;
                    uint _3284 = _3283 + 1u;
                    if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3139;
                        _3278 = _3141;
                        _3279 = _3143;
                        _3280 = _3145;
                        _3281 = _3147;
                        _3282 = _3149;
                        _3283 = _3284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3149;
                frontier_phi_60_61_ladder_1 = _3147;
                frontier_phi_60_61_ladder_2 = _3143;
                frontier_phi_60_61_ladder_3 = _3141;
                frontier_phi_60_61_ladder_4 = _3139;
                frontier_phi_60_61_ladder_5 = _3145;
            }
            else
            {
                frontier_phi_60_61_ladder = _3036;
                frontier_phi_60_61_ladder_1 = _3034;
                frontier_phi_60_61_ladder_2 = _3030;
                frontier_phi_60_61_ladder_3 = _3028;
                frontier_phi_60_61_ladder_4 = _3026;
                frontier_phi_60_61_ladder_5 = _3032;
            }
            _3138 = frontier_phi_60_61_ladder_4;
            _3140 = frontier_phi_60_61_ladder_3;
            _3142 = frontier_phi_60_61_ladder_2;
            _3144 = frontier_phi_60_61_ladder_5;
            _3146 = frontier_phi_60_61_ladder_1;
            _3148 = frontier_phi_60_61_ladder;
        }
        float _3153 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _2959 = (_3153 * _3144) + _2490;
        _2961 = (_3153 * _3146) + _2492;
        _2963 = (_3153 * _3148) + _2494;
        _2965 = ((_3138 * 0.039999999105930328369140625) * _3153) + _2813;
        _2967 = ((_3140 * 0.039999999105930328369140625) * _3153) + _2815;
        _2969 = ((_3142 * 0.039999999105930328369140625) * _3153) + _2817;
    }
    else
    {
        _2959 = _2490;
        _2961 = _2492;
        _2963 = _2494;
        _2965 = _2813;
        _2967 = _2815;
        _2969 = _2817;
    }
    float _4915 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4926 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4937 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    uint _2989 = _255 + 6u;
    float _2997 = _892 / cbSceneParam._m0[86u].x;
    float _2998 = _893 / cbSceneParam._m0[86u].y;
    vec4 _3012 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2997, _2998, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3014 = _3012.x;
    float _3015 = _3012.y;
    float _3016 = _3012.z;
    float _3017 = _3012.w;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _3051 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _3052 = _3051 / _826;
        float _3063 = _3052 * _877;
        float _3064 = _878 * _3052;
        float _3065 = (-0.0) - _3064;
        float _3066 = _3052 * _879;
        float _3068 = (cbSceneParam._m0[77u].w * _3065) / _3051;
        float _3069 = _3068 + cbSceneParam._m0[79u].w;
        float _3070 = cbSceneParam._m0[79u].w - _3064;
        float _3076 = sqrt(((_3063 * _3063) + (_3064 * _3064)) + (_3066 * _3066));
        float _3079 = (1.0 - (cbSceneParam._m0[77u].w / _3051)) * _3076;
        float _3084 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3086 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3065 - _3068) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3069 > 0.0) ? exp2(_3084 * _3069) : (2.0 - exp2(_3086 * _3069))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3079;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : max(_3069, _3070));
            float _3201 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : min(_3069, _3070));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3239 = ((abs(_3076 / _3065) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3084 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3084 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3086 * _3210) - exp2(_3086 * _3211)) * _3199))) + (_3079 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2997, _2998, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_3017);
        _3088 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _3014;
        _3090 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _3015;
        _3092 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _3016;
        _3094 = _3250 * _3017;
    }
    else
    {
        _3088 = _3014;
        _3090 = _3015;
        _3092 = _3016;
        _3094 = _3017;
    }
    float _3106 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3107 = _3106 == 3.0;
    float _3108 = log2(_3094);
    float _3115 = exp2(_3108 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2959 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _955))) + ((_2965 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _3116 = exp2(_3108 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2961 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _955))) + ((_2967 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _3117 = exp2(_3108 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2963 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _955))) + ((_2969 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _3126 = (_3106 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3126 * (_3107 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.y = _3126 * (_3107 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.z = _3126 * (_3107 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.w = cbInstanceData._m0[_2989].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2989].w;
}


