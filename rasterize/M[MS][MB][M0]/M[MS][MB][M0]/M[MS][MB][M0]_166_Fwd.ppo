#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _337 = _335.x;
    float _347 = dot(vec4(_337, _335.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _364 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_337 - _347) * cbMtdParam._m0[24u].x) + _347) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3389 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _372 = (_365 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _373 = (_365 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _374 = (_365 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _248) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _249) + cbTextureTilingScale._m0[3u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _423 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _437 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_413 - _423) * cbMtdParam._m0[24u].x) + _423) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3400 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _445 = (_438 * ((_391.x * cbMtdParam._m0[13u].x) - _372)) + _372;
    float _446 = (_438 * ((_391.y * cbMtdParam._m0[13u].y) - _373)) + _373;
    float _447 = (_438 * ((_391.z * cbMtdParam._m0[13u].z) - _374)) + _374;
    vec4 _460 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _488 = ((_460.x - _479) * _365) + _479;
    float _489 = ((_460.y - _480) * _365) + _480;
    float _490 = ((_460.z - _481) * _365) + _481;
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _248) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _249) + cbTextureTilingScale._m0[2u].w));
    float _515 = ((_502.z - _490) * _438) + _490;
    float _518 = ((((_502.x - _488) * _438) + _488) * 2.0) + (-1.0);
    float _520 = ((((_502.y - _489) * _438) + _489) * 2.0) + (-1.0);
    float _521 = dot(vec2(_518, _520), vec2(_518, _520));
    float _3411 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _546 = cbMtdParam._m0[22u].x + _539.w;
    float _549 = fma(_526, _215 * NORMAL.x, fma(_520, _222 * TANGENT.x, (_208 * _200) * _518));
    float _552 = fma(_526, _215 * NORMAL.y, fma(_520, _222 * TANGENT.y, (_208 * _201) * _518));
    float _555 = fma(_526, _215 * NORMAL.z, fma(_520, _222 * TANGENT.z, (_208 * _202) * _518));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3422 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _563 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3444 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3455 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3466 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _633 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _623);
    float _634 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _623);
    float _635 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _623);
    float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
    float _640 = _633 * _639;
    float _641 = _634 * _639;
    float _642 = _635 * _639;
    float _648 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _649 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _667 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _670 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _673 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _687 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3477 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _648, cbSceneParam._m0[86u].y * _649));
    float _711 = ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * TEXCOORD_5.w) * _707.x;
    float _712 = dot(vec3(_560, _561, _562), vec3(_640, _641, _642));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _560) - _640;
    float _720 = (_715 * _561) - _641;
    float _721 = (_715 * _562) - _642;
    float _725 = abs(dot(vec3(_640, _641, _642), vec3(_560, _561, _562)));
    float _3510 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_563);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _810 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _814 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _839 = _772 + _560;
        float _840 = _776 + _561;
        float _841 = _780 + _562;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_560, _561, _562), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3558 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_560, _561, _562), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3591 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_560, _561, _562), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3624 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1124 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1128 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1151 = _772 + _560;
        float _1152 = _776 + _561;
        float _1153 = _780 + _562;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_560, _561, _562), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3687 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_560, _561, _562), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3720 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_560, _561, _562), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3753 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1082;
        _1390 = _1082;
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1094)) + _1094;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1095)) + _1095;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1096)) + _1096;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _719 * 0.5;
    float _1458 = _720 * 0.5;
    float _1459 = _721 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1589 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1592 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1620 = frontier_phi_14_12_ladder;
        }
        float _1822;
        if (_1589 > 0.0)
        {
            _1822 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1822 = frontier_phi_23_19_ladder;
        }
        float _2065;
        if (_1592 > 0.0)
        {
            _2065 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2065 = frontier_phi_35_30_ladder;
        }
        float _2067 = isnan(_1822) ? _1620 : (isnan(_1620) ? _1822 : min(_1620, _1822));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1586) + _1575;
        float _2073 = (_2068 * _1589) + _1579;
        float _2074 = (_2068 * _1592) + _1583;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_13_35_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_13_35_ladder_2;
        _1610 = frontier_phi_13_35_ladder_1;
        _1612 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1526);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1672 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1676 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1680 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1683 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1686 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1689 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1827;
        if (_1683 > 0.0)
        {
            _1827 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2092;
        if (_1686 > 0.0)
        {
            _2092 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2092 = frontier_phi_37_32_ladder;
        }
        float _2297;
        if (_1689 > 0.0)
        {
            _2297 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2297 = frontier_phi_46_43_ladder;
        }
        float _2299 = isnan(_2092) ? _1827 : (isnan(_1827) ? _2092 : min(_1827, _2092));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1683) + _1672;
        float _2305 = (_2300 * _1686) + _1676;
        float _2306 = (_2300 * _1689) + _1680;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_22_46_ladder = _2505.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2505.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2505.x * cbModelParam._m0[1u].z;
        }
        _1708 = frontier_phi_22_46_ladder_2;
        _1710 = frontier_phi_22_46_ladder_1;
        _1712 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1617);
        _1708 = _1692.x * cbModelParam._m0[1u].z;
        _1710 = _1692.y * cbModelParam._m0[1u].z;
        _1712 = _1692.z * cbModelParam._m0[1u].z;
    }
    float _1724 = ((((1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_740 * _727)) * _711;
    float _1725 = _1724 * ((cbModelParam._m0[1u].w * (_1708 - _1608)) + _1608);
    float _1726 = _1724 * ((cbModelParam._m0[1u].w * (_1710 - _1610)) + _1610);
    float _1727 = _1724 * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1730 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, _1725 * cbSceneParam._m0[91u].x));
    uvec4 _1746 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1748 = _1746.x * 14u;
    uint _1749 = _1748 + 13u;
    float _1756 = _711 + (-1.0);
    float _1761 = (cbLight._m0[_1749].x * _1756) + 1.0;
    float _1762 = (cbLight._m0[_1749].y * _1756) + 1.0;
    float _1763 = (cbLight._m0[_1749].z * _1756) + 1.0;
    float _1764 = (cbLight._m0[_1749].w * _1756) + 1.0;
    uint _1765 = _1748 + 5u;
    float _1771 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1775 = _1748 + 4u;
    float _1781 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1785 = _1748 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_560, _561, _562));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_560, _561, _562));
    float _3889 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _3900 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1765].x * _1771) * _1806) + ((cbLight._m0[_1775].x * _1781) * _1804);
    float _1814 = ((_1771 * cbLight._m0[_1765].y) * _1806) + ((_1781 * cbLight._m0[_1775].y) * _1804);
    float _1815 = ((_1771 * cbLight._m0[_1765].z) * _1806) + ((_1781 * cbLight._m0[_1775].z) * _1804);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1748 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1813;
        _1834 = _1814;
        _1836 = _1815;
    }
    else
    {
        uint _1840 = _1748 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1748 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3911 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1859 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1815;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2036 = _1748 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1748 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _3927 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2055 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1877 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1832;
        _1879 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1834;
        _1881 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1836;
    }
    uint _1884 = _1748 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _563) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1748].x + _640;
    float _1900 = cbLight._m0[_1748].y + _641;
    float _1901 = cbLight._m0[_1748].z + _642;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1748].xyz));
    float _3943 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1913 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1914 = dot(vec3(_560, _561, _562), vec3(_1906, _1907, _1908));
    float _3965 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1906, _1907, _1908));
    float _3976 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _3987 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1962 = _1748 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _563) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1785].x + _640;
    float _1976 = cbLight._m0[_1785].y + _641;
    float _1977 = cbLight._m0[_1785].z + _642;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1785].xyz));
    float _3998 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1989 = dot(vec3(_560, _561, _562), vec3(_1982, _1983, _1984));
    float _4009 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1982, _1983, _1984));
    float _4020 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1913 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2011) + _1974) * _1988))) * _1988;
    float _4031 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1771) + (((_1937 * cbLight._m0[_1884].x) * _1951) * _1781);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1771) + (((_1937 * cbLight._m0[_1884].y) * _1951) * _1781);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1771) + (((_1937 * cbLight._m0[_1884].z) * _1951) * _1781);
    float _2097;
    float _2099;
    float _2101;
    if (_1821)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1748 + 2u;
        uint _2107 = _1748 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _563) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _640;
        float _2124 = cbLight._m0[_2103].y + _641;
        float _2125 = cbLight._m0[_2103].z + _642;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2103].xyz));
        float _4042 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2137 = dot(vec3(_560, _561, _562), vec3(_2130, _2131, _2132));
        float _4053 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4064 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2159 = 1.0 - _2122;
        float _2169 = (0.5 / (((_1913 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2159) + _2122) * _2136))) * _2136;
        float _4075 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2097 = (((_2158 * cbLight._m0[_2107].x) * _2171) * _2172) + _2033;
        _2099 = (((_2158 * cbLight._m0[_2107].y) * _2171) * _2172) + _2034;
        _2101 = (((_2158 * cbLight._m0[_2107].z) * _2171) * _2172) + _2035;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1839)
    {
        _2207 = _2097;
        _2209 = _2099;
        _2211 = _2101;
    }
    else
    {
        uint _2218 = _1748 + 3u;
        uint _2222 = _1748 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _563) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _640;
        float _2239 = cbLight._m0[_2218].y + _641;
        float _2240 = cbLight._m0[_2218].z + _642;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2218].xyz));
        float _4091 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2252 = dot(vec3(_560, _561, _562), vec3(_2245, _2246, _2247));
        float _4102 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4113 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_1913 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2274) + _2237) * _2251))) * _2251;
        float _4124 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2207 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2097;
        _2209 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2099;
        _2211 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2101;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1746.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _649) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _648) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
        }
        else
        {
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2671)
                {
                    frontier_phi_61_pred = _2655;
                    frontier_phi_61_pred_1 = _2660;
                    frontier_phi_61_pred_2 = _2659;
                    frontier_phi_61_pred_3 = _2658;
                    frontier_phi_61_pred_4 = _2657;
                    frontier_phi_61_pred_5 = _2656;
                }
                else
                {
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    uint _2785;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2670;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    for (;;)
                    {
                        uint _2789 = uint(findLSB(_2785)) + (_2661 << 5u);
                        uint _2786 = (_2785 + 4294967295u) & _2785;
                        uint _2791 = _2789 * 48u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2811 = (_2789 * 48u) + 4u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2830 = (_2789 * 48u) + 8u;
                        vec3 _2841 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x));
                        float _2845 = _2805.x - _2363;
                        float _2846 = _2805.y - _2364;
                        float _2847 = _2805.z - _2365;
                        float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                        float _2851 = inversesqrt(_2848);
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2855 = dot(vec3(_667, _670, _673), vec3(_2852, _2853, _2854));
                        float _2860 = 1.0 - (_2848 * _2805.w);
                        float _4150 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2862 = sqrt(_2848) * _2824.w;
                        float _2865 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2855) + _2866;
                        float _2872 = _2862 * _2862;
                        float _2876 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2861) / ((_2872 * 0.699999988079071044921875) + 1.0);
                        float _2880 = (-0.0) - _2363;
                        float _2881 = (-0.0) - _2364;
                        float _2882 = (-0.0) - _2365;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2897 = exp2(log2(1.0 / ((_2872 * 3.5) + 5.0)) * 0.25);
                        float _2898 = 1.0 - _727;
                        float _2905 = sqrt(1.0 - ((1.0 - (_2898 * _2898)) * (1.0 - (_2897 * _2897))));
                        float _2906 = _2905 * _2905;
                        float _2907 = _2906 * _2906;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2918 = dot(vec3(_667, _670, _673), vec3(_2887, _2888, _2889));
                        float _4166 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2922 = dot(vec3(_667, _670, _673), vec3(_2914 * _2908, _2914 * _2909, _2914 * _2910));
                        float _4177 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2925 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2929 = ((_2925 * _2925) * (_2907 + (-1.0))) + 1.0;
                        float _2930 = _2865 * _2906;
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2855) + _2931;
                        float _4188 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2936 = 1.0 - _2906;
                        float _2946 = (0.5 / (((_2935 * ((_2921 * _2936) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2935 * _2936) + _2906) * _2921))) * _2935;
                        float _4199 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2957 = (((_2907 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_2929 * _2929) * ((_2872 * 2.1991131305694580078125) + 3.141590118408203125))) * _2861;
                        _2714 = (_2876 * _2824.x) + _2782;
                        _2715 = (_2876 * _2824.y) + _2783;
                        _2716 = (_2876 * _2824.z) + _2784;
                        _2711 = (_2957 * _2841.x) + _2779;
                        _2712 = (_2957 * _2841.y) + _2780;
                        _2713 = (_2957 * _2841.z) + _2781;
                        if (_2786 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2786;
                        }
                    }
                    frontier_phi_61_pred = _2711;
                    frontier_phi_61_pred_1 = _2716;
                    frontier_phi_61_pred_2 = _2715;
                    frontier_phi_61_pred_3 = _2714;
                    frontier_phi_61_pred_4 = _2713;
                    frontier_phi_61_pred_5 = _2712;
                }
                _2511 = frontier_phi_61_pred;
                _2521 = frontier_phi_61_pred_1;
                _2519 = frontier_phi_61_pred_2;
                _2517 = frontier_phi_61_pred_3;
                _2515 = frontier_phi_61_pred_4;
                _2513 = frontier_phi_61_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2511;
                    _2656 = _2513;
                    _2657 = _2515;
                    _2658 = _2517;
                    _2659 = _2519;
                    _2660 = _2521;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
        }
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.z;
        uint _2527 = (_2525 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2527) & _2409) == 0u)
        {
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2649 = _2648 * _2363;
            float _2650 = _2648 * _2364;
            float _2651 = _2648 * _2365;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2527 < ((_2525 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2762 = _2510;
                float _2763 = _2512;
                float _2764 = _2514;
                float _2765 = _2516;
                float _2766 = _2518;
                float _2767 = _2520;
                uint _2768 = _2527;
                uint _2777;
                bool _2778;
                for (;;)
                {
                    _2777 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                    _2778 = _2777 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2778)
                    {
                        frontier_phi_67_pred = _2765;
                        frontier_phi_67_pred_1 = _2766;
                        frontier_phi_67_pred_2 = _2767;
                        frontier_phi_67_pred_3 = _2764;
                        frontier_phi_67_pred_4 = _2763;
                        frontier_phi_67_pred_5 = _2762;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        uint _2981 = _2777;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        vec3 _3035;
                        vec4 _3050;
                        vec4 _3065;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2992 = ((_2768 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2992 * 40u) + 8u;
                            _3035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x));
                            uint _3037 = (_2992 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_2992 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_2992 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2992 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2365, _3099.z, fma(_2364, _3099.y, _3099.x * _2363)) + _3099.w;
                            _3112 = !((fma(_2365, _3080.z, fma(_2364, _3080.y, _3080.x * _2363)) + _3080.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3007.x - _2363;
                                float _3140 = _3007.y - _2364;
                                float _3141 = _3007.z - _2365;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3008 * _3008));
                                float _4210 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3157 = sqrt(_3142) * _3023.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_667, _670, _673))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2365, _3050.z, fma(_2364, _3050.y, _3050.x * _2363)) + _3050.w) / _3111;
                                float _3171 = (fma(_2365, _3065.z, fma(_2364, _3065.y, _3065.x * _2363)) + _3065.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4226 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _727;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2649;
                                float _3201 = _3147 - _2650;
                                float _3202 = _3148 - _2651;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_667, _670, _673), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4237 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3214 = dot(vec3(_667, _670, _673), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4248 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_667, _670, _673), vec3(_3146, _3147, _3148))) + _3223;
                                float _4259 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4270 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3251 * _3035.x;
                                frontier_phi_73_pred_1 = _3251 * _3035.y;
                                frontier_phi_73_pred_2 = _3177 * _3023.z;
                                frontier_phi_73_pred_3 = _3177 * _3023.y;
                                frontier_phi_73_pred_4 = _3177 * _3023.x;
                                frontier_phi_73_pred_5 = _3251 * _3035.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_73_pred;
                            _3256 = frontier_phi_73_pred_1;
                            _3260 = frontier_phi_73_pred_2;
                            _3259 = frontier_phi_73_pred_3;
                            _3258 = frontier_phi_73_pred_4;
                            _3257 = frontier_phi_73_pred_5;
                            _2965 = _3258 + _2978;
                            _2966 = _3259 + _2979;
                            _2967 = _3260 + _2980;
                            _2962 = _3255 + _2975;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2965;
                        frontier_phi_67_pred_1 = _2966;
                        frontier_phi_67_pred_2 = _2967;
                        frontier_phi_67_pred_3 = _2964;
                        frontier_phi_67_pred_4 = _2963;
                        frontier_phi_67_pred_5 = _2962;
                    }
                    _2630 = frontier_phi_67_pred;
                    _2632 = frontier_phi_67_pred_1;
                    _2634 = frontier_phi_67_pred_2;
                    _2628 = frontier_phi_67_pred_3;
                    _2626 = frontier_phi_67_pred_4;
                    _2624 = frontier_phi_67_pred_5;
                    uint _2769 = _2768 + 1u;
                    if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2762 = _2624;
                        _2763 = _2626;
                        _2764 = _2628;
                        _2765 = _2630;
                        _2766 = _2632;
                        _2767 = _2634;
                        _2768 = _2769;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2632;
                frontier_phi_55_56_ladder_1 = _2634;
                frontier_phi_55_56_ladder_2 = _2630;
                frontier_phi_55_56_ladder_3 = _2628;
                frontier_phi_55_56_ladder_4 = _2626;
                frontier_phi_55_56_ladder_5 = _2624;
            }
            else
            {
                frontier_phi_55_56_ladder = _2518;
                frontier_phi_55_56_ladder_1 = _2520;
                frontier_phi_55_56_ladder_2 = _2516;
                frontier_phi_55_56_ladder_3 = _2514;
                frontier_phi_55_56_ladder_4 = _2512;
                frontier_phi_55_56_ladder_5 = _2510;
            }
            _2623 = frontier_phi_55_56_ladder_5;
            _2625 = frontier_phi_55_56_ladder_4;
            _2627 = frontier_phi_55_56_ladder_3;
            _2629 = frontier_phi_55_56_ladder_2;
            _2631 = frontier_phi_55_56_ladder;
            _2633 = frontier_phi_55_56_ladder_1;
        }
        float _2638 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2422 = (_2638 * _2629) + _1877;
        _2424 = (_2638 * _2631) + _1879;
        _2426 = (_2638 * _2633) + _1881;
        _2428 = ((_2623 * 0.039999999105930328369140625) * _2638) + _2207;
        _2430 = ((_2625 * 0.039999999105930328369140625) * _2638) + _2209;
        _2432 = ((_2627 * 0.039999999105930328369140625) * _2638) + _2211;
    }
    else
    {
        _2422 = _1877;
        _2424 = _1879;
        _2426 = _1881;
        _2428 = _2207;
        _2430 = _2209;
        _2432 = _2211;
    }
    float _4286 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4297 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4308 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    uint _2452 = _228 + 6u;
    float _2460 = _648 / cbSceneParam._m0[86u].x;
    float _2461 = _649 / cbSceneParam._m0[86u].y;
    vec4 _2475 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2477 = _2475.x;
    float _2478 = _2475.y;
    float _2479 = _2475.z;
    float _2480 = _2475.w;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2535 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2536 = _2535 / _581;
        float _2547 = _2536 * _633;
        float _2548 = _634 * _2536;
        float _2549 = (-0.0) - _2548;
        float _2551 = _2536 * _635;
        float _2553 = (cbSceneParam._m0[77u].w * _2549) / _2535;
        float _2554 = _2553 + cbSceneParam._m0[79u].w;
        float _2555 = cbSceneParam._m0[79u].w - _2548;
        float _2561 = sqrt(((_2547 * _2547) + (_2548 * _2548)) + (_2551 * _2551));
        float _2564 = (1.0 - (cbSceneParam._m0[77u].w / _2535)) * _2561;
        float _2569 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2571 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2549 - _2553) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2554 > 0.0) ? exp2(_2569 * _2554) : (2.0 - exp2(_2571 * _2554))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2564;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : max(_2554, _2555));
            float _2686 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : min(_2554, _2555));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2724 = ((abs(_2561 / _2549) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2569 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2569 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2571 * _2695) - exp2(_2571 * _2696)) * _2684))) + (_2564 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2480);
        _2573 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2477;
        _2575 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2478;
        _2577 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2479;
        _2579 = _2735 * _2480;
    }
    else
    {
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
        _2579 = _2480;
    }
    float _2591 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2592 = _2591 == 3.0;
    float _2593 = log2(_2579);
    float _2600 = exp2(_2593 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2422 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _711))) + ((_2428 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2601 = exp2(_2593 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2424 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _711))) + ((_2430 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2602 = exp2(_2593 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2426 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _711))) + ((_2432 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2611 = (_2591 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2611 * (_2592 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.y = _2611 * (_2592 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.z = _2611 * (_2592 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.w = cbInstanceData._m0[_2452].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2452].w;
}


