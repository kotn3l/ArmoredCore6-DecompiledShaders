#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1222;
float _3582;
float _3583;
float _3584;
float _3585;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3594 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3605 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3616 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3627 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _456 = _454.x;
    float _457 = 1.0 - _456;
    float _466 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _469 = ((isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : min(_466, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _478 = (_469 - ((((((_456 - _457) * cbMtdParam._m0[24u].z) + _457) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _469))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3648 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _486 = (_479 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) + _349;
    float _487 = (_479 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) + _350;
    float _488 = (_479 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) + _351;
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _531 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_503 - _504) * cbMtdParam._m0[24u].w) + _504) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3659 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _540 = ((((cbMtdParam._m0[10u].x - _486) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _532) + _486;
    float _541 = ((((cbMtdParam._m0[10u].y - _487) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _532) + _487;
    float _542 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _488)) * _532) + _488;
    float _547 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _568 = (_561.x * 2.0) + (-1.0);
    float _569 = (_561.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3670 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _578 = (_479 * (_561.z - _547)) + _547;
    float _581 = ((cbMtdParam._m0[23u].y - _578) * _532) + _578;
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _609 = (_603.x * 2.0) + (-1.0);
    float _610 = (_603.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3681 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _628 = (((_568 - _436) + (cbMtdParam._m0[21u].x * _436)) * _479) + _436;
    float _629 = (((_569 - _437) + (cbMtdParam._m0[21u].x * _437)) * _479) + _437;
    float _630 = (_479 * (sqrt(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) - _431)) + _431;
    float _641 = (((_609 - _628) + (_628 * cbMtdParam._m0[22u].z)) * _532) + _628;
    float _642 = (((_610 - _629) + (_629 * cbMtdParam._m0[22u].z)) * _532) + _629;
    float _643 = ((sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) - _630) * _532) + _630;
    float _645 = cbMtdParam._m0[22u].x + _416.w;
    float _648 = fma(_643, _237 * NORMAL.x, fma(_642, _244 * TANGENT.x, (_230 * _222) * _641));
    float _651 = fma(_643, _237 * NORMAL.y, fma(_642, _244 * TANGENT.y, (_230 * _223) * _641));
    float _654 = fma(_643, _237 * NORMAL.z, fma(_642, _244 * TANGENT.z, (_230 * _224) * _641));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3692 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _662 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3714 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3725 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3736 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    vec4 _744 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _746 = _744.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _903 = sqrt(((_730 * _730) + (_731 * _731)) + (_732 * _732));
        float _909 = (cbMatDynParam._m0[5u].x * _903) + cbMatDynParam._m0[5u].y;
        float _3747 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _914 = (cbMatDynParam._m0[5u].z * _903) + cbMatDynParam._m0[5u].w;
        float _3758 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) - _910)) + _910) < ((_746 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _779 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _782 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _785 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _798 = _269 + 9u;
    uint _799 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _805 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_799].x;
    float _806 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_799].y;
    float _807 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_799].z;
    float _3769 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    vec4 _819 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _823 = ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * TEXCOORD_5.w) * _819.x;
    float _824 = dot(vec3(_659, _660, _661), vec3(_737, _738, _739));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _659) - _737;
    float _832 = (_827 * _660) - _738;
    float _833 = (_827 * _661) - _739;
    float _837 = abs(dot(vec3(_737, _738, _739), vec3(_659, _660, _661)));
    float _3802 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_662);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = fma(_892, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884));
        float _950 = fma(_892, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884));
        float _954 = fma(_892, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884));
        float _979 = _884 + _659;
        float _980 = _888 + _660;
        float _981 = _892 + _661;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _946;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _950;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _954;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_946 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_950 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_954 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_659, _660, _661), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3850 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_659, _660, _661), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3883 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_659, _660, _661), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3916 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_892, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884));
        float _1268 = fma(_892, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884));
        float _1272 = fma(_892, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884));
        float _1295 = _884 + _659;
        float _1296 = _888 + _660;
        float _1297 = _892 + _661;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_659, _660, _661), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3979 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_659, _660, _661), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4012 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_659, _660, _661), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4045 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1222;
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = _1222;
        _1544 = _1222;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1234)) + _1234;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1235)) + _1235;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1236)) + _1236;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _831 * 0.5;
    float _1602 = _832 * 0.5;
    float _1603 = _833 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_892, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_892, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_892, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1731 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1734 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1762 = frontier_phi_17_15_ladder;
        }
        float _1964;
        if (_1731 > 0.0)
        {
            _1964 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1964 = frontier_phi_26_22_ladder;
        }
        float _2207;
        if (_1734 > 0.0)
        {
            _2207 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2207 = frontier_phi_38_33_ladder;
        }
        float _2209 = isnan(_1964) ? _1762 : (isnan(_1762) ? _1964 : min(_1762, _1964));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1728) + _1717;
        float _2215 = (_2210 * _1731) + _1721;
        float _2216 = (_2210 * _1734) + _1725;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2217;
        float _2221 = _2217 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 > _2221) || ((_2215 < _2219) || ((_2214 < _2219) || (_2214 > _2221))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2216, cbModelParam._m0[9u].z, fma(_2215, cbModelParam._m0[9u].y, _2214 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2216, cbModelParam._m0[10u].z, fma(_2215, cbModelParam._m0[10u].y, _2214 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2216, cbModelParam._m0[11u].z, fma(_2215, cbModelParam._m0[11u].y, _2214 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_16_38_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_16_38_ladder_2;
        _1752 = frontier_phi_16_38_ladder_1;
        _1754 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1670);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1812 = fma(_892, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884)) + cbModelParam._m0[21u].w;
        float _1816 = fma(_892, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884)) + cbModelParam._m0[22u].w;
        float _1820 = fma(_892, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884)) + cbModelParam._m0[23u].w;
        float _1823 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1826 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1829 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1969;
        if (_1823 > 0.0)
        {
            _1969 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1969 = frontier_phi_28_24_ladder;
        }
        float _2234;
        if (_1826 > 0.0)
        {
            _2234 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2234 = frontier_phi_40_35_ladder;
        }
        float _2439;
        if (_1829 > 0.0)
        {
            _2439 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2439 = frontier_phi_49_46_ladder;
        }
        float _2441 = isnan(_2234) ? _1969 : (isnan(_1969) ? _2234 : min(_1969, _2234));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1823) + _1812;
        float _2447 = (_2442 * _1826) + _1816;
        float _2448 = (_2442 * _1829) + _1820;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_25_49_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1848 = frontier_phi_25_49_ladder_2;
        _1850 = frontier_phi_25_49_ladder_1;
        _1852 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1759);
        _1848 = _1832.x * cbModelParam._m0[1u].z;
        _1850 = _1832.y * cbModelParam._m0[1u].z;
        _1852 = _1832.z * cbModelParam._m0[1u].z;
    }
    float _1864 = ((((1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_852 * _839)) * _823;
    float _1865 = _1864 * ((cbModelParam._m0[1u].w * (_1848 - _1750)) + _1750);
    float _1866 = _1864 * ((cbModelParam._m0[1u].w * (_1850 - _1752)) + _1752);
    float _1867 = _1864 * ((cbModelParam._m0[1u].w * (_1852 - _1754)) + _1754);
    float _1870 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1865 * cbSceneParam._m0[91u].x));
    uvec4 _1886 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1888 = _1886.x * 14u;
    uint _1889 = _1888 + 13u;
    float _1896 = _823 + (-1.0);
    float _1901 = (cbLight._m0[_1889].x * _1896) + 1.0;
    float _1902 = (cbLight._m0[_1889].y * _1896) + 1.0;
    float _1903 = (cbLight._m0[_1889].z * _1896) + 1.0;
    float _1904 = (cbLight._m0[_1889].w * _1896) + 1.0;
    uint _1905 = _1888 + 5u;
    float _1911 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1915 = _1888 + 4u;
    float _1922 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1926 = _1888 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_659, _660, _661));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_659, _660, _661));
    float _4181 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4192 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1905].x * _1911) * _1947) + ((cbLight._m0[_1915].x * _1922) * _1945);
    float _1955 = ((_1911 * cbLight._m0[_1905].y) * _1947) + ((_1922 * cbLight._m0[_1915].y) * _1945);
    float _1956 = ((_1911 * cbLight._m0[_1905].z) * _1947) + ((_1922 * cbLight._m0[_1915].z) * _1945);
    uvec4 _1961 = floatBitsToUint(cbLight._m0[_1888 + 12u]);
    bool _1963 = _1961.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1963)
    {
        _1974 = _1954;
        _1976 = _1955;
        _1978 = _1956;
    }
    else
    {
        uint _1982 = _1888 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1888 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4203 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2001 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1954;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1955;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1956;
    }
    bool _1981 = _1961.y == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1981)
    {
        _2019 = _1974;
        _2021 = _1976;
        _2023 = _1978;
    }
    else
    {
        uint _2178 = _1888 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1888 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4219 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2197 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2019 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1974;
        _2021 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1976;
        _2023 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1978;
    }
    uint _2026 = _1888 + 8u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _662) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1888].x + _737;
    float _2042 = cbLight._m0[_1888].y + _738;
    float _2043 = cbLight._m0[_1888].z + _739;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1888].xyz));
    float _4235 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2055 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2056 = dot(vec3(_659, _660, _661), vec3(_2048, _2049, _2050));
    float _4257 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2048, _2049, _2050));
    float _4268 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2040 * _2040;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2040;
    float _2091 = (0.5 / (((_2055 * ((_2054 * _2080) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2080) + _2040) * _2054))) * _2054;
    float _4279 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    uint _2104 = _1888 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _662) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1926].x + _737;
    float _2118 = cbLight._m0[_1926].y + _738;
    float _2119 = cbLight._m0[_1926].z + _739;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1926].xyz));
    float _4290 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2131 = dot(vec3(_659, _660, _661), vec3(_2124, _2125, _2126));
    float _4301 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2124, _2125, _2126));
    float _4312 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2055 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2153) + _2116) * _2130))) * _2130;
    float _4323 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1911) + (((_2079 * cbLight._m0[_2026].x) * _2093) * _1922);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1911) + (((_2079 * cbLight._m0[_2026].y) * _2093) * _1922);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1911) + (((_2079 * cbLight._m0[_2026].z) * _2093) * _1922);
    float _2239;
    float _2241;
    float _2243;
    if (_1963)
    {
        _2239 = _2175;
        _2241 = _2176;
        _2243 = _2177;
    }
    else
    {
        uint _2245 = _1888 + 2u;
        uint _2249 = _1888 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _662) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _737;
        float _2266 = cbLight._m0[_2245].y + _738;
        float _2267 = cbLight._m0[_2245].z + _739;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2245].xyz));
        float _4334 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2279 = dot(vec3(_659, _660, _661), vec3(_2272, _2273, _2274));
        float _4345 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4356 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_2055 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2301) + _2264) * _2278))) * _2278;
        float _4367 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2239 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2175;
        _2241 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2176;
        _2243 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2177;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1981)
    {
        _2349 = _2239;
        _2351 = _2241;
        _2353 = _2243;
    }
    else
    {
        uint _2360 = _1888 + 3u;
        uint _2364 = _1888 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _662) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _737;
        float _2381 = cbLight._m0[_2360].y + _738;
        float _2382 = cbLight._m0[_2360].z + _739;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2360].xyz));
        float _4383 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2394 = dot(vec3(_659, _660, _661), vec3(_2387, _2388, _2389));
        float _4394 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4405 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2055 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2416) + _2379) * _2393))) * _2393;
        float _4416 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2239;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2241;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2243;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1886.y == 0u)
    {
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2504;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2504;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2504;
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2520)));
        float _2541 = (log2(_2507 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            uint _2811 = 0u;
            uint _2820;
            bool _2821;
            for (;;)
            {
                _2820 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                _2821 = _2820 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2821)
                {
                    frontier_phi_66_pred = _2805;
                    frontier_phi_66_pred_1 = _2810;
                    frontier_phi_66_pred_2 = _2809;
                    frontier_phi_66_pred_3 = _2808;
                    frontier_phi_66_pred_4 = _2807;
                    frontier_phi_66_pred_5 = _2806;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2820;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2811 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2505;
                        float _3017 = _2976.y - _2506;
                        float _3018 = _2976.z - _2507;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_779, _782, _785), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4442 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2505;
                        float _3052 = (-0.0) - _2506;
                        float _3053 = (-0.0) - _2507;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _839;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_779, _782, _785), vec3(_3058, _3059, _3060));
                        float _4458 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3093 = dot(vec3(_779, _782, _785), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4469 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4480 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4491 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2880 = (_3047 * _2995.x) + _2953;
                        _2881 = (_3047 * _2995.y) + _2954;
                        _2882 = (_3047 * _2995.z) + _2955;
                        _2877 = (_3128 * _3012.x) + _2950;
                        _2878 = (_3128 * _3012.y) + _2951;
                        _2879 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_66_pred = _2877;
                    frontier_phi_66_pred_1 = _2882;
                    frontier_phi_66_pred_2 = _2881;
                    frontier_phi_66_pred_3 = _2880;
                    frontier_phi_66_pred_4 = _2879;
                    frontier_phi_66_pred_5 = _2878;
                }
                _2653 = frontier_phi_66_pred;
                _2663 = frontier_phi_66_pred_1;
                _2661 = frontier_phi_66_pred_2;
                _2659 = frontier_phi_66_pred_3;
                _2657 = frontier_phi_66_pred_4;
                _2655 = frontier_phi_66_pred_5;
                uint _2812 = _2811 + 1u;
                if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2805 = _2653;
                    _2806 = _2655;
                    _2807 = _2657;
                    _2808 = _2659;
                    _2809 = _2661;
                    _2810 = _2663;
                    _2811 = _2812;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((4294967295u << _2669) & _2551) == 0u)
        {
            _2773 = _2652;
            _2775 = _2654;
            _2777 = _2656;
            _2779 = _2658;
            _2781 = _2660;
            _2783 = _2662;
        }
        else
        {
            float _2798 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
            float _2799 = _2798 * _2505;
            float _2800 = _2798 * _2506;
            float _2801 = _2798 * _2507;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2933 = _2652;
                float _2934 = _2654;
                float _2935 = _2656;
                float _2936 = _2658;
                float _2937 = _2660;
                float _2938 = _2662;
                uint _2939 = _2669;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2949)
                    {
                        frontier_phi_77_pred = _2938;
                        frontier_phi_77_pred_1 = _2937;
                        frontier_phi_77_pred_2 = _2936;
                        frontier_phi_77_pred_3 = _2935;
                        frontier_phi_77_pred_4 = _2934;
                        frontier_phi_77_pred_5 = _2933;
                    }
                    else
                    {
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        uint _3161 = _2948;
                        uint _3162;
                        vec4 _3187;
                        float _3188;
                        vec4 _3203;
                        vec3 _3215;
                        vec4 _3230;
                        vec4 _3245;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3172 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3161));
                            _3162 = (_3161 + 4294967295u) & _3161;
                            uint _3174 = _3172 * 40u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3188 = _3187.w;
                            uint _3190 = (_3172 * 40u) + 4u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3172 * 40u) + 8u;
                            _3215 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x));
                            uint _3217 = (_3172 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3172 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3172 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3172 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_2507, _3279.z, fma(_2506, _3279.y, _3279.x * _2505)) + _3279.w;
                            _3292 = !((fma(_2507, _3260.z, fma(_2506, _3260.y, _3260.x * _2505)) + _3260.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3187.x - _2505;
                                float _3320 = _3187.y - _2506;
                                float _3321 = _3187.z - _2507;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3188 * _3188));
                                float _4502 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3337 = sqrt(_3322) * _3203.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_779, _782, _785))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_2507, _3230.z, fma(_2506, _3230.y, _3230.x * _2505)) + _3230.w) / _3291;
                                float _3351 = (fma(_2507, _3245.z, fma(_2506, _3245.y, _3245.x * _2505)) + _3245.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4518 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _839;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2799;
                                float _3381 = _3327 - _2800;
                                float _3382 = _3328 - _2801;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_779, _782, _785), vec3((-0.0) - _2799, (-0.0) - _2800, (-0.0) - _2801));
                                float _4529 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3394 = dot(vec3(_779, _782, _785), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4540 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_779, _782, _785), vec3(_3326, _3327, _3328))) + _3403;
                                float _4551 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4562 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3357 * _3203.y;
                                frontier_phi_83_pred_1 = _3357 * _3203.x;
                                frontier_phi_83_pred_2 = _3431 * _3215.z;
                                frontier_phi_83_pred_3 = _3431 * _3215.y;
                                frontier_phi_83_pred_4 = _3431 * _3215.x;
                                frontier_phi_83_pred_5 = _3357 * _3203.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3439 = frontier_phi_83_pred;
                            _3438 = frontier_phi_83_pred_1;
                            _3437 = frontier_phi_83_pred_2;
                            _3436 = frontier_phi_83_pred_3;
                            _3435 = frontier_phi_83_pred_4;
                            _3440 = frontier_phi_83_pred_5;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            _3142 = _3435 + _3155;
                            _3143 = _3436 + _3156;
                            _3144 = _3437 + _3157;
                            if (_3162 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3162;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3147;
                        frontier_phi_77_pred_1 = _3146;
                        frontier_phi_77_pred_2 = _3145;
                        frontier_phi_77_pred_3 = _3144;
                        frontier_phi_77_pred_4 = _3143;
                        frontier_phi_77_pred_5 = _3142;
                    }
                    _2784 = frontier_phi_77_pred;
                    _2782 = frontier_phi_77_pred_1;
                    _2780 = frontier_phi_77_pred_2;
                    _2778 = frontier_phi_77_pred_3;
                    _2776 = frontier_phi_77_pred_4;
                    _2774 = frontier_phi_77_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2774;
                        _2934 = _2776;
                        _2935 = _2778;
                        _2936 = _2780;
                        _2937 = _2782;
                        _2938 = _2784;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2778;
                frontier_phi_58_59_ladder_1 = _2784;
                frontier_phi_58_59_ladder_2 = _2782;
                frontier_phi_58_59_ladder_3 = _2780;
                frontier_phi_58_59_ladder_4 = _2776;
                frontier_phi_58_59_ladder_5 = _2774;
            }
            else
            {
                frontier_phi_58_59_ladder = _2656;
                frontier_phi_58_59_ladder_1 = _2662;
                frontier_phi_58_59_ladder_2 = _2660;
                frontier_phi_58_59_ladder_3 = _2658;
                frontier_phi_58_59_ladder_4 = _2654;
                frontier_phi_58_59_ladder_5 = _2652;
            }
            _2773 = frontier_phi_58_59_ladder_5;
            _2775 = frontier_phi_58_59_ladder_4;
            _2777 = frontier_phi_58_59_ladder;
            _2779 = frontier_phi_58_59_ladder_3;
            _2781 = frontier_phi_58_59_ladder_2;
            _2783 = frontier_phi_58_59_ladder_1;
        }
        float _2788 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2564 = (_2788 * _2779) + _2019;
        _2566 = (_2788 * _2781) + _2021;
        _2568 = (_2788 * _2783) + _2023;
        _2570 = ((_2773 * 0.039999999105930328369140625) * _2788) + _2349;
        _2572 = ((_2775 * 0.039999999105930328369140625) * _2788) + _2351;
        _2574 = ((_2777 * 0.039999999105930328369140625) * _2788) + _2353;
    }
    else
    {
        _2564 = _2019;
        _2566 = _2021;
        _2568 = _2023;
        _2570 = _2349;
        _2572 = _2351;
        _2574 = _2353;
    }
    float _4578 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4589 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4600 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2591 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2564 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _823))) + ((_2570 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2566 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _823))) + ((_2572 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2593 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2568 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _823))) + ((_2574 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    uint _2594 = _269 + 6u;
    float _2602 = _758 / cbSceneParam._m0[86u].x;
    float _2603 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _2678 = _2677 / _680;
        float _2689 = _2678 * _730;
        float _2690 = _731 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2693 = _2678 * _732;
        float _2695 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2696 = _2695 + cbSceneParam._m0[79u].w;
        float _2697 = cbSceneParam._m0[79u].w - _2690;
        float _2703 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2693 * _2693));
        float _2706 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2703;
        float _2711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2890;
        if (abs((_2691 - _2695) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2890 = ((((_2696 > 0.0) ? exp2(_2711 * _2696) : (2.0 - exp2(_2713 * _2696))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2706;
        }
        else
        {
            float _2834 = 1.0 / cbSceneParam._m0[80u].x;
            float _2835 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : max(_2696, _2697));
            float _2836 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : min(_2696, _2697));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            _2890 = ((abs(_2703 / _2691) * cbSceneParam._m0[80u].y) * ((((_2845 - _2846) * 2.0) - ((exp2(_2711 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)))) - exp2(_2711 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))))) * _2834)) - ((exp2(_2713 * _2845) - exp2(_2713 * _2846)) * _2834))) + (_2706 * cbSceneParam._m0[80u].z);
        }
        vec4 _2892 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2901 = exp2((_2890 * (-1.44269502162933349609375)) * (1.0 - _2892.w));
        float _2902 = log2(_2901);
        float _2918 = log2(_2622);
        _2715 = (exp2(_2918 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].x)) * _2892.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2717 = (exp2(_2918 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].y)) * _2892.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2719 = (exp2(_2918 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].z)) * _2892.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2721 = _2901 * _2622;
    }
    else
    {
        _2715 = _2619;
        _2717 = _2620;
        _2719 = _2621;
        _2721 = _2622;
    }
    bool _2928;
    vec4 _2731;
    vec4 _2753;
    float _2755;
    float _2759;
    float _2760;
    float _2761;
    float _2762;
    bool _2772;
    for (;;)
    {
        _2731 = cbMatDynParam._m0[0u];
        float _2733 = roundEven(_2731.y);
        bool _2734 = _2733 == 3.0;
        float _2735 = log2(_2721);
        float _2742 = exp2(_2735 * cbSceneParam._m0[78u].x) * _2591;
        float _2743 = exp2(_2735 * cbSceneParam._m0[78u].y) * _2592;
        float _2744 = exp2(_2735 * cbSceneParam._m0[78u].z) * _2593;
        float _2751 = _746 + (-0.5);
        _2753 = cbMtdParam._m0[1u];
        _2755 = _2753.y * _2751;
        float _2758 = (_2733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2759 = _2758 * (_2734 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2715)));
        _2760 = _2758 * (_2734 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2717)));
        _2761 = _2758 * (_2734 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2719)));
        _2762 = _2751 * 0.999000012874603271484375;
        _2772 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2772)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2762) < 0.5)
            {
                _2928 = true;
                break;
            }
        }
        uint _2869 = _798 + uint(_2731.w);
        if ((cbInstanceData._m0[_2869].w < 1.0) && ((cbInstanceData._m0[_2869].w + _2762) < 0.5))
        {
            _2928 = true;
            break;
        }
        if ((_2755 + 1.0) < _2753.x)
        {
            _2928 = true;
            break;
        }
        _2928 = false;
        break;
    }
    float _3133;
    if (_2928)
    {
        discard_state = true;
        _3133 = 0.0;
    }
    else
    {
        _3133 = cbInstanceData._m0[_2594].w;
    }
    SV_Target.x = _2759;
    SV_Target.y = _2760;
    SV_Target.z = _2761;
    SV_Target.w = _3133;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
    discard_exit();
}


