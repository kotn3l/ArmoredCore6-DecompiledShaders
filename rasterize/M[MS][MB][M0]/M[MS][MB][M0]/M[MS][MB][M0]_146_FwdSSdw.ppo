#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1284;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3611 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3622 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))));
    float _504 = _494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _505 = _495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _508 = fma(_501, _239, fma(_505, _246, _504 * _232));
    float _511 = fma(_501, _240, fma(_505, _247, _504 * _233));
    float _514 = fma(_501, _241, fma(_505, _248, _504 * _234));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _571 = (cbMtdParam._m0[19u].x + dot(vec4(_518 * _508, _518 * _511, _518 * _514, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_564 - _565) * cbMtdParam._m0[24u].z) + _565) * cbMtdParam._m0[21u].z);
    float _3633 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _574 = (-0.0) - cbMtdParam._m0[24u].y;
    float _576 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
    float _584 = _572 - ((_572 * TEXCOORD_8.x) * _577);
    float _585 = _572 - ((_572 * TEXCOORD_8.y) * _577);
    float _586 = _572 - ((_572 * TEXCOORD_8.z) * _577);
    float _593 = (_584 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _594 = (_585 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _595 = (_586 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _638 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_609 - _610) * cbMtdParam._m0[24u].w) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3654 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _647 = ((((cbMtdParam._m0[10u].x - _593) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _639) + _593;
    float _648 = ((((cbMtdParam._m0[10u].y - _594) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _639) + _594;
    float _649 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _595)) * _639) + _595;
    float _654 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    vec4 _668 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3665 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = ((_668.z - _654) * _584) + _654;
    float _688 = ((cbMtdParam._m0[23u].y - _685) * _639) + _685;
    vec4 _707 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3676 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _730 = ((sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) - _501) * _586) + _501;
    float _733 = (((_675 - _504) * _584) + _504) + (cbMtdParam._m0[21u].x * _504);
    float _734 = (((_676 - _505) * _585) + _505) + (cbMtdParam._m0[21u].x * _505);
    float _745 = (((_713 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _639) + _733;
    float _746 = (((_714 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _639) + _734;
    float _747 = (_639 * (sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) - _730)) + _730;
    float _749 = cbMtdParam._m0[22u].x + _534.w;
    float _752 = fma(_747, _239, fma(_746, _246, _745 * _232));
    float _755 = fma(_747, _240, fma(_746, _247, _745 * _233));
    float _758 = fma(_747, _241, fma(_746, _248, _745 * _234));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3687 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _766 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3709 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3720 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3731 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _784 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    float _850 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _851 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _872 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _875 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _889 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _895 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_889].x;
    float _896 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_889].y;
    float _897 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_889].z;
    float _3742 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _850, cbSceneParam._m0[86u].y * _851));
    float _913 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_763, _764, _765), vec3(_842, _843, _844));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _763) - _842;
    float _922 = (_917 * _764) - _843;
    float _923 = (_917 * _765) - _844;
    float _927 = abs(dot(vec3(_842, _843, _844), vec3(_763, _764, _765)));
    float _3775 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_766);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1012 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1016 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1041 = _974 + _763;
        float _1042 = _978 + _764;
        float _1043 = _982 + _765;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_763, _764, _765), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3823 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_763, _764, _765), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3856 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_763, _764, _765), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3889 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1327 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1331 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1354 = _974 + _763;
        float _1355 = _978 + _764;
        float _1356 = _982 + _765;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_763, _764, _765), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3952 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_763, _764, _765), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _3985 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_763, _764, _765), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4018 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1284;
        _1593 = _1284;
        _1594 = _1284;
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1296)) + _1296;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _921 * 0.5;
    float _1661 = _922 * 0.5;
    float _1662 = _923 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1703;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1714;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1705 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1718 = (_1714 * cbModelParam._m0[1u].x) + (_1703 * (1.0 - cbModelParam._m0[1u].x));
    float _1728 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1728 : min(cbModelParam._m0[25u].z, _1728));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1790 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1793 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1821 = frontier_phi_14_12_ladder;
        }
        float _2042;
        if (_1790 > 0.0)
        {
            _2042 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2042 = frontier_phi_23_19_ladder;
        }
        float _2288;
        if (_1793 > 0.0)
        {
            _2288 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2288 = frontier_phi_35_30_ladder;
        }
        float _2290 = isnan(_2042) ? _1821 : (isnan(_1821) ? _2042 : min(_1821, _2042));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1787) + _1776;
        float _2296 = (_2291 * _1790) + _1780;
        float _2297 = (_2291 * _1793) + _1784;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1729);
            frontier_phi_13_35_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_13_35_ladder_2;
        _1811 = frontier_phi_13_35_ladder_1;
        _1813 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1729);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1885 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1888 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2047;
        if (_1882 > 0.0)
        {
            _2047 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2047 = frontier_phi_25_21_ladder;
        }
        float _2315;
        if (_1885 > 0.0)
        {
            _2315 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2315 = frontier_phi_37_32_ladder;
        }
        float _2520;
        if (_1888 > 0.0)
        {
            _2520 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2520 = frontier_phi_46_43_ladder;
        }
        float _2522 = isnan(_2315) ? _2047 : (isnan(_2047) ? _2315 : min(_2047, _2315));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1882) + _1871;
        float _2528 = (_2523 * _1885) + _1875;
        float _2529 = (_2523 * _1888) + _1879;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_22_46_ladder = _2728.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2728.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2728.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_22_46_ladder_2;
        _1909 = frontier_phi_22_46_ladder_1;
        _1911 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1818);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1923 = ((((1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_942 * _929)) * _913;
    float _1924 = _1923 * ((cbModelParam._m0[1u].w * (_1907 - _1809)) + _1809);
    float _1925 = _1923 * ((cbModelParam._m0[1u].w * (_1909 - _1811)) + _1811);
    float _1926 = _1923 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    vec4 _1943 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_850, _851));
    float _1945 = _1943.w;
    float _1957 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1945);
    float _1958 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1945);
    float _1959 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1945);
    uvec4 _1963 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1965 = _1963.x * 14u;
    uint _1966 = _1965 + 13u;
    float _1973 = _913 + (-1.0);
    float _1978 = (cbLight._m0[_1966].x * _1973) + 1.0;
    float _1979 = (cbLight._m0[_1966].y * _1973) + 1.0;
    float _1980 = (cbLight._m0[_1966].z * _1973) + 1.0;
    float _1981 = (cbLight._m0[_1966].w * _1973) + 1.0;
    uint _1982 = _1965 + 5u;
    float _1988 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _1992 = _1965 + 4u;
    float _2001 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _2005 = _1965 | 1u;
    float _2016 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_763, _764, _765));
    float _2019 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_763, _764, _765));
    float _4154 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _4165 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2024 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _2026 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _2033 = ((cbLight._m0[_1982].x * _1988) * _2026) + (((cbLight._m0[_1992].x * _1957) * _2001) * _2024);
    float _2034 = ((_1988 * cbLight._m0[_1982].y) * _2026) + (((cbLight._m0[_1992].y * _1958) * _2001) * _2024);
    float _2035 = ((_1988 * cbLight._m0[_1982].z) * _2026) + (((cbLight._m0[_1992].z * _1959) * _2001) * _2024);
    uvec4 _2039 = floatBitsToUint(cbLight._m0[_1965 + 12u]);
    bool _2041 = _2039.x == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2041)
    {
        _2052 = _2033;
        _2054 = _2034;
        _2056 = _2035;
    }
    else
    {
        uint _2060 = _1965 + 6u;
        float _2076 = (dot(vec3(cbLight._m0[_1965 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4176 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2079 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2052 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _2033;
        _2054 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _2034;
        _2056 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _2035;
    }
    bool _2059 = _2039.y == 0u;
    float _2097;
    float _2099;
    float _2101;
    if (_2059)
    {
        _2097 = _2052;
        _2099 = _2054;
        _2101 = _2056;
    }
    else
    {
        uint _2259 = _1965 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1965 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4192 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2278 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2097 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2052;
        _2099 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2054;
        _2101 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2056;
    }
    uint _2104 = _1965 + 8u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _766) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1965].x + _842;
    float _2120 = cbLight._m0[_1965].y + _843;
    float _2121 = cbLight._m0[_1965].z + _844;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_1965].xyz));
    float _4208 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2133 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2134 = dot(vec3(_763, _764, _765), vec3(_2126, _2127, _2128));
    float _4230 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2126, _2127, _2128));
    float _4241 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2118 * _2118;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2158 = 1.0 - _2118;
    float _2169 = (0.5 / (((_2133 * ((_2132 * _2158) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2158) + _2118) * _2132))) * _2132;
    float _4252 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    uint _2185 = _1965 + 9u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _766) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2005].x + _842;
    float _2199 = cbLight._m0[_2005].y + _843;
    float _2200 = cbLight._m0[_2005].z + _844;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2005].xyz));
    float _4263 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2212 = dot(vec3(_763, _764, _765), vec3(_2205, _2206, _2207));
    float _4274 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2205, _2206, _2207));
    float _4285 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2197 * _2197;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2234 = 1.0 - _2197;
    float _2244 = (0.5 / (((_2133 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2234) + _2197) * _2211))) * _2211;
    float _4296 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    float _2256 = (((_2233 * cbLight._m0[_2185].x) * _2246) * _1988) + ((((cbLight._m0[_2104].x * _1957) * _2157) * _2171) * _2001);
    float _2257 = (((_2233 * cbLight._m0[_2185].y) * _2246) * _1988) + ((((cbLight._m0[_2104].y * _1958) * _2157) * _2171) * _2001);
    float _2258 = (((_2233 * cbLight._m0[_2185].z) * _2246) * _1988) + ((((cbLight._m0[_2104].z * _1959) * _2157) * _2171) * _2001);
    float _2320;
    float _2322;
    float _2324;
    if (_2041)
    {
        _2320 = _2256;
        _2322 = _2257;
        _2324 = _2258;
    }
    else
    {
        uint _2326 = _1965 + 2u;
        uint _2330 = _1965 + 10u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _766) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _842;
        float _2347 = cbLight._m0[_2326].y + _843;
        float _2348 = cbLight._m0[_2326].z + _844;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2326].xyz));
        float _4307 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2360 = dot(vec3(_763, _764, _765), vec3(_2353, _2354, _2355));
        float _4318 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4329 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2382 = 1.0 - _2345;
        float _2392 = (0.5 / (((_2133 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2382) + _2345) * _2359))) * _2359;
        float _4340 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2320 = (((_2381 * cbLight._m0[_2330].x) * _2394) * _2395) + _2256;
        _2322 = (((_2381 * cbLight._m0[_2330].y) * _2394) * _2395) + _2257;
        _2324 = (((_2381 * cbLight._m0[_2330].z) * _2394) * _2395) + _2258;
    }
    float _2430;
    float _2432;
    float _2434;
    if (_2059)
    {
        _2430 = _2320;
        _2432 = _2322;
        _2434 = _2324;
    }
    else
    {
        uint _2441 = _1965 + 3u;
        uint _2445 = _1965 + 11u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _766) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _842;
        float _2462 = cbLight._m0[_2441].y + _843;
        float _2463 = cbLight._m0[_2441].z + _844;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2441].xyz));
        float _4356 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2475 = dot(vec3(_763, _764, _765), vec3(_2468, _2469, _2470));
        float _4367 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4378 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2497 = 1.0 - _2460;
        float _2507 = (0.5 / (((_2133 * ((_2474 * _2497) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2497) + _2460) * _2474))) * _2474;
        float _4389 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2430 = (((_2496 * cbLight._m0[_2445].x) * _2509) * _2510) + _2320;
        _2432 = (((_2496 * cbLight._m0[_2445].y) * _2509) * _2510) + _2322;
        _2434 = (((_2496 * cbLight._m0[_2445].z) * _2509) * _2510) + _2324;
    }
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_1963.y == 0u)
    {
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2585;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2585;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2585;
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.x;
        uint _2612 = uint((float(_2600.y) * floor(float(uint(cbSceneParam._m0[85u].y * _851) / _2601))) + floor(float(uint(cbSceneParam._m0[85u].x * _850) / _2601)));
        float _2622 = (log2(_2588 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2623 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        uint _2626 = uint(isnan(14.0) ? _2623 : (isnan(_2623) ? 14.0 : min(_2623, 14.0)));
        uvec4 _2631 = texelFetch(g_lightClusterGridBuffer, int(((_2626 << 2u) + (_2612 << 6u)) >> 2u));
        uint _2632 = _2631.x;
        uint _2633 = _2600.z;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((((1u << ((_2633 >> 4u) & 15u)) + 4294967295u) & _2632) == 0u) || ((_2633 & 240u) == 0u))
        {
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
        }
        else
        {
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2626 << 5u) + (_2612 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2893)
                {
                    frontier_phi_61_pred = _2877;
                    frontier_phi_61_pred_1 = _2882;
                    frontier_phi_61_pred_2 = _2881;
                    frontier_phi_61_pred_3 = _2880;
                    frontier_phi_61_pred_4 = _2879;
                    frontier_phi_61_pred_5 = _2878;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2892;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2883 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _2586;
                        float _3068 = _3027.y - _2587;
                        float _3069 = _3027.z - _2588;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_869, _872, _875), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4415 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _2586;
                        float _3103 = (-0.0) - _2587;
                        float _3104 = (-0.0) - _2588;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3119 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _929;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_869, _872, _875), vec3(_3109, _3110, _3111));
                        float _4431 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3144 = dot(vec3(_869, _872, _875), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4442 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3087 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3077) + _3153;
                        float _4453 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4464 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3151 * _3151) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2936 = (_3098 * _3046.x) + _3004;
                        _2937 = (_3098 * _3046.y) + _3005;
                        _2938 = (_3098 * _3046.z) + _3006;
                        _2933 = (_3179 * _3063.x) + _3001;
                        _2934 = (_3179 * _3063.y) + _3002;
                        _2935 = (_3179 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_61_pred = _2933;
                    frontier_phi_61_pred_1 = _2938;
                    frontier_phi_61_pred_2 = _2937;
                    frontier_phi_61_pred_3 = _2936;
                    frontier_phi_61_pred_4 = _2935;
                    frontier_phi_61_pred_5 = _2934;
                }
                _2734 = frontier_phi_61_pred;
                _2744 = frontier_phi_61_pred_1;
                _2742 = frontier_phi_61_pred_2;
                _2740 = frontier_phi_61_pred_3;
                _2738 = frontier_phi_61_pred_4;
                _2736 = frontier_phi_61_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2734;
                    _2878 = _2736;
                    _2879 = _2738;
                    _2880 = _2740;
                    _2881 = _2742;
                    _2882 = _2744;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
        }
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.z;
        uint _2750 = (_2748 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2750) & _2632) == 0u)
        {
            _2845 = _2733;
            _2847 = _2735;
            _2849 = _2737;
            _2851 = _2739;
            _2853 = _2741;
            _2855 = _2743;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
            float _2871 = _2870 * _2586;
            float _2872 = _2870 * _2587;
            float _2873 = _2870 * _2588;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2750 < ((_2748 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2984 = _2733;
                float _2985 = _2735;
                float _2986 = _2737;
                float _2987 = _2739;
                float _2988 = _2741;
                float _2989 = _2743;
                uint _2990 = _2750;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2626 << 5u) + (_2612 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3000)
                    {
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        uint _3203 = _2999;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3272;
                        vec4 _3287;
                        float _3333;
                        bool _3334;
                        for (;;)
                        {
                            uint _3214 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3259 = (_3214 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3214 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3214 * 40u) + 24u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3308 = (_3214 * 40u) + 28u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3333 = fma(_2588, _3321.z, fma(_2587, _3321.y, _3321.x * _2586)) + _3321.w;
                            _3334 = !((fma(_2588, _3302.z, fma(_2587, _3302.y, _3302.x * _2586)) + _3302.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3334)
                            {
                                float _3361 = _3229.x - _2586;
                                float _3362 = _3229.y - _2587;
                                float _3363 = _3229.z - _2588;
                                float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                                float _3367 = inversesqrt(_3364);
                                float _3368 = _3367 * _3361;
                                float _3369 = _3367 * _3362;
                                float _3370 = _3367 * _3363;
                                float _3374 = 1.0 - (_3364 / (_3230 * _3230));
                                float _4475 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3379 = sqrt(_3364) * _3245.w;
                                float _3381 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                                float _3382 = _3381 * _3381;
                                float _3385 = ((1.0 - _3382) * dot(vec3(_3368, _3369, _3370), vec3(_869, _872, _875))) + _3382;
                                float _3388 = _3379 * _3379;
                                float _3392 = (fma(_2588, _3272.z, fma(_2587, _3272.y, _3272.x * _2586)) + _3272.w) / _3333;
                                float _3393 = (fma(_2588, _3287.z, fma(_2587, _3287.y, _3287.x * _2586)) + _3287.w) / _3333;
                                float _3397 = 1.0 - dot(vec2(_3392, _3393), vec2(_3392, _3393));
                                float _4491 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3399 = _3398 * (((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3375) / ((_3388 * 0.699999988079071044921875) + 1.0));
                                float _3411 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3412 = 1.0 - _929;
                                float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                                float _3420 = _3419 * _3419;
                                float _3421 = _3420 * _3420;
                                float _3422 = _3368 - _2871;
                                float _3423 = _3369 - _2872;
                                float _3424 = _3370 - _2873;
                                float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                                float _3432 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4502 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3436 = dot(vec3(_869, _872, _875), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                                float _4513 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                                float _3444 = _3381 * _3420;
                                float _3445 = _3444 * _3444;
                                float _3451 = ((1.0 - _3445) * dot(vec3(_869, _872, _875), vec3(_3368, _3369, _3370))) + _3445;
                                float _4524 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3453 = 1.0 - _3420;
                                float _3463 = (0.5 / (((_3452 * ((_3435 * _3453) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3420) * _3435))) * _3452;
                                float _4535 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3473 = (_3398 * _3375) * (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3443 * _3443) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3473 * _3257.x;
                                frontier_phi_73_pred_1 = _3473 * _3257.y;
                                frontier_phi_73_pred_2 = _3399 * _3245.z;
                                frontier_phi_73_pred_3 = _3399 * _3245.y;
                                frontier_phi_73_pred_4 = _3399 * _3245.x;
                                frontier_phi_73_pred_5 = _3473 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_73_pred;
                            _3478 = frontier_phi_73_pred_1;
                            _3482 = frontier_phi_73_pred_2;
                            _3481 = frontier_phi_73_pred_3;
                            _3480 = frontier_phi_73_pred_4;
                            _3479 = frontier_phi_73_pred_5;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3186 = _3479 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    _2852 = frontier_phi_67_pred;
                    _2854 = frontier_phi_67_pred_1;
                    _2856 = frontier_phi_67_pred_2;
                    _2850 = frontier_phi_67_pred_3;
                    _2848 = frontier_phi_67_pred_4;
                    _2846 = frontier_phi_67_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2846;
                        _2985 = _2848;
                        _2986 = _2850;
                        _2987 = _2852;
                        _2988 = _2854;
                        _2989 = _2856;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2854;
                frontier_phi_55_56_ladder_1 = _2856;
                frontier_phi_55_56_ladder_2 = _2852;
                frontier_phi_55_56_ladder_3 = _2850;
                frontier_phi_55_56_ladder_4 = _2848;
                frontier_phi_55_56_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_55_56_ladder = _2741;
                frontier_phi_55_56_ladder_1 = _2743;
                frontier_phi_55_56_ladder_2 = _2739;
                frontier_phi_55_56_ladder_3 = _2737;
                frontier_phi_55_56_ladder_4 = _2735;
                frontier_phi_55_56_ladder_5 = _2733;
            }
            _2845 = frontier_phi_55_56_ladder_5;
            _2847 = frontier_phi_55_56_ladder_4;
            _2849 = frontier_phi_55_56_ladder_3;
            _2851 = frontier_phi_55_56_ladder_2;
            _2853 = frontier_phi_55_56_ladder;
            _2855 = frontier_phi_55_56_ladder_1;
        }
        float _2860 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2645 = (_2860 * _2851) + _2097;
        _2647 = (_2860 * _2853) + _2099;
        _2649 = (_2860 * _2855) + _2101;
        _2651 = ((_2845 * 0.039999999105930328369140625) * _2860) + _2430;
        _2653 = ((_2847 * 0.039999999105930328369140625) * _2860) + _2432;
        _2655 = ((_2849 * 0.039999999105930328369140625) * _2860) + _2434;
    }
    else
    {
        _2645 = _2097;
        _2647 = _2099;
        _2649 = _2101;
        _2651 = _2430;
        _2653 = _2432;
        _2655 = _2434;
    }
    float _4551 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4562 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4573 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    uint _2675 = _251 + 6u;
    float _2683 = _850 / cbSceneParam._m0[86u].x;
    float _2684 = _851 / cbSceneParam._m0[86u].y;
    vec4 _2698 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2683, _2684, (log2((isnan(cbSceneParam._m0[77u].w) ? _784 : (isnan(_784) ? cbSceneParam._m0[77u].w : min(_784, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2700 = _2698.x;
    float _2701 = _2698.y;
    float _2702 = _2698.z;
    float _2703 = _2698.w;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_784 > cbSceneParam._m0[78u].w)
    {
        float _2758 = isnan(_784) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _784 : min(cbSceneParam._m0[80u].w, _784));
        float _2759 = _2758 / _784;
        float _2770 = _2759 * _835;
        float _2771 = _836 * _2759;
        float _2772 = (-0.0) - _2771;
        float _2773 = _2759 * _837;
        float _2775 = (cbSceneParam._m0[77u].w * _2772) / _2758;
        float _2776 = _2775 + cbSceneParam._m0[79u].w;
        float _2777 = cbSceneParam._m0[79u].w - _2771;
        float _2783 = sqrt(((_2770 * _2770) + (_2771 * _2771)) + (_2773 * _2773));
        float _2786 = (1.0 - (cbSceneParam._m0[77u].w / _2758)) * _2783;
        float _2791 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2793 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2772 - _2775) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2776 > 0.0) ? exp2(_2791 * _2776) : (2.0 - exp2(_2793 * _2776))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2786;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : max(_2776, _2777));
            float _2908 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : min(_2776, _2777));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2946 = ((abs(_2783 / _2772) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2791 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2791 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2793 * _2917) - exp2(_2793 * _2918)) * _2906))) + (_2786 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2683, _2684, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2703);
        _2795 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2700;
        _2797 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2701;
        _2799 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2702;
        _2801 = _2957 * _2703;
    }
    else
    {
        _2795 = _2700;
        _2797 = _2701;
        _2799 = _2702;
        _2801 = _2703;
    }
    float _2813 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2814 = _2813 == 3.0;
    float _2815 = log2(_2801);
    float _2822 = exp2(_2815 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2645 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _913))) + ((_2651 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2823 = exp2(_2815 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2647 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _913))) + ((_2653 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2824 = exp2(_2815 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2649 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _913))) + ((_2655 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2833 = (_2813 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2833 * (_2814 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.y = _2833 * (_2814 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.z = _2833 * (_2814 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
    SV_Target.w = cbInstanceData._m0[_2675].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2675].w;
}


