#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3784 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3795 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3806 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _397 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _397) * cbMtdParam._m0[24u].x) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3817 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _422 = (_415 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _423 = (_415 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _424 = (_415 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) + _434;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _415) + _528;
    float _540 = ((((_507.x - _526) * _415) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _415) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3828 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _594 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_580 - _581) * cbMtdParam._m0[24u].z) + _581) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3839 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _602 = (_595 * ((_462.x * cbMtdParam._m0[18u].x) - _441)) + _441;
    float _603 = (_595 * ((_462.y * cbMtdParam._m0[18u].y) - _442)) + _442;
    float _604 = (_595 * ((_462.z * cbMtdParam._m0[18u].z) - _443)) + _443;
    float _609 = (((_482.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3850 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _639 = (_595 * (_622.z - _609)) + _609;
    float _644 = _540 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_482.x * 2.0) + (-1.0)));
    float _645 = _541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_482.y * 2.0) + (-1.0)));
    float _657 = (((_629 - _644) + (cbMtdParam._m0[21u].x * _644)) * _595) + _644;
    float _658 = (((_630 - _645) + (cbMtdParam._m0[21u].x * _645)) * _595) + _645;
    float _659 = (_595 * (sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _547)) + _547;
    float _661 = cbMtdParam._m0[22u].x + _560.w;
    float _664 = fma(_659, _232 * NORMAL.x, fma(_658, _239 * TANGENT.x, (_225 * _217) * _657));
    float _667 = fma(_659, _232 * NORMAL.y, fma(_658, _239 * TANGENT.y, (_225 * _218) * _657));
    float _670 = fma(_659, _232 * NORMAL.z, fma(_658, _239 * TANGENT.z, (_225 * _219) * _657));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3861 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _678 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3883 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3894 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3905 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    float _763 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _764 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _782 = fma(_677, cbSceneParam._m0[5u].z, fma(_676, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _675));
    float _785 = fma(_677, cbSceneParam._m0[6u].z, fma(_676, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _675));
    float _788 = fma(_677, cbSceneParam._m0[7u].z, fma(_676, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _675));
    uint _802 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _808 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_802].x;
    float _809 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_802].y;
    float _810 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_802].z;
    float _3916 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    vec4 _822 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _763, cbSceneParam._m0[86u].y * _764));
    float _826 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _822.x;
    float _827 = dot(vec3(_675, _676, _677), vec3(_755, _756, _757));
    float _830 = _827 * 2.0;
    float _834 = (_830 * _675) - _755;
    float _835 = (_830 * _676) - _756;
    float _836 = (_830 * _677) - _757;
    float _840 = abs(dot(vec3(_755, _756, _757), vec3(_675, _676, _677)));
    float _3949 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _842 = sqrt(_678);
    float _855 = exp2((_842 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_842 * 3.0));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _925 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _929 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _954 = _887 + _675;
        float _955 = _891 + _676;
        float _956 = _895 + _677;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_675, _676, _677), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3997 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_675, _676, _677), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4030 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_675, _676, _677), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4063 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1240 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1244 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1267 = _887 + _675;
        float _1268 = _891 + _676;
        float _1269 = _895 + _677;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_675, _676, _677), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4126 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_675, _676, _677), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4159 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_675, _676, _677), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4192 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1197;
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _834 * 0.5;
    float _1574 = _835 * 0.5;
    float _1575 = _836 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1689 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1693 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1697 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1700 = fma(_836, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834));
        float _1703 = fma(_836, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834));
        float _1706 = fma(_836, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834));
        float _1734;
        if (_1700 > 0.0)
        {
            _1734 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1734 = frontier_phi_14_12_ladder;
        }
        float _1903;
        if (_1703 > 0.0)
        {
            _1903 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1903 = frontier_phi_23_19_ladder;
        }
        float _2198;
        if (_1706 > 0.0)
        {
            _2198 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2198 = frontier_phi_35_30_ladder;
        }
        float _2200 = isnan(_1903) ? _1734 : (isnan(_1734) ? _1903 : min(_1734, _1903));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1700) + _1689;
        float _2206 = (_2201 * _1703) + _1693;
        float _2207 = (_2201 * _1706) + _1697;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1722 = frontier_phi_13_35_ladder_2;
        _1724 = frontier_phi_13_35_ladder_1;
        _1726 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_834, _835, _836), _1642);
        _1722 = _1710.x * cbModelParam._m0[1u].y;
        _1724 = _1710.y * cbModelParam._m0[1u].y;
        _1726 = _1710.z * cbModelParam._m0[1u].y;
    }
    float _1730 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1730 : min(cbModelParam._m0[25u].w, _1730));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1784 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1788 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1792 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1795 = fma(_836, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834));
        float _1798 = fma(_836, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834));
        float _1801 = fma(_836, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834));
        float _1908;
        if (_1795 > 0.0)
        {
            _1908 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1908 = frontier_phi_25_21_ladder;
        }
        float _2225;
        if (_1798 > 0.0)
        {
            _2225 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2225 = frontier_phi_37_32_ladder;
        }
        float _2552;
        if (_1801 > 0.0)
        {
            _2552 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2552 = frontier_phi_47_44_ladder;
        }
        float _2554 = isnan(_2225) ? _1908 : (isnan(_1908) ? _2225 : min(_1908, _2225));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1795) + _1784;
        float _2560 = (_2555 * _1798) + _1788;
        float _2561 = (_2555 * _1801) + _1792;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2561, cbModelParam._m0[17u].z, fma(_2560, cbModelParam._m0[17u].y, _2559 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2561, cbModelParam._m0[18u].z, fma(_2560, cbModelParam._m0[18u].y, _2559 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2561, cbModelParam._m0[19u].z, fma(_2560, cbModelParam._m0[19u].y, _2559 * cbModelParam._m0[19u].x))), _1731);
            frontier_phi_22_47_ladder = _2679.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2679.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2679.x * cbModelParam._m0[1u].z;
        }
        _1820 = frontier_phi_22_47_ladder_2;
        _1822 = frontier_phi_22_47_ladder_1;
        _1824 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_834, _835, _836), _1731);
        _1820 = _1804.x * cbModelParam._m0[1u].z;
        _1822 = _1804.y * cbModelParam._m0[1u].z;
        _1824 = _1804.z * cbModelParam._m0[1u].z;
    }
    float _1836 = ((((1.0 - _855) * ((_842 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_855 * _842)) * _826;
    float _1837 = _1836 * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1838 = _1836 * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1839 = _1836 * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, _1837 * cbSceneParam._m0[91u].x));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1895 = _1882 / _1894;
    float _1896 = _1886 / _1894;
    float _1897 = _1890 / _1894;
    float _2044;
    float _2045;
    float _2046;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1924 = ((uint(_1897 > cbSceneParam._m0[59u].y) + uint(_1897 > cbSceneParam._m0[59u].x)) + uint(_1897 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1925 = _1924 + 43u;
        uint _1933 = _1924 + 44u;
        uint _1941 = _1924 + 45u;
        uint _1949 = _1924 + 46u;
        float _1960 = fma(_1894, cbSceneParam._m0[_1925].w, fma(_1890, cbSceneParam._m0[_1925].z, fma(_1886, cbSceneParam._m0[_1925].y, _1882 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1894, cbSceneParam._m0[_1933].w, fma(_1890, cbSceneParam._m0[_1933].z, fma(_1886, cbSceneParam._m0[_1933].y, _1882 * cbSceneParam._m0[_1933].x)));
        float _1972 = fma(_1894, cbSceneParam._m0[_1949].w, fma(_1890, cbSceneParam._m0[_1949].z, fma(_1886, cbSceneParam._m0[_1949].y, _1882 * cbSceneParam._m0[_1949].x)));
        float _1977 = cbSceneParam._m0[33u].z * _1972;
        float _1979 = cbSceneParam._m0[33u].w * _1972;
        float _1982 = fma(_1894, cbSceneParam._m0[_1941].w, fma(_1890, cbSceneParam._m0[_1941].z, fma(_1886, cbSceneParam._m0[_1941].y, _1882 * cbSceneParam._m0[_1941].x))) / _1972;
        float _2030 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
        float _4318 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2037 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 + _1960) / _1972, (_1979 + _1964) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 + _1960) / _1972, (_1964 - _1977) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1977) / _1972, (_1964 - _1979) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1979) / _1972, (_1977 + _1964) / _1972), _1982), 0.0)).x), vec4(0.25)));
        _2044 = 1.0 - (_2037 * cbSceneParam._m0[34u].x);
        _2045 = 1.0 - (_2037 * cbSceneParam._m0[34u].y);
        _2046 = 1.0 - (_2037 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2044 = 1.0;
        _2045 = 1.0;
        _2046 = 1.0;
    }
    float _2110;
    float _2112;
    float _2114;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2098 = fma(_1894, cbSceneParam._m0[63u].w, fma(_1890, cbSceneParam._m0[63u].z, fma(_1886, cbSceneParam._m0[63u].y, _1882 * cbSceneParam._m0[63u].x)));
        float _2099 = fma(_1894, cbSceneParam._m0[60u].w, fma(_1890, cbSceneParam._m0[60u].z, fma(_1886, cbSceneParam._m0[60u].y, _1882 * cbSceneParam._m0[60u].x))) / _2098;
        float _2100 = fma(_1894, cbSceneParam._m0[61u].w, fma(_1890, cbSceneParam._m0[61u].z, fma(_1886, cbSceneParam._m0[61u].y, _1882 * cbSceneParam._m0[61u].x))) / _2098;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2099 >= cbSceneParam._m0[64u].x) && (_2100 >= cbSceneParam._m0[64u].y)) && (_2099 <= cbSceneParam._m0[64u].z)) && (_2100 <= cbSceneParam._m0[64u].w))
        {
            float _2238 = fma(_1894, cbSceneParam._m0[62u].w, fma(_1890, cbSceneParam._m0[62u].z, fma(_1886, cbSceneParam._m0[62u].y, _1882 * cbSceneParam._m0[62u].x))) / _2098;
            float _2242 = isnan(cbSceneParam._m0[41u].w) ? _2238 : (isnan(_2238) ? cbSceneParam._m0[41u].w : max(_2238, cbSceneParam._m0[41u].w));
            float _2285 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
            float _4334 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
            float _2292 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2099, cbSceneParam._m0[33u].w + _2100), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2099, _2100 - cbSceneParam._m0[33u].z), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].z, _2100 - cbSceneParam._m0[33u].w), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2100), _2242), 0.0)).x), vec4(0.25)));
            float _2296 = 1.0 - (_2292 * cbSceneParam._m0[34u].x);
            float _2297 = 1.0 - (_2292 * cbSceneParam._m0[34u].y);
            float _2298 = 1.0 - (_2292 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2298) ? _2046 : (isnan(_2046) ? _2298 : min(_2046, _2298));
            frontier_phi_34_33_ladder_1 = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
            frontier_phi_34_33_ladder_2 = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
        }
        else
        {
            frontier_phi_34_33_ladder = _2046;
            frontier_phi_34_33_ladder_1 = _2045;
            frontier_phi_34_33_ladder_2 = _2044;
        }
        _2110 = frontier_phi_34_33_ladder_2;
        _2112 = frontier_phi_34_33_ladder_1;
        _2114 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2110 = _2044;
        _2112 = _2045;
        _2114 = _2046;
    }
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _826 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2157 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2161 = _2121 | 1u;
    float _2172 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_675, _676, _677));
    float _2175 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_675, _676, _677));
    float _4370 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _4381 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2180 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2182 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2189 = ((cbLight._m0[_2138].x * _2144) * _2182) + (((cbLight._m0[_2148].x * _2110) * _2157) * _2180);
    float _2190 = ((_2144 * cbLight._m0[_2138].y) * _2182) + (((cbLight._m0[_2148].y * _2112) * _2157) * _2180);
    float _2191 = ((_2144 * cbLight._m0[_2138].z) * _2182) + (((cbLight._m0[_2148].z * _2114) * _2157) * _2180);
    uvec4 _2195 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2197 = _2195.x == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2197)
    {
        _2299 = _2189;
        _2301 = _2190;
        _2303 = _2191;
    }
    else
    {
        uint _2307 = _2121 + 6u;
        float _2323 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4392 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2326 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2299 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2189;
        _2301 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2190;
        _2303 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2191;
    }
    bool _2306 = _2195.y == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2306)
    {
        _2361 = _2299;
        _2363 = _2301;
        _2365 = _2303;
    }
    else
    {
        uint _2523 = _2121 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4408 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2542 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2361 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2299;
        _2363 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2301;
        _2365 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2303;
    }
    uint _2368 = _2121 + 8u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _678) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2121].x + _755;
    float _2384 = cbLight._m0[_2121].y + _756;
    float _2385 = cbLight._m0[_2121].z + _757;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2121].xyz));
    float _4424 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2397 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2398 = dot(vec3(_675, _676, _677), vec3(_2390, _2391, _2392));
    float _4446 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2390, _2391, _2392));
    float _4457 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2382 * _2382;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2422 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2397 * ((_2396 * _2422) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2422) + _2382) * _2396))) * _2396;
    float _4468 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    uint _2449 = _2121 + 9u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _678) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2161].x + _755;
    float _2463 = cbLight._m0[_2161].y + _756;
    float _2464 = cbLight._m0[_2161].z + _757;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2161].xyz));
    float _4479 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2476 = dot(vec3(_675, _676, _677), vec3(_2469, _2470, _2471));
    float _4490 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2469, _2470, _2471));
    float _4501 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2461 * _2461;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2498 = 1.0 - _2461;
    float _2508 = (0.5 / (((_2397 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2498) + _2461) * _2475))) * _2475;
    float _4512 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    float _2520 = (((_2497 * cbLight._m0[_2449].x) * _2510) * _2144) + ((((cbLight._m0[_2368].x * _2110) * _2421) * _2435) * _2157);
    float _2521 = (((_2497 * cbLight._m0[_2449].y) * _2510) * _2144) + ((((cbLight._m0[_2368].y * _2112) * _2421) * _2435) * _2157);
    float _2522 = (((_2497 * cbLight._m0[_2449].z) * _2510) * _2144) + ((((cbLight._m0[_2368].z * _2114) * _2421) * _2435) * _2157);
    float _2578;
    float _2580;
    float _2582;
    if (_2197)
    {
        _2578 = _2520;
        _2580 = _2521;
        _2582 = _2522;
    }
    else
    {
        uint _2584 = _2121 + 2u;
        uint _2588 = _2121 + 10u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _678) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _755;
        float _2605 = cbLight._m0[_2584].y + _756;
        float _2606 = cbLight._m0[_2584].z + _757;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2584].xyz));
        float _4523 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2618 = dot(vec3(_675, _676, _677), vec3(_2611, _2612, _2613));
        float _4534 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4545 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2639 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2640 = 1.0 - _2603;
        float _2650 = (0.5 / (((_2397 * ((_2617 * _2640) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2640) + _2603) * _2617))) * _2617;
        float _4556 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2578 = (((_2639 * cbLight._m0[_2588].x) * _2652) * _2653) + _2520;
        _2580 = (((_2639 * cbLight._m0[_2588].y) * _2652) * _2653) + _2521;
        _2582 = (((_2639 * cbLight._m0[_2588].z) * _2652) * _2653) + _2522;
    }
    float _2684;
    float _2686;
    float _2688;
    if (_2306)
    {
        _2684 = _2578;
        _2686 = _2580;
        _2688 = _2582;
    }
    else
    {
        uint _2695 = _2121 + 3u;
        uint _2699 = _2121 + 11u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _678) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _755;
        float _2716 = cbLight._m0[_2695].y + _756;
        float _2717 = cbLight._m0[_2695].z + _757;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2695].xyz));
        float _4572 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2729 = dot(vec3(_675, _676, _677), vec3(_2722, _2723, _2724));
        float _4583 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4594 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2751 = 1.0 - _2714;
        float _2761 = (0.5 / (((_2397 * ((_2728 * _2751) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2751) + _2714) * _2728))) * _2728;
        float _4605 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2684 = (((_2750 * cbLight._m0[_2699].x) * _2763) * _2764) + _2578;
        _2686 = (((_2750 * cbLight._m0[_2699].y) * _2763) * _2764) + _2580;
        _2688 = (((_2750 * cbLight._m0[_2699].z) * _2763) * _2764) + _2582;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2119.y == 0u)
    {
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _764) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _763) / _2786)));
        float _2807 = (log2(_1897 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3058)
                {
                    frontier_phi_66_pred = _3047;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3057;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3048 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _1895;
                        float _3233 = _3192.y - _1896;
                        float _3234 = _3192.z - _1897;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_782, _785, _788), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4631 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _1895;
                        float _3268 = (-0.0) - _1896;
                        float _3269 = (-0.0) - _1897;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3283 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _842;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3274 + _3239;
                        float _3295 = _3275 + _3240;
                        float _3296 = _3276 + _3241;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_782, _785, _788), vec3(_3274, _3275, _3276));
                        float _4647 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3308 = dot(vec3(_782, _785, _788), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4658 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3252 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3242) + _3317;
                        float _4669 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4680 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3315 * _3315) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3101 = (_3263 * _3211.x) + _3169;
                        _3102 = (_3263 * _3211.y) + _3170;
                        _3103 = (_3263 * _3211.z) + _3171;
                        _3098 = (_3343 * _3228.x) + _3166;
                        _3099 = (_3343 * _3228.y) + _3167;
                        _3100 = (_3343 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                _2908 = frontier_phi_66_pred;
                _2906 = frontier_phi_66_pred_1;
                _2904 = frontier_phi_66_pred_2;
                _2902 = frontier_phi_66_pred_3;
                _2900 = frontier_phi_66_pred_4;
                _2898 = frontier_phi_66_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2898;
                    _3043 = _2900;
                    _3044 = _2902;
                    _3045 = _2904;
                    _3046 = _2906;
                    _3047 = _2908;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2914) & _2817) == 0u)
        {
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
            _3018 = _2905;
            _3020 = _2907;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
            float _3036 = _3035 * _1895;
            float _3037 = _3035 * _1896;
            float _3038 = _3035 * _1897;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3149 = _2897;
                float _3150 = _2899;
                float _3151 = _2901;
                float _3152 = _2903;
                float _3153 = _2905;
                float _3154 = _2907;
                uint _3155 = _2914;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3165)
                    {
                        frontier_phi_72_pred = _3154;
                        frontier_phi_72_pred_1 = _3153;
                        frontier_phi_72_pred_2 = _3152;
                        frontier_phi_72_pred_3 = _3151;
                        frontier_phi_72_pred_4 = _3150;
                        frontier_phi_72_pred_5 = _3149;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        uint _3367 = _3164;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3451;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3378 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3378 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3378 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3378 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_1897, _3485.z, fma(_1896, _3485.y, _3485.x * _1895)) + _3485.w;
                            _3498 = !((fma(_1897, _3466.z, fma(_1896, _3466.y, _3466.x * _1895)) + _3466.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3393.x - _1895;
                                float _3526 = _3393.y - _1896;
                                float _3527 = _3393.z - _1897;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3394 * _3394));
                                float _4691 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3543 = sqrt(_3528) * _3409.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_782, _785, _788))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_1897, _3436.z, fma(_1896, _3436.y, _3436.x * _1895)) + _3436.w) / _3497;
                                float _3557 = (fma(_1897, _3451.z, fma(_1896, _3451.y, _3451.x * _1895)) + _3451.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4707 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _842;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3036;
                                float _3587 = _3533 - _3037;
                                float _3588 = _3534 - _3038;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_782, _785, _788), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4718 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3600 = dot(vec3(_782, _785, _788), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4729 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_782, _785, _788), vec3(_3532, _3533, _3534))) + _3609;
                                float _4740 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4751 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3563 * _3409.y;
                                frontier_phi_78_pred_1 = _3563 * _3409.x;
                                frontier_phi_78_pred_2 = _3637 * _3421.z;
                                frontier_phi_78_pred_3 = _3637 * _3421.y;
                                frontier_phi_78_pred_4 = _3637 * _3421.x;
                                frontier_phi_78_pred_5 = _3563 * _3409.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_78_pred;
                            _3644 = frontier_phi_78_pred_1;
                            _3643 = frontier_phi_78_pred_2;
                            _3642 = frontier_phi_78_pred_3;
                            _3641 = frontier_phi_78_pred_4;
                            _3646 = frontier_phi_78_pred_5;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3353;
                        frontier_phi_72_pred_1 = _3352;
                        frontier_phi_72_pred_2 = _3351;
                        frontier_phi_72_pred_3 = _3350;
                        frontier_phi_72_pred_4 = _3349;
                        frontier_phi_72_pred_5 = _3348;
                    }
                    _3021 = frontier_phi_72_pred;
                    _3019 = frontier_phi_72_pred_1;
                    _3017 = frontier_phi_72_pred_2;
                    _3015 = frontier_phi_72_pred_3;
                    _3013 = frontier_phi_72_pred_4;
                    _3011 = frontier_phi_72_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _3011;
                        _3150 = _3013;
                        _3151 = _3015;
                        _3152 = _3017;
                        _3153 = _3019;
                        _3154 = _3021;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3019;
                frontier_phi_60_61_ladder_2 = _3015;
                frontier_phi_60_61_ladder_3 = _3013;
                frontier_phi_60_61_ladder_4 = _3011;
                frontier_phi_60_61_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_60_61_ladder = _2907;
                frontier_phi_60_61_ladder_1 = _2905;
                frontier_phi_60_61_ladder_2 = _2901;
                frontier_phi_60_61_ladder_3 = _2899;
                frontier_phi_60_61_ladder_4 = _2897;
                frontier_phi_60_61_ladder_5 = _2903;
            }
            _3010 = frontier_phi_60_61_ladder_4;
            _3012 = frontier_phi_60_61_ladder_3;
            _3014 = frontier_phi_60_61_ladder_2;
            _3016 = frontier_phi_60_61_ladder_5;
            _3018 = frontier_phi_60_61_ladder_1;
            _3020 = frontier_phi_60_61_ladder;
        }
        float _3025 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
        _2830 = (_3025 * _3016) + _2361;
        _2832 = (_3025 * _3018) + _2363;
        _2834 = (_3025 * _3020) + _2365;
        _2836 = ((_3010 * 0.039999999105930328369140625) * _3025) + _2684;
        _2838 = ((_3012 * 0.039999999105930328369140625) * _3025) + _2686;
        _2840 = ((_3014 * 0.039999999105930328369140625) * _3025) + _2688;
    }
    else
    {
        _2830 = _2361;
        _2832 = _2363;
        _2834 = _2365;
        _2836 = _2684;
        _2838 = _2686;
        _2840 = _2688;
    }
    float _4767 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4778 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4789 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    uint _2860 = _266 + 6u;
    float _2868 = _763 / cbSceneParam._m0[86u].x;
    float _2869 = _764 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2923 = _2922 / _696;
        float _2934 = _2923 * _748;
        float _2935 = _749 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2938 = _2923 * _750;
        float _2940 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2935;
        float _2948 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2936 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3073 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3111 = ((abs(_2948 / _2936) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2958 * _3082) - exp2(_2958 * _3083)) * _3071))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2888);
        _2960 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2962 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2964 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2966 = _3122 * _2888;
    }
    else
    {
        _2960 = _2885;
        _2962 = _2886;
        _2964 = _2887;
        _2966 = _2888;
    }
    float _2978 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2979 = _2978 == 3.0;
    float _2980 = log2(_2966);
    float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2830 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _826))) + ((_2836 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2832 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _826))) + ((_2838 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2834 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _826))) + ((_2840 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2998 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2998 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _2998 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _2998 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = cbInstanceData._m0[_2860].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
}


