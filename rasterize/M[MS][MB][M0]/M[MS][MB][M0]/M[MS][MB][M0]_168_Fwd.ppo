#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1098;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _337 = _335.x;
    float _347 = dot(vec4(_337, _335.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _364 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_337 - _347) * cbMtdParam._m0[24u].x) + _347) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3405 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _372 = (_365 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _373 = (_365 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _374 = (_365 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _248) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _249) + cbTextureTilingScale._m0[3u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _423 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _437 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_413 - _423) * cbMtdParam._m0[24u].x) + _423) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3416 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _445 = (_438 * ((_391.x * cbMtdParam._m0[13u].x) - _372)) + _372;
    float _446 = (_438 * ((_391.y * cbMtdParam._m0[13u].y) - _373)) + _373;
    float _447 = (_438 * ((_391.z * cbMtdParam._m0[13u].z) - _374)) + _374;
    vec4 _460 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _488 = ((_460.x - _479) * _365) + _479;
    float _489 = ((_460.y - _480) * _365) + _480;
    float _490 = ((_460.z - _481) * _365) + _481;
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _248) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _249) + cbTextureTilingScale._m0[2u].w));
    float _515 = ((_502.z - _490) * _438) + _490;
    float _518 = ((((_502.x - _488) * _438) + _488) * 2.0) + (-1.0);
    float _520 = ((((_502.y - _489) * _438) + _489) * 2.0) + (-1.0);
    float _521 = dot(vec2(_518, _520), vec2(_518, _520));
    float _3427 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _552 = (((_540.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _518;
    float _553 = (((_540.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _520;
    float _557 = (cbMtdParam._m0[19u].w * (_540.z - _515)) + _515;
    float _562 = cbMtdParam._m0[22u].x + _540.w;
    float _565 = fma(_526, _215 * NORMAL.x, fma(_553, _222 * TANGENT.x, (_208 * _200) * _552));
    float _568 = fma(_526, _215 * NORMAL.y, fma(_553, _222 * TANGENT.y, (_208 * _201) * _552));
    float _571 = fma(_526, _215 * NORMAL.z, fma(_553, _222 * TANGENT.z, (_208 * _202) * _552));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3438 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _579 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3460 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3471 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3482 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _686 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _689 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    uint _703 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3493 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    vec4 _723 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _727 = ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * TEXCOORD_5.w) * _723.x;
    float _728 = dot(vec3(_576, _577, _578), vec3(_656, _657, _658));
    float _731 = _728 * 2.0;
    float _735 = (_731 * _576) - _656;
    float _736 = (_731 * _577) - _657;
    float _737 = (_731 * _578) - _658;
    float _741 = abs(dot(vec3(_656, _657, _658), vec3(_576, _577, _578)));
    float _3526 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = sqrt(_579);
    float _756 = exp2((_743 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_743 * 3.0));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _826 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _830 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _855 = _788 + _576;
        float _856 = _792 + _577;
        float _857 = _796 + _578;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_576, _577, _578), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3574 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_576, _577, _578), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3607 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_576, _577, _578), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3640 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1136 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1140 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1144 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1167 = _788 + _576;
        float _1168 = _792 + _577;
        float _1169 = _796 + _578;
        float _1179 = fma(_1169, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1136 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1140 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[35u].z) + ((((((_1144 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1235 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1202.x + (-0.5));
        float _1237 = _1235 * (_1202.y + (-0.5));
        float _1238 = _1235 * (_1202.z + (-0.5));
        float _1245 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1209.x + (-0.5));
        float _1247 = _1245 * (_1209.y + (-0.5));
        float _1248 = _1245 * (_1209.z + (-0.5));
        float _1255 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1216.x + (-0.5));
        float _1257 = _1255 * (_1216.y + (-0.5));
        float _1258 = _1255 * (_1216.z + (-0.5));
        float _1265 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1223.x + (-0.5));
        float _1267 = _1265 * (_1223.y + (-0.5));
        float _1268 = _1265 * (_1223.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_576, _577, _578), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3703 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1299 + 1.0))) + _1304) * _1269;
        float _1314 = _1237 * 0.5;
        float _1315 = _1247 * 0.5;
        float _1316 = _1257 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_576, _577, _578), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3736 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1341 + 1.0))) + _1346) * _1270;
        float _1356 = _1238 * 0.5;
        float _1357 = _1248 * 0.5;
        float _1358 = _1258 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_576, _577, _578), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3769 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1383 + 1.0))) + _1388) * _1271;
        _1405 = _1238;
        _1406 = _1237;
        _1407 = _1236;
        _1408 = _1248;
        _1409 = _1247;
        _1410 = _1246;
        _1411 = _1258;
        _1412 = _1257;
        _1413 = _1256;
        _1414 = _1271;
        _1415 = _1270;
        _1416 = _1269;
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1098;
        _1406 = _1098;
        _1407 = _1098;
        _1408 = _1098;
        _1409 = _1098;
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1110)) + _1110;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1111)) + _1111;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1112)) + _1112;
    float _1452 = fma(_1431, cbSceneParam._m0[89u].z, fma(_1430, cbSceneParam._m0[89u].y, _1429 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1431, cbSceneParam._m0[90u].z, fma(_1430, cbSceneParam._m0[90u].y, _1429 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1431, cbSceneParam._m0[91u].z, fma(_1430, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1429));
    float _1473 = _735 * 0.5;
    float _1474 = _736 * 0.5;
    float _1475 = _737 * 0.5;
    float _1476 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1479 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1482 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1516;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1489 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1493 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1497 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1504 = dot(vec4(cbModelParam._m0[39u]), vec4(_1473, _1474, _1475, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1527;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1518 = dot(vec4(cbModelParam._m0[40u]), vec4(_1473, _1474, _1475, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1531 = (_1527 * cbModelParam._m0[1u].x) + (_1516 * (1.0 - cbModelParam._m0[1u].x));
    float _1541 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1541 : min(cbModelParam._m0[25u].z, _1541));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_737, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735));
        float _1605 = fma(_737, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735));
        float _1608 = fma(_737, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1636 = frontier_phi_14_12_ladder;
        }
        float _1838;
        if (_1605 > 0.0)
        {
            _1838 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1838 = frontier_phi_23_19_ladder;
        }
        float _2081;
        if (_1608 > 0.0)
        {
            _2081 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2081 = frontier_phi_35_30_ladder;
        }
        float _2083 = isnan(_1838) ? _1636 : (isnan(_1636) ? _1838 : min(_1636, _1838));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1602) + _1591;
        float _2089 = (_2084 * _1605) + _1595;
        float _2090 = (_2084 * _1608) + _1599;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2091;
        float _2095 = _2091 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 > _2095) || ((_2089 < _2093) || ((_2088 < _2093) || (_2088 > _2095))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2090, cbModelParam._m0[9u].z, fma(_2089, cbModelParam._m0[9u].y, _2088 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2090, cbModelParam._m0[10u].z, fma(_2089, cbModelParam._m0[10u].y, _2088 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2090, cbModelParam._m0[11u].z, fma(_2089, cbModelParam._m0[11u].y, _2088 * cbModelParam._m0[11u].x))), _1542);
            frontier_phi_13_35_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_13_35_ladder_2;
        _1626 = frontier_phi_13_35_ladder_1;
        _1628 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_735, _736, _737), _1542);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1688 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1692 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1696 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1699 = fma(_737, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735));
        float _1702 = fma(_737, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735));
        float _1705 = fma(_737, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735));
        float _1843;
        if (_1699 > 0.0)
        {
            _1843 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1843 = frontier_phi_25_21_ladder;
        }
        float _2108;
        if (_1702 > 0.0)
        {
            _2108 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2108 = frontier_phi_37_32_ladder;
        }
        float _2313;
        if (_1705 > 0.0)
        {
            _2313 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2313 = frontier_phi_46_43_ladder;
        }
        float _2315 = isnan(_2108) ? _1843 : (isnan(_1843) ? _2108 : min(_1843, _2108));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1699) + _1688;
        float _2321 = (_2316 * _1702) + _1692;
        float _2322 = (_2316 * _1705) + _1696;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_22_46_ladder = _2521.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2521.x * cbModelParam._m0[1u].z;
        }
        _1724 = frontier_phi_22_46_ladder_2;
        _1726 = frontier_phi_22_46_ladder_1;
        _1728 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_735, _736, _737), _1633);
        _1724 = _1708.x * cbModelParam._m0[1u].z;
        _1726 = _1708.y * cbModelParam._m0[1u].z;
        _1728 = _1708.z * cbModelParam._m0[1u].z;
    }
    float _1740 = ((((1.0 - _756) * ((_743 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_756 * _743)) * _727;
    float _1741 = _1740 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1742 = _1740 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1743 = _1740 * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1746 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1741 * cbSceneParam._m0[91u].x));
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1772 = _727 + (-1.0);
    float _1777 = (cbLight._m0[_1765].x * _1772) + 1.0;
    float _1778 = (cbLight._m0[_1765].y * _1772) + 1.0;
    float _1779 = (cbLight._m0[_1765].z * _1772) + 1.0;
    float _1780 = (cbLight._m0[_1765].w * _1772) + 1.0;
    uint _1781 = _1764 + 5u;
    float _1787 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1791 = _1764 + 4u;
    float _1797 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1801 = _1764 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_576, _577, _578));
    float _1815 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_576, _577, _578));
    float _3905 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _3916 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1820 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1822 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1829 = ((cbLight._m0[_1781].x * _1787) * _1822) + ((cbLight._m0[_1791].x * _1797) * _1820);
    float _1830 = ((_1787 * cbLight._m0[_1781].y) * _1822) + ((_1797 * cbLight._m0[_1791].y) * _1820);
    float _1831 = ((_1787 * cbLight._m0[_1781].z) * _1822) + ((_1797 * cbLight._m0[_1791].z) * _1820);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1764 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1837)
    {
        _1848 = _1829;
        _1850 = _1830;
        _1852 = _1831;
    }
    else
    {
        uint _1856 = _1764 + 6u;
        float _1872 = (dot(vec3(cbLight._m0[_1764 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _3927 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1875 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1848 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1829;
        _1850 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1830;
        _1852 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1831;
    }
    bool _1855 = _1835.y == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1855)
    {
        _1893 = _1848;
        _1895 = _1850;
        _1897 = _1852;
    }
    else
    {
        uint _2052 = _1764 + 7u;
        float _2068 = (dot(vec3(cbLight._m0[_1764 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _3943 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2071 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1893 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1848;
        _1895 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1850;
        _1897 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1852;
    }
    uint _1900 = _1764 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _579) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1764].x + _656;
    float _1916 = cbLight._m0[_1764].y + _657;
    float _1917 = cbLight._m0[_1764].z + _658;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1764].xyz));
    float _3959 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _1929 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1930 = dot(vec3(_576, _577, _578), vec3(_1922, _1923, _1924));
    float _3981 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1922, _1923, _1924));
    float _3992 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1929 * ((_1928 * _1954) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1954) + _1914) * _1928))) * _1928;
    float _4003 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1978 = _1764 + 9u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _579) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1801].x + _656;
    float _1992 = cbLight._m0[_1801].y + _657;
    float _1993 = cbLight._m0[_1801].z + _658;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1801].xyz));
    float _4014 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _2005 = dot(vec3(_576, _577, _578), vec3(_1998, _1999, _2000));
    float _4025 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1998, _1999, _2000));
    float _4036 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1990 * _1990;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2027 = 1.0 - _1990;
    float _2037 = (0.5 / (((_1929 * ((_2004 * _2027) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2027) + _1990) * _2004))) * _2004;
    float _4047 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    float _2049 = (((_2026 * cbLight._m0[_1978].x) * _2039) * _1787) + (((_1953 * cbLight._m0[_1900].x) * _1967) * _1797);
    float _2050 = (((_2026 * cbLight._m0[_1978].y) * _2039) * _1787) + (((_1953 * cbLight._m0[_1900].y) * _1967) * _1797);
    float _2051 = (((_2026 * cbLight._m0[_1978].z) * _2039) * _1787) + (((_1953 * cbLight._m0[_1900].z) * _1967) * _1797);
    float _2113;
    float _2115;
    float _2117;
    if (_1837)
    {
        _2113 = _2049;
        _2115 = _2050;
        _2117 = _2051;
    }
    else
    {
        uint _2119 = _1764 + 2u;
        uint _2123 = _1764 + 10u;
        float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _579) * 0.949999988079071044921875);
        float _2138 = _2137 * _2137;
        float _2139 = cbLight._m0[_2119].x + _656;
        float _2140 = cbLight._m0[_2119].y + _657;
        float _2141 = cbLight._m0[_2119].z + _658;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2146 = _2145 * _2139;
        float _2147 = _2145 * _2140;
        float _2148 = _2145 * _2141;
        float _2149 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2119].xyz));
        float _4058 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2153 = dot(vec3(_576, _577, _578), vec3(_2146, _2147, _2148));
        float _4069 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2157 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2146, _2147, _2148));
        float _4080 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2161 = _2138 * _2138;
        float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
        float _2174 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2175 = 1.0 - _2138;
        float _2185 = (0.5 / (((_1929 * ((_2152 * _2175) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2175) + _2138) * _2152))) * _2152;
        float _4091 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2187 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
        float _2188 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2113 = (((_2174 * cbLight._m0[_2123].x) * _2187) * _2188) + _2049;
        _2115 = (((_2174 * cbLight._m0[_2123].y) * _2187) * _2188) + _2050;
        _2117 = (((_2174 * cbLight._m0[_2123].z) * _2187) * _2188) + _2051;
    }
    float _2223;
    float _2225;
    float _2227;
    if (_1855)
    {
        _2223 = _2113;
        _2225 = _2115;
        _2227 = _2117;
    }
    else
    {
        uint _2234 = _1764 + 3u;
        uint _2238 = _1764 + 11u;
        float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _579) * 0.949999988079071044921875);
        float _2253 = _2252 * _2252;
        float _2254 = cbLight._m0[_2234].x + _656;
        float _2255 = cbLight._m0[_2234].y + _657;
        float _2256 = cbLight._m0[_2234].z + _658;
        float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
        float _2261 = _2260 * _2254;
        float _2262 = _2260 * _2255;
        float _2263 = _2260 * _2256;
        float _2264 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2234].xyz));
        float _4107 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2268 = dot(vec3(_576, _577, _578), vec3(_2261, _2262, _2263));
        float _4118 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2272 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2261, _2262, _2263));
        float _4129 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _2253 * _2253;
        float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
        float _2289 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2290 = 1.0 - _2253;
        float _2300 = (0.5 / (((_1929 * ((_2267 * _2290) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2290) + _2253) * _2267))) * _2267;
        float _4140 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2302 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
        float _2303 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2223 = (((_2289 * cbLight._m0[_2238].x) * _2302) * _2303) + _2113;
        _2225 = (((_2289 * cbLight._m0[_2238].y) * _2302) * _2303) + _2115;
        _2227 = (((_2289 * cbLight._m0[_2238].z) * _2302) * _2303) + _2117;
    }
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_1762.y == 0u)
    {
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2378;
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2378;
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2378;
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.x;
        uint _2405 = uint((float(_2393.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2394))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2394)));
        float _2415 = (log2(_2381 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2416 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        uint _2419 = uint(isnan(14.0) ? _2416 : (isnan(_2416) ? 14.0 : min(_2416, 14.0)));
        uvec4 _2424 = texelFetch(g_lightClusterGridBuffer, int(((_2419 << 2u) + (_2405 << 6u)) >> 2u));
        uint _2425 = _2424.x;
        uint _2426 = _2393.z;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((((1u << ((_2426 >> 4u) & 15u)) + 4294967295u) & _2425) == 0u) || ((_2426 & 240u) == 0u))
        {
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
        }
        else
        {
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            uint _2677 = 0u;
            uint _2686;
            bool _2687;
            for (;;)
            {
                _2686 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                _2687 = _2686 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2687)
                {
                    frontier_phi_61_pred = _2671;
                    frontier_phi_61_pred_1 = _2676;
                    frontier_phi_61_pred_2 = _2675;
                    frontier_phi_61_pred_3 = _2674;
                    frontier_phi_61_pred_4 = _2673;
                    frontier_phi_61_pred_5 = _2672;
                }
                else
                {
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    uint _2801;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2686;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    for (;;)
                    {
                        uint _2805 = uint(findLSB(_2801)) + (_2677 << 5u);
                        uint _2802 = (_2801 + 4294967295u) & _2801;
                        uint _2807 = _2805 * 48u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2827 = (_2805 * 48u) + 4u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2846 = (_2805 * 48u) + 8u;
                        vec3 _2857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x));
                        float _2861 = _2821.x - _2379;
                        float _2862 = _2821.y - _2380;
                        float _2863 = _2821.z - _2381;
                        float _2864 = dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863));
                        float _2867 = inversesqrt(_2864);
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2871 = dot(vec3(_683, _686, _689), vec3(_2868, _2869, _2870));
                        float _2876 = 1.0 - (_2864 * _2821.w);
                        float _4166 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2878 = sqrt(_2864) * _2840.w;
                        float _2881 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2871) + _2882;
                        float _2888 = _2878 * _2878;
                        float _2892 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2877) / ((_2888 * 0.699999988079071044921875) + 1.0);
                        float _2896 = (-0.0) - _2379;
                        float _2897 = (-0.0) - _2380;
                        float _2898 = (-0.0) - _2381;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2913 = exp2(log2(1.0 / ((_2888 * 3.5) + 5.0)) * 0.25);
                        float _2914 = 1.0 - _743;
                        float _2921 = sqrt(1.0 - ((1.0 - (_2914 * _2914)) * (1.0 - (_2913 * _2913))));
                        float _2922 = _2921 * _2921;
                        float _2923 = _2922 * _2922;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2934 = dot(vec3(_683, _686, _689), vec3(_2903, _2904, _2905));
                        float _4182 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2938 = dot(vec3(_683, _686, _689), vec3(_2930 * _2924, _2930 * _2925, _2930 * _2926));
                        float _4193 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2945 = ((_2941 * _2941) * (_2923 + (-1.0))) + 1.0;
                        float _2946 = _2881 * _2922;
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2871) + _2947;
                        float _4204 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2952 = 1.0 - _2922;
                        float _2962 = (0.5 / (((_2951 * ((_2937 * _2952) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2922) * _2937))) * _2951;
                        float _4215 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2973 = (((_2923 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_2945 * _2945) * ((_2888 * 2.1991131305694580078125) + 3.141590118408203125))) * _2877;
                        _2730 = (_2892 * _2840.x) + _2798;
                        _2731 = (_2892 * _2840.y) + _2799;
                        _2732 = (_2892 * _2840.z) + _2800;
                        _2727 = (_2973 * _2857.x) + _2795;
                        _2728 = (_2973 * _2857.y) + _2796;
                        _2729 = (_2973 * _2857.z) + _2797;
                        if (_2802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2802;
                        }
                    }
                    frontier_phi_61_pred = _2727;
                    frontier_phi_61_pred_1 = _2732;
                    frontier_phi_61_pred_2 = _2731;
                    frontier_phi_61_pred_3 = _2730;
                    frontier_phi_61_pred_4 = _2729;
                    frontier_phi_61_pred_5 = _2728;
                }
                _2527 = frontier_phi_61_pred;
                _2537 = frontier_phi_61_pred_1;
                _2535 = frontier_phi_61_pred_2;
                _2533 = frontier_phi_61_pred_3;
                _2531 = frontier_phi_61_pred_4;
                _2529 = frontier_phi_61_pred_5;
                uint _2678 = _2677 + 1u;
                if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2671 = _2527;
                    _2672 = _2529;
                    _2673 = _2531;
                    _2674 = _2533;
                    _2675 = _2535;
                    _2676 = _2537;
                    _2677 = _2678;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
        }
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.z;
        uint _2543 = (_2541 >> 8u) & 15u;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((4294967295u << _2543) & _2425) == 0u)
        {
            _2639 = _2526;
            _2641 = _2528;
            _2643 = _2530;
            _2645 = _2532;
            _2647 = _2534;
            _2649 = _2536;
        }
        else
        {
            float _2664 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
            float _2665 = _2664 * _2379;
            float _2666 = _2664 * _2380;
            float _2667 = _2664 * _2381;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2543 < ((_2541 >> 12u) & 15u))
            {
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2778 = _2526;
                float _2779 = _2528;
                float _2780 = _2530;
                float _2781 = _2532;
                float _2782 = _2534;
                float _2783 = _2536;
                uint _2784 = _2543;
                uint _2793;
                bool _2794;
                for (;;)
                {
                    _2793 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                    _2794 = _2793 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2794)
                    {
                        frontier_phi_67_pred = _2781;
                        frontier_phi_67_pred_1 = _2782;
                        frontier_phi_67_pred_2 = _2783;
                        frontier_phi_67_pred_3 = _2780;
                        frontier_phi_67_pred_4 = _2779;
                        frontier_phi_67_pred_5 = _2778;
                    }
                    else
                    {
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        uint _2997 = _2793;
                        uint _2998;
                        vec4 _3023;
                        float _3024;
                        vec4 _3039;
                        vec3 _3051;
                        vec4 _3066;
                        vec4 _3081;
                        float _3127;
                        bool _3128;
                        for (;;)
                        {
                            uint _3008 = ((_2784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2997));
                            _2998 = (_2997 + 4294967295u) & _2997;
                            uint _3010 = _3008 * 40u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3024 = _3023.w;
                            uint _3026 = (_3008 * 40u) + 4u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3041 = (_3008 * 40u) + 8u;
                            _3051 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x));
                            uint _3053 = (_3008 * 40u) + 16u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3008 * 40u) + 20u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3008 * 40u) + 24u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3102 = (_3008 * 40u) + 28u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3127 = fma(_2381, _3115.z, fma(_2380, _3115.y, _3115.x * _2379)) + _3115.w;
                            _3128 = !((fma(_2381, _3096.z, fma(_2380, _3096.y, _3096.x * _2379)) + _3096.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3128)
                            {
                                float _3155 = _3023.x - _2379;
                                float _3156 = _3023.y - _2380;
                                float _3157 = _3023.z - _2381;
                                float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                                float _3161 = inversesqrt(_3158);
                                float _3162 = _3161 * _3155;
                                float _3163 = _3161 * _3156;
                                float _3164 = _3161 * _3157;
                                float _3168 = 1.0 - (_3158 / (_3024 * _3024));
                                float _4226 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3173 = sqrt(_3158) * _3039.w;
                                float _3175 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                                float _3176 = _3175 * _3175;
                                float _3179 = ((1.0 - _3176) * dot(vec3(_3162, _3163, _3164), vec3(_683, _686, _689))) + _3176;
                                float _3182 = _3173 * _3173;
                                float _3186 = (fma(_2381, _3066.z, fma(_2380, _3066.y, _3066.x * _2379)) + _3066.w) / _3127;
                                float _3187 = (fma(_2381, _3081.z, fma(_2380, _3081.y, _3081.x * _2379)) + _3081.w) / _3127;
                                float _3191 = 1.0 - dot(vec2(_3186, _3187), vec2(_3186, _3187));
                                float _4242 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3193 = _3192 * (((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3169) / ((_3182 * 0.699999988079071044921875) + 1.0));
                                float _3205 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                                float _3206 = 1.0 - _743;
                                float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                                float _3214 = _3213 * _3213;
                                float _3215 = _3214 * _3214;
                                float _3216 = _3162 - _2665;
                                float _3217 = _3163 - _2666;
                                float _3218 = _3164 - _2667;
                                float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                                float _3226 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2665, (-0.0) - _2666, (-0.0) - _2667));
                                float _4253 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3230 = dot(vec3(_683, _686, _689), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                                float _4264 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                                float _3238 = _3175 * _3214;
                                float _3239 = _3238 * _3238;
                                float _3245 = ((1.0 - _3239) * dot(vec3(_683, _686, _689), vec3(_3162, _3163, _3164))) + _3239;
                                float _4275 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3247 = 1.0 - _3214;
                                float _3257 = (0.5 / (((_3246 * ((_3229 * _3247) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3214) * _3229))) * _3246;
                                float _4286 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3267 = (_3192 * _3169) * (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3237 * _3237) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3267 * _3051.x;
                                frontier_phi_73_pred_1 = _3267 * _3051.y;
                                frontier_phi_73_pred_2 = _3193 * _3039.z;
                                frontier_phi_73_pred_3 = _3193 * _3039.y;
                                frontier_phi_73_pred_4 = _3193 * _3039.x;
                                frontier_phi_73_pred_5 = _3267 * _3051.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3271 = frontier_phi_73_pred;
                            _3272 = frontier_phi_73_pred_1;
                            _3276 = frontier_phi_73_pred_2;
                            _3275 = frontier_phi_73_pred_3;
                            _3274 = frontier_phi_73_pred_4;
                            _3273 = frontier_phi_73_pred_5;
                            _2981 = _3274 + _2994;
                            _2982 = _3275 + _2995;
                            _2983 = _3276 + _2996;
                            _2978 = _3271 + _2991;
                            _2979 = _3272 + _2992;
                            _2980 = _3273 + _2993;
                            if (_2998 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2998;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2981;
                        frontier_phi_67_pred_1 = _2982;
                        frontier_phi_67_pred_2 = _2983;
                        frontier_phi_67_pred_3 = _2980;
                        frontier_phi_67_pred_4 = _2979;
                        frontier_phi_67_pred_5 = _2978;
                    }
                    _2646 = frontier_phi_67_pred;
                    _2648 = frontier_phi_67_pred_1;
                    _2650 = frontier_phi_67_pred_2;
                    _2644 = frontier_phi_67_pred_3;
                    _2642 = frontier_phi_67_pred_4;
                    _2640 = frontier_phi_67_pred_5;
                    uint _2785 = _2784 + 1u;
                    if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2778 = _2640;
                        _2779 = _2642;
                        _2780 = _2644;
                        _2781 = _2646;
                        _2782 = _2648;
                        _2783 = _2650;
                        _2784 = _2785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2648;
                frontier_phi_55_56_ladder_1 = _2650;
                frontier_phi_55_56_ladder_2 = _2646;
                frontier_phi_55_56_ladder_3 = _2644;
                frontier_phi_55_56_ladder_4 = _2642;
                frontier_phi_55_56_ladder_5 = _2640;
            }
            else
            {
                frontier_phi_55_56_ladder = _2534;
                frontier_phi_55_56_ladder_1 = _2536;
                frontier_phi_55_56_ladder_2 = _2532;
                frontier_phi_55_56_ladder_3 = _2530;
                frontier_phi_55_56_ladder_4 = _2528;
                frontier_phi_55_56_ladder_5 = _2526;
            }
            _2639 = frontier_phi_55_56_ladder_5;
            _2641 = frontier_phi_55_56_ladder_4;
            _2643 = frontier_phi_55_56_ladder_3;
            _2645 = frontier_phi_55_56_ladder_2;
            _2647 = frontier_phi_55_56_ladder;
            _2649 = frontier_phi_55_56_ladder_1;
        }
        float _2654 = isnan(1.0) ? _727 : (isnan(_727) ? 1.0 : min(_727, 1.0));
        _2438 = (_2654 * _2645) + _1893;
        _2440 = (_2654 * _2647) + _1895;
        _2442 = (_2654 * _2649) + _1897;
        _2444 = ((_2639 * 0.039999999105930328369140625) * _2654) + _2223;
        _2446 = ((_2641 * 0.039999999105930328369140625) * _2654) + _2225;
        _2448 = ((_2643 * 0.039999999105930328369140625) * _2654) + _2227;
    }
    else
    {
        _2438 = _1893;
        _2440 = _1895;
        _2442 = _1897;
        _2444 = _2223;
        _2446 = _2225;
        _2448 = _2227;
    }
    float _4302 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4313 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4324 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    uint _2468 = _228 + 6u;
    float _2476 = _664 / cbSceneParam._m0[86u].x;
    float _2477 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2491 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2493 = _2491.x;
    float _2494 = _2491.y;
    float _2495 = _2491.z;
    float _2496 = _2491.w;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2551 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2552 = _2551 / _597;
        float _2563 = _2552 * _649;
        float _2564 = _650 * _2552;
        float _2565 = (-0.0) - _2564;
        float _2567 = _2552 * _651;
        float _2569 = (cbSceneParam._m0[77u].w * _2565) / _2551;
        float _2570 = _2569 + cbSceneParam._m0[79u].w;
        float _2571 = cbSceneParam._m0[79u].w - _2564;
        float _2577 = sqrt(((_2563 * _2563) + (_2564 * _2564)) + (_2567 * _2567));
        float _2580 = (1.0 - (cbSceneParam._m0[77u].w / _2551)) * _2577;
        float _2585 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2587 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2740;
        if (abs((_2565 - _2569) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2740 = ((((_2570 > 0.0) ? exp2(_2585 * _2570) : (2.0 - exp2(_2587 * _2570))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2580;
        }
        else
        {
            float _2700 = 1.0 / cbSceneParam._m0[80u].x;
            float _2701 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : max(_2570, _2571));
            float _2702 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : min(_2570, _2571));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            _2740 = ((abs(_2577 / _2565) * cbSceneParam._m0[80u].y) * ((((_2711 - _2712) * 2.0) - ((exp2(_2585 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)))) - exp2(_2585 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))))) * _2700)) - ((exp2(_2587 * _2711) - exp2(_2587 * _2712)) * _2700))) + (_2580 * cbSceneParam._m0[80u].z);
        }
        vec4 _2742 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, 1.0), 0.0);
        float _2751 = exp2((_2740 * (-1.44269502162933349609375)) * (1.0 - _2742.w));
        float _2752 = log2(_2751);
        float _2768 = log2(_2496);
        _2589 = (exp2(_2768 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].x)) * _2742.x) / cbSceneParam._m0[78u].x)) + _2493;
        _2591 = (exp2(_2768 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].y)) * _2742.y) / cbSceneParam._m0[78u].y)) + _2494;
        _2593 = (exp2(_2768 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].z)) * _2742.z) / cbSceneParam._m0[78u].z)) + _2495;
        _2595 = _2751 * _2496;
    }
    else
    {
        _2589 = _2493;
        _2591 = _2494;
        _2593 = _2495;
        _2595 = _2496;
    }
    float _2607 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2608 = _2607 == 3.0;
    float _2609 = log2(_2595);
    float _2616 = exp2(_2609 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2438 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _727))) + ((_2444 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2617 = exp2(_2609 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2440 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _727))) + ((_2446 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2618 = exp2(_2609 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2442 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _727))) + ((_2448 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2627 = (_2607 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2627 * (_2608 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.y = _2627 * (_2608 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.z = _2627 * (_2608 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.w = cbInstanceData._m0[_2468].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2468].w;
}


