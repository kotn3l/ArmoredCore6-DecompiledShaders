#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1060;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3394 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))));
    vec4 _335 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _337 = _335.x;
    float _338 = 1.0 - _337;
    float _347 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _350 = ((isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : min(_347, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _359 = (_350 - ((((((_337 - _338) * cbMtdParam._m0[24u].z) + _338) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _350))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3415 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _367 = (_360 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _368 = (_360 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _369 = (_360 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _384 = _382.x;
    float _385 = 1.0 - _384;
    float _414 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_384 - _385) * cbMtdParam._m0[24u].w) + _385) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3426 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _423 = ((((cbMtdParam._m0[10u].x - _367) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _415) + _367;
    float _424 = ((((cbMtdParam._m0[10u].y - _368) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _415) + _368;
    float _425 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _369)) * _415) + _369;
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _446 = (_439.x * 2.0) + (-1.0);
    float _447 = (_439.y * 2.0) + (-1.0);
    float _448 = dot(vec2(_446, _447), vec2(_446, _447));
    float _3437 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _456 = (_360 * (_439.z - _304)) + _304;
    float _459 = ((cbMtdParam._m0[23u].y - _456) * _415) + _456;
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _487 = (_481.x * 2.0) + (-1.0);
    float _488 = (_481.y * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3448 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _506 = (((_446 - _309) + (cbMtdParam._m0[21u].x * _309)) * _360) + _309;
    float _507 = (((_447 - _311) + (cbMtdParam._m0[21u].x * _311)) * _360) + _311;
    float _508 = (_360 * (sqrt(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) - _318)) + _318;
    float _519 = (((_487 - _506) + (_506 * cbMtdParam._m0[22u].z)) * _415) + _506;
    float _520 = (((_488 - _507) + (_507 * cbMtdParam._m0[22u].z)) * _415) + _507;
    float _521 = ((sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) - _508) * _415) + _508;
    float _523 = cbMtdParam._m0[22u].x + _300.w;
    float _526 = fma(_521, _222 * NORMAL.x, fma(_520, _229 * TANGENT.x, (_215 * _207) * _519));
    float _529 = fma(_521, _222 * NORMAL.y, fma(_520, _229 * TANGENT.y, (_215 * _208) * _519));
    float _532 = fma(_521, _222 * NORMAL.z, fma(_520, _229 * TANGENT.z, (_215 * _209) * _519));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    float _537 = _536 * _526;
    float _538 = _536 * _529;
    float _539 = _536 * _532;
    float _3459 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _540 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3481 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3492 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3503 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    float _623 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _624 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _645 = fma(_539, cbSceneParam._m0[5u].z, fma(_538, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _537));
    float _648 = fma(_539, cbSceneParam._m0[6u].z, fma(_538, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _537));
    float _651 = fma(_539, cbSceneParam._m0[7u].z, fma(_538, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _537));
    uint _665 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _671 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_665].x;
    float _672 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_665].y;
    float _673 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_665].z;
    float _3514 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _623, cbSceneParam._m0[86u].y * _624));
    float _689 = ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * TEXCOORD_5.w) * _685.x;
    float _690 = dot(vec3(_537, _538, _539), vec3(_615, _616, _617));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _537) - _615;
    float _698 = (_693 * _538) - _616;
    float _699 = (_693 * _539) - _617;
    float _703 = abs(dot(vec3(_615, _616, _617), vec3(_537, _538, _539)));
    float _3547 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_540);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _784 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _788 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _792 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _817 = _750 + _537;
        float _818 = _754 + _538;
        float _819 = _758 + _539;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _784;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _788;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _792;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_784 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_788 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_792 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_537, _538, _539), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3595 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_537, _538, _539), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3628 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_537, _538, _539), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3661 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1061 = _889;
        _1062 = _888;
        _1063 = _900;
        _1064 = _899;
        _1065 = _898;
        _1066 = _910;
        _1067 = _909;
        _1068 = _908;
        _1069 = _923;
        _1070 = _922;
        _1071 = _921;
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _1060;
        _1061 = _1060;
        _1062 = _1060;
        _1063 = _1060;
        _1064 = _1060;
        _1065 = _1060;
        _1066 = _1060;
        _1067 = _1060;
        _1068 = _1060;
        _1069 = _1060;
        _1070 = _1060;
        _1071 = _1060;
        _1072 = 0.0;
        _1073 = 0.0;
        _1074 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1103 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1107 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1130 = _750 + _537;
        float _1131 = _754 + _538;
        float _1132 = _758 + _539;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_537, _538, _539), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3724 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_537, _538, _539), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3757 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_537, _538, _539), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3790 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1060;
        _1369 = _1060;
        _1370 = _1060;
        _1371 = _1060;
        _1372 = _1060;
        _1373 = _1060;
        _1374 = _1060;
        _1375 = _1060;
        _1376 = _1060;
        _1377 = _1060;
        _1378 = _1060;
        _1379 = _1060;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1072)) + _1072;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1073)) + _1073;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1074)) + _1074;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _697 * 0.5;
    float _1437 = _698 * 0.5;
    float _1438 = _699 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1059, _1063, _1066, _1069));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _540);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1553 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1557 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1561 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1564 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1567 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1570 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1598;
        if (_1564 > 0.0)
        {
            _1598 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1598 = frontier_phi_14_12_ladder;
        }
        float _1822;
        if (_1567 > 0.0)
        {
            _1822 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1822 = frontier_phi_23_19_ladder;
        }
        float _2068;
        if (_1570 > 0.0)
        {
            _2068 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2068 = frontier_phi_35_30_ladder;
        }
        float _2070 = isnan(_1822) ? _1598 : (isnan(_1598) ? _1822 : min(_1598, _1822));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1564) + _1553;
        float _2076 = (_2071 * _1567) + _1557;
        float _2077 = (_2071 * _1570) + _1561;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2080 = (-1.0) - _2078;
        float _2082 = _2078 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2077 > _2082) || ((_2077 < _2080) || ((_2076 > _2082) || ((_2076 < _2080) || ((_2075 < _2080) || (_2075 > _2082))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2077, cbModelParam._m0[9u].z, fma(_2076, cbModelParam._m0[9u].y, _2075 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2077, cbModelParam._m0[10u].z, fma(_2076, cbModelParam._m0[10u].y, _2075 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2077, cbModelParam._m0[11u].z, fma(_2076, cbModelParam._m0[11u].y, _2075 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_13_35_ladder = _2201.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2201.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2201.x * cbModelParam._m0[1u].y;
        }
        _1586 = frontier_phi_13_35_ladder_2;
        _1588 = frontier_phi_13_35_ladder_1;
        _1590 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1505);
        _1586 = _1574.x * cbModelParam._m0[1u].y;
        _1588 = _1574.y * cbModelParam._m0[1u].y;
        _1590 = _1574.z * cbModelParam._m0[1u].y;
    }
    float _1594 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _540);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1594 : min(cbModelParam._m0[25u].w, _1594));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1663 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1666 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1827;
        if (_1660 > 0.0)
        {
            _1827 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2095;
        if (_1663 > 0.0)
        {
            _2095 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2095 = frontier_phi_37_32_ladder;
        }
        float _2300;
        if (_1666 > 0.0)
        {
            _2300 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2300 = frontier_phi_46_43_ladder;
        }
        float _2302 = isnan(_2095) ? _1827 : (isnan(_1827) ? _2095 : min(_1827, _2095));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1660) + _1649;
        float _2308 = (_2303 * _1663) + _1653;
        float _2309 = (_2303 * _1666) + _1657;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1595);
            frontier_phi_22_46_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_22_46_ladder_2;
        _1687 = frontier_phi_22_46_ladder_1;
        _1689 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1595);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1701 = ((((1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_718 * _705)) * _689;
    float _1702 = _1701 * ((cbModelParam._m0[1u].w * (_1685 - _1586)) + _1586);
    float _1703 = _1701 * ((cbModelParam._m0[1u].w * (_1687 - _1588)) + _1588);
    float _1704 = _1701 * ((cbModelParam._m0[1u].w * (_1689 - _1590)) + _1590);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    vec4 _1721 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_623, _624));
    float _1723 = _1721.w;
    float _1735 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1723);
    float _1736 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1723);
    float _1737 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1723);
    uvec4 _1741 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1743 = _1741.x * 14u;
    uint _1744 = _1743 + 13u;
    float _1751 = _689 + (-1.0);
    float _1756 = (cbLight._m0[_1744].x * _1751) + 1.0;
    float _1757 = (cbLight._m0[_1744].y * _1751) + 1.0;
    float _1758 = (cbLight._m0[_1744].z * _1751) + 1.0;
    float _1759 = (cbLight._m0[_1744].w * _1751) + 1.0;
    uint _1760 = _1743 + 5u;
    float _1766 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1770 = _1743 + 4u;
    float _1780 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1784 = _1743 | 1u;
    float _1795 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_537, _538, _539));
    float _1798 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_537, _538, _539));
    float _3926 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _3937 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1803 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1805 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1812 = ((cbLight._m0[_1760].x * _1766) * _1805) + (((cbLight._m0[_1770].x * _1735) * _1780) * _1803);
    float _1813 = ((_1766 * cbLight._m0[_1760].y) * _1805) + (((cbLight._m0[_1770].y * _1736) * _1780) * _1803);
    float _1814 = ((_1766 * cbLight._m0[_1760].z) * _1805) + (((cbLight._m0[_1770].z * _1737) * _1780) * _1803);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1743 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1812;
        _1834 = _1813;
        _1836 = _1814;
    }
    else
    {
        uint _1840 = _1743 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1743 + 2u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3948 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1859 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1812;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2039 = _1743 + 7u;
        float _2055 = (dot(vec3(cbLight._m0[_1743 + 3u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _3964 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2058 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1877 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1832;
        _1879 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1834;
        _1881 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1836;
    }
    uint _1884 = _1743 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _540) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1743].x + _615;
    float _1900 = cbLight._m0[_1743].y + _616;
    float _1901 = cbLight._m0[_1743].z + _617;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1743].xyz));
    float _3980 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1913 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1914 = dot(vec3(_537, _538, _539), vec3(_1906, _1907, _1908));
    float _4002 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1906, _1907, _1908));
    float _4013 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _4024 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1965 = _1743 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _540) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1784].x + _615;
    float _1979 = cbLight._m0[_1784].y + _616;
    float _1980 = cbLight._m0[_1784].z + _617;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1784].xyz));
    float _4035 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1992 = dot(vec3(_537, _538, _539), vec3(_1985, _1986, _1987));
    float _4046 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1985, _1986, _1987));
    float _4057 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1977;
    float _2024 = (0.5 / (((_1913 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2014) + _1977) * _1991))) * _1991;
    float _4068 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2036 = (((_2013 * cbLight._m0[_1965].x) * _2026) * _1766) + ((((cbLight._m0[_1884].x * _1735) * _1937) * _1951) * _1780);
    float _2037 = (((_2013 * cbLight._m0[_1965].y) * _2026) * _1766) + ((((cbLight._m0[_1884].y * _1736) * _1937) * _1951) * _1780);
    float _2038 = (((_2013 * cbLight._m0[_1965].z) * _2026) * _1766) + ((((cbLight._m0[_1884].z * _1737) * _1937) * _1951) * _1780);
    float _2100;
    float _2102;
    float _2104;
    if (_1821)
    {
        _2100 = _2036;
        _2102 = _2037;
        _2104 = _2038;
    }
    else
    {
        uint _2106 = _1743 + 2u;
        uint _2110 = _1743 + 10u;
        float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _540) * 0.949999988079071044921875);
        float _2125 = _2124 * _2124;
        float _2126 = cbLight._m0[_2106].x + _615;
        float _2127 = cbLight._m0[_2106].y + _616;
        float _2128 = cbLight._m0[_2106].z + _617;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2133 = _2132 * _2126;
        float _2134 = _2132 * _2127;
        float _2135 = _2132 * _2128;
        float _2136 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2106].xyz));
        float _4079 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2140 = dot(vec3(_537, _538, _539), vec3(_2133, _2134, _2135));
        float _4090 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2133, _2134, _2135));
        float _4101 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2148 = _2125 * _2125;
        float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
        float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2162 = 1.0 - _2125;
        float _2172 = (0.5 / (((_1913 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2162) + _2125) * _2139))) * _2139;
        float _4112 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
        float _2175 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2100 = (((_2161 * cbLight._m0[_2110].x) * _2174) * _2175) + _2036;
        _2102 = (((_2161 * cbLight._m0[_2110].y) * _2174) * _2175) + _2037;
        _2104 = (((_2161 * cbLight._m0[_2110].z) * _2174) * _2175) + _2038;
    }
    float _2210;
    float _2212;
    float _2214;
    if (_1839)
    {
        _2210 = _2100;
        _2212 = _2102;
        _2214 = _2104;
    }
    else
    {
        uint _2221 = _1743 + 3u;
        uint _2225 = _1743 + 11u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _540) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _615;
        float _2242 = cbLight._m0[_2221].y + _616;
        float _2243 = cbLight._m0[_2221].z + _617;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2221].xyz));
        float _4128 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2255 = dot(vec3(_537, _538, _539), vec3(_2248, _2249, _2250));
        float _4139 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4150 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2277 = 1.0 - _2240;
        float _2287 = (0.5 / (((_1913 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2277) + _2240) * _2254))) * _2254;
        float _4161 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2210 = (((_2276 * cbLight._m0[_2225].x) * _2289) * _2290) + _2100;
        _2212 = (((_2276 * cbLight._m0[_2225].y) * _2289) * _2290) + _2102;
        _2214 = (((_2276 * cbLight._m0[_2225].z) * _2289) * _2290) + _2104;
    }
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_1741.y == 0u)
    {
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2365;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2365;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2365;
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.x;
        uint _2392 = uint((float(_2380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _624) / _2381))) + floor(float(uint(cbSceneParam._m0[85u].x * _623) / _2381)));
        float _2402 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2403 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        uint _2406 = uint(isnan(14.0) ? _2403 : (isnan(_2403) ? 14.0 : min(_2403, 14.0)));
        uvec4 _2411 = texelFetch(g_lightClusterGridBuffer, int(((_2406 << 2u) + (_2392 << 6u)) >> 2u));
        uint _2412 = _2411.x;
        uint _2413 = _2380.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2413 >> 4u) & 15u)) + 4294967295u) & _2412) == 0u) || ((_2413 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2674)
                {
                    frontier_phi_61_pred = _2658;
                    frontier_phi_61_pred_1 = _2663;
                    frontier_phi_61_pred_2 = _2662;
                    frontier_phi_61_pred_3 = _2661;
                    frontier_phi_61_pred_4 = _2660;
                    frontier_phi_61_pred_5 = _2659;
                }
                else
                {
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    uint _2788;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2673;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2792 = uint(findLSB(_2788)) + (_2664 << 5u);
                        uint _2789 = (_2788 + 4294967295u) & _2788;
                        uint _2794 = _2792 * 48u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2814 = (_2792 * 48u) + 4u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2833 = (_2792 * 48u) + 8u;
                        vec3 _2844 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x));
                        float _2848 = _2808.x - _2366;
                        float _2849 = _2808.y - _2367;
                        float _2850 = _2808.z - _2368;
                        float _2851 = dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850));
                        float _2854 = inversesqrt(_2851);
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2858 = dot(vec3(_645, _648, _651), vec3(_2855, _2856, _2857));
                        float _2863 = 1.0 - (_2851 * _2808.w);
                        float _4187 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2865 = sqrt(_2851) * _2827.w;
                        float _2868 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2858) + _2869;
                        float _2875 = _2865 * _2865;
                        float _2879 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2864) / ((_2875 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2366;
                        float _2884 = (-0.0) - _2367;
                        float _2885 = (-0.0) - _2368;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2875 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _705;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_645, _648, _651), vec3(_2890, _2891, _2892));
                        float _4203 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2925 = dot(vec3(_645, _648, _651), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4214 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2868 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2858) + _2934;
                        float _4225 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4236 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2932 * _2932) * ((_2875 * 2.1991131305694580078125) + 3.141590118408203125))) * _2864;
                        _2717 = (_2879 * _2827.x) + _2785;
                        _2718 = (_2879 * _2827.y) + _2786;
                        _2719 = (_2879 * _2827.z) + _2787;
                        _2714 = (_2960 * _2844.x) + _2782;
                        _2715 = (_2960 * _2844.y) + _2783;
                        _2716 = (_2960 * _2844.z) + _2784;
                        if (_2789 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2789;
                        }
                    }
                    frontier_phi_61_pred = _2714;
                    frontier_phi_61_pred_1 = _2719;
                    frontier_phi_61_pred_2 = _2718;
                    frontier_phi_61_pred_3 = _2717;
                    frontier_phi_61_pred_4 = _2716;
                    frontier_phi_61_pred_5 = _2715;
                }
                _2514 = frontier_phi_61_pred;
                _2524 = frontier_phi_61_pred_1;
                _2522 = frontier_phi_61_pred_2;
                _2520 = frontier_phi_61_pred_3;
                _2518 = frontier_phi_61_pred_4;
                _2516 = frontier_phi_61_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2514;
                    _2659 = _2516;
                    _2660 = _2518;
                    _2661 = _2520;
                    _2662 = _2522;
                    _2663 = _2524;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2530) & _2412) == 0u)
        {
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
            _2634 = _2521;
            _2636 = _2523;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _2652 = _2651 * _2366;
            float _2653 = _2651 * _2367;
            float _2654 = _2651 * _2368;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2765 = _2513;
                float _2766 = _2515;
                float _2767 = _2517;
                float _2768 = _2519;
                float _2769 = _2521;
                float _2770 = _2523;
                uint _2771 = _2530;
                uint _2780;
                bool _2781;
                for (;;)
                {
                    _2780 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                    _2781 = _2780 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2781)
                    {
                        frontier_phi_67_pred = _2768;
                        frontier_phi_67_pred_1 = _2769;
                        frontier_phi_67_pred_2 = _2770;
                        frontier_phi_67_pred_3 = _2767;
                        frontier_phi_67_pred_4 = _2766;
                        frontier_phi_67_pred_5 = _2765;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        uint _2984 = _2780;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2995 = ((_2771 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_2995 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2995 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2368, _3104.z, fma(_2367, _3104.y, _3104.x * _2366)) + _3104.w;
                            _3117 = !((fma(_2368, _3085.z, fma(_2367, _3085.y, _3085.x * _2366)) + _3085.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3010.x - _2366;
                                float _3145 = _3010.y - _2367;
                                float _3146 = _3010.z - _2368;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3011 * _3011));
                                float _4247 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3162 = sqrt(_3147) * _3026.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_645, _648, _651))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2368, _3054.z, fma(_2367, _3054.y, _3054.x * _2366)) + _3054.w) / _3116;
                                float _3176 = (fma(_2368, _3070.z, fma(_2367, _3070.y, _3070.x * _2366)) + _3070.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4263 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _705;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2652;
                                float _3206 = _3152 - _2653;
                                float _3207 = _3153 - _2654;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4274 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3219 = dot(vec3(_645, _648, _651), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4285 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_645, _648, _651), vec3(_3151, _3152, _3153))) + _3228;
                                float _4296 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4307 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3256 * _3038.x;
                                frontier_phi_73_pred_1 = _3256 * _3038.y;
                                frontier_phi_73_pred_2 = _3182 * _3026.z;
                                frontier_phi_73_pred_3 = _3182 * _3026.y;
                                frontier_phi_73_pred_4 = _3182 * _3026.x;
                                frontier_phi_73_pred_5 = _3256 * _3038.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_73_pred;
                            _3261 = frontier_phi_73_pred_1;
                            _3265 = frontier_phi_73_pred_2;
                            _3264 = frontier_phi_73_pred_3;
                            _3263 = frontier_phi_73_pred_4;
                            _3262 = frontier_phi_73_pred_5;
                            _2968 = _3263 + _2981;
                            _2969 = _3264 + _2982;
                            _2970 = _3265 + _2983;
                            _2965 = _3260 + _2978;
                            _2966 = _3261 + _2979;
                            _2967 = _3262 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2968;
                        frontier_phi_67_pred_1 = _2969;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2967;
                        frontier_phi_67_pred_4 = _2966;
                        frontier_phi_67_pred_5 = _2965;
                    }
                    _2633 = frontier_phi_67_pred;
                    _2635 = frontier_phi_67_pred_1;
                    _2637 = frontier_phi_67_pred_2;
                    _2631 = frontier_phi_67_pred_3;
                    _2629 = frontier_phi_67_pred_4;
                    _2627 = frontier_phi_67_pred_5;
                    uint _2772 = _2771 + 1u;
                    if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2765 = _2627;
                        _2766 = _2629;
                        _2767 = _2631;
                        _2768 = _2633;
                        _2769 = _2635;
                        _2770 = _2637;
                        _2771 = _2772;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2635;
                frontier_phi_55_56_ladder_1 = _2637;
                frontier_phi_55_56_ladder_2 = _2633;
                frontier_phi_55_56_ladder_3 = _2631;
                frontier_phi_55_56_ladder_4 = _2629;
                frontier_phi_55_56_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_55_56_ladder = _2521;
                frontier_phi_55_56_ladder_1 = _2523;
                frontier_phi_55_56_ladder_2 = _2519;
                frontier_phi_55_56_ladder_3 = _2517;
                frontier_phi_55_56_ladder_4 = _2515;
                frontier_phi_55_56_ladder_5 = _2513;
            }
            _2626 = frontier_phi_55_56_ladder_5;
            _2628 = frontier_phi_55_56_ladder_4;
            _2630 = frontier_phi_55_56_ladder_3;
            _2632 = frontier_phi_55_56_ladder_2;
            _2634 = frontier_phi_55_56_ladder;
            _2636 = frontier_phi_55_56_ladder_1;
        }
        float _2641 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2425 = (_2641 * _2632) + _1877;
        _2427 = (_2641 * _2634) + _1879;
        _2429 = (_2641 * _2636) + _1881;
        _2431 = ((_2626 * 0.039999999105930328369140625) * _2641) + _2210;
        _2433 = ((_2628 * 0.039999999105930328369140625) * _2641) + _2212;
        _2435 = ((_2630 * 0.039999999105930328369140625) * _2641) + _2214;
    }
    else
    {
        _2425 = _1877;
        _2427 = _1879;
        _2429 = _1881;
        _2431 = _2210;
        _2433 = _2212;
        _2435 = _2214;
    }
    float _4323 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4334 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4345 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    uint _2455 = _235 + 6u;
    float _2463 = _623 / cbSceneParam._m0[86u].x;
    float _2464 = _624 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2539 = _2538 / _558;
        float _2550 = _2539 * _608;
        float _2551 = _609 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2554 = _2539 * _610;
        float _2556 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2551;
        float _2564 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2552 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2689 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2727 = ((abs(_2564 / _2552) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2574 * _2698) - exp2(_2574 * _2699)) * _2687))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2483);
        _2576 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2578 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2580 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2582 = _2738 * _2483;
    }
    else
    {
        _2576 = _2480;
        _2578 = _2481;
        _2580 = _2482;
        _2582 = _2483;
    }
    float _2594 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2595 = _2594 == 3.0;
    float _2596 = log2(_2582);
    float _2603 = exp2(_2596 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2425 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _689))) + ((_2431 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2596 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2427 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _689))) + ((_2433 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2605 = exp2(_2596 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2429 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _689))) + ((_2435 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2614 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2614 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.y = _2614 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.z = _2614 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.w = cbInstanceData._m0[_2455].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2455].w;
}


