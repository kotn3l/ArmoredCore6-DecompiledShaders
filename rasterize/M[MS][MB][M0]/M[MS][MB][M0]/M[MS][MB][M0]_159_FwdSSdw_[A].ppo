#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1309;
float _3691;
float _3692;
float _3693;
float _3694;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3703 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3714 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _478 = fma(_475, _239, fma(_469, _246, _467 * _232));
    float _481 = fma(_475, _240, fma(_469, _247, _467 * _233));
    float _484 = fma(_475, _241, fma(_469, _248, _467 * _234));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _539 = ((_534 - _535) * cbMtdParam._m0[24u].z) + _535;
    float _541 = (cbMtdParam._m0[19u].x + dot(vec4(_488 * _478, _488 * _481, _488 * _484, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_539 * cbMtdParam._m0[21u].z);
    float _3725 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _544 = (-0.0) - cbMtdParam._m0[24u].y;
    float _546 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
    float _554 = _542 - ((_542 * TEXCOORD_8.x) * _547);
    float _555 = _542 - ((_542 * TEXCOORD_8.y) * _547);
    float _556 = _542 - ((_542 * TEXCOORD_8.z) * _547);
    float _563 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _567 = ((isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : min(_563, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _575 = (_567 - (((_539 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _567))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3756 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _580 = ((_554 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) * _576) + _393;
    float _581 = ((_555 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) * _576) + _394;
    float _582 = ((_556 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) * _576) + _395;
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _624 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_596 - _597) * cbMtdParam._m0[24u].w) + _597) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3767 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _633 = ((((cbMtdParam._m0[10u].x - _580) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _625) + _580;
    float _634 = ((((cbMtdParam._m0[10u].y - _581) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _625) + _581;
    float _635 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _582)) * _625) + _582;
    vec4 _649 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _656 = (_649.x * 2.0) + (-1.0);
    float _657 = (_649.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3778 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _667 = (((_649.z - _464) * _554) * _576) + _464;
    float _670 = ((cbMtdParam._m0[23u].y - _667) * _625) + _667;
    vec4 _689 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _695 = (_689.x * 2.0) + (-1.0);
    float _696 = (_689.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3789 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _717 = (((cbMtdParam._m0[21u].x * _467) + ((_656 - _467) * _554)) * _576) + _467;
    float _718 = (((cbMtdParam._m0[21u].x * _469) + ((_657 - _469) * _555)) * _576) + _469;
    float _719 = (((sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _475) * _556) * _576) + _475;
    float _730 = (((_695 - _717) + (_717 * cbMtdParam._m0[22u].z)) * _625) + _717;
    float _731 = (((_696 - _718) + (_718 * cbMtdParam._m0[22u].z)) * _625) + _718;
    float _732 = ((sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) - _719) * _625) + _719;
    float _734 = cbMtdParam._m0[22u].x + _504.w;
    float _737 = fma(_732, _239, fma(_731, _246, _730 * _232));
    float _740 = fma(_732, _240, fma(_731, _247, _730 * _233));
    float _743 = fma(_732, _241, fma(_731, _248, _730 * _234));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    float _748 = _747 * _737;
    float _749 = _747 * _740;
    float _750 = _747 * _743;
    float _3800 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _751 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3822 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3833 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3844 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _769 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _820 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _810);
    float _821 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _810);
    float _822 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _810);
    float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
    float _827 = _820 * _826;
    float _828 = _821 * _826;
    float _829 = _822 * _826;
    vec4 _834 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _836 = _834.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _990 = sqrt(((_820 * _820) + (_821 * _821)) + (_822 * _822));
        float _996 = (cbMatDynParam._m0[5u].x * _990) + cbMatDynParam._m0[5u].y;
        float _3855 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1001 = (cbMatDynParam._m0[5u].z * _990) + cbMatDynParam._m0[5u].w;
        float _3866 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) - _997)) + _997) < ((_836 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_750, cbSceneParam._m0[5u].z, fma(_749, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _748));
    float _869 = fma(_750, cbSceneParam._m0[6u].z, fma(_749, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _748));
    float _872 = fma(_750, cbSceneParam._m0[7u].z, fma(_749, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _748));
    uint _885 = _251 + 9u;
    uint _886 = _885 + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3877 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _910 = ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * TEXCOORD_5.w) * _906.x;
    float _911 = dot(vec3(_748, _749, _750), vec3(_827, _828, _829));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _748) - _827;
    float _919 = (_914 * _749) - _828;
    float _920 = (_914 * _750) - _829;
    float _924 = abs(dot(vec3(_827, _828, _829), vec3(_748, _749, _750)));
    float _3910 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_751);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1308;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1033 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1037 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1041 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1066 = _971 + _748;
        float _1067 = _975 + _749;
        float _1068 = _979 + _750;
        float _1078 = fma(_1068, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066)) - _1033;
        float _1079 = fma(_1068, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066)) - _1037;
        float _1080 = fma(_1068, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066)) - _1041;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1033 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1037 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[34u].z) + ((((((_1041 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1136 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1102.x + (-0.5));
        float _1138 = _1136 * (_1102.y + (-0.5));
        float _1139 = _1136 * (_1102.z + (-0.5));
        float _1146 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1109.x + (-0.5));
        float _1148 = _1146 * (_1109.y + (-0.5));
        float _1149 = _1146 * (_1109.z + (-0.5));
        float _1156 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1116.x + (-0.5));
        float _1158 = _1156 * (_1116.y + (-0.5));
        float _1159 = _1156 * (_1116.z + (-0.5));
        float _1166 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1123.x + (-0.5));
        float _1168 = _1166 * (_1123.y + (-0.5));
        float _1169 = _1166 * (_1123.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1190 = (dot(vec3(_748, _749, _750), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1200 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3958 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1202 + 1.0))) + _1207) * _1170;
        float _1217 = _1138 * 0.5;
        float _1218 = _1148 * 0.5;
        float _1219 = _1158 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_748, _749, _750), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3991 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1244 + 1.0))) + _1249) * _1171;
        float _1259 = _1139 * 0.5;
        float _1260 = _1149 * 0.5;
        float _1261 = _1159 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_748, _749, _750), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4024 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1286 + 1.0))) + _1291) * _1172;
        _1308 = _1139;
        _1310 = _1138;
        _1311 = _1137;
        _1312 = _1149;
        _1313 = _1148;
        _1314 = _1147;
        _1315 = _1159;
        _1316 = _1158;
        _1317 = _1157;
        _1318 = _1172;
        _1319 = _1171;
        _1320 = _1170;
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1309;
        _1310 = _1309;
        _1311 = _1309;
        _1312 = _1309;
        _1313 = _1309;
        _1314 = _1309;
        _1315 = _1309;
        _1316 = _1309;
        _1317 = _1309;
        _1318 = _1309;
        _1319 = _1309;
        _1320 = _1309;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1351 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1355 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1359 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1382 = _971 + _748;
        float _1383 = _975 + _749;
        float _1384 = _979 + _750;
        float _1394 = fma(_1384, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1382)) - _1351;
        float _1395 = fma(_1384, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1382)) - _1355;
        float _1396 = fma(_1384, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1382)) - _1359;
        float _1400 = inversesqrt(dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396)));
        float _1413 = ((_1400 * _1394) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1351 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1400 * _1395) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1355 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1400 * _1396) / cbModelParam._m0[35u].z) + ((((((_1359 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        float _1450 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1417.x + (-0.5));
        float _1452 = _1450 * (_1417.y + (-0.5));
        float _1453 = _1450 * (_1417.z + (-0.5));
        float _1460 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1424.x + (-0.5));
        float _1462 = _1460 * (_1424.y + (-0.5));
        float _1463 = _1460 * (_1424.z + (-0.5));
        float _1470 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1431.x + (-0.5));
        float _1472 = _1470 * (_1431.y + (-0.5));
        float _1473 = _1470 * (_1431.z + (-0.5));
        float _1480 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1438.x + (-0.5));
        float _1482 = _1480 * (_1438.y + (-0.5));
        float _1483 = _1480 * (_1438.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_748, _749, _750), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4087 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1514 + 1.0))) + _1519) * _1484;
        float _1529 = _1452 * 0.5;
        float _1530 = _1462 * 0.5;
        float _1531 = _1472 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_748, _749, _750), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4120 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1556 + 1.0))) + _1561) * _1485;
        float _1571 = _1453 * 0.5;
        float _1572 = _1463 * 0.5;
        float _1573 = _1473 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_748, _749, _750), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4153 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1598 + 1.0))) + _1603) * _1486;
        _1620 = _1453;
        _1621 = _1452;
        _1622 = _1451;
        _1623 = _1463;
        _1624 = _1462;
        _1625 = _1461;
        _1626 = _1473;
        _1627 = _1472;
        _1628 = _1471;
        _1629 = _1486;
        _1630 = _1485;
        _1631 = _1484;
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1309;
        _1621 = _1309;
        _1622 = _1309;
        _1623 = _1309;
        _1624 = _1309;
        _1625 = _1309;
        _1626 = _1309;
        _1627 = _1309;
        _1628 = _1309;
        _1629 = _1309;
        _1630 = _1309;
        _1631 = _1309;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1321)) + _1321;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1322)) + _1322;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1323)) + _1323;
    float _1667 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1644));
    float _1688 = _918 * 0.5;
    float _1689 = _919 * 0.5;
    float _1690 = _920 * 0.5;
    float _1691 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1694 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1697 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1731;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1704 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1308, _1312, _1315, _1318));
        float _1708 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1712 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1719 = dot(vec4(cbModelParam._m0[39u]), vec4(_1688, _1689, _1690, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1742;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1733 = dot(vec4(cbModelParam._m0[40u]), vec4(_1688, _1689, _1690, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1746 = (_1742 * cbModelParam._m0[1u].x) + (_1731 * (1.0 - cbModelParam._m0[1u].x));
    float _1756 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _751);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1756 : min(cbModelParam._m0[25u].z, _1756));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1804 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1808 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1812 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1815 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1818 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1821 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1849;
        if (_1815 > 0.0)
        {
            _1849 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1849 = frontier_phi_17_15_ladder;
        }
        float _2070;
        if (_1818 > 0.0)
        {
            _2070 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2070 = frontier_phi_26_22_ladder;
        }
        float _2316;
        if (_1821 > 0.0)
        {
            _2316 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2316 = frontier_phi_38_33_ladder;
        }
        float _2318 = isnan(_2070) ? _1849 : (isnan(_1849) ? _2070 : min(_1849, _2070));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1815) + _1804;
        float _2324 = (_2319 * _1818) + _1808;
        float _2325 = (_2319 * _1821) + _1812;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1757);
            frontier_phi_16_38_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1837 = frontier_phi_16_38_ladder_2;
        _1839 = frontier_phi_16_38_ladder_1;
        _1841 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1757);
        _1837 = _1825.x * cbModelParam._m0[1u].y;
        _1839 = _1825.y * cbModelParam._m0[1u].y;
        _1841 = _1825.z * cbModelParam._m0[1u].y;
    }
    float _1845 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _751);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1845 : min(cbModelParam._m0[25u].w, _1845));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1899 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1903 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1907 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1910 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1913 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1916 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2075;
        if (_1910 > 0.0)
        {
            _2075 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2075 = frontier_phi_28_24_ladder;
        }
        float _2343;
        if (_1913 > 0.0)
        {
            _2343 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2343 = frontier_phi_40_35_ladder;
        }
        float _2548;
        if (_1916 > 0.0)
        {
            _2548 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2548 = frontier_phi_49_46_ladder;
        }
        float _2550 = isnan(_2343) ? _2075 : (isnan(_2075) ? _2343 : min(_2075, _2343));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1910) + _1899;
        float _2556 = (_2551 * _1913) + _1903;
        float _2557 = (_2551 * _1916) + _1907;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1846);
            frontier_phi_25_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1935 = frontier_phi_25_49_ladder_2;
        _1937 = frontier_phi_25_49_ladder_1;
        _1939 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1846);
        _1935 = _1919.x * cbModelParam._m0[1u].z;
        _1937 = _1919.y * cbModelParam._m0[1u].z;
        _1939 = _1919.z * cbModelParam._m0[1u].z;
    }
    float _1951 = ((((1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _926)) * _910;
    float _1952 = _1951 * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1953 = _1951 * ((cbModelParam._m0[1u].w * (_1937 - _1839)) + _1839);
    float _1954 = _1951 * ((cbModelParam._m0[1u].w * (_1939 - _1841)) + _1841);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1952 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1952 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, _1952 * cbSceneParam._m0[91u].x));
    vec4 _1971 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_847, _848));
    float _1973 = _1971.w;
    float _1985 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1973);
    float _1986 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1973);
    float _1987 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1973);
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _910 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2029 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2033 = _1993 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_748, _749, _750));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_748, _749, _750));
    float _4289 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4300 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2010].x * _2016) * _2054) + (((cbLight._m0[_2020].x * _1985) * _2029) * _2052);
    float _2062 = ((_2016 * cbLight._m0[_2010].y) * _2054) + (((cbLight._m0[_2020].y * _1986) * _2029) * _2052);
    float _2063 = ((_2016 * cbLight._m0[_2010].z) * _2054) + (((cbLight._m0[_2020].z * _1987) * _2029) * _2052);
    uvec4 _2067 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2069 = _2067.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2069)
    {
        _2080 = _2061;
        _2082 = _2062;
        _2084 = _2063;
    }
    else
    {
        uint _2088 = _1993 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4311 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2107 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _2061;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _2062;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _2063;
    }
    bool _2087 = _2067.y == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2087)
    {
        _2125 = _2080;
        _2127 = _2082;
        _2129 = _2084;
    }
    else
    {
        uint _2287 = _1993 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_748, _749, _750)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4327 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2306 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2125 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2080;
        _2127 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2082;
        _2129 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2084;
    }
    uint _2132 = _1993 + 8u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _751) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1993].x + _827;
    float _2148 = cbLight._m0[_1993].y + _828;
    float _2149 = cbLight._m0[_1993].z + _829;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1993].xyz));
    float _4343 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2161 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2162 = dot(vec3(_748, _749, _750), vec3(_2154, _2155, _2156));
    float _4365 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2154, _2155, _2156));
    float _4376 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2146 * _2146;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2186 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2161 * ((_2160 * _2186) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2186) + _2146) * _2160))) * _2160;
    float _4387 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    uint _2213 = _1993 + 9u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _751) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2033].x + _827;
    float _2227 = cbLight._m0[_2033].y + _828;
    float _2228 = cbLight._m0[_2033].z + _829;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2033].xyz));
    float _4398 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2240 = dot(vec3(_748, _749, _750), vec3(_2233, _2234, _2235));
    float _4409 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2233, _2234, _2235));
    float _4420 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2225 * _2225;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2262 = 1.0 - _2225;
    float _2272 = (0.5 / (((_2161 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2262) + _2225) * _2239))) * _2239;
    float _4431 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    float _2284 = (((_2261 * cbLight._m0[_2213].x) * _2274) * _2016) + ((((cbLight._m0[_2132].x * _1985) * _2185) * _2199) * _2029);
    float _2285 = (((_2261 * cbLight._m0[_2213].y) * _2274) * _2016) + ((((cbLight._m0[_2132].y * _1986) * _2185) * _2199) * _2029);
    float _2286 = (((_2261 * cbLight._m0[_2213].z) * _2274) * _2016) + ((((cbLight._m0[_2132].z * _1987) * _2185) * _2199) * _2029);
    float _2348;
    float _2350;
    float _2352;
    if (_2069)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1993 + 2u;
        uint _2358 = _1993 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _751) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _827;
        float _2375 = cbLight._m0[_2354].y + _828;
        float _2376 = cbLight._m0[_2354].z + _829;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2354].xyz));
        float _4442 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2388 = dot(vec3(_748, _749, _750), vec3(_2381, _2382, _2383));
        float _4453 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4464 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2161 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2410) + _2373) * _2387))) * _2387;
        float _4475 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2348 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2284;
        _2350 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2285;
        _2352 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2286;
    }
    float _2458;
    float _2460;
    float _2462;
    if (_2087)
    {
        _2458 = _2348;
        _2460 = _2350;
        _2462 = _2352;
    }
    else
    {
        uint _2469 = _1993 + 3u;
        uint _2473 = _1993 + 11u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _751) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _827;
        float _2490 = cbLight._m0[_2469].y + _828;
        float _2491 = cbLight._m0[_2469].z + _829;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_2469].xyz));
        float _4491 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2503 = dot(vec3(_748, _749, _750), vec3(_2496, _2497, _2498));
        float _4502 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4513 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2524 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2525 = 1.0 - _2488;
        float _2535 = (0.5 / (((_2161 * ((_2502 * _2525) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2525) + _2488) * _2502))) * _2502;
        float _4524 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2458 = (((_2524 * cbLight._m0[_2473].x) * _2537) * _2538) + _2348;
        _2460 = (((_2524 * cbLight._m0[_2473].y) * _2537) * _2538) + _2350;
        _2462 = (((_2524 * cbLight._m0[_2473].z) * _2537) * _2538) + _2352;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1991.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            uint _2919 = 0u;
            uint _2928;
            bool _2929;
            for (;;)
            {
                _2928 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                _2929 = _2928 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2929)
                {
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2918;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2916;
                    frontier_phi_66_pred_4 = _2915;
                    frontier_phi_66_pred_5 = _2914;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2928;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2919 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2614;
                        float _3125 = _3084.y - _2615;
                        float _3126 = _3084.z - _2616;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_866, _869, _872), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4550 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2614;
                        float _3160 = (-0.0) - _2615;
                        float _3161 = (-0.0) - _2616;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _926;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_866, _869, _872), vec3(_3166, _3167, _3168));
                        float _4566 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3201 = dot(vec3(_866, _869, _872), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4577 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4588 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4599 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2988 = (_3155 * _3103.x) + _3061;
                        _2989 = (_3155 * _3103.y) + _3062;
                        _2990 = (_3155 * _3103.z) + _3063;
                        _2985 = (_3236 * _3120.x) + _3058;
                        _2986 = (_3236 * _3120.y) + _3059;
                        _2987 = (_3236 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2762 = frontier_phi_66_pred;
                _2772 = frontier_phi_66_pred_1;
                _2770 = frontier_phi_66_pred_2;
                _2768 = frontier_phi_66_pred_3;
                _2766 = frontier_phi_66_pred_4;
                _2764 = frontier_phi_66_pred_5;
                uint _2920 = _2919 + 1u;
                if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2913 = _2762;
                    _2914 = _2764;
                    _2915 = _2766;
                    _2916 = _2768;
                    _2917 = _2770;
                    _2918 = _2772;
                    _2919 = _2920;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((4294967295u << _2778) & _2660) == 0u)
        {
            _2881 = _2761;
            _2883 = _2763;
            _2885 = _2765;
            _2887 = _2767;
            _2889 = _2769;
            _2891 = _2771;
        }
        else
        {
            float _2906 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2907 = _2906 * _2614;
            float _2908 = _2906 * _2615;
            float _2909 = _2906 * _2616;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _3041 = _2761;
                float _3042 = _2763;
                float _3043 = _2765;
                float _3044 = _2767;
                float _3045 = _2769;
                float _3046 = _2771;
                uint _3047 = _2778;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3057)
                    {
                        frontier_phi_77_pred = _3046;
                        frontier_phi_77_pred_1 = _3045;
                        frontier_phi_77_pred_2 = _3044;
                        frontier_phi_77_pred_3 = _3043;
                        frontier_phi_77_pred_4 = _3042;
                        frontier_phi_77_pred_5 = _3041;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        uint _3269 = _3056;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3280 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3341 = (_3280 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3280 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3280 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2616, _3388.z, fma(_2615, _3388.y, _3388.x * _2614)) + _3388.w;
                            _3401 = !((fma(_2616, _3369.z, fma(_2615, _3369.y, _3369.x * _2614)) + _3369.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3295.x - _2614;
                                float _3429 = _3295.y - _2615;
                                float _3430 = _3295.z - _2616;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3296 * _3296));
                                float _4610 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3446 = sqrt(_3431) * _3311.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_866, _869, _872))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2616, _3338.z, fma(_2615, _3338.y, _3338.x * _2614)) + _3338.w) / _3400;
                                float _3460 = (fma(_2616, _3354.z, fma(_2615, _3354.y, _3354.x * _2614)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4626 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _926;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2907;
                                float _3490 = _3436 - _2908;
                                float _3491 = _3437 - _2909;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_866, _869, _872), vec3((-0.0) - _2907, (-0.0) - _2908, (-0.0) - _2909));
                                float _4637 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3503 = dot(vec3(_866, _869, _872), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4648 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_866, _869, _872), vec3(_3435, _3436, _3437))) + _3512;
                                float _4659 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4670 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3466 * _3311.y;
                                frontier_phi_83_pred_1 = _3466 * _3311.x;
                                frontier_phi_83_pred_2 = _3540 * _3323.z;
                                frontier_phi_83_pred_3 = _3540 * _3323.y;
                                frontier_phi_83_pred_4 = _3540 * _3323.x;
                                frontier_phi_83_pred_5 = _3466 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_83_pred;
                            _3547 = frontier_phi_83_pred_1;
                            _3546 = frontier_phi_83_pred_2;
                            _3545 = frontier_phi_83_pred_3;
                            _3544 = frontier_phi_83_pred_4;
                            _3549 = frontier_phi_83_pred_5;
                            _3253 = _3547 + _3266;
                            _3254 = _3548 + _3267;
                            _3255 = _3549 + _3268;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3255;
                        frontier_phi_77_pred_1 = _3254;
                        frontier_phi_77_pred_2 = _3253;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    _2892 = frontier_phi_77_pred;
                    _2890 = frontier_phi_77_pred_1;
                    _2888 = frontier_phi_77_pred_2;
                    _2886 = frontier_phi_77_pred_3;
                    _2884 = frontier_phi_77_pred_4;
                    _2882 = frontier_phi_77_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2882;
                        _3042 = _2884;
                        _3043 = _2886;
                        _3044 = _2888;
                        _3045 = _2890;
                        _3046 = _2892;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2886;
                frontier_phi_58_59_ladder_1 = _2892;
                frontier_phi_58_59_ladder_2 = _2890;
                frontier_phi_58_59_ladder_3 = _2888;
                frontier_phi_58_59_ladder_4 = _2884;
                frontier_phi_58_59_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_58_59_ladder = _2765;
                frontier_phi_58_59_ladder_1 = _2771;
                frontier_phi_58_59_ladder_2 = _2769;
                frontier_phi_58_59_ladder_3 = _2767;
                frontier_phi_58_59_ladder_4 = _2763;
                frontier_phi_58_59_ladder_5 = _2761;
            }
            _2881 = frontier_phi_58_59_ladder_5;
            _2883 = frontier_phi_58_59_ladder_4;
            _2885 = frontier_phi_58_59_ladder;
            _2887 = frontier_phi_58_59_ladder_3;
            _2889 = frontier_phi_58_59_ladder_2;
            _2891 = frontier_phi_58_59_ladder_1;
        }
        float _2896 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2673 = (_2896 * _2887) + _2125;
        _2675 = (_2896 * _2889) + _2127;
        _2677 = (_2896 * _2891) + _2129;
        _2679 = ((_2881 * 0.039999999105930328369140625) * _2896) + _2458;
        _2681 = ((_2883 * 0.039999999105930328369140625) * _2896) + _2460;
        _2683 = ((_2885 * 0.039999999105930328369140625) * _2896) + _2462;
    }
    else
    {
        _2673 = _2125;
        _2675 = _2127;
        _2677 = _2129;
        _2679 = _2458;
        _2681 = _2460;
        _2683 = _2462;
    }
    float _4686 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4697 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4708 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2700 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2673 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _910))) + ((_2679 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1746)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2675 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _910))) + ((_2681 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1746)) * cbPerFrame._m0[3u].x);
    float _2702 = ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2677 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _910))) + ((_2683 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1746)) * cbPerFrame._m0[3u].x);
    uint _2703 = _251 + 6u;
    float _2711 = _847 / cbSceneParam._m0[86u].x;
    float _2712 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _769 : (isnan(_769) ? cbSceneParam._m0[77u].w : min(_769, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_769 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_769) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _769 : min(cbSceneParam._m0[80u].w, _769));
        float _2787 = _2786 / _769;
        float _2798 = _2787 * _820;
        float _2799 = _821 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2801 = _2787 * _822;
        float _2803 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2799;
        float _2811 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2821 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2800 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2821 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2942 = 1.0 / cbSceneParam._m0[80u].x;
            float _2943 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2944 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            _2998 = ((abs(_2811 / _2800) * cbSceneParam._m0[80u].y) * ((((_2953 - _2954) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))))) * _2942)) - ((exp2(_2821 * _2953) - exp2(_2821 * _2954)) * _2942))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2731);
        _2823 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2825 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2827 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2829 = _3009 * _2731;
    }
    else
    {
        _2823 = _2728;
        _2825 = _2729;
        _2827 = _2730;
        _2829 = _2731;
    }
    bool _3036;
    vec4 _2839;
    vec4 _2861;
    float _2863;
    float _2867;
    float _2868;
    float _2869;
    float _2870;
    bool _2880;
    for (;;)
    {
        _2839 = cbMatDynParam._m0[0u];
        float _2841 = roundEven(_2839.y);
        bool _2842 = _2841 == 3.0;
        float _2843 = log2(_2829);
        float _2850 = exp2(_2843 * cbSceneParam._m0[78u].x) * _2700;
        float _2851 = exp2(_2843 * cbSceneParam._m0[78u].y) * _2701;
        float _2852 = exp2(_2843 * cbSceneParam._m0[78u].z) * _2702;
        float _2859 = _836 + (-0.5);
        _2861 = cbMtdParam._m0[1u];
        _2863 = _2861.y * _2859;
        float _2866 = (_2841 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2867 = _2866 * (_2842 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2823)));
        _2868 = _2866 * (_2842 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
        _2869 = _2866 * (_2842 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
        _2870 = _2859 * 0.999000012874603271484375;
        _2880 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2880)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2870) < 0.5)
            {
                _3036 = true;
                break;
            }
        }
        uint _2977 = _885 + uint(_2839.w);
        if ((cbInstanceData._m0[_2977].w < 1.0) && ((cbInstanceData._m0[_2977].w + _2870) < 0.5))
        {
            _3036 = true;
            break;
        }
        if ((_2863 + 1.0) < _2861.x)
        {
            _3036 = true;
            break;
        }
        _3036 = false;
        break;
    }
    float _3241;
    if (_3036)
    {
        discard_state = true;
        _3241 = 0.0;
    }
    else
    {
        _3241 = cbInstanceData._m0[_2703].w;
    }
    SV_Target.x = _2867;
    SV_Target.y = _2868;
    SV_Target.z = _2869;
    SV_Target.w = _3241;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2703].w;
    discard_exit();
}


