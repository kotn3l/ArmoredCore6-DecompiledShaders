#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1366;
float _3723;
float _3724;
float _3725;
float _3726;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3735 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _390) + _486;
    float _498 = ((((_465.x - _484) * _390) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _390) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3746 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _537 = (_498 + ((((_438.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _538 = (_499 + ((((_438.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _541 = fma(_505, _243, fma(_538, _250, _537 * _236));
    float _544 = fma(_505, _244, fma(_538, _251, _537 * _237));
    float _547 = fma(_505, _245, fma(_538, _252, _537 * _238));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _587 = ((_582 - _583) * cbMtdParam._m0[24u].z) + _583;
    float _589 = (cbMtdParam._m0[19u].x + dot(vec4(_551 * _541, _551 * _544, _551 * _547, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_587 * cbMtdParam._m0[21u].z);
    float _3757 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _592 = (-0.0) - cbMtdParam._m0[24u].y;
    float _594 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
    float _602 = _590 - ((_590 * TEXCOORD_8.x) * _595);
    float _603 = _590 - ((_590 * TEXCOORD_8.y) * _595);
    float _604 = _590 - ((_590 * TEXCOORD_8.z) * _595);
    float _611 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _615 = ((isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : min(_611, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _623 = (_615 - (((_587 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3788 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _628 = ((_602 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) * _624) + _397;
    float _629 = ((_603 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) * _624) + _398;
    float _630 = ((_604 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) * _624) + _399;
    vec4 _642 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_644 - _645) * cbMtdParam._m0[24u].w) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3799 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _628) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _628;
    float _682 = ((((cbMtdParam._m0[10u].y - _629) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _629;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _630)) * _673) + _630;
    float _688 = (((_438.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    float _692 = ((_525.z - _688) * cbMtdParam._m0[19u].w) + _688;
    vec4 _706 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3810 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _724 = (((_706.z - _692) * _602) * _624) + _692;
    float _727 = ((cbMtdParam._m0[23u].y - _724) * _673) + _724;
    vec4 _746 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _752 = (_746.x * 2.0) + (-1.0);
    float _753 = (_746.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3821 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _774 = (((cbMtdParam._m0[21u].x * _537) + ((_713 - _537) * _602)) * _624) + _537;
    float _775 = (((cbMtdParam._m0[21u].x * _538) + ((_714 - _538) * _603)) * _624) + _538;
    float _776 = (((sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) - _505) * _604) * _624) + _505;
    float _787 = (((_752 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _673) + _774;
    float _788 = (((_753 - _775) + (_775 * cbMtdParam._m0[22u].z)) * _673) + _775;
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) - _776) * _673) + _776;
    float _791 = cbMtdParam._m0[22u].x + _525.w;
    float _794 = fma(_789, _243, fma(_788, _250, _787 * _236));
    float _797 = fma(_789, _244, fma(_788, _251, _787 * _237));
    float _800 = fma(_789, _245, fma(_788, _252, _787 * _238));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3832 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _808 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3854 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3865 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3876 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    vec4 _891 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _893 = _891.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_877 * _877) + (_878 * _878)) + (_879 * _879));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _3887 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _3898 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) - _1054)) + _1054) < ((_893 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _926 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _929 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _942 = _255 + 9u;
    uint _943 = _942 + uint(cbMatDynParam._m0[0u].w);
    float _949 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_943].x;
    float _950 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_943].y;
    float _951 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_943].z;
    float _3909 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _967 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_805, _806, _807), vec3(_884, _885, _886));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _805) - _884;
    float _976 = (_971 * _806) - _885;
    float _977 = (_971 * _807) - _886;
    float _981 = abs(dot(vec3(_884, _885, _886), vec3(_805, _806, _807)));
    float _3942 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_808);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1094 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1098 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1123 = _1028 + _805;
        float _1124 = _1032 + _806;
        float _1125 = _1036 + _807;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_805, _806, _807), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3990 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_805, _806, _807), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4023 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_805, _806, _807), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4056 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1412 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1416 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1439 = _1028 + _805;
        float _1440 = _1032 + _806;
        float _1441 = _1036 + _807;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_805, _806, _807), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4119 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_805, _806, _807), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4152 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_805, _806, _807), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4185 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = _1366;
        _1688 = _1366;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1378)) + _1378;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1379)) + _1379;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _975 * 0.5;
    float _1746 = _976 * 0.5;
    float _1747 = _977 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1875 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1878 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1906 = frontier_phi_17_15_ladder;
        }
        float _2106;
        if (_1875 > 0.0)
        {
            _2106 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2106 = frontier_phi_26_22_ladder;
        }
        float _2349;
        if (_1878 > 0.0)
        {
            _2349 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2349 = frontier_phi_38_33_ladder;
        }
        float _2351 = isnan(_2106) ? _1906 : (isnan(_1906) ? _2106 : min(_1906, _2106));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1872) + _1861;
        float _2357 = (_2352 * _1875) + _1865;
        float _2358 = (_2352 * _1878) + _1869;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_16_38_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_16_38_ladder_2;
        _1896 = frontier_phi_16_38_ladder_1;
        _1898 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1970 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1973 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2111;
        if (_1967 > 0.0)
        {
            _2111 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2111 = frontier_phi_28_24_ladder;
        }
        float _2376;
        if (_1970 > 0.0)
        {
            _2376 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2376 = frontier_phi_40_35_ladder;
        }
        float _2581;
        if (_1973 > 0.0)
        {
            _2581 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2581 = frontier_phi_49_46_ladder;
        }
        float _2583 = isnan(_2376) ? _2111 : (isnan(_2111) ? _2376 : min(_2111, _2376));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1967) + _1956;
        float _2589 = (_2584 * _1970) + _1960;
        float _2590 = (_2584 * _1973) + _1964;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_25_49_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_25_49_ladder_2;
        _1994 = frontier_phi_25_49_ladder_1;
        _1996 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1903);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_996 * _983)) * _967;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2030 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2032 = _2030.x * 14u;
    uint _2033 = _2032 + 13u;
    float _2040 = _967 + (-1.0);
    float _2045 = (cbLight._m0[_2033].x * _2040) + 1.0;
    float _2046 = (cbLight._m0[_2033].y * _2040) + 1.0;
    float _2047 = (cbLight._m0[_2033].z * _2040) + 1.0;
    float _2048 = (cbLight._m0[_2033].w * _2040) + 1.0;
    uint _2049 = _2032 + 5u;
    float _2055 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
    uint _2059 = _2032 + 4u;
    float _2065 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2069 = _2032 | 1u;
    float _2080 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_805, _806, _807));
    float _2083 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_805, _806, _807));
    float _4321 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _4332 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2088 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2090 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2097 = ((cbLight._m0[_2049].x * _2055) * _2090) + ((cbLight._m0[_2059].x * _2065) * _2088);
    float _2098 = ((_2055 * cbLight._m0[_2049].y) * _2090) + ((_2065 * cbLight._m0[_2059].y) * _2088);
    float _2099 = ((_2055 * cbLight._m0[_2049].z) * _2090) + ((_2065 * cbLight._m0[_2059].z) * _2088);
    uvec4 _2103 = floatBitsToUint(cbLight._m0[_2032 + 12u]);
    bool _2105 = _2103.x == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2105)
    {
        _2116 = _2097;
        _2118 = _2098;
        _2120 = _2099;
    }
    else
    {
        uint _2124 = _2032 + 6u;
        float _2140 = (dot(vec3(cbLight._m0[_2032 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4343 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2143 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2116 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _2097;
        _2118 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _2098;
        _2120 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _2099;
    }
    bool _2123 = _2103.y == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2123)
    {
        _2161 = _2116;
        _2163 = _2118;
        _2165 = _2120;
    }
    else
    {
        uint _2320 = _2032 + 7u;
        float _2336 = (dot(vec3(cbLight._m0[_2032 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4359 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2339 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2161 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2116;
        _2163 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2118;
        _2165 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2120;
    }
    uint _2168 = _2032 + 8u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _808) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_2032].x + _884;
    float _2184 = cbLight._m0[_2032].y + _885;
    float _2185 = cbLight._m0[_2032].z + _886;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2032].xyz));
    float _4375 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2197 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2198 = dot(vec3(_805, _806, _807), vec3(_2190, _2191, _2192));
    float _4397 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2190, _2191, _2192));
    float _4408 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2182 * _2182;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2222 = 1.0 - _2182;
    float _2233 = (0.5 / (((_2197 * ((_2196 * _2222) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2222) + _2182) * _2196))) * _2196;
    float _4419 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    uint _2246 = _2032 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _808) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2069].x + _884;
    float _2260 = cbLight._m0[_2069].y + _885;
    float _2261 = cbLight._m0[_2069].z + _886;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2069].xyz));
    float _4430 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2273 = dot(vec3(_805, _806, _807), vec3(_2266, _2267, _2268));
    float _4441 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2266, _2267, _2268));
    float _4452 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2295 = 1.0 - _2258;
    float _2305 = (0.5 / (((_2197 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2295) + _2258) * _2272))) * _2272;
    float _4463 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2317 = (((_2294 * cbLight._m0[_2246].x) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].x) * _2235) * _2065);
    float _2318 = (((_2294 * cbLight._m0[_2246].y) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].y) * _2235) * _2065);
    float _2319 = (((_2294 * cbLight._m0[_2246].z) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].z) * _2235) * _2065);
    float _2381;
    float _2383;
    float _2385;
    if (_2105)
    {
        _2381 = _2317;
        _2383 = _2318;
        _2385 = _2319;
    }
    else
    {
        uint _2387 = _2032 + 2u;
        uint _2391 = _2032 + 10u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _808) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _884;
        float _2408 = cbLight._m0[_2387].y + _885;
        float _2409 = cbLight._m0[_2387].z + _886;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2387].xyz));
        float _4474 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2421 = dot(vec3(_805, _806, _807), vec3(_2414, _2415, _2416));
        float _4485 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4496 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2443 = 1.0 - _2406;
        float _2453 = (0.5 / (((_2197 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2443) + _2406) * _2420))) * _2420;
        float _4507 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2381 = (((_2442 * cbLight._m0[_2391].x) * _2455) * _2456) + _2317;
        _2383 = (((_2442 * cbLight._m0[_2391].y) * _2455) * _2456) + _2318;
        _2385 = (((_2442 * cbLight._m0[_2391].z) * _2455) * _2456) + _2319;
    }
    float _2491;
    float _2493;
    float _2495;
    if (_2123)
    {
        _2491 = _2381;
        _2493 = _2383;
        _2495 = _2385;
    }
    else
    {
        uint _2502 = _2032 + 3u;
        uint _2506 = _2032 + 11u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _808) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _884;
        float _2523 = cbLight._m0[_2502].y + _885;
        float _2524 = cbLight._m0[_2502].z + _886;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2502].xyz));
        float _4523 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2536 = dot(vec3(_805, _806, _807), vec3(_2529, _2530, _2531));
        float _4534 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4545 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2558 = 1.0 - _2521;
        float _2568 = (0.5 / (((_2197 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2558) + _2521) * _2535))) * _2535;
        float _4556 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2491 = (((_2557 * cbLight._m0[_2506].x) * _2570) * _2571) + _2381;
        _2493 = (((_2557 * cbLight._m0[_2506].y) * _2570) * _2571) + _2383;
        _2495 = (((_2557 * cbLight._m0[_2506].z) * _2570) * _2571) + _2385;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_2030.y == 0u)
    {
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2646;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2646;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2646;
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.x;
        uint _2673 = uint((float(_2661.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2662))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2662)));
        float _2683 = (log2(_2649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2684 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        uint _2687 = uint(isnan(14.0) ? _2684 : (isnan(_2684) ? 14.0 : min(_2684, 14.0)));
        uvec4 _2692 = texelFetch(g_lightClusterGridBuffer, int(((_2687 << 2u) + (_2673 << 6u)) >> 2u));
        uint _2693 = _2692.x;
        uint _2694 = _2661.z;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((((1u << ((_2694 >> 4u) & 15u)) + 4294967295u) & _2693) == 0u) || ((_2694 & 240u) == 0u))
        {
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
        }
        else
        {
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2962)
                {
                    frontier_phi_66_pred = _2946;
                    frontier_phi_66_pred_1 = _2951;
                    frontier_phi_66_pred_2 = _2950;
                    frontier_phi_66_pred_3 = _2949;
                    frontier_phi_66_pred_4 = _2948;
                    frontier_phi_66_pred_5 = _2947;
                }
                else
                {
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    uint _3097;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2961;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3101 = uint(findLSB(_3097)) + (_2952 << 5u);
                        uint _3098 = (_3097 + 4294967295u) & _3097;
                        uint _3103 = _3101 * 48u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3123 = (_3101 * 48u) + 4u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3142 = (_3101 * 48u) + 8u;
                        vec3 _3153 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x));
                        float _3157 = _3117.x - _2647;
                        float _3158 = _3117.y - _2648;
                        float _3159 = _3117.z - _2649;
                        float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                        float _3163 = inversesqrt(_3160);
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3167 = dot(vec3(_923, _926, _929), vec3(_3164, _3165, _3166));
                        float _3172 = 1.0 - (_3160 * _3117.w);
                        float _4582 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3174 = sqrt(_3160) * _3136.w;
                        float _3177 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3167) + _3178;
                        float _3184 = _3174 * _3174;
                        float _3188 = ((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3173) / ((_3184 * 0.699999988079071044921875) + 1.0);
                        float _3192 = (-0.0) - _2647;
                        float _3193 = (-0.0) - _2648;
                        float _3194 = (-0.0) - _2649;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3209 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                        float _3210 = 1.0 - _983;
                        float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                        float _3218 = _3217 * _3217;
                        float _3219 = _3218 * _3218;
                        float _3220 = _3199 + _3164;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3230 = dot(vec3(_923, _926, _929), vec3(_3199, _3200, _3201));
                        float _4598 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3234 = dot(vec3(_923, _926, _929), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                        float _4609 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                        float _3242 = _3177 * _3218;
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3167) + _3243;
                        float _4620 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3248 = 1.0 - _3218;
                        float _3258 = (0.5 / (((_3247 * ((_3233 * _3248) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3218) * _3233))) * _3247;
                        float _4631 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3269 = (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3241 * _3241) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125))) * _3173;
                        _3021 = (_3188 * _3136.x) + _3094;
                        _3022 = (_3188 * _3136.y) + _3095;
                        _3023 = (_3188 * _3136.z) + _3096;
                        _3018 = (_3269 * _3153.x) + _3091;
                        _3019 = (_3269 * _3153.y) + _3092;
                        _3020 = (_3269 * _3153.z) + _3093;
                        if (_3098 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3098;
                        }
                    }
                    frontier_phi_66_pred = _3018;
                    frontier_phi_66_pred_1 = _3023;
                    frontier_phi_66_pred_2 = _3022;
                    frontier_phi_66_pred_3 = _3021;
                    frontier_phi_66_pred_4 = _3020;
                    frontier_phi_66_pred_5 = _3019;
                }
                _2795 = frontier_phi_66_pred;
                _2805 = frontier_phi_66_pred_1;
                _2803 = frontier_phi_66_pred_2;
                _2801 = frontier_phi_66_pred_3;
                _2799 = frontier_phi_66_pred_4;
                _2797 = frontier_phi_66_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2795;
                    _2947 = _2797;
                    _2948 = _2799;
                    _2949 = _2801;
                    _2950 = _2803;
                    _2951 = _2805;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
        }
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.z;
        uint _2811 = (_2809 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2811) & _2693) == 0u)
        {
            _2914 = _2794;
            _2916 = _2796;
            _2918 = _2798;
            _2920 = _2800;
            _2922 = _2802;
            _2924 = _2804;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
            float _2940 = _2939 * _2647;
            float _2941 = _2939 * _2648;
            float _2942 = _2939 * _2649;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2811 < ((_2809 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3074 = _2794;
                float _3075 = _2796;
                float _3076 = _2798;
                float _3077 = _2800;
                float _3078 = _2802;
                float _3079 = _2804;
                uint _3080 = _2811;
                uint _3089;
                bool _3090;
                for (;;)
                {
                    _3089 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                    _3090 = _3089 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3090)
                    {
                        frontier_phi_77_pred = _3079;
                        frontier_phi_77_pred_1 = _3078;
                        frontier_phi_77_pred_2 = _3077;
                        frontier_phi_77_pred_3 = _3076;
                        frontier_phi_77_pred_4 = _3075;
                        frontier_phi_77_pred_5 = _3074;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        uint _3302 = _3089;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3386;
                        float _3432;
                        bool _3433;
                        for (;;)
                        {
                            uint _3313 = ((_3080 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3313 * 40u) + 20u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3313 * 40u) + 24u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3407 = (_3313 * 40u) + 28u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3432 = fma(_2649, _3420.z, fma(_2648, _3420.y, _3420.x * _2647)) + _3420.w;
                            _3433 = !((fma(_2649, _3401.z, fma(_2648, _3401.y, _3401.x * _2647)) + _3401.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3433)
                            {
                                float _3460 = _3328.x - _2647;
                                float _3461 = _3328.y - _2648;
                                float _3462 = _3328.z - _2649;
                                float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                                float _3466 = inversesqrt(_3463);
                                float _3467 = _3466 * _3460;
                                float _3468 = _3466 * _3461;
                                float _3469 = _3466 * _3462;
                                float _3473 = 1.0 - (_3463 / (_3329 * _3329));
                                float _4642 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3478 = sqrt(_3463) * _3344.w;
                                float _3480 = 1.39999997615814208984375 / (_3478 + 1.39999997615814208984375);
                                float _3481 = _3480 * _3480;
                                float _3484 = ((1.0 - _3481) * dot(vec3(_3467, _3468, _3469), vec3(_923, _926, _929))) + _3481;
                                float _3487 = _3478 * _3478;
                                float _3491 = (fma(_2649, _3371.z, fma(_2648, _3371.y, _3371.x * _2647)) + _3371.w) / _3432;
                                float _3492 = (fma(_2649, _3386.z, fma(_2648, _3386.y, _3386.x * _2647)) + _3386.w) / _3432;
                                float _3496 = 1.0 - dot(vec2(_3491, _3492), vec2(_3491, _3492));
                                float _4658 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3498 = _3497 * (((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3474) / ((_3487 * 0.699999988079071044921875) + 1.0));
                                float _3510 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                                float _3511 = 1.0 - _983;
                                float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                                float _3519 = _3518 * _3518;
                                float _3520 = _3519 * _3519;
                                float _3521 = _3467 - _2940;
                                float _3522 = _3468 - _2941;
                                float _3523 = _3469 - _2942;
                                float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                                float _3531 = dot(vec3(_923, _926, _929), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4669 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3535 = dot(vec3(_923, _926, _929), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                                float _4680 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                                float _3543 = _3480 * _3519;
                                float _3544 = _3543 * _3543;
                                float _3550 = ((1.0 - _3544) * dot(vec3(_923, _926, _929), vec3(_3467, _3468, _3469))) + _3544;
                                float _4691 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3552 = 1.0 - _3519;
                                float _3562 = (0.5 / (((_3551 * ((_3534 * _3552) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3551 * _3552) + _3519) * _3534))) * _3551;
                                float _4702 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3572 = (_3497 * _3474) * (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3542 * _3542) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3498 * _3344.y;
                                frontier_phi_83_pred_1 = _3498 * _3344.x;
                                frontier_phi_83_pred_2 = _3572 * _3356.z;
                                frontier_phi_83_pred_3 = _3572 * _3356.y;
                                frontier_phi_83_pred_4 = _3572 * _3356.x;
                                frontier_phi_83_pred_5 = _3498 * _3344.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_83_pred;
                            _3579 = frontier_phi_83_pred_1;
                            _3578 = frontier_phi_83_pred_2;
                            _3577 = frontier_phi_83_pred_3;
                            _3576 = frontier_phi_83_pred_4;
                            _3581 = frontier_phi_83_pred_5;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3288;
                        frontier_phi_77_pred_1 = _3287;
                        frontier_phi_77_pred_2 = _3286;
                        frontier_phi_77_pred_3 = _3285;
                        frontier_phi_77_pred_4 = _3284;
                        frontier_phi_77_pred_5 = _3283;
                    }
                    _2925 = frontier_phi_77_pred;
                    _2923 = frontier_phi_77_pred_1;
                    _2921 = frontier_phi_77_pred_2;
                    _2919 = frontier_phi_77_pred_3;
                    _2917 = frontier_phi_77_pred_4;
                    _2915 = frontier_phi_77_pred_5;
                    uint _3081 = _3080 + 1u;
                    if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3074 = _2915;
                        _3075 = _2917;
                        _3076 = _2919;
                        _3077 = _2921;
                        _3078 = _2923;
                        _3079 = _2925;
                        _3080 = _3081;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2919;
                frontier_phi_58_59_ladder_1 = _2925;
                frontier_phi_58_59_ladder_2 = _2923;
                frontier_phi_58_59_ladder_3 = _2921;
                frontier_phi_58_59_ladder_4 = _2917;
                frontier_phi_58_59_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_58_59_ladder = _2798;
                frontier_phi_58_59_ladder_1 = _2804;
                frontier_phi_58_59_ladder_2 = _2802;
                frontier_phi_58_59_ladder_3 = _2800;
                frontier_phi_58_59_ladder_4 = _2796;
                frontier_phi_58_59_ladder_5 = _2794;
            }
            _2914 = frontier_phi_58_59_ladder_5;
            _2916 = frontier_phi_58_59_ladder_4;
            _2918 = frontier_phi_58_59_ladder;
            _2920 = frontier_phi_58_59_ladder_3;
            _2922 = frontier_phi_58_59_ladder_2;
            _2924 = frontier_phi_58_59_ladder_1;
        }
        float _2929 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2706 = (_2929 * _2920) + _2161;
        _2708 = (_2929 * _2922) + _2163;
        _2710 = (_2929 * _2924) + _2165;
        _2712 = ((_2914 * 0.039999999105930328369140625) * _2929) + _2491;
        _2714 = ((_2916 * 0.039999999105930328369140625) * _2929) + _2493;
        _2716 = ((_2918 * 0.039999999105930328369140625) * _2929) + _2495;
    }
    else
    {
        _2706 = _2161;
        _2708 = _2163;
        _2710 = _2165;
        _2712 = _2491;
        _2714 = _2493;
        _2716 = _2495;
    }
    float _4718 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4729 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4740 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2733 = ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2706 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _967))) + ((_2712 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2734 = ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2708 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _967))) + ((_2714 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2710 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _967))) + ((_2716 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    uint _2736 = _255 + 6u;
    float _2744 = _904 / cbSceneParam._m0[86u].x;
    float _2745 = _905 / cbSceneParam._m0[86u].y;
    vec4 _2759 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2761 = _2759.x;
    float _2762 = _2759.y;
    float _2763 = _2759.z;
    float _2764 = _2759.w;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _2819 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _2820 = _2819 / _826;
        float _2831 = _2820 * _877;
        float _2832 = _878 * _2820;
        float _2833 = (-0.0) - _2832;
        float _2834 = _2820 * _879;
        float _2836 = (cbSceneParam._m0[77u].w * _2833) / _2819;
        float _2837 = _2836 + cbSceneParam._m0[79u].w;
        float _2838 = cbSceneParam._m0[79u].w - _2832;
        float _2844 = sqrt(((_2831 * _2831) + (_2832 * _2832)) + (_2834 * _2834));
        float _2847 = (1.0 - (cbSceneParam._m0[77u].w / _2819)) * _2844;
        float _2852 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2854 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2833 - _2836) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2837 > 0.0) ? exp2(_2852 * _2837) : (2.0 - exp2(_2854 * _2837))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2847;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : max(_2837, _2838));
            float _2977 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : min(_2837, _2838));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3031 = ((abs(_2844 / _2833) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2852 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2852 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2854 * _2986) - exp2(_2854 * _2987)) * _2975))) + (_2847 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2764);
        _2856 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2761;
        _2858 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2762;
        _2860 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2763;
        _2862 = _3042 * _2764;
    }
    else
    {
        _2856 = _2761;
        _2858 = _2762;
        _2860 = _2763;
        _2862 = _2764;
    }
    bool _3069;
    vec4 _2872;
    vec4 _2894;
    float _2896;
    float _2900;
    float _2901;
    float _2902;
    float _2903;
    bool _2913;
    for (;;)
    {
        _2872 = cbMatDynParam._m0[0u];
        float _2874 = roundEven(_2872.y);
        bool _2875 = _2874 == 3.0;
        float _2876 = log2(_2862);
        float _2883 = exp2(_2876 * cbSceneParam._m0[78u].x) * _2733;
        float _2884 = exp2(_2876 * cbSceneParam._m0[78u].y) * _2734;
        float _2885 = exp2(_2876 * cbSceneParam._m0[78u].z) * _2735;
        float _2892 = _893 + (-0.5);
        _2894 = cbMtdParam._m0[1u];
        _2896 = _2894.y * _2892;
        float _2899 = (_2874 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2900 = _2899 * (_2875 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2856)));
        _2901 = _2899 * (_2875 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2858)));
        _2902 = _2899 * (_2875 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2860)));
        _2903 = _2892 * 0.999000012874603271484375;
        _2913 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2913)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2903) < 0.5)
            {
                _3069 = true;
                break;
            }
        }
        uint _3010 = _942 + uint(_2872.w);
        if ((cbInstanceData._m0[_3010].w < 1.0) && ((cbInstanceData._m0[_3010].w + _2903) < 0.5))
        {
            _3069 = true;
            break;
        }
        if ((_2896 + 1.0) < _2894.x)
        {
            _3069 = true;
            break;
        }
        _3069 = false;
        break;
    }
    float _3274;
    if (_3069)
    {
        discard_state = true;
        _3274 = 0.0;
    }
    else
    {
        _3274 = cbInstanceData._m0[_2736].w;
    }
    SV_Target.x = _2900;
    SV_Target.y = _2901;
    SV_Target.z = _2902;
    SV_Target.w = _3274;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2736].w;
    discard_exit();
}


