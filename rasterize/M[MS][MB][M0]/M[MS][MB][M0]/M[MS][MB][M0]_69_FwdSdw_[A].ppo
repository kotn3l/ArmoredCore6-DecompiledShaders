#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1179;
float _3824;
float _3825;
float _3826;
float _3827;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3836 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _463 = ((_433.z - _454) * _386) + _454;
    float _466 = ((((_433.x - _452) * _386) + _452) * 2.0) + (-1.0);
    float _467 = ((((_433.y - _453) * _386) + _453) * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3847 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))));
    float _478 = _466 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_408.x * 2.0) + (-1.0)));
    float _479 = _467 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_408.y * 2.0) + (-1.0)));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _508 = _506.x;
    float _509 = 1.0 - _508;
    float _537 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_508 - _509) * cbMtdParam._m0[24u].w) + _509) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3858 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _546 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _538) + _393;
    float _547 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _538) + _394;
    float _548 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _538) + _395;
    float _553 = (((_408.z - _463) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _463;
    float _557 = ((cbMtdParam._m0[23u].y - _553) * _538) + _553;
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3869 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _600 = (_538 * (((cbMtdParam._m0[22u].z * _478) - _478) + _582)) + _478;
    float _601 = (_538 * (((cbMtdParam._m0[22u].z * _479) - _479) + _583)) + _479;
    float _602 = (_538 * (sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _473)) + _473;
    float _604 = cbMtdParam._m0[22u].x + _492.w;
    float _607 = fma(_602, _238 * NORMAL.x, fma(_601, _245 * TANGENT.x, (_231 * _223) * _600));
    float _610 = fma(_602, _238 * NORMAL.y, fma(_601, _245 * TANGENT.y, (_231 * _224) * _600));
    float _613 = fma(_602, _238 * NORMAL.z, fma(_601, _245 * TANGENT.z, (_231 * _225) * _600));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3880 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _621 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3902 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3913 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3924 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _860 = sqrt(((_690 * _690) + (_691 * _691)) + (_692 * _692));
        float _866 = (cbMatDynParam._m0[5u].x * _860) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _871 = (cbMatDynParam._m0[5u].z * _860) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _867)) + _867) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _739 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _742 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _755 = _251 + 9u;
    uint _756 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3957 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _780 = ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_618, _619, _620), vec3(_697, _698, _699));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _618) - _697;
    float _789 = (_784 * _619) - _698;
    float _790 = (_784 * _620) - _699;
    float _794 = abs(dot(vec3(_697, _698, _699), vec3(_618, _619, _620)));
    float _3990 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_621);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1178;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _903 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _907 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _911 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _936 = _841 + _618;
        float _937 = _845 + _619;
        float _938 = _849 + _620;
        float _948 = fma(_938, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936)) - _903;
        float _949 = fma(_938, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936)) - _907;
        float _950 = fma(_938, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936)) - _911;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_903 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_907 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[34u].z) + ((((((_911 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1006 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_972.x + (-0.5));
        float _1008 = _1006 * (_972.y + (-0.5));
        float _1009 = _1006 * (_972.z + (-0.5));
        float _1016 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_979.x + (-0.5));
        float _1018 = _1016 * (_979.y + (-0.5));
        float _1019 = _1016 * (_979.z + (-0.5));
        float _1026 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_986.x + (-0.5));
        float _1028 = _1026 * (_986.y + (-0.5));
        float _1029 = _1026 * (_986.z + (-0.5));
        float _1036 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_993.x + (-0.5));
        float _1038 = _1036 * (_993.y + (-0.5));
        float _1039 = _1036 * (_993.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1060 = (dot(vec3(_618, _619, _620), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1070 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _4038 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1072 + 1.0))) + _1077) * _1040;
        float _1087 = _1008 * 0.5;
        float _1088 = _1018 * 0.5;
        float _1089 = _1028 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_618, _619, _620), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4071 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1114 + 1.0))) + _1119) * _1041;
        float _1129 = _1009 * 0.5;
        float _1130 = _1019 * 0.5;
        float _1131 = _1029 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_618, _619, _620), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4104 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1156 + 1.0))) + _1161) * _1042;
        _1178 = _1009;
        _1180 = _1008;
        _1181 = _1007;
        _1182 = _1019;
        _1183 = _1018;
        _1184 = _1017;
        _1185 = _1029;
        _1186 = _1028;
        _1187 = _1027;
        _1188 = _1042;
        _1189 = _1041;
        _1190 = _1040;
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _1179;
        _1180 = _1179;
        _1181 = _1179;
        _1182 = _1179;
        _1183 = _1179;
        _1184 = _1179;
        _1185 = _1179;
        _1186 = _1179;
        _1187 = _1179;
        _1188 = _1179;
        _1189 = _1179;
        _1190 = _1179;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1225 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1229 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1252 = _841 + _618;
        float _1253 = _845 + _619;
        float _1254 = _849 + _620;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_618, _619, _620), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4167 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_618, _619, _620), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4200 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_618, _619, _620), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4233 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1179;
        _1491 = _1179;
        _1492 = _1179;
        _1493 = _1179;
        _1494 = _1179;
        _1495 = _1179;
        _1496 = _1179;
        _1497 = _1179;
        _1498 = _1179;
        _1499 = _1179;
        _1500 = _1179;
        _1501 = _1179;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1191)) + _1191;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1192)) + _1192;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1193)) + _1193;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _788 * 0.5;
    float _1559 = _789 * 0.5;
    float _1560 = _790 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1601;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1178, _1182, _1185, _1188));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1612;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1603 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1616 = (_1612 * cbModelParam._m0[1u].x) + (_1601 * (1.0 - cbModelParam._m0[1u].x));
    float _1626 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1626 : min(cbModelParam._m0[25u].z, _1626));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1676 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1680 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1684 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1687 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1690 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1693 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1721;
        if (_1687 > 0.0)
        {
            _1721 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1721 = frontier_phi_17_15_ladder;
        }
        float _1892;
        if (_1690 > 0.0)
        {
            _1892 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1892 = frontier_phi_26_22_ladder;
        }
        float _2187;
        if (_1693 > 0.0)
        {
            _2187 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2187 = frontier_phi_38_33_ladder;
        }
        float _2189 = isnan(_1892) ? _1721 : (isnan(_1721) ? _1892 : min(_1721, _1892));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1687) + _1676;
        float _2195 = (_2190 * _1690) + _1680;
        float _2196 = (_2190 * _1693) + _1684;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1627);
            frontier_phi_16_38_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1709 = frontier_phi_16_38_ladder_2;
        _1711 = frontier_phi_16_38_ladder_1;
        _1713 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1627);
        _1709 = _1697.x * cbModelParam._m0[1u].y;
        _1711 = _1697.y * cbModelParam._m0[1u].y;
        _1713 = _1697.z * cbModelParam._m0[1u].y;
    }
    float _1717 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1717 : min(cbModelParam._m0[25u].w, _1717));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1787 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1790 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1897;
        if (_1784 > 0.0)
        {
            _1897 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1897 = frontier_phi_28_24_ladder;
        }
        float _2214;
        if (_1787 > 0.0)
        {
            _2214 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2214 = frontier_phi_40_35_ladder;
        }
        float _2541;
        if (_1790 > 0.0)
        {
            _2541 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2541 = frontier_phi_50_47_ladder;
        }
        float _2543 = isnan(_2214) ? _1897 : (isnan(_1897) ? _2214 : min(_1897, _2214));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1784) + _1773;
        float _2549 = (_2544 * _1787) + _1777;
        float _2550 = (_2544 * _1790) + _1781;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1718);
            frontier_phi_25_50_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_25_50_ladder_2;
        _1811 = frontier_phi_25_50_ladder_1;
        _1813 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1718);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_809 * _796)) * _780;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1709)) + _1709);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1711)) + _1711);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1713)) + _1713);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1884 = _1871 / _1883;
    float _1885 = _1875 / _1883;
    float _1886 = _1879 / _1883;
    float _2033;
    float _2034;
    float _2035;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1913 = ((uint(_1886 > cbSceneParam._m0[59u].y) + uint(_1886 > cbSceneParam._m0[59u].x)) + uint(_1886 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1914 = _1913 + 43u;
        uint _1922 = _1913 + 44u;
        uint _1930 = _1913 + 45u;
        uint _1938 = _1913 + 46u;
        float _1949 = fma(_1883, cbSceneParam._m0[_1914].w, fma(_1879, cbSceneParam._m0[_1914].z, fma(_1875, cbSceneParam._m0[_1914].y, _1871 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1883, cbSceneParam._m0[_1922].w, fma(_1879, cbSceneParam._m0[_1922].z, fma(_1875, cbSceneParam._m0[_1922].y, _1871 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1883, cbSceneParam._m0[_1938].w, fma(_1879, cbSceneParam._m0[_1938].z, fma(_1875, cbSceneParam._m0[_1938].y, _1871 * cbSceneParam._m0[_1938].x)));
        float _1966 = cbSceneParam._m0[33u].z * _1961;
        float _1968 = cbSceneParam._m0[33u].w * _1961;
        float _1971 = fma(_1883, cbSceneParam._m0[_1930].w, fma(_1879, cbSceneParam._m0[_1930].z, fma(_1875, cbSceneParam._m0[_1930].y, _1871 * cbSceneParam._m0[_1930].x))) / _1961;
        float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
        float _4359 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2026 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1949) / _1961, (_1968 + _1953) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1949) / _1961, (_1953 - _1966) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1966) / _1961, (_1953 - _1968) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1968) / _1961, (_1966 + _1953) / _1961), _1971), 0.0)).x), vec4(0.25)));
        _2033 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
        _2034 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
        _2035 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2033 = 1.0;
        _2034 = 1.0;
        _2035 = 1.0;
    }
    float _2099;
    float _2101;
    float _2103;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2087 = fma(_1883, cbSceneParam._m0[63u].w, fma(_1879, cbSceneParam._m0[63u].z, fma(_1875, cbSceneParam._m0[63u].y, _1871 * cbSceneParam._m0[63u].x)));
        float _2088 = fma(_1883, cbSceneParam._m0[60u].w, fma(_1879, cbSceneParam._m0[60u].z, fma(_1875, cbSceneParam._m0[60u].y, _1871 * cbSceneParam._m0[60u].x))) / _2087;
        float _2089 = fma(_1883, cbSceneParam._m0[61u].w, fma(_1879, cbSceneParam._m0[61u].z, fma(_1875, cbSceneParam._m0[61u].y, _1871 * cbSceneParam._m0[61u].x))) / _2087;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2088 >= cbSceneParam._m0[64u].x) && (_2089 >= cbSceneParam._m0[64u].y)) && (_2088 <= cbSceneParam._m0[64u].z)) && (_2089 <= cbSceneParam._m0[64u].w))
        {
            float _2227 = fma(_1883, cbSceneParam._m0[62u].w, fma(_1879, cbSceneParam._m0[62u].z, fma(_1875, cbSceneParam._m0[62u].y, _1871 * cbSceneParam._m0[62u].x))) / _2087;
            float _2231 = isnan(cbSceneParam._m0[41u].w) ? _2227 : (isnan(_2227) ? cbSceneParam._m0[41u].w : max(_2227, cbSceneParam._m0[41u].w));
            float _2274 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
            float _4375 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
            float _2281 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2088, cbSceneParam._m0[33u].w + _2089), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2088, _2089 - cbSceneParam._m0[33u].z), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].z, _2089 - cbSceneParam._m0[33u].w), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2089), _2231), 0.0)).x), vec4(0.25)));
            float _2285 = 1.0 - (_2281 * cbSceneParam._m0[34u].x);
            float _2286 = 1.0 - (_2281 * cbSceneParam._m0[34u].y);
            float _2287 = 1.0 - (_2281 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2287) ? _2035 : (isnan(_2035) ? _2287 : min(_2035, _2287));
            frontier_phi_37_36_ladder_1 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
            frontier_phi_37_36_ladder_2 = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
        }
        else
        {
            frontier_phi_37_36_ladder = _2035;
            frontier_phi_37_36_ladder_1 = _2034;
            frontier_phi_37_36_ladder_2 = _2033;
        }
        _2099 = frontier_phi_37_36_ladder_2;
        _2101 = frontier_phi_37_36_ladder_1;
        _2103 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2099 = _2033;
        _2101 = _2034;
        _2103 = _2035;
    }
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _780 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_618, _619, _620));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_618, _619, _620));
    float _4411 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4422 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2099) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2101) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2103) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2186)
    {
        _2288 = _2178;
        _2290 = _2179;
        _2292 = _2180;
    }
    else
    {
        uint _2296 = _2110 + 6u;
        float _2312 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4433 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2315 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2288 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2178;
        _2290 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2179;
        _2292 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2180;
    }
    bool _2295 = _2184.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2295)
    {
        _2350 = _2288;
        _2352 = _2290;
        _2354 = _2292;
    }
    else
    {
        uint _2512 = _2110 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4449 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2531 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2350 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2288;
        _2352 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2290;
        _2354 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2292;
    }
    uint _2357 = _2110 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _621) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2110].x + _697;
    float _2373 = cbLight._m0[_2110].y + _698;
    float _2374 = cbLight._m0[_2110].z + _699;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2110].xyz));
    float _4465 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2386 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2387 = dot(vec3(_618, _619, _620), vec3(_2379, _2380, _2381));
    float _4487 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2379, _2380, _2381));
    float _4498 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2410 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2411 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2386 * ((_2385 * _2411) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2411) + _2371) * _2385))) * _2385;
    float _4509 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2438 = _2110 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _621) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2150].x + _697;
    float _2452 = cbLight._m0[_2150].y + _698;
    float _2453 = cbLight._m0[_2150].z + _699;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2150].xyz));
    float _4520 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2465 = dot(vec3(_618, _619, _620), vec3(_2458, _2459, _2460));
    float _4531 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2458, _2459, _2460));
    float _4542 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2486 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2487 = 1.0 - _2450;
    float _2497 = (0.5 / (((_2386 * ((_2464 * _2487) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2487) + _2450) * _2464))) * _2464;
    float _4553 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2509 = (((_2486 * cbLight._m0[_2438].x) * _2499) * _2133) + ((((cbLight._m0[_2357].x * _2099) * _2410) * _2424) * _2146);
    float _2510 = (((_2486 * cbLight._m0[_2438].y) * _2499) * _2133) + ((((cbLight._m0[_2357].y * _2101) * _2410) * _2424) * _2146);
    float _2511 = (((_2486 * cbLight._m0[_2438].z) * _2499) * _2133) + ((((cbLight._m0[_2357].z * _2103) * _2410) * _2424) * _2146);
    float _2567;
    float _2569;
    float _2571;
    if (_2186)
    {
        _2567 = _2509;
        _2569 = _2510;
        _2571 = _2511;
    }
    else
    {
        uint _2573 = _2110 + 2u;
        uint _2577 = _2110 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _621) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _697;
        float _2594 = cbLight._m0[_2573].y + _698;
        float _2595 = cbLight._m0[_2573].z + _699;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2573].xyz));
        float _4564 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2607 = dot(vec3(_618, _619, _620), vec3(_2600, _2601, _2602));
        float _4575 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4586 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2628 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2629 = 1.0 - _2592;
        float _2639 = (0.5 / (((_2386 * ((_2606 * _2629) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2629) + _2592) * _2606))) * _2606;
        float _4597 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2567 = (((_2628 * cbLight._m0[_2577].x) * _2641) * _2642) + _2509;
        _2569 = (((_2628 * cbLight._m0[_2577].y) * _2641) * _2642) + _2510;
        _2571 = (((_2628 * cbLight._m0[_2577].z) * _2641) * _2642) + _2511;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2295)
    {
        _2673 = _2567;
        _2675 = _2569;
        _2677 = _2571;
    }
    else
    {
        uint _2684 = _2110 + 3u;
        uint _2688 = _2110 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _621) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _697;
        float _2705 = cbLight._m0[_2684].y + _698;
        float _2706 = cbLight._m0[_2684].z + _699;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2684].xyz));
        float _4613 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2718 = dot(vec3(_618, _619, _620), vec3(_2711, _2712, _2713));
        float _4624 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4635 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2739 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2740 = 1.0 - _2703;
        float _2750 = (0.5 / (((_2386 * ((_2717 * _2740) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2740) + _2703) * _2717))) * _2717;
        float _4646 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2673 = (((_2739 * cbLight._m0[_2688].x) * _2752) * _2753) + _2567;
        _2675 = (((_2739 * cbLight._m0[_2688].y) * _2752) * _2753) + _2569;
        _2677 = (((_2739 * cbLight._m0[_2688].z) * _2752) * _2753) + _2571;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2108.y == 0u)
    {
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2775)));
        float _2796 = (log2(_1886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3055)
                {
                    frontier_phi_71_pred = _3044;
                    frontier_phi_71_pred_1 = _3043;
                    frontier_phi_71_pred_2 = _3042;
                    frontier_phi_71_pred_3 = _3041;
                    frontier_phi_71_pred_4 = _3040;
                    frontier_phi_71_pred_5 = _3039;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3054;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3045 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _1884;
                        float _3251 = _3210.y - _1885;
                        float _3252 = _3210.z - _1886;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_736, _739, _742), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4672 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _1884;
                        float _3286 = (-0.0) - _1885;
                        float _3287 = (-0.0) - _1886;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3301 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _796;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3314 = _3294 + _3259;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_736, _739, _742), vec3(_3292, _3293, _3294));
                        float _4688 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3326 = dot(vec3(_736, _739, _742), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4699 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3270 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3260) + _3335;
                        float _4710 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4721 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3333 * _3333) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3114 = (_3281 * _3229.x) + _3187;
                        _3115 = (_3281 * _3229.y) + _3188;
                        _3116 = (_3281 * _3229.z) + _3189;
                        _3111 = (_3361 * _3246.x) + _3184;
                        _3112 = (_3361 * _3246.y) + _3185;
                        _3113 = (_3361 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_71_pred = _3116;
                    frontier_phi_71_pred_1 = _3115;
                    frontier_phi_71_pred_2 = _3114;
                    frontier_phi_71_pred_3 = _3113;
                    frontier_phi_71_pred_4 = _3112;
                    frontier_phi_71_pred_5 = _3111;
                }
                _2897 = frontier_phi_71_pred;
                _2895 = frontier_phi_71_pred_1;
                _2893 = frontier_phi_71_pred_2;
                _2891 = frontier_phi_71_pred_3;
                _2889 = frontier_phi_71_pred_4;
                _2887 = frontier_phi_71_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2887;
                    _3040 = _2889;
                    _3041 = _2891;
                    _3042 = _2893;
                    _3043 = _2895;
                    _3044 = _2897;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2903) & _2806) == 0u)
        {
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
            _3015 = _2894;
            _3017 = _2896;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
            float _3033 = _3032 * _1884;
            float _3034 = _3032 * _1885;
            float _3035 = _3032 * _1886;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3167 = _2886;
                float _3168 = _2888;
                float _3169 = _2890;
                float _3170 = _2892;
                float _3171 = _2894;
                float _3172 = _2896;
                uint _3173 = _2903;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3183)
                    {
                        frontier_phi_82_pred = _3172;
                        frontier_phi_82_pred_1 = _3171;
                        frontier_phi_82_pred_2 = _3170;
                        frontier_phi_82_pred_3 = _3169;
                        frontier_phi_82_pred_4 = _3168;
                        frontier_phi_82_pred_5 = _3167;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        float _3390 = _3169;
                        float _3391 = _3170;
                        float _3392 = _3171;
                        float _3393 = _3172;
                        uint _3394 = _3182;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3405 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3405 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3405 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_1886, _3512.z, fma(_1885, _3512.y, _3512.x * _1884)) + _3512.w;
                            _3525 = !((fma(_1886, _3493.z, fma(_1885, _3493.y, _3493.x * _1884)) + _3493.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3420.x - _1884;
                                float _3553 = _3420.y - _1885;
                                float _3554 = _3420.z - _1886;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3421 * _3421));
                                float _4732 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3570 = sqrt(_3555) * _3436.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_736, _739, _742))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_1886, _3463.z, fma(_1885, _3463.y, _3463.x * _1884)) + _3463.w) / _3524;
                                float _3584 = (fma(_1886, _3478.z, fma(_1885, _3478.y, _3478.x * _1884)) + _3478.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4748 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _796;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3033;
                                float _3614 = _3560 - _3034;
                                float _3615 = _3561 - _3035;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_736, _739, _742), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4759 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3627 = dot(vec3(_736, _739, _742), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4770 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_736, _739, _742), vec3(_3559, _3560, _3561))) + _3636;
                                float _4781 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4792 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3590 * _3436.z;
                                frontier_phi_88_pred_1 = _3590 * _3436.y;
                                frontier_phi_88_pred_2 = _3590 * _3436.x;
                                frontier_phi_88_pred_3 = _3664 * _3448.z;
                                frontier_phi_88_pred_4 = _3664 * _3448.y;
                                frontier_phi_88_pred_5 = _3664 * _3448.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3673 = frontier_phi_88_pred;
                            _3672 = frontier_phi_88_pred_1;
                            _3671 = frontier_phi_88_pred_2;
                            _3670 = frontier_phi_88_pred_3;
                            _3669 = frontier_phi_88_pred_4;
                            _3668 = frontier_phi_88_pred_5;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3380;
                        frontier_phi_82_pred_1 = _3379;
                        frontier_phi_82_pred_2 = _3378;
                        frontier_phi_82_pred_3 = _3377;
                        frontier_phi_82_pred_4 = _3376;
                        frontier_phi_82_pred_5 = _3375;
                    }
                    _3018 = frontier_phi_82_pred;
                    _3016 = frontier_phi_82_pred_1;
                    _3014 = frontier_phi_82_pred_2;
                    _3012 = frontier_phi_82_pred_3;
                    _3010 = frontier_phi_82_pred_4;
                    _3008 = frontier_phi_82_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3008;
                        _3168 = _3010;
                        _3169 = _3012;
                        _3170 = _3014;
                        _3171 = _3016;
                        _3172 = _3018;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3014;
                frontier_phi_63_64_ladder_1 = _3018;
                frontier_phi_63_64_ladder_2 = _3016;
                frontier_phi_63_64_ladder_3 = _3012;
                frontier_phi_63_64_ladder_4 = _3010;
                frontier_phi_63_64_ladder_5 = _3008;
            }
            else
            {
                frontier_phi_63_64_ladder = _2892;
                frontier_phi_63_64_ladder_1 = _2896;
                frontier_phi_63_64_ladder_2 = _2894;
                frontier_phi_63_64_ladder_3 = _2890;
                frontier_phi_63_64_ladder_4 = _2888;
                frontier_phi_63_64_ladder_5 = _2886;
            }
            _3007 = frontier_phi_63_64_ladder_5;
            _3009 = frontier_phi_63_64_ladder_4;
            _3011 = frontier_phi_63_64_ladder_3;
            _3013 = frontier_phi_63_64_ladder;
            _3015 = frontier_phi_63_64_ladder_2;
            _3017 = frontier_phi_63_64_ladder_1;
        }
        float _3022 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2819 = (_3022 * _3013) + _2350;
        _2821 = (_3022 * _3015) + _2352;
        _2823 = (_3022 * _3017) + _2354;
        _2825 = ((_3007 * 0.039999999105930328369140625) * _3022) + _2673;
        _2827 = ((_3009 * 0.039999999105930328369140625) * _3022) + _2675;
        _2829 = ((_3011 * 0.039999999105930328369140625) * _3022) + _2677;
    }
    else
    {
        _2819 = _2350;
        _2821 = _2352;
        _2823 = _2354;
        _2825 = _2673;
        _2827 = _2675;
        _2829 = _2677;
    }
    float _4808 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4819 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4830 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2846 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2819 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _780))) + ((_2825 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    float _2847 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2821 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _780))) + ((_2827 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2823 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _780))) + ((_2829 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    uint _2849 = _251 + 6u;
    float _2857 = _717 / cbSceneParam._m0[86u].x;
    float _2858 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2912 = _2911 / _639;
        float _2923 = _2912 * _690;
        float _2924 = _691 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2927 = _2912 * _692;
        float _2929 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2930 = _2929 + cbSceneParam._m0[79u].w;
        float _2931 = cbSceneParam._m0[79u].w - _2924;
        float _2937 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2927 * _2927));
        float _2940 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2937;
        float _2945 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2947 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3124;
        if (abs((_2925 - _2929) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3124 = ((((_2930 > 0.0) ? exp2(_2945 * _2930) : (2.0 - exp2(_2947 * _2930))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2940;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : max(_2930, _2931));
            float _3070 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : min(_2930, _2931));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3124 = ((abs(_2937 / _2925) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2945 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2945 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2947 * _3079) - exp2(_2947 * _3080)) * _3068))) + (_2940 * cbSceneParam._m0[80u].z);
        }
        vec4 _3126 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3135 = exp2((_3124 * (-1.44269502162933349609375)) * (1.0 - _3126.w));
        float _3136 = log2(_3135);
        float _3152 = log2(_2877);
        _2949 = (exp2(_3152 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].x)) * _3126.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2951 = (exp2(_3152 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].y)) * _3126.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2953 = (exp2(_3152 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].z)) * _3126.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2955 = _3135 * _2877;
    }
    else
    {
        _2949 = _2874;
        _2951 = _2875;
        _2953 = _2876;
        _2955 = _2877;
    }
    bool _3162;
    vec4 _2965;
    vec4 _2987;
    float _2989;
    float _2993;
    float _2994;
    float _2995;
    float _2996;
    bool _3006;
    for (;;)
    {
        _2965 = cbMatDynParam._m0[0u];
        float _2967 = roundEven(_2965.y);
        bool _2968 = _2967 == 3.0;
        float _2969 = log2(_2955);
        float _2976 = exp2(_2969 * cbSceneParam._m0[78u].x) * _2846;
        float _2977 = exp2(_2969 * cbSceneParam._m0[78u].y) * _2847;
        float _2978 = exp2(_2969 * cbSceneParam._m0[78u].z) * _2848;
        float _2985 = _706 + (-0.5);
        _2987 = cbMtdParam._m0[1u];
        _2989 = _2987.y * _2985;
        float _2992 = (_2967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2993 = _2992 * (_2968 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2949)));
        _2994 = _2992 * (_2968 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2951)));
        _2995 = _2992 * (_2968 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2953)));
        _2996 = _2985 * 0.999000012874603271484375;
        _3006 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3006)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2996) < 0.5)
            {
                _3162 = true;
                break;
            }
        }
        uint _3103 = _755 + uint(_2965.w);
        if ((cbInstanceData._m0[_3103].w < 1.0) && ((cbInstanceData._m0[_3103].w + _2996) < 0.5))
        {
            _3162 = true;
            break;
        }
        if ((_2989 + 1.0) < _2987.x)
        {
            _3162 = true;
            break;
        }
        _3162 = false;
        break;
    }
    float _3366;
    if (_3162)
    {
        discard_state = true;
        _3366 = 0.0;
    }
    else
    {
        _3366 = cbInstanceData._m0[_2849].w;
    }
    SV_Target.x = _2993;
    SV_Target.y = _2994;
    SV_Target.z = _2995;
    SV_Target.w = _3366;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
    discard_exit();
}


