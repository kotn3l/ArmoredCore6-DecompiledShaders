#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1362;
float _4004;
float _4005;
float _4006;
float _4007;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4016 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _4027 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4038 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4049 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _531 = ((_501.z - _522) * _428) + _522;
    float _534 = ((((_501.x - _520) * _428) + _520) * 2.0) + (-1.0);
    float _535 = ((((_501.y - _521) * _428) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _4060 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))));
    float _544 = _534 + ((((_474.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _545 = _535 + ((((_474.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _548 = fma(_541, _248, fma(_545, _255, _544 * _241));
    float _551 = fma(_541, _249, fma(_545, _256, _544 * _242));
    float _554 = fma(_541, _250, fma(_545, _257, _544 * _243));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _611 = (cbMtdParam._m0[19u].x + dot(vec4(_558 * _548, _558 * _551, _558 * _554, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_604 - _605) * cbMtdParam._m0[24u].z) + _605) * cbMtdParam._m0[21u].z);
    float _4071 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _614 = (-0.0) - cbMtdParam._m0[24u].y;
    float _616 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
    float _624 = _612 - ((_612 * TEXCOORD_8.x) * _617);
    float _625 = _612 - ((_612 * TEXCOORD_8.y) * _617);
    float _626 = _612 - ((_612 * TEXCOORD_8.z) * _617);
    float _633 = (_624 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _634 = (_625 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _456)) + _456;
    vec4 _647 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4092 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _633) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _677) + _633;
    float _686 = ((((cbMtdParam._m0[10u].y - _634) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _677) + _634;
    float _687 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _635)) * _677) + _635;
    float _692 = (((_474.z - _531) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _531;
    vec4 _706 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4103 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = ((_706.z - _692) * _624) + _692;
    float _726 = ((cbMtdParam._m0[23u].y - _723) * _677) + _723;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4114 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _768 = ((sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) - _541) * _626) + _541;
    float _771 = (((_713 - _544) * _624) + _544) + (cbMtdParam._m0[21u].x * _544);
    float _772 = (((_714 - _545) * _625) + _545) + (cbMtdParam._m0[21u].x * _545);
    float _783 = (((_751 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _677) + _771;
    float _784 = (((_752 - _772) + (_772 * cbMtdParam._m0[22u].z)) * _677) + _772;
    float _785 = (_677 * (sqrt(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) - _768)) + _768;
    float _787 = cbMtdParam._m0[22u].x + _574.w;
    float _790 = fma(_785, _248, fma(_784, _255, _783 * _241));
    float _793 = fma(_785, _249, fma(_784, _256, _783 * _242));
    float _796 = fma(_785, _250, fma(_784, _257, _783 * _243));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _4125 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _804 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4147 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4158 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4169 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _873 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _863);
    float _874 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _863);
    float _875 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _863);
    float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
    float _880 = _873 * _879;
    float _881 = _874 * _879;
    float _882 = _875 * _879;
    vec4 _887 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _889 = _887.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1043 = sqrt(((_873 * _873) + (_874 * _874)) + (_875 * _875));
        float _1049 = (cbMatDynParam._m0[5u].x * _1043) + cbMatDynParam._m0[5u].y;
        float _4180 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1054 = (cbMatDynParam._m0[5u].z * _1043) + cbMatDynParam._m0[5u].w;
        float _4191 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) - _1050)) + _1050) < ((_889 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _919 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _922 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _925 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _938 = _279 + 9u;
    uint _939 = _938 + uint(cbMatDynParam._m0[0u].w);
    float _945 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_939].x;
    float _946 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_939].y;
    float _947 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_939].z;
    float _4202 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _963 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_801, _802, _803), vec3(_880, _881, _882));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _801) - _880;
    float _972 = (_967 * _802) - _881;
    float _973 = (_967 * _803) - _882;
    float _977 = abs(dot(vec3(_880, _881, _882), vec3(_801, _802, _803)));
    float _4235 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_804);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1090 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1094 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1119 = _1024 + _801;
        float _1120 = _1028 + _802;
        float _1121 = _1032 + _803;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_801, _802, _803), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4283 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_801, _802, _803), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4316 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_801, _802, _803), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4349 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1408 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1412 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1435 = _1024 + _801;
        float _1436 = _1028 + _802;
        float _1437 = _1032 + _803;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_801, _802, _803), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4412 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_801, _802, _803), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4445 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_801, _802, _803), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4478 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = _1362;
        _1683 = _1362;
        _1684 = _1362;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1374)) + _1374;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1375)) + _1375;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1376)) + _1376;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _971 * 0.5;
    float _1742 = _972 * 0.5;
    float _1743 = _973 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1872 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1875 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1903 = frontier_phi_17_15_ladder;
        }
        float _2073;
        if (_1872 > 0.0)
        {
            _2073 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2073 = frontier_phi_26_22_ladder;
        }
        float _2368;
        if (_1875 > 0.0)
        {
            _2368 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2368 = frontier_phi_38_33_ladder;
        }
        float _2370 = isnan(_2073) ? _1903 : (isnan(_1903) ? _2073 : min(_1903, _2073));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1869) + _1858;
        float _2376 = (_2371 * _1872) + _1862;
        float _2377 = (_2371 * _1875) + _1866;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2378;
        float _2382 = _2378 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 > _2382) || ((_2376 < _2380) || ((_2375 < _2380) || (_2375 > _2382))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2377, cbModelParam._m0[9u].z, fma(_2376, cbModelParam._m0[9u].y, _2375 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2377, cbModelParam._m0[10u].z, fma(_2376, cbModelParam._m0[10u].y, _2375 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2377, cbModelParam._m0[11u].z, fma(_2376, cbModelParam._m0[11u].y, _2375 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_16_38_ladder_2;
        _1893 = frontier_phi_16_38_ladder_1;
        _1895 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1968 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1971 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2078;
        if (_1965 > 0.0)
        {
            _2078 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2395;
        if (_1968 > 0.0)
        {
            _2395 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2395 = frontier_phi_40_35_ladder;
        }
        float _2722;
        if (_1971 > 0.0)
        {
            _2722 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2722 = frontier_phi_50_47_ladder;
        }
        float _2724 = isnan(_2395) ? _2078 : (isnan(_2078) ? _2395 : min(_2078, _2395));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _1965) + _1954;
        float _2730 = (_2725 * _1968) + _1958;
        float _2731 = (_2725 * _1971) + _1962;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2731, cbModelParam._m0[17u].z, fma(_2730, cbModelParam._m0[17u].y, _2729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2731, cbModelParam._m0[18u].z, fma(_2730, cbModelParam._m0[18u].y, _2729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2731, cbModelParam._m0[19u].z, fma(_2730, cbModelParam._m0[19u].y, _2729 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_25_50_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_25_50_ladder_2;
        _1992 = frontier_phi_25_50_ladder_1;
        _1994 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1900);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2006 = ((((1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_992 * _979)) * _963;
    float _2007 = _2006 * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2008 = _2006 * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2009 = _2006 * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2065 = _2052 / _2064;
    float _2066 = _2056 / _2064;
    float _2067 = _2060 / _2064;
    float _2214;
    float _2215;
    float _2216;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2094 = ((uint(_2067 > cbSceneParam._m0[59u].y) + uint(_2067 > cbSceneParam._m0[59u].x)) + uint(_2067 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2095 = _2094 + 43u;
        uint _2103 = _2094 + 44u;
        uint _2111 = _2094 + 45u;
        uint _2119 = _2094 + 46u;
        float _2130 = fma(_2064, cbSceneParam._m0[_2095].w, fma(_2060, cbSceneParam._m0[_2095].z, fma(_2056, cbSceneParam._m0[_2095].y, _2052 * cbSceneParam._m0[_2095].x)));
        float _2134 = fma(_2064, cbSceneParam._m0[_2103].w, fma(_2060, cbSceneParam._m0[_2103].z, fma(_2056, cbSceneParam._m0[_2103].y, _2052 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2064, cbSceneParam._m0[_2119].w, fma(_2060, cbSceneParam._m0[_2119].z, fma(_2056, cbSceneParam._m0[_2119].y, _2052 * cbSceneParam._m0[_2119].x)));
        float _2147 = cbSceneParam._m0[33u].z * _2142;
        float _2149 = cbSceneParam._m0[33u].w * _2142;
        float _2152 = fma(_2064, cbSceneParam._m0[_2111].w, fma(_2060, cbSceneParam._m0[_2111].z, fma(_2056, cbSceneParam._m0[_2111].y, _2052 * cbSceneParam._m0[_2111].x))) / _2142;
        float _2200 = (cbSceneParam._m0[33u].x - sqrt(((_2066 * _2066) + (_2065 * _2065)) + (_2067 * _2067))) * cbSceneParam._m0[33u].y;
        float _4604 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2207 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2130) / _2142, (_2149 + _2134) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2130) / _2142, (_2134 - _2147) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 - _2147) / _2142, (_2134 - _2149) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 - _2149) / _2142, (_2147 + _2134) / _2142), _2152), 0.0)).x), vec4(0.25)));
        _2214 = 1.0 - (_2207 * cbSceneParam._m0[34u].x);
        _2215 = 1.0 - (_2207 * cbSceneParam._m0[34u].y);
        _2216 = 1.0 - (_2207 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2214 = 1.0;
        _2215 = 1.0;
        _2216 = 1.0;
    }
    float _2280;
    float _2282;
    float _2284;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2268 = fma(_2064, cbSceneParam._m0[63u].w, fma(_2060, cbSceneParam._m0[63u].z, fma(_2056, cbSceneParam._m0[63u].y, _2052 * cbSceneParam._m0[63u].x)));
        float _2269 = fma(_2064, cbSceneParam._m0[60u].w, fma(_2060, cbSceneParam._m0[60u].z, fma(_2056, cbSceneParam._m0[60u].y, _2052 * cbSceneParam._m0[60u].x))) / _2268;
        float _2270 = fma(_2064, cbSceneParam._m0[61u].w, fma(_2060, cbSceneParam._m0[61u].z, fma(_2056, cbSceneParam._m0[61u].y, _2052 * cbSceneParam._m0[61u].x))) / _2268;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2269 >= cbSceneParam._m0[64u].x) && (_2270 >= cbSceneParam._m0[64u].y)) && (_2269 <= cbSceneParam._m0[64u].z)) && (_2270 <= cbSceneParam._m0[64u].w))
        {
            float _2408 = fma(_2064, cbSceneParam._m0[62u].w, fma(_2060, cbSceneParam._m0[62u].z, fma(_2056, cbSceneParam._m0[62u].y, _2052 * cbSceneParam._m0[62u].x))) / _2268;
            float _2412 = isnan(cbSceneParam._m0[41u].w) ? _2408 : (isnan(_2408) ? cbSceneParam._m0[41u].w : max(_2408, cbSceneParam._m0[41u].w));
            float _2455 = (cbSceneParam._m0[33u].x - sqrt(((_2066 * _2066) + (_2065 * _2065)) + (_2067 * _2067))) * cbSceneParam._m0[33u].y;
            float _4620 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
            float _2462 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2269, cbSceneParam._m0[33u].w + _2270), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2269, _2270 - cbSceneParam._m0[33u].z), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2269 - cbSceneParam._m0[33u].z, _2270 - cbSceneParam._m0[33u].w), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2269 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2270), _2412), 0.0)).x), vec4(0.25)));
            float _2466 = 1.0 - (_2462 * cbSceneParam._m0[34u].x);
            float _2467 = 1.0 - (_2462 * cbSceneParam._m0[34u].y);
            float _2468 = 1.0 - (_2462 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_37_36_ladder_1 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
            frontier_phi_37_36_ladder_2 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
        }
        else
        {
            frontier_phi_37_36_ladder = _2216;
            frontier_phi_37_36_ladder_1 = _2215;
            frontier_phi_37_36_ladder_2 = _2214;
        }
        _2280 = frontier_phi_37_36_ladder_2;
        _2282 = frontier_phi_37_36_ladder_1;
        _2284 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2280 = _2214;
        _2282 = _2215;
        _2284 = _2216;
    }
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _963 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_801, _802, _803));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_801, _802, _803));
    float _4656 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4667 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2280) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2282) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2284) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2367)
    {
        _2469 = _2359;
        _2471 = _2360;
        _2473 = _2361;
    }
    else
    {
        uint _2477 = _2291 + 6u;
        float _2493 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4678 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2496 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2469 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2359;
        _2471 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2360;
        _2473 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2361;
    }
    bool _2476 = _2365.y == 0u;
    float _2531;
    float _2533;
    float _2535;
    if (_2476)
    {
        _2531 = _2469;
        _2533 = _2471;
        _2535 = _2473;
    }
    else
    {
        uint _2693 = _2291 + 7u;
        float _2709 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2710 = _2709 * _2709;
        float _4694 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2711 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2712 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2531 = (((cbLight._m0[_2693].x * 0.3183098733425140380859375) * _2711) * _2712) + _2469;
        _2533 = (((cbLight._m0[_2693].y * 0.3183098733425140380859375) * _2711) * _2712) + _2471;
        _2535 = (((cbLight._m0[_2693].z * 0.3183098733425140380859375) * _2711) * _2712) + _2473;
    }
    uint _2538 = _2291 + 8u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _804) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2291].x + _880;
    float _2554 = cbLight._m0[_2291].y + _881;
    float _2555 = cbLight._m0[_2291].z + _882;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2291].xyz));
    float _4710 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2567 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2568 = dot(vec3(_801, _802, _803), vec3(_2560, _2561, _2562));
    float _4732 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2560, _2561, _2562));
    float _4743 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2552 * _2552;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2591 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2592 = 1.0 - _2552;
    float _2603 = (0.5 / (((_2567 * ((_2566 * _2592) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2592) + _2552) * _2566))) * _2566;
    float _4754 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    uint _2619 = _2291 + 9u;
    float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _804) * 0.949999988079071044921875);
    float _2631 = _2630 * _2630;
    float _2632 = cbLight._m0[_2331].x + _880;
    float _2633 = cbLight._m0[_2331].y + _881;
    float _2634 = cbLight._m0[_2331].z + _882;
    float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
    float _2639 = _2638 * _2632;
    float _2640 = _2638 * _2633;
    float _2641 = _2638 * _2634;
    float _2642 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2331].xyz));
    float _4765 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2646 = dot(vec3(_801, _802, _803), vec3(_2639, _2640, _2641));
    float _4776 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2650 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2639, _2640, _2641));
    float _4787 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2654 = _2631 * _2631;
    float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
    float _2667 = (exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2668 = 1.0 - _2631;
    float _2678 = (0.5 / (((_2567 * ((_2645 * _2668) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2668) + _2631) * _2645))) * _2645;
    float _4798 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
    float _2690 = (((_2667 * cbLight._m0[_2619].x) * _2680) * _2314) + ((((cbLight._m0[_2538].x * _2280) * _2591) * _2605) * _2327);
    float _2691 = (((_2667 * cbLight._m0[_2619].y) * _2680) * _2314) + ((((cbLight._m0[_2538].y * _2282) * _2591) * _2605) * _2327);
    float _2692 = (((_2667 * cbLight._m0[_2619].z) * _2680) * _2314) + ((((cbLight._m0[_2538].z * _2284) * _2591) * _2605) * _2327);
    float _2748;
    float _2750;
    float _2752;
    if (_2367)
    {
        _2748 = _2690;
        _2750 = _2691;
        _2752 = _2692;
    }
    else
    {
        uint _2754 = _2291 + 2u;
        uint _2758 = _2291 + 10u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _804) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _880;
        float _2775 = cbLight._m0[_2754].y + _881;
        float _2776 = cbLight._m0[_2754].z + _882;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2754].xyz));
        float _4809 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2788 = dot(vec3(_801, _802, _803), vec3(_2781, _2782, _2783));
        float _4820 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4831 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2809 = (exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2810 = 1.0 - _2773;
        float _2820 = (0.5 / (((_2567 * ((_2787 * _2810) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2810) + _2773) * _2787))) * _2787;
        float _4842 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2748 = (((_2809 * cbLight._m0[_2758].x) * _2822) * _2823) + _2690;
        _2750 = (((_2809 * cbLight._m0[_2758].y) * _2822) * _2823) + _2691;
        _2752 = (((_2809 * cbLight._m0[_2758].z) * _2822) * _2823) + _2692;
    }
    float _2854;
    float _2856;
    float _2858;
    if (_2476)
    {
        _2854 = _2748;
        _2856 = _2750;
        _2858 = _2752;
    }
    else
    {
        uint _2865 = _2291 + 3u;
        uint _2869 = _2291 + 11u;
        float _2883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2865].w)) * _804) * 0.949999988079071044921875);
        float _2884 = _2883 * _2883;
        float _2885 = cbLight._m0[_2865].x + _880;
        float _2886 = cbLight._m0[_2865].y + _881;
        float _2887 = cbLight._m0[_2865].z + _882;
        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
        float _2892 = _2891 * _2885;
        float _2893 = _2891 * _2886;
        float _2894 = _2891 * _2887;
        float _2895 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2865].xyz));
        float _4858 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2899 = dot(vec3(_801, _802, _803), vec3(_2892, _2893, _2894));
        float _4869 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2903 = dot(vec3(cbLight._m0[_2865].xyz), vec3(_2892, _2893, _2894));
        float _4880 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2907 = _2884 * _2884;
        float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
        float _2920 = (exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2921 = 1.0 - _2884;
        float _2931 = (0.5 / (((_2567 * ((_2898 * _2921) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2921) + _2884) * _2898))) * _2898;
        float _4891 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2854 = (((_2920 * cbLight._m0[_2869].x) * _2933) * _2934) + _2748;
        _2856 = (((_2920 * cbLight._m0[_2869].y) * _2933) * _2934) + _2750;
        _2858 = (((_2920 * cbLight._m0[_2869].z) * _2933) * _2934) + _2752;
    }
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_2289.y == 0u)
    {
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.x;
        uint _2967 = uint((float(_2955.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2956))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2956)));
        float _2977 = (log2(_2067 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2978 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        uint _2981 = uint(isnan(14.0) ? _2978 : (isnan(_2978) ? 14.0 : min(_2978, 14.0)));
        uvec4 _2986 = texelFetch(g_lightClusterGridBuffer, int(((_2981 << 2u) + (_2967 << 6u)) >> 2u));
        uint _2987 = _2986.x;
        uint _2988 = _2955.z;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((((1u << ((_2988 >> 4u) & 15u)) + 4294967295u) & _2987) == 0u) || ((_2988 & 240u) == 0u))
        {
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
        }
        else
        {
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            uint _3225 = 0u;
            uint _3234;
            bool _3235;
            for (;;)
            {
                _3234 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                _3235 = _3234 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3235)
                {
                    frontier_phi_71_pred = _3224;
                    frontier_phi_71_pred_1 = _3223;
                    frontier_phi_71_pred_2 = _3222;
                    frontier_phi_71_pred_3 = _3221;
                    frontier_phi_71_pred_4 = _3220;
                    frontier_phi_71_pred_5 = _3219;
                }
                else
                {
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    uint _3370;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3234;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    for (;;)
                    {
                        uint _3374 = uint(findLSB(_3370)) + (_3225 << 5u);
                        uint _3371 = (_3370 + 4294967295u) & _3370;
                        uint _3376 = _3374 * 48u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3396 = (_3374 * 48u) + 4u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3415 = (_3374 * 48u) + 8u;
                        vec3 _3426 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x));
                        float _3430 = _3390.x - _2065;
                        float _3431 = _3390.y - _2066;
                        float _3432 = _3390.z - _2067;
                        float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                        float _3436 = inversesqrt(_3433);
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3440 = dot(vec3(_919, _922, _925), vec3(_3437, _3438, _3439));
                        float _3445 = 1.0 - (_3433 * _3390.w);
                        float _4917 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3447 = sqrt(_3433) * _3409.w;
                        float _3450 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3440) + _3451;
                        float _3457 = _3447 * _3447;
                        float _3461 = ((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3446) / ((_3457 * 0.699999988079071044921875) + 1.0);
                        float _3465 = (-0.0) - _2065;
                        float _3466 = (-0.0) - _2066;
                        float _3467 = (-0.0) - _2067;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3481 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                        float _3482 = 1.0 - _979;
                        float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                        float _3490 = _3489 * _3489;
                        float _3491 = _3490 * _3490;
                        float _3492 = _3472 + _3437;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                        float _3502 = dot(vec3(_919, _922, _925), vec3(_3472, _3473, _3474));
                        float _4933 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3506 = dot(vec3(_919, _922, _925), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                        float _4944 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                        float _3514 = _3450 * _3490;
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3440) + _3515;
                        float _4955 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3520 = 1.0 - _3490;
                        float _3530 = (0.5 / (((_3519 * ((_3505 * _3520) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3490) * _3505))) * _3519;
                        float _4966 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3541 = (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3513 * _3513) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125))) * _3446;
                        _3294 = (_3461 * _3409.x) + _3367;
                        _3295 = (_3461 * _3409.y) + _3368;
                        _3296 = (_3461 * _3409.z) + _3369;
                        _3291 = (_3541 * _3426.x) + _3364;
                        _3292 = (_3541 * _3426.y) + _3365;
                        _3293 = (_3541 * _3426.z) + _3366;
                        if (_3371 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3371;
                        }
                    }
                    frontier_phi_71_pred = _3296;
                    frontier_phi_71_pred_1 = _3295;
                    frontier_phi_71_pred_2 = _3294;
                    frontier_phi_71_pred_3 = _3293;
                    frontier_phi_71_pred_4 = _3292;
                    frontier_phi_71_pred_5 = _3291;
                }
                _3078 = frontier_phi_71_pred;
                _3076 = frontier_phi_71_pred_1;
                _3074 = frontier_phi_71_pred_2;
                _3072 = frontier_phi_71_pred_3;
                _3070 = frontier_phi_71_pred_4;
                _3068 = frontier_phi_71_pred_5;
                uint _3226 = _3225 + 1u;
                if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3219 = _3068;
                    _3220 = _3070;
                    _3221 = _3072;
                    _3222 = _3074;
                    _3223 = _3076;
                    _3224 = _3078;
                    _3225 = _3226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
        }
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.z;
        uint _3084 = (_3082 >> 8u) & 15u;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((4294967295u << _3084) & _2987) == 0u)
        {
            _3187 = _3067;
            _3189 = _3069;
            _3191 = _3071;
            _3193 = _3073;
            _3195 = _3075;
            _3197 = _3077;
        }
        else
        {
            float _3212 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
            float _3213 = _3212 * _2065;
            float _3214 = _3212 * _2066;
            float _3215 = _3212 * _2067;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3084 < ((_3082 >> 12u) & 15u))
            {
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3347 = _3067;
                float _3348 = _3069;
                float _3349 = _3071;
                float _3350 = _3073;
                float _3351 = _3075;
                float _3352 = _3077;
                uint _3353 = _3084;
                uint _3362;
                bool _3363;
                for (;;)
                {
                    _3362 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                    _3363 = _3362 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3363)
                    {
                        frontier_phi_82_pred = _3352;
                        frontier_phi_82_pred_1 = _3351;
                        frontier_phi_82_pred_2 = _3350;
                        frontier_phi_82_pred_3 = _3349;
                        frontier_phi_82_pred_4 = _3348;
                        frontier_phi_82_pred_5 = _3347;
                    }
                    else
                    {
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        uint _3574 = _3362;
                        uint _3575;
                        vec4 _3600;
                        float _3601;
                        vec4 _3616;
                        vec3 _3628;
                        vec4 _3643;
                        vec4 _3658;
                        float _3704;
                        bool _3705;
                        for (;;)
                        {
                            uint _3585 = ((_3353 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3574));
                            _3575 = (_3574 + 4294967295u) & _3574;
                            uint _3587 = _3585 * 40u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3601 = _3600.w;
                            uint _3603 = (_3585 * 40u) + 4u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3585 * 40u) + 8u;
                            _3628 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x));
                            uint _3630 = (_3585 * 40u) + 16u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3585 * 40u) + 20u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3585 * 40u) + 24u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3679 = (_3585 * 40u) + 28u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            _3704 = fma(_2067, _3692.z, fma(_2066, _3692.y, _3692.x * _2065)) + _3692.w;
                            _3705 = !((fma(_2067, _3673.z, fma(_2066, _3673.y, _3673.x * _2065)) + _3673.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3705)
                            {
                                float _3732 = _3600.x - _2065;
                                float _3733 = _3600.y - _2066;
                                float _3734 = _3600.z - _2067;
                                float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                                float _3738 = inversesqrt(_3735);
                                float _3739 = _3738 * _3732;
                                float _3740 = _3738 * _3733;
                                float _3741 = _3738 * _3734;
                                float _3745 = 1.0 - (_3735 / (_3601 * _3601));
                                float _4977 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3750 = sqrt(_3735) * _3616.w;
                                float _3752 = 1.39999997615814208984375 / (_3750 + 1.39999997615814208984375);
                                float _3753 = _3752 * _3752;
                                float _3756 = ((1.0 - _3753) * dot(vec3(_3739, _3740, _3741), vec3(_919, _922, _925))) + _3753;
                                float _3759 = _3750 * _3750;
                                float _3763 = (fma(_2067, _3643.z, fma(_2066, _3643.y, _3643.x * _2065)) + _3643.w) / _3704;
                                float _3764 = (fma(_2067, _3658.z, fma(_2066, _3658.y, _3658.x * _2065)) + _3658.w) / _3704;
                                float _3768 = 1.0 - dot(vec2(_3763, _3764), vec2(_3763, _3764));
                                float _4993 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3770 = _3769 * (((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3746) / ((_3759 * 0.699999988079071044921875) + 1.0));
                                float _3782 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                                float _3783 = 1.0 - _979;
                                float _3790 = sqrt(1.0 - ((1.0 - (_3783 * _3783)) * (1.0 - (_3782 * _3782))));
                                float _3791 = _3790 * _3790;
                                float _3792 = _3791 * _3791;
                                float _3793 = _3739 - _3213;
                                float _3794 = _3740 - _3214;
                                float _3795 = _3741 - _3215;
                                float _3799 = inversesqrt(dot(vec3(_3793, _3794, _3795), vec3(_3793, _3794, _3795)));
                                float _3803 = dot(vec3(_919, _922, _925), vec3((-0.0) - _3213, (-0.0) - _3214, (-0.0) - _3215));
                                float _5004 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3806 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3807 = dot(vec3(_919, _922, _925), vec3(_3799 * _3793, _3799 * _3794, _3799 * _3795));
                                float _5015 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3814 = ((_3810 * _3810) * (_3792 + (-1.0))) + 1.0;
                                float _3815 = _3752 * _3791;
                                float _3816 = _3815 * _3815;
                                float _3822 = ((1.0 - _3816) * dot(vec3(_919, _922, _925), vec3(_3739, _3740, _3741))) + _3816;
                                float _5026 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3824 = 1.0 - _3791;
                                float _3834 = (0.5 / (((_3823 * ((_3806 * _3824) + _3791)) + 9.9999999392252902907785028219223e-09) + (((_3823 * _3824) + _3791) * _3806))) * _3823;
                                float _5037 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3844 = (_3769 * _3746) * (((_3792 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3814 * _3814) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3770 * _3616.z;
                                frontier_phi_88_pred_1 = _3770 * _3616.y;
                                frontier_phi_88_pred_2 = _3770 * _3616.x;
                                frontier_phi_88_pred_3 = _3844 * _3628.z;
                                frontier_phi_88_pred_4 = _3844 * _3628.y;
                                frontier_phi_88_pred_5 = _3844 * _3628.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3853 = frontier_phi_88_pred;
                            _3852 = frontier_phi_88_pred_1;
                            _3851 = frontier_phi_88_pred_2;
                            _3850 = frontier_phi_88_pred_3;
                            _3849 = frontier_phi_88_pred_4;
                            _3848 = frontier_phi_88_pred_5;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            if (_3575 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3575;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3560;
                        frontier_phi_82_pred_1 = _3559;
                        frontier_phi_82_pred_2 = _3558;
                        frontier_phi_82_pred_3 = _3557;
                        frontier_phi_82_pred_4 = _3556;
                        frontier_phi_82_pred_5 = _3555;
                    }
                    _3198 = frontier_phi_82_pred;
                    _3196 = frontier_phi_82_pred_1;
                    _3194 = frontier_phi_82_pred_2;
                    _3192 = frontier_phi_82_pred_3;
                    _3190 = frontier_phi_82_pred_4;
                    _3188 = frontier_phi_82_pred_5;
                    uint _3354 = _3353 + 1u;
                    if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3347 = _3188;
                        _3348 = _3190;
                        _3349 = _3192;
                        _3350 = _3194;
                        _3351 = _3196;
                        _3352 = _3198;
                        _3353 = _3354;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3194;
                frontier_phi_63_64_ladder_1 = _3198;
                frontier_phi_63_64_ladder_2 = _3196;
                frontier_phi_63_64_ladder_3 = _3192;
                frontier_phi_63_64_ladder_4 = _3190;
                frontier_phi_63_64_ladder_5 = _3188;
            }
            else
            {
                frontier_phi_63_64_ladder = _3073;
                frontier_phi_63_64_ladder_1 = _3077;
                frontier_phi_63_64_ladder_2 = _3075;
                frontier_phi_63_64_ladder_3 = _3071;
                frontier_phi_63_64_ladder_4 = _3069;
                frontier_phi_63_64_ladder_5 = _3067;
            }
            _3187 = frontier_phi_63_64_ladder_5;
            _3189 = frontier_phi_63_64_ladder_4;
            _3191 = frontier_phi_63_64_ladder_3;
            _3193 = frontier_phi_63_64_ladder;
            _3195 = frontier_phi_63_64_ladder_2;
            _3197 = frontier_phi_63_64_ladder_1;
        }
        float _3202 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _3000 = (_3202 * _3193) + _2531;
        _3002 = (_3202 * _3195) + _2533;
        _3004 = (_3202 * _3197) + _2535;
        _3006 = ((_3187 * 0.039999999105930328369140625) * _3202) + _2854;
        _3008 = ((_3189 * 0.039999999105930328369140625) * _3202) + _2856;
        _3010 = ((_3191 * 0.039999999105930328369140625) * _3202) + _2858;
    }
    else
    {
        _3000 = _2531;
        _3002 = _2533;
        _3004 = _2535;
        _3006 = _2854;
        _3008 = _2856;
        _3010 = _2858;
    }
    float _5053 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _5064 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5075 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _3027 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3000 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _963))) + ((_3006 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3028 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3002 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _963))) + ((_3008 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3029 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3004 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _963))) + ((_3010 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _3030 = _279 + 6u;
    float _3038 = _900 / cbSceneParam._m0[86u].x;
    float _3039 = _901 / cbSceneParam._m0[86u].y;
    vec4 _3053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3055 = _3053.x;
    float _3056 = _3053.y;
    float _3057 = _3053.z;
    float _3058 = _3053.w;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _3092 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _3093 = _3092 / _822;
        float _3104 = _3093 * _873;
        float _3105 = _874 * _3093;
        float _3106 = (-0.0) - _3105;
        float _3107 = _3093 * _875;
        float _3109 = (cbSceneParam._m0[77u].w * _3106) / _3092;
        float _3110 = _3109 + cbSceneParam._m0[79u].w;
        float _3111 = cbSceneParam._m0[79u].w - _3105;
        float _3117 = sqrt(((_3104 * _3104) + (_3105 * _3105)) + (_3107 * _3107));
        float _3120 = (1.0 - (cbSceneParam._m0[77u].w / _3092)) * _3117;
        float _3125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3304;
        if (abs((_3106 - _3109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3304 = ((((_3110 > 0.0) ? exp2(_3125 * _3110) : (2.0 - exp2(_3127 * _3110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3120;
        }
        else
        {
            float _3248 = 1.0 / cbSceneParam._m0[80u].x;
            float _3249 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : max(_3110, _3111));
            float _3250 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : min(_3110, _3111));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            _3304 = ((abs(_3117 / _3106) * cbSceneParam._m0[80u].y) * ((((_3259 - _3260) * 2.0) - ((exp2(_3125 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0)))) - exp2(_3125 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))))) * _3248)) - ((exp2(_3127 * _3259) - exp2(_3127 * _3260)) * _3248))) + (_3120 * cbSceneParam._m0[80u].z);
        }
        vec4 _3306 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, 1.0), 0.0);
        float _3315 = exp2((_3304 * (-1.44269502162933349609375)) * (1.0 - _3306.w));
        float _3316 = log2(_3315);
        float _3332 = log2(_3058);
        _3129 = (exp2(_3332 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].x)) * _3306.x) / cbSceneParam._m0[78u].x)) + _3055;
        _3131 = (exp2(_3332 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].y)) * _3306.y) / cbSceneParam._m0[78u].y)) + _3056;
        _3133 = (exp2(_3332 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].z)) * _3306.z) / cbSceneParam._m0[78u].z)) + _3057;
        _3135 = _3315 * _3058;
    }
    else
    {
        _3129 = _3055;
        _3131 = _3056;
        _3133 = _3057;
        _3135 = _3058;
    }
    bool _3342;
    vec4 _3145;
    vec4 _3167;
    float _3169;
    float _3173;
    float _3174;
    float _3175;
    float _3176;
    bool _3186;
    for (;;)
    {
        _3145 = cbMatDynParam._m0[0u];
        float _3147 = roundEven(_3145.y);
        bool _3148 = _3147 == 3.0;
        float _3149 = log2(_3135);
        float _3156 = exp2(_3149 * cbSceneParam._m0[78u].x) * _3027;
        float _3157 = exp2(_3149 * cbSceneParam._m0[78u].y) * _3028;
        float _3158 = exp2(_3149 * cbSceneParam._m0[78u].z) * _3029;
        float _3165 = _889 + (-0.5);
        _3167 = cbMtdParam._m0[1u];
        _3169 = _3167.y * _3165;
        float _3172 = (_3147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3173 = _3172 * (_3148 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3129)));
        _3174 = _3172 * (_3148 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
        _3175 = _3172 * (_3148 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
        _3176 = _3165 * 0.999000012874603271484375;
        _3186 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3186)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _3176) < 0.5)
            {
                _3342 = true;
                break;
            }
        }
        uint _3283 = _938 + uint(_3145.w);
        if ((cbInstanceData._m0[_3283].w < 1.0) && ((cbInstanceData._m0[_3283].w + _3176) < 0.5))
        {
            _3342 = true;
            break;
        }
        if ((_3169 + 1.0) < _3167.x)
        {
            _3342 = true;
            break;
        }
        _3342 = false;
        break;
    }
    float _3546;
    if (_3342)
    {
        discard_state = true;
        _3546 = 0.0;
    }
    else
    {
        _3546 = cbInstanceData._m0[_3030].w;
    }
    SV_Target.x = _3173;
    SV_Target.y = _3174;
    SV_Target.z = _3175;
    SV_Target.w = _3546;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3030].w;
    discard_exit();
}


