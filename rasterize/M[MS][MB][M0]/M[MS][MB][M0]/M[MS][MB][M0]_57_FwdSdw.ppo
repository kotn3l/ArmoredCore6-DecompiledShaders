#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1136;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3726 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))));
    float _346 = fma(_343, _227, fma(_336, _234, _334 * _220));
    float _349 = fma(_343, _228, fma(_336, _235, _334 * _221));
    float _352 = fma(_343, _229, fma(_336, _236, _334 * _222));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _394 = _392.x;
    float _395 = 1.0 - _394;
    float _402 = ((_394 - _395) * cbMtdParam._m0[24u].z) + _395;
    float _404 = (cbMtdParam._m0[19u].x + dot(vec4(_356 * _346, _356 * _349, _356 * _352, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_402 * cbMtdParam._m0[21u].z);
    float _3737 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _407 = (-0.0) - cbMtdParam._m0[24u].y;
    float _409 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _417 = _405 - ((_405 * TEXCOORD_8.x) * _410);
    float _418 = _405 - ((_405 * TEXCOORD_8.y) * _410);
    float _419 = _405 - ((_405 * TEXCOORD_8.z) * _410);
    float _426 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _430 = ((isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : min(_426, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _438 = (_430 - (((_402 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _430))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3768 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _443 = ((_417 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) * _439) + _284;
    float _444 = ((_418 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) * _439) + _285;
    float _445 = ((_419 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) * _439) + _286;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _459 = _457.x;
    float _460 = 1.0 - _459;
    float _489 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_459 - _460) * cbMtdParam._m0[24u].w) + _460) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3779 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _498 = ((((cbMtdParam._m0[10u].x - _443) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _490) + _443;
    float _499 = ((((cbMtdParam._m0[10u].y - _444) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _490) + _444;
    float _500 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _445)) * _490) + _445;
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3790 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _532 = (((_514.z - _329) * _417) * _439) + _329;
    float _535 = ((cbMtdParam._m0[23u].y - _532) * _490) + _532;
    vec4 _554 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _560 = (_554.x * 2.0) + (-1.0);
    float _561 = (_554.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3801 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _582 = (((cbMtdParam._m0[21u].x * _334) + ((_521 - _334) * _417)) * _439) + _334;
    float _583 = (((cbMtdParam._m0[21u].x * _336) + ((_522 - _336) * _418)) * _439) + _336;
    float _584 = (((sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _343) * _419) * _439) + _343;
    float _595 = (((_560 - _582) + (_582 * cbMtdParam._m0[22u].z)) * _490) + _582;
    float _596 = (((_561 - _583) + (_583 * cbMtdParam._m0[22u].z)) * _490) + _583;
    float _597 = ((sqrt(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) - _584) * _490) + _584;
    float _599 = cbMtdParam._m0[22u].x + _325.w;
    float _602 = fma(_597, _227, fma(_596, _234, _595 * _220));
    float _605 = fma(_597, _228, fma(_596, _235, _595 * _221));
    float _608 = fma(_597, _229, fma(_596, _236, _595 * _222));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3812 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _616 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3834 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3845 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3856 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _724 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _727 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _741 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3867 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _765 = ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * TEXCOORD_5.w) * _761.x;
    float _766 = dot(vec3(_613, _614, _615), vec3(_691, _692, _693));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _613) - _691;
    float _774 = (_769 * _614) - _692;
    float _775 = (_769 * _615) - _693;
    float _779 = abs(dot(vec3(_691, _692, _693), vec3(_613, _614, _615)));
    float _3900 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_616);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _864 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _868 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _893 = _826 + _613;
        float _894 = _830 + _614;
        float _895 = _834 + _615;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_613, _614, _615), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3948 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_613, _614, _615), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3981 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_613, _614, _615), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _4014 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1179 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1183 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1206 = _826 + _613;
        float _1207 = _830 + _614;
        float _1208 = _834 + _615;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_613, _614, _615), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4077 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_613, _614, _615), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4110 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_613, _614, _615), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4143 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1136;
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1148)) + _1148;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1149)) + _1149;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _773 * 0.5;
    float _1513 = _774 * 0.5;
    float _1514 = _775 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1628 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1632 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1636 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1639 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1642 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1645 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1673;
        if (_1639 > 0.0)
        {
            _1673 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1673 = frontier_phi_14_12_ladder;
        }
        float _1843;
        if (_1642 > 0.0)
        {
            _1843 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1843 = frontier_phi_23_19_ladder;
        }
        float _2139;
        if (_1645 > 0.0)
        {
            _2139 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2139 = frontier_phi_35_30_ladder;
        }
        float _2141 = isnan(_1843) ? _1673 : (isnan(_1673) ? _1843 : min(_1673, _1843));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1639) + _1628;
        float _2147 = (_2142 * _1642) + _1632;
        float _2148 = (_2142 * _1645) + _1636;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_13_35_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1661 = frontier_phi_13_35_ladder_2;
        _1663 = frontier_phi_13_35_ladder_1;
        _1665 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1581);
        _1661 = _1649.x * cbModelParam._m0[1u].y;
        _1663 = _1649.y * cbModelParam._m0[1u].y;
        _1665 = _1649.z * cbModelParam._m0[1u].y;
    }
    float _1669 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1669 : min(cbModelParam._m0[25u].w, _1669));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1737 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1740 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1848;
        if (_1734 > 0.0)
        {
            _1848 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_21_ladder;
        }
        float _2166;
        if (_1737 > 0.0)
        {
            _2166 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2166 = frontier_phi_37_32_ladder;
        }
        float _2493;
        if (_1740 > 0.0)
        {
            _2493 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2493 = frontier_phi_47_44_ladder;
        }
        float _2495 = isnan(_2166) ? _1848 : (isnan(_1848) ? _2166 : min(_1848, _2166));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1734) + _1723;
        float _2501 = (_2496 * _1737) + _1727;
        float _2502 = (_2496 * _1740) + _1731;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2503;
        float _2506 = _2503 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2502 > _2506) || ((_2502 < _2504) || ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 < _2504) || (_2500 > _2506))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2502, cbModelParam._m0[17u].z, fma(_2501, cbModelParam._m0[17u].y, _2500 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2502, cbModelParam._m0[18u].z, fma(_2501, cbModelParam._m0[18u].y, _2500 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2502, cbModelParam._m0[19u].z, fma(_2501, cbModelParam._m0[19u].y, _2500 * cbModelParam._m0[19u].x))), _1670);
            frontier_phi_22_47_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_22_47_ladder_2;
        _1761 = frontier_phi_22_47_ladder_1;
        _1763 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1670);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_794 * _781)) * _765;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1835 = _1822 / _1834;
    float _1836 = _1826 / _1834;
    float _1837 = _1830 / _1834;
    float _1984;
    float _1985;
    float _1986;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1864 = ((uint(_1837 > cbSceneParam._m0[59u].y) + uint(_1837 > cbSceneParam._m0[59u].x)) + uint(_1837 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1865 = _1864 + 43u;
        uint _1873 = _1864 + 44u;
        uint _1881 = _1864 + 45u;
        uint _1889 = _1864 + 46u;
        float _1900 = fma(_1834, cbSceneParam._m0[_1865].w, fma(_1830, cbSceneParam._m0[_1865].z, fma(_1826, cbSceneParam._m0[_1865].y, _1822 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1834, cbSceneParam._m0[_1873].w, fma(_1830, cbSceneParam._m0[_1873].z, fma(_1826, cbSceneParam._m0[_1873].y, _1822 * cbSceneParam._m0[_1873].x)));
        float _1912 = fma(_1834, cbSceneParam._m0[_1889].w, fma(_1830, cbSceneParam._m0[_1889].z, fma(_1826, cbSceneParam._m0[_1889].y, _1822 * cbSceneParam._m0[_1889].x)));
        float _1917 = cbSceneParam._m0[33u].z * _1912;
        float _1919 = cbSceneParam._m0[33u].w * _1912;
        float _1922 = fma(_1834, cbSceneParam._m0[_1881].w, fma(_1830, cbSceneParam._m0[_1881].z, fma(_1826, cbSceneParam._m0[_1881].y, _1822 * cbSceneParam._m0[_1881].x))) / _1912;
        float _1970 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
        float _4269 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1977 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1917 + _1900) / _1912, (_1919 + _1904) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 + _1900) / _1912, (_1904 - _1917) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1917) / _1912, (_1904 - _1919) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1919) / _1912, (_1917 + _1904) / _1912), _1922), 0.0)).x), vec4(0.25)));
        _1984 = 1.0 - (_1977 * cbSceneParam._m0[34u].x);
        _1985 = 1.0 - (_1977 * cbSceneParam._m0[34u].y);
        _1986 = 1.0 - (_1977 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1984 = 1.0;
        _1985 = 1.0;
        _1986 = 1.0;
    }
    float _2050;
    float _2052;
    float _2054;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2038 = fma(_1834, cbSceneParam._m0[63u].w, fma(_1830, cbSceneParam._m0[63u].z, fma(_1826, cbSceneParam._m0[63u].y, _1822 * cbSceneParam._m0[63u].x)));
        float _2039 = fma(_1834, cbSceneParam._m0[60u].w, fma(_1830, cbSceneParam._m0[60u].z, fma(_1826, cbSceneParam._m0[60u].y, _1822 * cbSceneParam._m0[60u].x))) / _2038;
        float _2040 = fma(_1834, cbSceneParam._m0[61u].w, fma(_1830, cbSceneParam._m0[61u].z, fma(_1826, cbSceneParam._m0[61u].y, _1822 * cbSceneParam._m0[61u].x))) / _2038;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2039 >= cbSceneParam._m0[64u].x) && (_2040 >= cbSceneParam._m0[64u].y)) && (_2039 <= cbSceneParam._m0[64u].z)) && (_2040 <= cbSceneParam._m0[64u].w))
        {
            float _2179 = fma(_1834, cbSceneParam._m0[62u].w, fma(_1830, cbSceneParam._m0[62u].z, fma(_1826, cbSceneParam._m0[62u].y, _1822 * cbSceneParam._m0[62u].x))) / _2038;
            float _2183 = isnan(cbSceneParam._m0[41u].w) ? _2179 : (isnan(_2179) ? cbSceneParam._m0[41u].w : max(_2179, cbSceneParam._m0[41u].w));
            float _2226 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
            float _4285 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
            float _2233 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2039, cbSceneParam._m0[33u].w + _2040), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2039, _2040 - cbSceneParam._m0[33u].z), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].z, _2040 - cbSceneParam._m0[33u].w), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2040), _2183), 0.0)).x), vec4(0.25)));
            float _2237 = 1.0 - (_2233 * cbSceneParam._m0[34u].x);
            float _2238 = 1.0 - (_2233 * cbSceneParam._m0[34u].y);
            float _2239 = 1.0 - (_2233 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2239) ? _1986 : (isnan(_1986) ? _2239 : min(_1986, _2239));
            frontier_phi_34_33_ladder_1 = isnan(_2238) ? _1985 : (isnan(_1985) ? _2238 : min(_1985, _2238));
            frontier_phi_34_33_ladder_2 = isnan(_2237) ? _1984 : (isnan(_1984) ? _2237 : min(_1984, _2237));
        }
        else
        {
            frontier_phi_34_33_ladder = _1986;
            frontier_phi_34_33_ladder_1 = _1985;
            frontier_phi_34_33_ladder_2 = _1984;
        }
        _2050 = frontier_phi_34_33_ladder_2;
        _2052 = frontier_phi_34_33_ladder_1;
        _2054 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2050 = _1984;
        _2052 = _1985;
        _2054 = _1986;
    }
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _765 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2098 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2102 = _2061 | 1u;
    float _2113 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_613, _614, _615));
    float _2116 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_613, _614, _615));
    float _4321 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _4332 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2121 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2123 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2130 = ((cbLight._m0[_2078].x * _2084) * _2123) + (((cbLight._m0[_2088].x * _2050) * _2098) * _2121);
    float _2131 = ((_2084 * cbLight._m0[_2078].y) * _2123) + (((cbLight._m0[_2088].y * _2052) * _2098) * _2121);
    float _2132 = ((_2084 * cbLight._m0[_2078].z) * _2123) + (((cbLight._m0[_2088].z * _2054) * _2098) * _2121);
    uvec4 _2136 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2138 = _2136.x == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2138)
    {
        _2240 = _2130;
        _2242 = _2131;
        _2244 = _2132;
    }
    else
    {
        uint _2248 = _2061 + 6u;
        float _2264 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4343 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2267 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2240 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2130;
        _2242 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2131;
        _2244 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2132;
    }
    bool _2247 = _2136.y == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2247)
    {
        _2302 = _2240;
        _2304 = _2242;
        _2306 = _2244;
    }
    else
    {
        uint _2464 = _2061 + 7u;
        float _2480 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2481 = _2480 * _2480;
        float _4359 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2482 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2483 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2302 = (((cbLight._m0[_2464].x * 0.3183098733425140380859375) * _2482) * _2483) + _2240;
        _2304 = (((cbLight._m0[_2464].y * 0.3183098733425140380859375) * _2482) * _2483) + _2242;
        _2306 = (((cbLight._m0[_2464].z * 0.3183098733425140380859375) * _2482) * _2483) + _2244;
    }
    uint _2309 = _2061 + 8u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _616) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2061].x + _691;
    float _2325 = cbLight._m0[_2061].y + _692;
    float _2326 = cbLight._m0[_2061].z + _693;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2061].xyz));
    float _4375 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2338 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2339 = dot(vec3(_613, _614, _615), vec3(_2331, _2332, _2333));
    float _4397 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2331, _2332, _2333));
    float _4408 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2323 * _2323;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2363 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2338 * ((_2337 * _2363) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2363) + _2323) * _2337))) * _2337;
    float _4419 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    uint _2390 = _2061 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _616) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2102].x + _691;
    float _2404 = cbLight._m0[_2102].y + _692;
    float _2405 = cbLight._m0[_2102].z + _693;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2102].xyz));
    float _4430 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2417 = dot(vec3(_613, _614, _615), vec3(_2410, _2411, _2412));
    float _4441 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2410, _2411, _2412));
    float _4452 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2438 = (exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2439 = 1.0 - _2402;
    float _2449 = (0.5 / (((_2338 * ((_2416 * _2439) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2439) + _2402) * _2416))) * _2416;
    float _4463 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2461 = (((_2438 * cbLight._m0[_2390].x) * _2451) * _2084) + ((((cbLight._m0[_2309].x * _2050) * _2362) * _2376) * _2098);
    float _2462 = (((_2438 * cbLight._m0[_2390].y) * _2451) * _2084) + ((((cbLight._m0[_2309].y * _2052) * _2362) * _2376) * _2098);
    float _2463 = (((_2438 * cbLight._m0[_2390].z) * _2451) * _2084) + ((((cbLight._m0[_2309].z * _2054) * _2362) * _2376) * _2098);
    float _2519;
    float _2521;
    float _2523;
    if (_2138)
    {
        _2519 = _2461;
        _2521 = _2462;
        _2523 = _2463;
    }
    else
    {
        uint _2525 = _2061 + 2u;
        uint _2529 = _2061 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _616) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _691;
        float _2546 = cbLight._m0[_2525].y + _692;
        float _2547 = cbLight._m0[_2525].z + _693;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2525].xyz));
        float _4474 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2559 = dot(vec3(_613, _614, _615), vec3(_2552, _2553, _2554));
        float _4485 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4496 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2338 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2581) + _2544) * _2558))) * _2558;
        float _4507 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2519 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2461;
        _2521 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2462;
        _2523 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2463;
    }
    float _2625;
    float _2627;
    float _2629;
    if (_2247)
    {
        _2625 = _2519;
        _2627 = _2521;
        _2629 = _2523;
    }
    else
    {
        uint _2636 = _2061 + 3u;
        uint _2640 = _2061 + 11u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _616) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _691;
        float _2657 = cbLight._m0[_2636].y + _692;
        float _2658 = cbLight._m0[_2636].z + _693;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2636].xyz));
        float _4523 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2670 = dot(vec3(_613, _614, _615), vec3(_2663, _2664, _2665));
        float _4534 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4545 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2691 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2692 = 1.0 - _2655;
        float _2702 = (0.5 / (((_2338 * ((_2669 * _2692) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2692) + _2655) * _2669))) * _2669;
        float _4556 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2625 = (((_2691 * cbLight._m0[_2640].x) * _2704) * _2705) + _2519;
        _2627 = (((_2691 * cbLight._m0[_2640].y) * _2704) * _2705) + _2521;
        _2629 = (((_2691 * cbLight._m0[_2640].z) * _2704) * _2705) + _2523;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2059.y == 0u)
    {
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2727)));
        float _2748 = (log2(_1837 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            uint _2988 = 0u;
            uint _2997;
            bool _2998;
            for (;;)
            {
                _2997 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                _2998 = _2997 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2998)
                {
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2986;
                    frontier_phi_66_pred_2 = _2985;
                    frontier_phi_66_pred_3 = _2984;
                    frontier_phi_66_pred_4 = _2983;
                    frontier_phi_66_pred_5 = _2982;
                }
                else
                {
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    uint _3112;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2997;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3116 = uint(findLSB(_3112)) + (_2988 << 5u);
                        uint _3113 = (_3112 + 4294967295u) & _3112;
                        uint _3118 = _3116 * 48u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3138 = (_3116 * 48u) + 4u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3157 = (_3116 * 48u) + 8u;
                        vec3 _3168 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x));
                        float _3172 = _3132.x - _1835;
                        float _3173 = _3132.y - _1836;
                        float _3174 = _3132.z - _1837;
                        float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                        float _3178 = inversesqrt(_3175);
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3182 = dot(vec3(_721, _724, _727), vec3(_3179, _3180, _3181));
                        float _3187 = 1.0 - (_3175 * _3132.w);
                        float _4582 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3189 = sqrt(_3175) * _3151.w;
                        float _3192 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3182) + _3193;
                        float _3199 = _3189 * _3189;
                        float _3203 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3188) / ((_3199 * 0.699999988079071044921875) + 1.0);
                        float _3207 = (-0.0) - _1835;
                        float _3208 = (-0.0) - _1836;
                        float _3209 = (-0.0) - _1837;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3223 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                        float _3224 = 1.0 - _781;
                        float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                        float _3232 = _3231 * _3231;
                        float _3233 = _3232 * _3232;
                        float _3234 = _3214 + _3179;
                        float _3235 = _3215 + _3180;
                        float _3236 = _3216 + _3181;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3244 = dot(vec3(_721, _724, _727), vec3(_3214, _3215, _3216));
                        float _4598 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3248 = dot(vec3(_721, _724, _727), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                        float _4609 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                        float _3256 = _3192 * _3232;
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3182) + _3257;
                        float _4620 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3262 = 1.0 - _3232;
                        float _3272 = (0.5 / (((_3261 * ((_3247 * _3262) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3232) * _3247))) * _3261;
                        float _4631 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3283 = (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3255 * _3255) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125))) * _3188;
                        _3041 = (_3203 * _3151.x) + _3109;
                        _3042 = (_3203 * _3151.y) + _3110;
                        _3043 = (_3203 * _3151.z) + _3111;
                        _3038 = (_3283 * _3168.x) + _3106;
                        _3039 = (_3283 * _3168.y) + _3107;
                        _3040 = (_3283 * _3168.z) + _3108;
                        if (_3113 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3113;
                        }
                    }
                    frontier_phi_66_pred = _3043;
                    frontier_phi_66_pred_1 = _3042;
                    frontier_phi_66_pred_2 = _3041;
                    frontier_phi_66_pred_3 = _3040;
                    frontier_phi_66_pred_4 = _3039;
                    frontier_phi_66_pred_5 = _3038;
                }
                _2849 = frontier_phi_66_pred;
                _2847 = frontier_phi_66_pred_1;
                _2845 = frontier_phi_66_pred_2;
                _2843 = frontier_phi_66_pred_3;
                _2841 = frontier_phi_66_pred_4;
                _2839 = frontier_phi_66_pred_5;
                uint _2989 = _2988 + 1u;
                if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2982 = _2839;
                    _2983 = _2841;
                    _2984 = _2843;
                    _2985 = _2845;
                    _2986 = _2847;
                    _2987 = _2849;
                    _2988 = _2989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((4294967295u << _2855) & _2758) == 0u)
        {
            _2950 = _2838;
            _2952 = _2840;
            _2954 = _2842;
            _2956 = _2844;
            _2958 = _2846;
            _2960 = _2848;
        }
        else
        {
            float _2975 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
            float _2976 = _2975 * _1835;
            float _2977 = _2975 * _1836;
            float _2978 = _2975 * _1837;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _3089 = _2838;
                float _3090 = _2840;
                float _3091 = _2842;
                float _3092 = _2844;
                float _3093 = _2846;
                float _3094 = _2848;
                uint _3095 = _2855;
                uint _3104;
                bool _3105;
                for (;;)
                {
                    _3104 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                    _3105 = _3104 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3105)
                    {
                        frontier_phi_72_pred = _3094;
                        frontier_phi_72_pred_1 = _3093;
                        frontier_phi_72_pred_2 = _3092;
                        frontier_phi_72_pred_3 = _3091;
                        frontier_phi_72_pred_4 = _3090;
                        frontier_phi_72_pred_5 = _3089;
                    }
                    else
                    {
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        float _3306 = _3094;
                        uint _3307 = _3104;
                        uint _3308;
                        vec4 _3333;
                        float _3334;
                        vec4 _3349;
                        vec3 _3361;
                        vec4 _3377;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3318 = ((_3095 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3307));
                            _3308 = (_3307 + 4294967295u) & _3307;
                            uint _3320 = _3318 * 40u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3334 = _3333.w;
                            uint _3336 = (_3318 * 40u) + 4u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3318 * 40u) + 8u;
                            _3361 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x));
                            uint _3364 = (_3318 * 40u) + 16u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3380 = (_3318 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3318 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3318 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_1837, _3427.z, fma(_1836, _3427.y, _3427.x * _1835)) + _3427.w;
                            _3440 = !((fma(_1837, _3408.z, fma(_1836, _3408.y, _3408.x * _1835)) + _3408.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3333.x - _1835;
                                float _3468 = _3333.y - _1836;
                                float _3469 = _3333.z - _1837;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3334 * _3334));
                                float _4642 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3485 = sqrt(_3470) * _3349.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_721, _724, _727))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_1837, _3377.z, fma(_1836, _3377.y, _3377.x * _1835)) + _3377.w) / _3439;
                                float _3499 = (fma(_1837, _3393.z, fma(_1836, _3393.y, _3393.x * _1835)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4658 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _781;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2976;
                                float _3529 = _3475 - _2977;
                                float _3530 = _3476 - _2978;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2976, (-0.0) - _2977, (-0.0) - _2978));
                                float _4669 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3542 = dot(vec3(_721, _724, _727), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4680 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_721, _724, _727), vec3(_3474, _3475, _3476))) + _3551;
                                float _4691 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4702 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3505 * _3349.y;
                                frontier_phi_78_pred_1 = _3505 * _3349.x;
                                frontier_phi_78_pred_2 = _3579 * _3361.z;
                                frontier_phi_78_pred_3 = _3579 * _3361.y;
                                frontier_phi_78_pred_4 = _3579 * _3361.x;
                                frontier_phi_78_pred_5 = _3505 * _3349.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_78_pred;
                            _3586 = frontier_phi_78_pred_1;
                            _3585 = frontier_phi_78_pred_2;
                            _3584 = frontier_phi_78_pred_3;
                            _3583 = frontier_phi_78_pred_4;
                            _3588 = frontier_phi_78_pred_5;
                            _3291 = _3586 + _3304;
                            _3292 = _3587 + _3305;
                            _3293 = _3588 + _3306;
                            _3288 = _3583 + _3301;
                            _3289 = _3584 + _3302;
                            _3290 = _3585 + _3303;
                            if (_3308 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3308;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3293;
                        frontier_phi_72_pred_1 = _3292;
                        frontier_phi_72_pred_2 = _3291;
                        frontier_phi_72_pred_3 = _3290;
                        frontier_phi_72_pred_4 = _3289;
                        frontier_phi_72_pred_5 = _3288;
                    }
                    _2961 = frontier_phi_72_pred;
                    _2959 = frontier_phi_72_pred_1;
                    _2957 = frontier_phi_72_pred_2;
                    _2955 = frontier_phi_72_pred_3;
                    _2953 = frontier_phi_72_pred_4;
                    _2951 = frontier_phi_72_pred_5;
                    uint _3096 = _3095 + 1u;
                    if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3089 = _2951;
                        _3090 = _2953;
                        _3091 = _2955;
                        _3092 = _2957;
                        _3093 = _2959;
                        _3094 = _2961;
                        _3095 = _3096;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2961;
                frontier_phi_60_61_ladder_1 = _2959;
                frontier_phi_60_61_ladder_2 = _2955;
                frontier_phi_60_61_ladder_3 = _2953;
                frontier_phi_60_61_ladder_4 = _2951;
                frontier_phi_60_61_ladder_5 = _2957;
            }
            else
            {
                frontier_phi_60_61_ladder = _2848;
                frontier_phi_60_61_ladder_1 = _2846;
                frontier_phi_60_61_ladder_2 = _2842;
                frontier_phi_60_61_ladder_3 = _2840;
                frontier_phi_60_61_ladder_4 = _2838;
                frontier_phi_60_61_ladder_5 = _2844;
            }
            _2950 = frontier_phi_60_61_ladder_4;
            _2952 = frontier_phi_60_61_ladder_3;
            _2954 = frontier_phi_60_61_ladder_2;
            _2956 = frontier_phi_60_61_ladder_5;
            _2958 = frontier_phi_60_61_ladder_1;
            _2960 = frontier_phi_60_61_ladder;
        }
        float _2965 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2771 = (_2965 * _2956) + _2302;
        _2773 = (_2965 * _2958) + _2304;
        _2775 = (_2965 * _2960) + _2306;
        _2777 = ((_2950 * 0.039999999105930328369140625) * _2965) + _2625;
        _2779 = ((_2952 * 0.039999999105930328369140625) * _2965) + _2627;
        _2781 = ((_2954 * 0.039999999105930328369140625) * _2965) + _2629;
    }
    else
    {
        _2771 = _2302;
        _2773 = _2304;
        _2775 = _2306;
        _2777 = _2625;
        _2779 = _2627;
        _2781 = _2629;
    }
    float _4718 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4729 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4740 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    uint _2801 = _239 + 6u;
    float _2809 = _699 / cbSceneParam._m0[86u].x;
    float _2810 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2864 = _2863 / _634;
        float _2875 = _2864 * _684;
        float _2876 = _685 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2878 = _2864 * _686;
        float _2880 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2876;
        float _2888 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2877 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3011 = 1.0 / cbSceneParam._m0[80u].x;
            float _3012 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3013 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            _3051 = ((abs(_2888 / _2877) * cbSceneParam._m0[80u].y) * ((((_3022 - _3023) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))))) * _3011)) - ((exp2(_2898 * _3022) - exp2(_2898 * _3023)) * _3011))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2829);
        _2900 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2902 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2904 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2906 = _3062 * _2829;
    }
    else
    {
        _2900 = _2826;
        _2902 = _2827;
        _2904 = _2828;
        _2906 = _2829;
    }
    float _2918 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2919 = _2918 == 3.0;
    float _2920 = log2(_2906);
    float _2927 = exp2(_2920 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2771 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _765))) + ((_2777 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2928 = exp2(_2920 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2773 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _765))) + ((_2779 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2929 = exp2(_2920 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2775 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _765))) + ((_2781 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2938 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2938 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.y = _2938 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.z = _2938 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.w = cbInstanceData._m0[_2801].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
}


