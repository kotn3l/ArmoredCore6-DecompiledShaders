#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3576;
float _3577;
float _3578;
float _3579;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_245 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_245 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _322 = (_313.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_321, _322), vec2(_321, _322));
    float _3588 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _334 = _321 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_287.x * 2.0) + (-1.0)));
    float _335 = _322 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_287.y * 2.0) + (-1.0)));
    float _340 = (((_287.z - _317) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _317;
    float _345 = cbMtdParam._m0[22u].x + _313.w;
    float _348 = fma(_329, _213 * NORMAL.x, fma(_335, _220 * TANGENT.x, (_206 * _198) * _334));
    float _351 = fma(_329, _213 * NORMAL.y, fma(_335, _220 * TANGENT.y, (_206 * _199) * _334));
    float _354 = fma(_329, _213 * NORMAL.z, fma(_335, _220 * TANGENT.z, (_206 * _200) * _334));
    float _358 = inversesqrt(dot(vec3(_348, _351, _354), vec3(_348, _351, _354)));
    float _359 = _358 * _348;
    float _360 = _358 * _351;
    float _361 = _358 * _354;
    float _3599 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _362 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3621 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3632 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3643 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _380 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _432 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _422);
    float _433 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _422);
    float _434 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _422);
    float _438 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _439 = _432 * _438;
    float _440 = _433 * _438;
    float _441 = _434 * _438;
    vec4 _446 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _448 = _446.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_432 * _432) + (_433 * _433)) + (_434 * _434));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3654 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3665 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) - _612)) + _612) < ((_448 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_361, cbSceneParam._m0[5u].z, fma(_360, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _359));
    float _484 = fma(_361, cbSceneParam._m0[6u].z, fma(_360, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _359));
    float _487 = fma(_361, cbSceneParam._m0[7u].z, fma(_360, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _359));
    uint _500 = _226 + 9u;
    uint _501 = _500 + uint(cbMatDynParam._m0[0u].w);
    float _507 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_501].x;
    float _508 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_501].y;
    float _509 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_501].z;
    float _3676 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    vec4 _521 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _525 = ((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * TEXCOORD_5.w) * _521.x;
    float _526 = dot(vec3(_359, _360, _361), vec3(_439, _440, _441));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _359) - _439;
    float _534 = (_529 * _360) - _440;
    float _535 = (_529 * _361) - _441;
    float _539 = abs(dot(vec3(_439, _440, _441), vec3(_359, _360, _361)));
    float _3709 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_362);
    float _554 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _359;
        float _684 = _590 + _360;
        float _685 = _594 + _361;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_359, _360, _361), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3757 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_359, _360, _361), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3790 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_359, _360, _361), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3823 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _968 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _972 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _976 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _999 = _586 + _359;
        float _1000 = _590 + _360;
        float _1001 = _594 + _361;
        float _1011 = fma(_1001, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999)) - _968;
        float _1012 = fma(_1001, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999)) - _972;
        float _1013 = fma(_1001, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999)) - _976;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_968 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_972 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[35u].z) + ((((((_976 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1067 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1034.x + (-0.5));
        float _1069 = _1067 * (_1034.y + (-0.5));
        float _1070 = _1067 * (_1034.z + (-0.5));
        float _1077 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1041.x + (-0.5));
        float _1079 = _1077 * (_1041.y + (-0.5));
        float _1080 = _1077 * (_1041.z + (-0.5));
        float _1087 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1048.x + (-0.5));
        float _1089 = _1087 * (_1048.y + (-0.5));
        float _1090 = _1087 * (_1048.z + (-0.5));
        float _1097 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1055.x + (-0.5));
        float _1099 = _1097 * (_1055.y + (-0.5));
        float _1100 = _1097 * (_1055.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_359, _360, _361), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3886 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1131 + 1.0))) + _1136) * _1101;
        float _1146 = _1069 * 0.5;
        float _1147 = _1079 * 0.5;
        float _1148 = _1089 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_359, _360, _361), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3919 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1173 + 1.0))) + _1178) * _1102;
        float _1188 = _1070 * 0.5;
        float _1189 = _1080 * 0.5;
        float _1190 = _1090 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_359, _360, _361), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3952 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1215 + 1.0))) + _1220) * _1103;
        _1237 = _1070;
        _1238 = _1069;
        _1239 = _1068;
        _1240 = _1080;
        _1241 = _1079;
        _1242 = _1078;
        _1243 = _1090;
        _1244 = _1089;
        _1245 = _1088;
        _1246 = _1103;
        _1247 = _1102;
        _1248 = _1101;
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _926;
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _938)) + _938;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _939)) + _939;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _940)) + _940;
    float _1284 = fma(_1263, cbSceneParam._m0[89u].z, fma(_1262, cbSceneParam._m0[89u].y, _1261 * cbSceneParam._m0[89u].x));
    float _1287 = fma(_1263, cbSceneParam._m0[90u].z, fma(_1262, cbSceneParam._m0[90u].y, _1261 * cbSceneParam._m0[90u].x));
    float _1290 = fma(_1263, cbSceneParam._m0[91u].z, fma(_1262, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1261));
    float _1305 = _533 * 0.5;
    float _1306 = _534 * 0.5;
    float _1307 = _535 * 0.5;
    float _1308 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1311 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1314 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1348;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1321 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_925, _929, _932, _935));
        float _1325 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_927, _930, _933, _936));
        float _1329 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_928, _931, _934, _937));
        float _1336 = dot(vec4(cbModelParam._m0[39u]), vec4(_1305, _1306, _1307, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1336) ? 0.0 : (isnan(0.0) ? _1336 : max(0.0, _1336))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1359;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1350 = dot(vec4(cbModelParam._m0[40u]), vec4(_1305, _1306, _1307, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1363 = (_1359 * cbModelParam._m0[1u].x) + (_1348 * (1.0 - cbModelParam._m0[1u].x));
    float _1373 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _362);
    float _1374 = isnan(_1373) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1373 : min(cbModelParam._m0[25u].z, _1373));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1423 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1427 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1431 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1434 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1437 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1440 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1468;
        if (_1434 > 0.0)
        {
            _1468 = abs((1.0 - _1423) / _1434);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1423 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1468 = frontier_phi_17_15_ladder;
        }
        float _1641;
        if (_1437 > 0.0)
        {
            _1641 = abs((1.0 - _1427) / _1437);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1427 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1641 = frontier_phi_26_22_ladder;
        }
        float _1937;
        if (_1440 > 0.0)
        {
            _1937 = abs((1.0 - _1431) / _1440);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1431 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1937 = frontier_phi_38_33_ladder;
        }
        float _1939 = isnan(_1641) ? _1468 : (isnan(_1468) ? _1641 : min(_1468, _1641));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1434) + _1423;
        float _1945 = (_1940 * _1437) + _1427;
        float _1946 = (_1940 * _1440) + _1431;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1947;
        float _1951 = _1947 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 > _1951) || ((_1945 < _1949) || ((_1944 < _1949) || (_1944 > _1951))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1946, cbModelParam._m0[9u].z, fma(_1945, cbModelParam._m0[9u].y, _1944 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1946, cbModelParam._m0[10u].z, fma(_1945, cbModelParam._m0[10u].y, _1944 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1946, cbModelParam._m0[11u].z, fma(_1945, cbModelParam._m0[11u].y, _1944 * cbModelParam._m0[11u].x))), _1374);
            frontier_phi_16_38_ladder = _2091.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2091.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2091.x * cbModelParam._m0[1u].y;
        }
        _1456 = frontier_phi_16_38_ladder_2;
        _1458 = frontier_phi_16_38_ladder_1;
        _1460 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1374);
        _1456 = _1444.x * cbModelParam._m0[1u].y;
        _1458 = _1444.y * cbModelParam._m0[1u].y;
        _1460 = _1444.z * cbModelParam._m0[1u].y;
    }
    float _1464 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _362);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1464 : min(cbModelParam._m0[25u].w, _1464));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1535 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1538 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1646;
        if (_1532 > 0.0)
        {
            _1646 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1646 = frontier_phi_28_24_ladder;
        }
        float _1964;
        if (_1535 > 0.0)
        {
            _1964 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1964 = frontier_phi_40_35_ladder;
        }
        float _2291;
        if (_1538 > 0.0)
        {
            _2291 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2291 = frontier_phi_50_47_ladder;
        }
        float _2293 = isnan(_1964) ? _1646 : (isnan(_1646) ? _1964 : min(_1646, _1964));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1532) + _1521;
        float _2299 = (_2294 * _1535) + _1525;
        float _2300 = (_2294 * _1538) + _1529;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2301;
        float _2304 = _2301 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2300 > _2304) || ((_2300 < _2302) || ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 < _2302) || (_2298 > _2304))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2300, cbModelParam._m0[17u].z, fma(_2299, cbModelParam._m0[17u].y, _2298 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2300, cbModelParam._m0[18u].z, fma(_2299, cbModelParam._m0[18u].y, _2298 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2300, cbModelParam._m0[19u].z, fma(_2299, cbModelParam._m0[19u].y, _2298 * cbModelParam._m0[19u].x))), _1465);
            frontier_phi_25_50_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_25_50_ladder_2;
        _1559 = frontier_phi_25_50_ladder_1;
        _1561 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1465);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1573 = ((((1.0 - _554) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_554 * _541)) * _525;
    float _1574 = _1573 * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1575 = _1573 * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1576 = _1573 * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1579 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1633 = _1620 / _1632;
    float _1634 = _1624 / _1632;
    float _1635 = _1628 / _1632;
    float _1782;
    float _1783;
    float _1784;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1662 = ((uint(_1635 > cbSceneParam._m0[59u].y) + uint(_1635 > cbSceneParam._m0[59u].x)) + uint(_1635 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1663 = _1662 + 43u;
        uint _1671 = _1662 + 44u;
        uint _1679 = _1662 + 45u;
        uint _1687 = _1662 + 46u;
        float _1698 = fma(_1632, cbSceneParam._m0[_1663].w, fma(_1628, cbSceneParam._m0[_1663].z, fma(_1624, cbSceneParam._m0[_1663].y, _1620 * cbSceneParam._m0[_1663].x)));
        float _1702 = fma(_1632, cbSceneParam._m0[_1671].w, fma(_1628, cbSceneParam._m0[_1671].z, fma(_1624, cbSceneParam._m0[_1671].y, _1620 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1632, cbSceneParam._m0[_1687].w, fma(_1628, cbSceneParam._m0[_1687].z, fma(_1624, cbSceneParam._m0[_1687].y, _1620 * cbSceneParam._m0[_1687].x)));
        float _1715 = cbSceneParam._m0[33u].z * _1710;
        float _1717 = cbSceneParam._m0[33u].w * _1710;
        float _1720 = fma(_1632, cbSceneParam._m0[_1679].w, fma(_1628, cbSceneParam._m0[_1679].z, fma(_1624, cbSceneParam._m0[_1679].y, _1620 * cbSceneParam._m0[_1679].x))) / _1710;
        float _1768 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
        float _4078 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1775 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1698) / _1710, (_1717 + _1702) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1717 + _1698) / _1710, (_1702 - _1715) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1715) / _1710, (_1702 - _1717) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1717) / _1710, (_1715 + _1702) / _1710), _1720), 0.0)).x), vec4(0.25)));
        _1782 = 1.0 - (_1775 * cbSceneParam._m0[34u].x);
        _1783 = 1.0 - (_1775 * cbSceneParam._m0[34u].y);
        _1784 = 1.0 - (_1775 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1782 = 1.0;
        _1783 = 1.0;
        _1784 = 1.0;
    }
    float _1848;
    float _1850;
    float _1852;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1836 = fma(_1632, cbSceneParam._m0[63u].w, fma(_1628, cbSceneParam._m0[63u].z, fma(_1624, cbSceneParam._m0[63u].y, _1620 * cbSceneParam._m0[63u].x)));
        float _1837 = fma(_1632, cbSceneParam._m0[60u].w, fma(_1628, cbSceneParam._m0[60u].z, fma(_1624, cbSceneParam._m0[60u].y, _1620 * cbSceneParam._m0[60u].x))) / _1836;
        float _1838 = fma(_1632, cbSceneParam._m0[61u].w, fma(_1628, cbSceneParam._m0[61u].z, fma(_1624, cbSceneParam._m0[61u].y, _1620 * cbSceneParam._m0[61u].x))) / _1836;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1837 >= cbSceneParam._m0[64u].x) && (_1838 >= cbSceneParam._m0[64u].y)) && (_1837 <= cbSceneParam._m0[64u].z)) && (_1838 <= cbSceneParam._m0[64u].w))
        {
            float _1977 = fma(_1632, cbSceneParam._m0[62u].w, fma(_1628, cbSceneParam._m0[62u].z, fma(_1624, cbSceneParam._m0[62u].y, _1620 * cbSceneParam._m0[62u].x))) / _1836;
            float _1981 = isnan(cbSceneParam._m0[41u].w) ? _1977 : (isnan(_1977) ? cbSceneParam._m0[41u].w : max(_1977, cbSceneParam._m0[41u].w));
            float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
            float _4094 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
            float _2031 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1837, cbSceneParam._m0[33u].w + _1838), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1837, _1838 - cbSceneParam._m0[33u].z), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1837 - cbSceneParam._m0[33u].z, _1838 - cbSceneParam._m0[33u].w), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1837 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1838), _1981), 0.0)).x), vec4(0.25)));
            float _2035 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
            float _2036 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
            float _2037 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2037) ? _1784 : (isnan(_1784) ? _2037 : min(_1784, _2037));
            frontier_phi_37_36_ladder_1 = isnan(_2036) ? _1783 : (isnan(_1783) ? _2036 : min(_1783, _2036));
            frontier_phi_37_36_ladder_2 = isnan(_2035) ? _1782 : (isnan(_1782) ? _2035 : min(_1782, _2035));
        }
        else
        {
            frontier_phi_37_36_ladder = _1784;
            frontier_phi_37_36_ladder_1 = _1783;
            frontier_phi_37_36_ladder_2 = _1782;
        }
        _1848 = frontier_phi_37_36_ladder_2;
        _1850 = frontier_phi_37_36_ladder_1;
        _1852 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1848 = _1782;
        _1850 = _1783;
        _1852 = _1784;
    }
    uvec4 _1857 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1859 = _1857.x * 14u;
    uint _1860 = _1859 + 13u;
    float _1867 = _525 + (-1.0);
    float _1872 = (cbLight._m0[_1860].x * _1867) + 1.0;
    float _1873 = (cbLight._m0[_1860].y * _1867) + 1.0;
    float _1874 = (cbLight._m0[_1860].z * _1867) + 1.0;
    float _1875 = (cbLight._m0[_1860].w * _1867) + 1.0;
    uint _1876 = _1859 + 5u;
    float _1882 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1886 = _1859 + 4u;
    float _1896 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1900 = _1859 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_359, _360, _361));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_359, _360, _361));
    float _4130 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4141 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1876].x * _1882) * _1921) + (((cbLight._m0[_1886].x * _1848) * _1896) * _1919);
    float _1929 = ((_1882 * cbLight._m0[_1876].y) * _1921) + (((cbLight._m0[_1886].y * _1850) * _1896) * _1919);
    float _1930 = ((_1882 * cbLight._m0[_1876].z) * _1921) + (((cbLight._m0[_1886].z * _1852) * _1896) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1859 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_1936)
    {
        _2038 = _1928;
        _2040 = _1929;
        _2042 = _1930;
    }
    else
    {
        uint _2046 = _1859 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1859 + 2u].xyz), vec3(_359, _360, _361)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4152 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2065 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1928;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1929;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1930;
    }
    bool _2045 = _1934.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2045)
    {
        _2100 = _2038;
        _2102 = _2040;
        _2104 = _2042;
    }
    else
    {
        uint _2262 = _1859 + 7u;
        float _2278 = (dot(vec3(cbLight._m0[_1859 + 3u].xyz), vec3(_359, _360, _361)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4168 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2281 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2100 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2038;
        _2102 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2040;
        _2104 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2042;
    }
    uint _2107 = _1859 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _362) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1859].x + _439;
    float _2123 = cbLight._m0[_1859].y + _440;
    float _2124 = cbLight._m0[_1859].z + _441;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_1859].xyz));
    float _4184 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _2136 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2137 = dot(vec3(_359, _360, _361), vec3(_2129, _2130, _2131));
    float _4206 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2129, _2130, _2131));
    float _4217 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = 1.0 - _2121;
    float _2172 = (0.5 / (((_2136 * ((_2135 * _2161) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2161) + _2121) * _2135))) * _2135;
    float _4228 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2188 = _1859 + 9u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _362) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_1900].x + _439;
    float _2202 = cbLight._m0[_1900].y + _440;
    float _2203 = cbLight._m0[_1900].z + _441;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_1900].xyz));
    float _4239 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2215 = dot(vec3(_359, _360, _361), vec3(_2208, _2209, _2210));
    float _4250 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2208, _2209, _2210));
    float _4261 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2200 * _2200;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2237 = 1.0 - _2200;
    float _2247 = (0.5 / (((_2136 * ((_2214 * _2237) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2237) + _2200) * _2214))) * _2214;
    float _4272 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    float _2259 = (((_2236 * cbLight._m0[_2188].x) * _2249) * _1882) + ((((cbLight._m0[_2107].x * _1848) * _2160) * _2174) * _1896);
    float _2260 = (((_2236 * cbLight._m0[_2188].y) * _2249) * _1882) + ((((cbLight._m0[_2107].y * _1850) * _2160) * _2174) * _1896);
    float _2261 = (((_2236 * cbLight._m0[_2188].z) * _2249) * _1882) + ((((cbLight._m0[_2107].z * _1852) * _2160) * _2174) * _1896);
    float _2317;
    float _2319;
    float _2321;
    if (_1936)
    {
        _2317 = _2259;
        _2319 = _2260;
        _2321 = _2261;
    }
    else
    {
        uint _2323 = _1859 + 2u;
        uint _2327 = _1859 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _362) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _439;
        float _2344 = cbLight._m0[_2323].y + _440;
        float _2345 = cbLight._m0[_2323].z + _441;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_2323].xyz));
        float _4283 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2357 = dot(vec3(_359, _360, _361), vec3(_2350, _2351, _2352));
        float _4294 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4305 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2136 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2379) + _2342) * _2356))) * _2356;
        float _4316 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2317 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2259;
        _2319 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2260;
        _2321 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2261;
    }
    float _2423;
    float _2425;
    float _2427;
    if (_2045)
    {
        _2423 = _2317;
        _2425 = _2319;
        _2427 = _2321;
    }
    else
    {
        uint _2434 = _1859 + 3u;
        uint _2438 = _1859 + 11u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _362) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _439;
        float _2455 = cbLight._m0[_2434].y + _440;
        float _2456 = cbLight._m0[_2434].z + _441;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_2434].xyz));
        float _4332 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2468 = dot(vec3(_359, _360, _361), vec3(_2461, _2462, _2463));
        float _4343 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4354 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2490 = 1.0 - _2453;
        float _2500 = (0.5 / (((_2136 * ((_2467 * _2490) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2490) + _2453) * _2467))) * _2467;
        float _4365 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2423 = (((_2489 * cbLight._m0[_2438].x) * _2502) * _2503) + _2317;
        _2425 = (((_2489 * cbLight._m0[_2438].y) * _2502) * _2503) + _2319;
        _2427 = (((_2489 * cbLight._m0[_2438].z) * _2502) * _2503) + _2321;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1857.y == 0u)
    {
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _2525)));
        float _2546 = (log2(_1635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2805)
                {
                    frontier_phi_71_pred = _2794;
                    frontier_phi_71_pred_1 = _2793;
                    frontier_phi_71_pred_2 = _2792;
                    frontier_phi_71_pred_3 = _2791;
                    frontier_phi_71_pred_4 = _2790;
                    frontier_phi_71_pred_5 = _2789;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2804;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2795 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _1633;
                        float _3001 = _2960.y - _1634;
                        float _3002 = _2960.z - _1635;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_481, _484, _487), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4391 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _1633;
                        float _3036 = (-0.0) - _1634;
                        float _3037 = (-0.0) - _1635;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3051 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _541;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3042 + _3007;
                        float _3063 = _3043 + _3008;
                        float _3064 = _3044 + _3009;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_481, _484, _487), vec3(_3042, _3043, _3044));
                        float _4407 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3076 = dot(vec3(_481, _484, _487), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4418 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3020 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3010) + _3085;
                        float _4429 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4440 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3083 * _3083) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2864 = (_3031 * _2979.x) + _2937;
                        _2865 = (_3031 * _2979.y) + _2938;
                        _2866 = (_3031 * _2979.z) + _2939;
                        _2861 = (_3111 * _2996.x) + _2934;
                        _2862 = (_3111 * _2996.y) + _2935;
                        _2863 = (_3111 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_71_pred = _2866;
                    frontier_phi_71_pred_1 = _2865;
                    frontier_phi_71_pred_2 = _2864;
                    frontier_phi_71_pred_3 = _2863;
                    frontier_phi_71_pred_4 = _2862;
                    frontier_phi_71_pred_5 = _2861;
                }
                _2647 = frontier_phi_71_pred;
                _2645 = frontier_phi_71_pred_1;
                _2643 = frontier_phi_71_pred_2;
                _2641 = frontier_phi_71_pred_3;
                _2639 = frontier_phi_71_pred_4;
                _2637 = frontier_phi_71_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2637;
                    _2790 = _2639;
                    _2791 = _2641;
                    _2792 = _2643;
                    _2793 = _2645;
                    _2794 = _2647;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2653) & _2556) == 0u)
        {
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
            float _2783 = _2782 * _1633;
            float _2784 = _2782 * _1634;
            float _2785 = _2782 * _1635;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2917 = _2636;
                float _2918 = _2638;
                float _2919 = _2640;
                float _2920 = _2642;
                float _2921 = _2644;
                float _2922 = _2646;
                uint _2923 = _2653;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2933)
                    {
                        frontier_phi_82_pred = _2922;
                        frontier_phi_82_pred_1 = _2921;
                        frontier_phi_82_pred_2 = _2920;
                        frontier_phi_82_pred_3 = _2919;
                        frontier_phi_82_pred_4 = _2918;
                        frontier_phi_82_pred_5 = _2917;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        uint _3144 = _2932;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3214;
                        vec4 _3229;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3155 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3201 = (_3155 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3155 * 40u) + 20u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3232 = (_3155 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3155 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_1635, _3264.z, fma(_1634, _3264.y, _3264.x * _1633)) + _3264.w;
                            _3277 = !((fma(_1635, _3245.z, fma(_1634, _3245.y, _3245.x * _1633)) + _3245.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3170.x - _1633;
                                float _3305 = _3170.y - _1634;
                                float _3306 = _3170.z - _1635;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3171 * _3171));
                                float _4451 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3322 = sqrt(_3307) * _3186.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_481, _484, _487))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_1635, _3214.z, fma(_1634, _3214.y, _3214.x * _1633)) + _3214.w) / _3276;
                                float _3336 = (fma(_1635, _3229.z, fma(_1634, _3229.y, _3229.x * _1633)) + _3229.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4467 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _541;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2783;
                                float _3366 = _3312 - _2784;
                                float _3367 = _3313 - _2785;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4478 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3379 = dot(vec3(_481, _484, _487), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4489 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_481, _484, _487), vec3(_3311, _3312, _3313))) + _3388;
                                float _4500 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4511 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3342 * _3186.z;
                                frontier_phi_88_pred_1 = _3342 * _3186.y;
                                frontier_phi_88_pred_2 = _3342 * _3186.x;
                                frontier_phi_88_pred_3 = _3416 * _3198.z;
                                frontier_phi_88_pred_4 = _3416 * _3198.y;
                                frontier_phi_88_pred_5 = _3416 * _3198.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_88_pred;
                            _3424 = frontier_phi_88_pred_1;
                            _3423 = frontier_phi_88_pred_2;
                            _3422 = frontier_phi_88_pred_3;
                            _3421 = frontier_phi_88_pred_4;
                            _3420 = frontier_phi_88_pred_5;
                            _3128 = _3423 + _3141;
                            _3129 = _3424 + _3142;
                            _3130 = _3425 + _3143;
                            _3125 = _3420 + _3138;
                            _3126 = _3421 + _3139;
                            _3127 = _3422 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3130;
                        frontier_phi_82_pred_1 = _3129;
                        frontier_phi_82_pred_2 = _3128;
                        frontier_phi_82_pred_3 = _3127;
                        frontier_phi_82_pred_4 = _3126;
                        frontier_phi_82_pred_5 = _3125;
                    }
                    _2768 = frontier_phi_82_pred;
                    _2766 = frontier_phi_82_pred_1;
                    _2764 = frontier_phi_82_pred_2;
                    _2762 = frontier_phi_82_pred_3;
                    _2760 = frontier_phi_82_pred_4;
                    _2758 = frontier_phi_82_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2758;
                        _2918 = _2760;
                        _2919 = _2762;
                        _2920 = _2764;
                        _2921 = _2766;
                        _2922 = _2768;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2764;
                frontier_phi_63_64_ladder_1 = _2768;
                frontier_phi_63_64_ladder_2 = _2766;
                frontier_phi_63_64_ladder_3 = _2762;
                frontier_phi_63_64_ladder_4 = _2760;
                frontier_phi_63_64_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_63_64_ladder = _2642;
                frontier_phi_63_64_ladder_1 = _2646;
                frontier_phi_63_64_ladder_2 = _2644;
                frontier_phi_63_64_ladder_3 = _2640;
                frontier_phi_63_64_ladder_4 = _2638;
                frontier_phi_63_64_ladder_5 = _2636;
            }
            _2757 = frontier_phi_63_64_ladder_5;
            _2759 = frontier_phi_63_64_ladder_4;
            _2761 = frontier_phi_63_64_ladder_3;
            _2763 = frontier_phi_63_64_ladder;
            _2765 = frontier_phi_63_64_ladder_2;
            _2767 = frontier_phi_63_64_ladder_1;
        }
        float _2772 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2569 = (_2772 * _2763) + _2100;
        _2571 = (_2772 * _2765) + _2102;
        _2573 = (_2772 * _2767) + _2104;
        _2575 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2423;
        _2577 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2425;
        _2579 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2427;
    }
    else
    {
        _2569 = _2100;
        _2571 = _2102;
        _2573 = _2104;
        _2575 = _2423;
        _2577 = _2425;
        _2579 = _2427;
    }
    float _4527 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4538 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4549 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _2596 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2569 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _525))) + ((_2575 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1363)) * cbPerFrame._m0[3u].x);
    float _2597 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2571 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _525))) + ((_2577 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1363)) * cbPerFrame._m0[3u].x);
    float _2598 = ((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2573 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _525))) + ((_2579 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1363)) * cbPerFrame._m0[3u].x);
    uint _2599 = _226 + 6u;
    float _2607 = _460 / cbSceneParam._m0[86u].x;
    float _2608 = _461 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _380 : (isnan(_380) ? cbSceneParam._m0[77u].w : min(_380, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_380 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_380) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _380 : min(cbSceneParam._m0[80u].w, _380));
        float _2662 = _2661 / _380;
        float _2673 = _2662 * _432;
        float _2674 = _433 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2677 = _2662 * _434;
        float _2679 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2674;
        float _2687 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2675 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2820 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2874 = ((abs(_2687 / _2675) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2697 * _2829) - exp2(_2697 * _2830)) * _2818))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2627);
        _2699 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2701 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2703 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2705 = _2885 * _2627;
    }
    else
    {
        _2699 = _2624;
        _2701 = _2625;
        _2703 = _2626;
        _2705 = _2627;
    }
    bool _2912;
    vec4 _2715;
    vec4 _2737;
    float _2739;
    float _2743;
    float _2744;
    float _2745;
    float _2746;
    bool _2756;
    for (;;)
    {
        _2715 = cbMatDynParam._m0[0u];
        float _2717 = roundEven(_2715.y);
        bool _2718 = _2717 == 3.0;
        float _2719 = log2(_2705);
        float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * _2596;
        float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * _2597;
        float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * _2598;
        float _2735 = _448 + (-0.5);
        _2737 = cbMtdParam._m0[1u];
        _2739 = _2737.y * _2735;
        float _2742 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2743 = _2742 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
        _2744 = _2742 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
        _2745 = _2742 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
        _2746 = _2735 * 0.999000012874603271484375;
        _2756 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2756)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2746) < 0.5)
            {
                _2912 = true;
                break;
            }
        }
        uint _2853 = _500 + uint(_2715.w);
        if ((cbInstanceData._m0[_2853].w < 1.0) && ((cbInstanceData._m0[_2853].w + _2746) < 0.5))
        {
            _2912 = true;
            break;
        }
        if ((_2739 + 1.0) < _2737.x)
        {
            _2912 = true;
            break;
        }
        _2912 = false;
        break;
    }
    float _3116;
    if (_2912)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = cbInstanceData._m0[_2599].w;
    }
    SV_Target.x = _2743;
    SV_Target.y = _2744;
    SV_Target.z = _2745;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
    discard_exit();
}


