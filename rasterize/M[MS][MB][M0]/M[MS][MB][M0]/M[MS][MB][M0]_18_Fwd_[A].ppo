#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1143;
float _3506;
float _3507;
float _3508;
float _3509;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3518 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _375 = _373.x;
    float _376 = 1.0 - _375;
    float _385 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _388 = ((isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : min(_385, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _397 = (_388 - ((((((_375 - _376) * cbMtdParam._m0[24u].z) + _376) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _388))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3539 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _405 = (_398 * (cbMtdParam._m0[17u].x - _288)) + _288;
    float _406 = (_398 * (cbMtdParam._m0[17u].y - _289)) + _289;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _290)) + _290;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3550 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _453) + _405;
    float _462 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _453) + _406;
    float _463 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _453) + _407;
    float _468 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3561 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _499 = (_398 * (_482.z - _468)) + _468;
    float _502 = ((cbMtdParam._m0[23u].y - _499) * _453) + _499;
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _530 = (_524.x * 2.0) + (-1.0);
    float _531 = (_524.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3572 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _549 = (((_489 - _355) + (cbMtdParam._m0[21u].x * _355)) * _398) + _355;
    float _550 = (((_490 - _356) + (cbMtdParam._m0[21u].x * _356)) * _398) + _356;
    float _551 = (_398 * (sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) - _350)) + _350;
    float _562 = (((_530 - _549) + (_549 * cbMtdParam._m0[22u].z)) * _453) + _549;
    float _563 = (((_531 - _550) + (_550 * cbMtdParam._m0[22u].z)) * _453) + _550;
    float _564 = ((sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) - _551) * _453) + _551;
    float _566 = cbMtdParam._m0[22u].x + _334.w;
    float _569 = fma(_564, _230 * NORMAL.x, fma(_563, _237 * TANGENT.x, (_223 * _215) * _562));
    float _572 = fma(_564, _230 * NORMAL.y, fma(_563, _237 * TANGENT.y, (_223 * _216) * _562));
    float _575 = fma(_564, _230 * NORMAL.z, fma(_563, _237 * TANGENT.z, (_223 * _217) * _562));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3583 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _583 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3605 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3616 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3627 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _824 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
        float _830 = (cbMatDynParam._m0[5u].x * _824) + cbMatDynParam._m0[5u].y;
        float _3638 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _835 = (cbMatDynParam._m0[5u].z * _824) + cbMatDynParam._m0[5u].w;
        float _3649 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) - _831)) + _831) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _703 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _706 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    uint _719 = _243 + 9u;
    uint _720 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3660 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _744 = ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_580, _581, _582), vec3(_658, _659, _660));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _580) - _658;
    float _753 = (_748 * _581) - _659;
    float _754 = (_748 * _582) - _660;
    float _758 = abs(dot(vec3(_658, _659, _660), vec3(_580, _581, _582)));
    float _3693 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_583);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1142;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _871 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _875 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _900 = _805 + _580;
        float _901 = _809 + _581;
        float _902 = _813 + _582;
        float _912 = fma(_902, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900)) - _867;
        float _913 = fma(_902, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900)) - _871;
        float _914 = fma(_902, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900)) - _875;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _970 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_936.x + (-0.5));
        float _972 = _970 * (_936.y + (-0.5));
        float _973 = _970 * (_936.z + (-0.5));
        float _980 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_943.x + (-0.5));
        float _982 = _980 * (_943.y + (-0.5));
        float _983 = _980 * (_943.z + (-0.5));
        float _990 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_950.x + (-0.5));
        float _992 = _990 * (_950.y + (-0.5));
        float _993 = _990 * (_950.z + (-0.5));
        float _1000 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_957.x + (-0.5));
        float _1002 = _1000 * (_957.y + (-0.5));
        float _1003 = _1000 * (_957.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1024 = (dot(vec3(_580, _581, _582), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1034 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3741 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1036 + 1.0))) + _1041) * _1004;
        float _1051 = _972 * 0.5;
        float _1052 = _982 * 0.5;
        float _1053 = _992 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_580, _581, _582), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3774 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1078 + 1.0))) + _1083) * _1005;
        float _1093 = _973 * 0.5;
        float _1094 = _983 * 0.5;
        float _1095 = _993 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_580, _581, _582), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3807 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1120 + 1.0))) + _1125) * _1006;
        _1142 = _973;
        _1144 = _972;
        _1145 = _971;
        _1146 = _983;
        _1147 = _982;
        _1148 = _981;
        _1149 = _993;
        _1150 = _992;
        _1151 = _991;
        _1152 = _1006;
        _1153 = _1005;
        _1154 = _1004;
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _1143;
        _1144 = _1143;
        _1145 = _1143;
        _1146 = _1143;
        _1147 = _1143;
        _1148 = _1143;
        _1149 = _1143;
        _1150 = _1143;
        _1151 = _1143;
        _1152 = _1143;
        _1153 = _1143;
        _1154 = _1143;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1185 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1189 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1193 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1216 = _805 + _580;
        float _1217 = _809 + _581;
        float _1218 = _813 + _582;
        float _1228 = fma(_1218, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216)) - _1185;
        float _1229 = fma(_1218, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216)) - _1189;
        float _1230 = fma(_1218, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216)) - _1193;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1185 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1189 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[35u].z) + ((((((_1193 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1284 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1251.x + (-0.5));
        float _1286 = _1284 * (_1251.y + (-0.5));
        float _1287 = _1284 * (_1251.z + (-0.5));
        float _1294 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1258.x + (-0.5));
        float _1296 = _1294 * (_1258.y + (-0.5));
        float _1297 = _1294 * (_1258.z + (-0.5));
        float _1304 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1265.x + (-0.5));
        float _1306 = _1304 * (_1265.y + (-0.5));
        float _1307 = _1304 * (_1265.z + (-0.5));
        float _1314 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1272.x + (-0.5));
        float _1316 = _1314 * (_1272.y + (-0.5));
        float _1317 = _1314 * (_1272.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_580, _581, _582), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3870 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1348 + 1.0))) + _1353) * _1318;
        float _1363 = _1286 * 0.5;
        float _1364 = _1296 * 0.5;
        float _1365 = _1306 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_580, _581, _582), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3903 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1390 + 1.0))) + _1395) * _1319;
        float _1405 = _1287 * 0.5;
        float _1406 = _1297 * 0.5;
        float _1407 = _1307 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_580, _581, _582), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3936 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1432 + 1.0))) + _1437) * _1320;
        _1454 = _1287;
        _1455 = _1286;
        _1456 = _1285;
        _1457 = _1297;
        _1458 = _1296;
        _1459 = _1295;
        _1460 = _1307;
        _1461 = _1306;
        _1462 = _1305;
        _1463 = _1320;
        _1464 = _1319;
        _1465 = _1318;
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1143;
        _1455 = _1143;
        _1456 = _1143;
        _1457 = _1143;
        _1458 = _1143;
        _1459 = _1143;
        _1460 = _1143;
        _1461 = _1143;
        _1462 = _1143;
        _1463 = _1143;
        _1464 = _1143;
        _1465 = _1143;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1501 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1478));
    float _1522 = _752 * 0.5;
    float _1523 = _753 * 0.5;
    float _1524 = _754 * 0.5;
    float _1525 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1528 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1531 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1565;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1538 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1142, _1146, _1149, _1152));
        float _1542 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1546 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1553 = dot(vec4(cbModelParam._m0[39u]), vec4(_1522, _1523, _1524, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1576;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1567 = dot(vec4(cbModelParam._m0[40u]), vec4(_1522, _1523, _1524, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1580 = (_1576 * cbModelParam._m0[1u].x) + (_1565 * (1.0 - cbModelParam._m0[1u].x));
    float _1590 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1590 : min(cbModelParam._m0[25u].z, _1590));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1639 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1643 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1647 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1650 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1653 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1656 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1684;
        if (_1650 > 0.0)
        {
            _1684 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1684 = frontier_phi_17_15_ladder;
        }
        float _1887;
        if (_1653 > 0.0)
        {
            _1887 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1887 = frontier_phi_26_22_ladder;
        }
        float _2130;
        if (_1656 > 0.0)
        {
            _2130 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2130 = frontier_phi_38_33_ladder;
        }
        float _2132 = isnan(_1887) ? _1684 : (isnan(_1684) ? _1887 : min(_1684, _1887));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1650) + _1639;
        float _2138 = (_2133 * _1653) + _1643;
        float _2139 = (_2133 * _1656) + _1647;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1591);
            frontier_phi_16_38_ladder = _2263.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2263.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2263.x * cbModelParam._m0[1u].y;
        }
        _1672 = frontier_phi_16_38_ladder_2;
        _1674 = frontier_phi_16_38_ladder_1;
        _1676 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1591);
        _1672 = _1660.x * cbModelParam._m0[1u].y;
        _1674 = _1660.y * cbModelParam._m0[1u].y;
        _1676 = _1660.z * cbModelParam._m0[1u].y;
    }
    float _1680 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1680 : min(cbModelParam._m0[25u].w, _1680));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1749 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1752 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1892;
        if (_1746 > 0.0)
        {
            _1892 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1892 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1749 > 0.0)
        {
            _2157 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2362;
        if (_1752 > 0.0)
        {
            _2362 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2362 = frontier_phi_49_46_ladder;
        }
        float _2364 = isnan(_2157) ? _1892 : (isnan(_1892) ? _2157 : min(_1892, _2157));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1746) + _1735;
        float _2370 = (_2365 * _1749) + _1739;
        float _2371 = (_2365 * _1752) + _1743;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2371, cbModelParam._m0[17u].z, fma(_2370, cbModelParam._m0[17u].y, _2369 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2371, cbModelParam._m0[18u].z, fma(_2370, cbModelParam._m0[18u].y, _2369 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2371, cbModelParam._m0[19u].z, fma(_2370, cbModelParam._m0[19u].y, _2369 * cbModelParam._m0[19u].x))), _1681);
            frontier_phi_25_49_ladder = _2570.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2570.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2570.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_25_49_ladder_2;
        _1773 = frontier_phi_25_49_ladder_1;
        _1775 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1681);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _760)) * _744;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1672)) + _1672);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1674)) + _1674);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _744 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1845 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1849 = _1811 | 1u;
    float _1860 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_580, _581, _582));
    float _1863 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_580, _581, _582));
    float _4072 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _4083 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1868 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1870 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _1877 = ((cbLight._m0[_1828].x * _1834) * _1870) + ((cbLight._m0[_1838].x * _1845) * _1868);
    float _1878 = ((_1834 * cbLight._m0[_1828].y) * _1870) + ((_1845 * cbLight._m0[_1838].y) * _1868);
    float _1879 = ((_1834 * cbLight._m0[_1828].z) * _1870) + ((_1845 * cbLight._m0[_1838].z) * _1868);
    uvec4 _1884 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1886 = _1884.x == 0u;
    float _1897;
    float _1899;
    float _1901;
    if (_1886)
    {
        _1897 = _1877;
        _1899 = _1878;
        _1901 = _1879;
    }
    else
    {
        uint _1905 = _1811 + 6u;
        float _1921 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _4094 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1924 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1897 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1877;
        _1899 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1878;
        _1901 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1879;
    }
    bool _1904 = _1884.y == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1904)
    {
        _1942 = _1897;
        _1944 = _1899;
        _1946 = _1901;
    }
    else
    {
        uint _2101 = _1811 + 7u;
        float _2117 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4110 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2120 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1942 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _1897;
        _1944 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _1899;
        _1946 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _1901;
    }
    uint _1949 = _1811 + 8u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _583) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1811].x + _658;
    float _1965 = cbLight._m0[_1811].y + _659;
    float _1966 = cbLight._m0[_1811].z + _660;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1811].xyz));
    float _4126 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1978 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1979 = dot(vec3(_580, _581, _582), vec3(_1971, _1972, _1973));
    float _4148 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1971, _1972, _1973));
    float _4159 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1963 * _1963;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1963;
    float _2014 = (0.5 / (((_1978 * ((_1977 * _2003) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2003) + _1963) * _1977))) * _1977;
    float _4170 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    uint _2027 = _1811 + 9u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _583) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1849].x + _658;
    float _2041 = cbLight._m0[_1849].y + _659;
    float _2042 = cbLight._m0[_1849].z + _660;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1849].xyz));
    float _4181 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2054 = dot(vec3(_580, _581, _582), vec3(_2047, _2048, _2049));
    float _4192 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2047, _2048, _2049));
    float _4203 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2039 * _2039;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2039;
    float _2086 = (0.5 / (((_1978 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2076) + _2039) * _2053))) * _2053;
    float _4214 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    float _2098 = (((_2075 * cbLight._m0[_2027].x) * _2088) * _1834) + (((_2002 * cbLight._m0[_1949].x) * _2016) * _1845);
    float _2099 = (((_2075 * cbLight._m0[_2027].y) * _2088) * _1834) + (((_2002 * cbLight._m0[_1949].y) * _2016) * _1845);
    float _2100 = (((_2075 * cbLight._m0[_2027].z) * _2088) * _1834) + (((_2002 * cbLight._m0[_1949].z) * _2016) * _1845);
    float _2162;
    float _2164;
    float _2166;
    if (_1886)
    {
        _2162 = _2098;
        _2164 = _2099;
        _2166 = _2100;
    }
    else
    {
        uint _2168 = _1811 + 2u;
        uint _2172 = _1811 + 10u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _583) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _658;
        float _2189 = cbLight._m0[_2168].y + _659;
        float _2190 = cbLight._m0[_2168].z + _660;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2168].xyz));
        float _4225 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2202 = dot(vec3(_580, _581, _582), vec3(_2195, _2196, _2197));
        float _4236 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4247 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2224 = 1.0 - _2187;
        float _2234 = (0.5 / (((_1978 * ((_2201 * _2224) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2224) + _2187) * _2201))) * _2201;
        float _4258 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2162 = (((_2223 * cbLight._m0[_2172].x) * _2236) * _2237) + _2098;
        _2164 = (((_2223 * cbLight._m0[_2172].y) * _2236) * _2237) + _2099;
        _2166 = (((_2223 * cbLight._m0[_2172].z) * _2236) * _2237) + _2100;
    }
    float _2272;
    float _2274;
    float _2276;
    if (_1904)
    {
        _2272 = _2162;
        _2274 = _2164;
        _2276 = _2166;
    }
    else
    {
        uint _2283 = _1811 + 3u;
        uint _2287 = _1811 + 11u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _583) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _658;
        float _2304 = cbLight._m0[_2283].y + _659;
        float _2305 = cbLight._m0[_2283].z + _660;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2283].xyz));
        float _4274 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2317 = dot(vec3(_580, _581, _582), vec3(_2310, _2311, _2312));
        float _4285 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4296 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2339 = 1.0 - _2302;
        float _2349 = (0.5 / (((_1978 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2339) + _2302) * _2316))) * _2316;
        float _4307 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2272 = (((_2338 * cbLight._m0[_2287].x) * _2351) * _2352) + _2162;
        _2274 = (((_2338 * cbLight._m0[_2287].y) * _2351) * _2352) + _2164;
        _2276 = (((_2338 * cbLight._m0[_2287].z) * _2351) * _2352) + _2166;
    }
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_1809.y == 0u)
    {
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2427;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2427;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2427;
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.x;
        uint _2454 = uint((float(_2442.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2443))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2443)));
        float _2464 = (log2(_2430 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2465 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        uint _2468 = uint(isnan(14.0) ? _2465 : (isnan(_2465) ? 14.0 : min(_2465, 14.0)));
        uvec4 _2473 = texelFetch(g_lightClusterGridBuffer, int(((_2468 << 2u) + (_2454 << 6u)) >> 2u));
        uint _2474 = _2473.x;
        uint _2475 = _2442.z;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((((1u << ((_2475 >> 4u) & 15u)) + 4294967295u) & _2474) == 0u) || ((_2475 & 240u) == 0u))
        {
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
        }
        else
        {
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            uint _2734 = 0u;
            uint _2743;
            bool _2744;
            for (;;)
            {
                _2743 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                _2744 = _2743 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2744)
                {
                    frontier_phi_66_pred = _2728;
                    frontier_phi_66_pred_1 = _2733;
                    frontier_phi_66_pred_2 = _2732;
                    frontier_phi_66_pred_3 = _2731;
                    frontier_phi_66_pred_4 = _2730;
                    frontier_phi_66_pred_5 = _2729;
                }
                else
                {
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    uint _2879;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2743;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    for (;;)
                    {
                        uint _2883 = uint(findLSB(_2879)) + (_2734 << 5u);
                        uint _2880 = (_2879 + 4294967295u) & _2879;
                        uint _2885 = _2883 * 48u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2905 = (_2883 * 48u) + 4u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2924 = (_2883 * 48u) + 8u;
                        vec3 _2935 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x));
                        float _2939 = _2899.x - _2428;
                        float _2940 = _2899.y - _2429;
                        float _2941 = _2899.z - _2430;
                        float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                        float _2945 = inversesqrt(_2942);
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2949 = dot(vec3(_700, _703, _706), vec3(_2946, _2947, _2948));
                        float _2954 = 1.0 - (_2942 * _2899.w);
                        float _4333 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _2956 = sqrt(_2942) * _2918.w;
                        float _2959 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2949) + _2960;
                        float _2966 = _2956 * _2956;
                        float _2970 = ((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2955) / ((_2966 * 0.699999988079071044921875) + 1.0);
                        float _2974 = (-0.0) - _2428;
                        float _2975 = (-0.0) - _2429;
                        float _2976 = (-0.0) - _2430;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2991 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _760;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_700, _703, _706), vec3(_2981, _2982, _2983));
                        float _4349 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3016 = dot(vec3(_700, _703, _706), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4360 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2959 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2949) + _3025;
                        float _4371 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4382 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) / ((_3023 * _3023) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125))) * _2955;
                        _2803 = (_2970 * _2918.x) + _2876;
                        _2804 = (_2970 * _2918.y) + _2877;
                        _2805 = (_2970 * _2918.z) + _2878;
                        _2800 = (_3051 * _2935.x) + _2873;
                        _2801 = (_3051 * _2935.y) + _2874;
                        _2802 = (_3051 * _2935.z) + _2875;
                        if (_2880 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2880;
                        }
                    }
                    frontier_phi_66_pred = _2800;
                    frontier_phi_66_pred_1 = _2805;
                    frontier_phi_66_pred_2 = _2804;
                    frontier_phi_66_pred_3 = _2803;
                    frontier_phi_66_pred_4 = _2802;
                    frontier_phi_66_pred_5 = _2801;
                }
                _2576 = frontier_phi_66_pred;
                _2586 = frontier_phi_66_pred_1;
                _2584 = frontier_phi_66_pred_2;
                _2582 = frontier_phi_66_pred_3;
                _2580 = frontier_phi_66_pred_4;
                _2578 = frontier_phi_66_pred_5;
                uint _2735 = _2734 + 1u;
                if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2728 = _2576;
                    _2729 = _2578;
                    _2730 = _2580;
                    _2731 = _2582;
                    _2732 = _2584;
                    _2733 = _2586;
                    _2734 = _2735;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
        }
        uvec4 _2589 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2590 = _2589.z;
        uint _2592 = (_2590 >> 8u) & 15u;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((4294967295u << _2592) & _2474) == 0u)
        {
            _2696 = _2575;
            _2698 = _2577;
            _2700 = _2579;
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
        }
        else
        {
            float _2721 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
            float _2722 = _2721 * _2428;
            float _2723 = _2721 * _2429;
            float _2724 = _2721 * _2430;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2592 < ((_2590 >> 12u) & 15u))
            {
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2856 = _2575;
                float _2857 = _2577;
                float _2858 = _2579;
                float _2859 = _2581;
                float _2860 = _2583;
                float _2861 = _2585;
                uint _2862 = _2592;
                uint _2871;
                bool _2872;
                for (;;)
                {
                    _2871 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                    _2872 = _2871 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2872)
                    {
                        frontier_phi_77_pred = _2861;
                        frontier_phi_77_pred_1 = _2860;
                        frontier_phi_77_pred_2 = _2859;
                        frontier_phi_77_pred_3 = _2858;
                        frontier_phi_77_pred_4 = _2857;
                        frontier_phi_77_pred_5 = _2856;
                    }
                    else
                    {
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        uint _3084 = _2871;
                        uint _3085;
                        vec4 _3110;
                        float _3111;
                        vec4 _3126;
                        vec3 _3138;
                        vec4 _3154;
                        vec4 _3169;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3095 = ((_2862 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3084));
                            _3085 = (_3084 + 4294967295u) & _3084;
                            uint _3097 = _3095 * 40u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3111 = _3110.w;
                            uint _3113 = (_3095 * 40u) + 4u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3095 * 40u) + 8u;
                            _3138 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x));
                            uint _3141 = (_3095 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3095 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3095 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3095 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2430, _3203.z, fma(_2429, _3203.y, _3203.x * _2428)) + _3203.w;
                            _3216 = !((fma(_2430, _3184.z, fma(_2429, _3184.y, _3184.x * _2428)) + _3184.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3110.x - _2428;
                                float _3244 = _3110.y - _2429;
                                float _3245 = _3110.z - _2430;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3111 * _3111));
                                float _4393 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3261 = sqrt(_3246) * _3126.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_700, _703, _706))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2430, _3154.z, fma(_2429, _3154.y, _3154.x * _2428)) + _3154.w) / _3215;
                                float _3275 = (fma(_2430, _3169.z, fma(_2429, _3169.y, _3169.x * _2428)) + _3169.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4409 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _760;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2722;
                                float _3305 = _3251 - _2723;
                                float _3306 = _3252 - _2724;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2722, (-0.0) - _2723, (-0.0) - _2724));
                                float _4420 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3318 = dot(vec3(_700, _703, _706), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4431 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_700, _703, _706), vec3(_3250, _3251, _3252))) + _3327;
                                float _4442 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4453 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3281 * _3126.y;
                                frontier_phi_83_pred_1 = _3281 * _3126.x;
                                frontier_phi_83_pred_2 = _3355 * _3138.z;
                                frontier_phi_83_pred_3 = _3355 * _3138.y;
                                frontier_phi_83_pred_4 = _3355 * _3138.x;
                                frontier_phi_83_pred_5 = _3281 * _3126.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_83_pred;
                            _3362 = frontier_phi_83_pred_1;
                            _3361 = frontier_phi_83_pred_2;
                            _3360 = frontier_phi_83_pred_3;
                            _3359 = frontier_phi_83_pred_4;
                            _3364 = frontier_phi_83_pred_5;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            _3070 = _3364 + _3083;
                            _3065 = _3359 + _3078;
                            _3066 = _3360 + _3079;
                            _3067 = _3361 + _3080;
                            if (_3085 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3085;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3070;
                        frontier_phi_77_pred_1 = _3069;
                        frontier_phi_77_pred_2 = _3068;
                        frontier_phi_77_pred_3 = _3067;
                        frontier_phi_77_pred_4 = _3066;
                        frontier_phi_77_pred_5 = _3065;
                    }
                    _2707 = frontier_phi_77_pred;
                    _2705 = frontier_phi_77_pred_1;
                    _2703 = frontier_phi_77_pred_2;
                    _2701 = frontier_phi_77_pred_3;
                    _2699 = frontier_phi_77_pred_4;
                    _2697 = frontier_phi_77_pred_5;
                    uint _2863 = _2862 + 1u;
                    if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2856 = _2697;
                        _2857 = _2699;
                        _2858 = _2701;
                        _2859 = _2703;
                        _2860 = _2705;
                        _2861 = _2707;
                        _2862 = _2863;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2701;
                frontier_phi_58_59_ladder_1 = _2707;
                frontier_phi_58_59_ladder_2 = _2705;
                frontier_phi_58_59_ladder_3 = _2703;
                frontier_phi_58_59_ladder_4 = _2699;
                frontier_phi_58_59_ladder_5 = _2697;
            }
            else
            {
                frontier_phi_58_59_ladder = _2579;
                frontier_phi_58_59_ladder_1 = _2585;
                frontier_phi_58_59_ladder_2 = _2583;
                frontier_phi_58_59_ladder_3 = _2581;
                frontier_phi_58_59_ladder_4 = _2577;
                frontier_phi_58_59_ladder_5 = _2575;
            }
            _2696 = frontier_phi_58_59_ladder_5;
            _2698 = frontier_phi_58_59_ladder_4;
            _2700 = frontier_phi_58_59_ladder;
            _2702 = frontier_phi_58_59_ladder_3;
            _2704 = frontier_phi_58_59_ladder_2;
            _2706 = frontier_phi_58_59_ladder_1;
        }
        float _2711 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2487 = (_2711 * _2702) + _1942;
        _2489 = (_2711 * _2704) + _1944;
        _2491 = (_2711 * _2706) + _1946;
        _2493 = ((_2696 * 0.039999999105930328369140625) * _2711) + _2272;
        _2495 = ((_2698 * 0.039999999105930328369140625) * _2711) + _2274;
        _2497 = ((_2700 * 0.039999999105930328369140625) * _2711) + _2276;
    }
    else
    {
        _2487 = _1942;
        _2489 = _1944;
        _2491 = _1946;
        _2493 = _2272;
        _2495 = _2274;
        _2497 = _2276;
    }
    float _4469 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4480 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4491 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2514 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2487 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _744))) + ((_2493 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2515 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2489 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _744))) + ((_2495 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2516 = ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2491 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _744))) + ((_2497 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    uint _2517 = _243 + 6u;
    float _2525 = _679 / cbSceneParam._m0[86u].x;
    float _2526 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2540 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2525, _2526, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2542 = _2540.x;
    float _2543 = _2540.y;
    float _2544 = _2540.z;
    float _2545 = _2540.w;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2600 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2601 = _2600 / _601;
        float _2612 = _2601 * _651;
        float _2613 = _652 * _2601;
        float _2614 = (-0.0) - _2613;
        float _2616 = _2601 * _653;
        float _2618 = (cbSceneParam._m0[77u].w * _2614) / _2600;
        float _2619 = _2618 + cbSceneParam._m0[79u].w;
        float _2620 = cbSceneParam._m0[79u].w - _2613;
        float _2626 = sqrt(((_2612 * _2612) + (_2613 * _2613)) + (_2616 * _2616));
        float _2629 = (1.0 - (cbSceneParam._m0[77u].w / _2600)) * _2626;
        float _2634 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2636 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2813;
        if (abs((_2614 - _2618) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2813 = ((((_2619 > 0.0) ? exp2(_2634 * _2619) : (2.0 - exp2(_2636 * _2619))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2629;
        }
        else
        {
            float _2757 = 1.0 / cbSceneParam._m0[80u].x;
            float _2758 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : max(_2619, _2620));
            float _2759 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : min(_2619, _2620));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            _2813 = ((abs(_2626 / _2614) * cbSceneParam._m0[80u].y) * ((((_2768 - _2769) * 2.0) - ((exp2(_2634 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0)))) - exp2(_2634 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))))) * _2757)) - ((exp2(_2636 * _2768) - exp2(_2636 * _2769)) * _2757))) + (_2629 * cbSceneParam._m0[80u].z);
        }
        vec4 _2815 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2525, _2526, 1.0), 0.0);
        float _2824 = exp2((_2813 * (-1.44269502162933349609375)) * (1.0 - _2815.w));
        float _2825 = log2(_2824);
        float _2841 = log2(_2545);
        _2638 = (exp2(_2841 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].x)) * _2815.x) / cbSceneParam._m0[78u].x)) + _2542;
        _2640 = (exp2(_2841 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].y)) * _2815.y) / cbSceneParam._m0[78u].y)) + _2543;
        _2642 = (exp2(_2841 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].z)) * _2815.z) / cbSceneParam._m0[78u].z)) + _2544;
        _2644 = _2824 * _2545;
    }
    else
    {
        _2638 = _2542;
        _2640 = _2543;
        _2642 = _2544;
        _2644 = _2545;
    }
    bool _2851;
    vec4 _2654;
    vec4 _2676;
    float _2678;
    float _2682;
    float _2683;
    float _2684;
    float _2685;
    bool _2695;
    for (;;)
    {
        _2654 = cbMatDynParam._m0[0u];
        float _2656 = roundEven(_2654.y);
        bool _2657 = _2656 == 3.0;
        float _2658 = log2(_2644);
        float _2665 = exp2(_2658 * cbSceneParam._m0[78u].x) * _2514;
        float _2666 = exp2(_2658 * cbSceneParam._m0[78u].y) * _2515;
        float _2667 = exp2(_2658 * cbSceneParam._m0[78u].z) * _2516;
        float _2674 = _667 + (-0.5);
        _2676 = cbMtdParam._m0[1u];
        _2678 = _2676.y * _2674;
        float _2681 = (_2656 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2682 = _2681 * (_2657 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2638)));
        _2683 = _2681 * (_2657 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2640)));
        _2684 = _2681 * (_2657 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2642)));
        _2685 = _2674 * 0.999000012874603271484375;
        _2695 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2695)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2685) < 0.5)
            {
                _2851 = true;
                break;
            }
        }
        uint _2792 = _719 + uint(_2654.w);
        if ((cbInstanceData._m0[_2792].w < 1.0) && ((cbInstanceData._m0[_2792].w + _2685) < 0.5))
        {
            _2851 = true;
            break;
        }
        if ((_2678 + 1.0) < _2676.x)
        {
            _2851 = true;
            break;
        }
        _2851 = false;
        break;
    }
    float _3056;
    if (_2851)
    {
        discard_state = true;
        _3056 = 0.0;
    }
    else
    {
        _3056 = cbInstanceData._m0[_2517].w;
    }
    SV_Target.x = _2682;
    SV_Target.y = _2683;
    SV_Target.z = _2684;
    SV_Target.w = _3056;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2517].w;
    discard_exit();
}


