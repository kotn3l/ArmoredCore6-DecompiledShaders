#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1355;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3658 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3669 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3680 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3691 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _441;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _546 = ((_516.z - _537) * _422) + _537;
    float _549 = ((((_516.x - _535) * _422) + _535) * 2.0) + (-1.0);
    float _550 = ((((_516.y - _536) * _422) + _536) * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3702 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _588 = (_549 + ((((_489.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_576.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _589 = (_550 + ((((_489.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_576.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = fma(_556, _242, fma(_589, _249, _588 * _235));
    float _595 = fma(_556, _243, fma(_589, _250, _588 * _236));
    float _598 = fma(_556, _244, fma(_589, _251, _588 * _237));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    vec4 _631 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _640 = (cbMtdParam._m0[19u].x + dot(vec4(_602 * _592, _602 * _595, _602 * _598, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_633 - _634) * cbMtdParam._m0[24u].z) + _634) * cbMtdParam._m0[21u].z);
    float _3713 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _643 = (-0.0) - cbMtdParam._m0[24u].y;
    float _645 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
    float _653 = _641 - ((_641 * TEXCOORD_8.x) * _646);
    float _654 = _641 - ((_641 * TEXCOORD_8.y) * _646);
    float _655 = _641 - ((_641 * TEXCOORD_8.z) * _646);
    float _662 = (_653 * ((_469.x * cbMtdParam._m0[18u].x) - _448)) + _448;
    float _663 = (_654 * ((_469.y * cbMtdParam._m0[18u].y) - _449)) + _449;
    float _664 = (_655 * ((_469.z * cbMtdParam._m0[18u].z) - _450)) + _450;
    vec4 _676 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _705 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3734 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _714 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _706) + _662;
    float _715 = ((((cbMtdParam._m0[10u].y - _663) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _706) + _663;
    float _716 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _706) + _664;
    float _721 = (((_489.z - _546) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _546;
    float _725 = ((_576.z - _721) * cbMtdParam._m0[19u].w) + _721;
    vec4 _739 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _746 = (_739.x * 2.0) + (-1.0);
    float _747 = (_739.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3745 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _756 = ((_739.z - _725) * _653) + _725;
    float _759 = ((cbMtdParam._m0[23u].y - _756) * _706) + _756;
    vec4 _778 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _784 = (_778.x * 2.0) + (-1.0);
    float _785 = (_778.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3756 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) - _556) * _655) + _556;
    float _804 = (((_746 - _588) * _653) + _588) + (cbMtdParam._m0[21u].x * _588);
    float _805 = (((_747 - _589) * _654) + _589) + (cbMtdParam._m0[21u].x * _589);
    float _816 = (((_784 - _804) + (_804 * cbMtdParam._m0[22u].z)) * _706) + _804;
    float _817 = (((_785 - _805) + (_805 * cbMtdParam._m0[22u].z)) * _706) + _805;
    float _818 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) - _801)) + _801;
    float _820 = cbMtdParam._m0[22u].x + _576.w;
    float _823 = fma(_818, _242, fma(_817, _249, _816 * _235));
    float _826 = fma(_818, _243, fma(_817, _250, _816 * _236));
    float _829 = fma(_818, _244, fma(_817, _251, _816 * _237));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    float _834 = _833 * _823;
    float _835 = _833 * _826;
    float _836 = _833 * _829;
    float _3767 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _837 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _3789 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3800 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3811 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _834));
    float _943 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _834));
    float _946 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _834));
    uint _960 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_960].z;
    float _3822 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _984 = ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_834, _835, _836), vec3(_913, _914, _915));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _834) - _913;
    float _993 = (_988 * _835) - _914;
    float _994 = (_988 * _836) - _915;
    float _998 = abs(dot(vec3(_913, _914, _915), vec3(_834, _835, _836)));
    float _3855 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_837);
    float _1013 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1083 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1087 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1112 = _1045 + _834;
        float _1113 = _1049 + _835;
        float _1114 = _1053 + _836;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_834, _835, _836), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3903 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_834, _835, _836), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3936 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_834, _835, _836), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3969 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1398 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1402 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1425 = _1045 + _834;
        float _1426 = _1049 + _835;
        float _1427 = _1053 + _836;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_834, _835, _836), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4032 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_834, _835, _836), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4065 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_834, _835, _836), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4098 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1355;
        _1664 = _1355;
        _1665 = _1355;
        _1666 = _1355;
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1367)) + _1367;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1368)) + _1368;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _992 * 0.5;
    float _1732 = _993 * 0.5;
    float _1733 = _994 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _837);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1861 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1864 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1892 = frontier_phi_14_12_ladder;
        }
        float _2092;
        if (_1861 > 0.0)
        {
            _2092 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2092 = frontier_phi_23_19_ladder;
        }
        float _2335;
        if (_1864 > 0.0)
        {
            _2335 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2335 = frontier_phi_35_30_ladder;
        }
        float _2337 = isnan(_2092) ? _1892 : (isnan(_1892) ? _2092 : min(_1892, _2092));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1858) + _1847;
        float _2343 = (_2338 * _1861) + _1851;
        float _2344 = (_2338 * _1864) + _1855;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_13_35_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_13_35_ladder_2;
        _1882 = frontier_phi_13_35_ladder_1;
        _1884 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1800);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _837);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1956 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1959 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2097;
        if (_1953 > 0.0)
        {
            _2097 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2097 = frontier_phi_25_21_ladder;
        }
        float _2362;
        if (_1956 > 0.0)
        {
            _2362 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2362 = frontier_phi_37_32_ladder;
        }
        float _2567;
        if (_1959 > 0.0)
        {
            _2567 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2567 = frontier_phi_46_43_ladder;
        }
        float _2569 = isnan(_2362) ? _2097 : (isnan(_2097) ? _2362 : min(_2097, _2362));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _1953) + _1942;
        float _2575 = (_2570 * _1956) + _1946;
        float _2576 = (_2570 * _1959) + _1950;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2577;
        float _2580 = _2577 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2576 > _2580) || ((_2576 < _2578) || ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 < _2578) || (_2574 > _2580))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2576, cbModelParam._m0[17u].z, fma(_2575, cbModelParam._m0[17u].y, _2574 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2576, cbModelParam._m0[18u].z, fma(_2575, cbModelParam._m0[18u].y, _2574 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2576, cbModelParam._m0[19u].z, fma(_2575, cbModelParam._m0[19u].y, _2574 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_22_46_ladder = _2775.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2775.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2775.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_46_ladder_2;
        _1980 = frontier_phi_22_46_ladder_1;
        _1982 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1889);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1994 = ((((1.0 - _1013) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1013 * _1000)) * _984;
    float _1995 = _1994 * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1996 = _1994 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1997 = _1994 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _984 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2051 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2055 = _2018 | 1u;
    float _2066 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_834, _835, _836));
    float _2069 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_834, _835, _836));
    float _4234 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _4245 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2074 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2076 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2083 = ((cbLight._m0[_2035].x * _2041) * _2076) + ((cbLight._m0[_2045].x * _2051) * _2074);
    float _2084 = ((_2041 * cbLight._m0[_2035].y) * _2076) + ((_2051 * cbLight._m0[_2045].y) * _2074);
    float _2085 = ((_2041 * cbLight._m0[_2035].z) * _2076) + ((_2051 * cbLight._m0[_2045].z) * _2074);
    uvec4 _2089 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2091 = _2089.x == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2091)
    {
        _2102 = _2083;
        _2104 = _2084;
        _2106 = _2085;
    }
    else
    {
        uint _2110 = _2018 + 6u;
        float _2126 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4256 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2129 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2102 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _2083;
        _2104 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _2084;
        _2106 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _2085;
    }
    bool _2109 = _2089.y == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2109)
    {
        _2147 = _2102;
        _2149 = _2104;
        _2151 = _2106;
    }
    else
    {
        uint _2306 = _2018 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4272 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2325 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2147 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2102;
        _2149 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2104;
        _2151 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2106;
    }
    uint _2154 = _2018 + 8u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _837) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2018].x + _913;
    float _2170 = cbLight._m0[_2018].y + _914;
    float _2171 = cbLight._m0[_2018].z + _915;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2018].xyz));
    float _4288 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2183 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2184 = dot(vec3(_834, _835, _836), vec3(_2176, _2177, _2178));
    float _4310 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2176, _2177, _2178));
    float _4321 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2168 * _2168;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2183 * ((_2182 * _2208) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2208) + _2168) * _2182))) * _2182;
    float _4332 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    uint _2232 = _2018 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _837) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2055].x + _913;
    float _2246 = cbLight._m0[_2055].y + _914;
    float _2247 = cbLight._m0[_2055].z + _915;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2055].xyz));
    float _4343 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2259 = dot(vec3(_834, _835, _836), vec3(_2252, _2253, _2254));
    float _4354 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2252, _2253, _2254));
    float _4365 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2281 = 1.0 - _2244;
    float _2291 = (0.5 / (((_2183 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2281) + _2244) * _2258))) * _2258;
    float _4376 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2303 = (((_2280 * cbLight._m0[_2232].x) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].x) * _2221) * _2051);
    float _2304 = (((_2280 * cbLight._m0[_2232].y) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].y) * _2221) * _2051);
    float _2305 = (((_2280 * cbLight._m0[_2232].z) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].z) * _2221) * _2051);
    float _2367;
    float _2369;
    float _2371;
    if (_2091)
    {
        _2367 = _2303;
        _2369 = _2304;
        _2371 = _2305;
    }
    else
    {
        uint _2373 = _2018 + 2u;
        uint _2377 = _2018 + 10u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _837) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _913;
        float _2394 = cbLight._m0[_2373].y + _914;
        float _2395 = cbLight._m0[_2373].z + _915;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2373].xyz));
        float _4387 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2407 = dot(vec3(_834, _835, _836), vec3(_2400, _2401, _2402));
        float _4398 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4409 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2183 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2429) + _2392) * _2406))) * _2406;
        float _4420 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2367 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2303;
        _2369 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2304;
        _2371 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2305;
    }
    float _2477;
    float _2479;
    float _2481;
    if (_2109)
    {
        _2477 = _2367;
        _2479 = _2369;
        _2481 = _2371;
    }
    else
    {
        uint _2488 = _2018 + 3u;
        uint _2492 = _2018 + 11u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _837) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _913;
        float _2509 = cbLight._m0[_2488].y + _914;
        float _2510 = cbLight._m0[_2488].z + _915;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2488].xyz));
        float _4436 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2522 = dot(vec3(_834, _835, _836), vec3(_2515, _2516, _2517));
        float _4447 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4458 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2544 = 1.0 - _2507;
        float _2554 = (0.5 / (((_2183 * ((_2521 * _2544) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2544) + _2507) * _2521))) * _2521;
        float _4469 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2477 = (((_2543 * cbLight._m0[_2492].x) * _2556) * _2557) + _2367;
        _2479 = (((_2543 * cbLight._m0[_2492].y) * _2556) * _2557) + _2369;
        _2481 = (((_2543 * cbLight._m0[_2492].z) * _2556) * _2557) + _2371;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_2016.y == 0u)
    {
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2632;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2632;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2632;
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.x;
        uint _2659 = uint((float(_2647.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _2648))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _2648)));
        float _2669 = (log2(_2635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        uint _2673 = uint(isnan(14.0) ? _2670 : (isnan(_2670) ? 14.0 : min(_2670, 14.0)));
        uvec4 _2678 = texelFetch(g_lightClusterGridBuffer, int(((_2673 << 2u) + (_2659 << 6u)) >> 2u));
        uint _2679 = _2678.x;
        uint _2680 = _2647.z;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((((1u << ((_2680 >> 4u) & 15u)) + 4294967295u) & _2679) == 0u) || ((_2680 & 240u) == 0u))
        {
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
        }
        else
        {
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2940)
                {
                    frontier_phi_61_pred = _2924;
                    frontier_phi_61_pred_1 = _2929;
                    frontier_phi_61_pred_2 = _2928;
                    frontier_phi_61_pred_3 = _2927;
                    frontier_phi_61_pred_4 = _2926;
                    frontier_phi_61_pred_5 = _2925;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2939;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2930 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2633;
                        float _3115 = _3074.y - _2634;
                        float _3116 = _3074.z - _2635;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_940, _943, _946), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4495 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2633;
                        float _3150 = (-0.0) - _2634;
                        float _3151 = (-0.0) - _2635;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _1000;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_940, _943, _946), vec3(_3156, _3157, _3158));
                        float _4511 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3191 = dot(vec3(_940, _943, _946), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4522 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4533 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4544 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2983 = (_3145 * _3093.x) + _3051;
                        _2984 = (_3145 * _3093.y) + _3052;
                        _2985 = (_3145 * _3093.z) + _3053;
                        _2980 = (_3226 * _3110.x) + _3048;
                        _2981 = (_3226 * _3110.y) + _3049;
                        _2982 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_61_pred = _2980;
                    frontier_phi_61_pred_1 = _2985;
                    frontier_phi_61_pred_2 = _2984;
                    frontier_phi_61_pred_3 = _2983;
                    frontier_phi_61_pred_4 = _2982;
                    frontier_phi_61_pred_5 = _2981;
                }
                _2781 = frontier_phi_61_pred;
                _2791 = frontier_phi_61_pred_1;
                _2789 = frontier_phi_61_pred_2;
                _2787 = frontier_phi_61_pred_3;
                _2785 = frontier_phi_61_pred_4;
                _2783 = frontier_phi_61_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2781;
                    _2925 = _2783;
                    _2926 = _2785;
                    _2927 = _2787;
                    _2928 = _2789;
                    _2929 = _2791;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
        }
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.z;
        uint _2797 = (_2795 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2797) & _2679) == 0u)
        {
            _2892 = _2780;
            _2894 = _2782;
            _2896 = _2784;
            _2898 = _2786;
            _2900 = _2788;
            _2902 = _2790;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
            float _2918 = _2917 * _2633;
            float _2919 = _2917 * _2634;
            float _2920 = _2917 * _2635;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2797 < ((_2795 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3031 = _2780;
                float _3032 = _2782;
                float _3033 = _2784;
                float _3034 = _2786;
                float _3035 = _2788;
                float _3036 = _2790;
                uint _3037 = _2797;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3047)
                    {
                        frontier_phi_67_pred = _3034;
                        frontier_phi_67_pred_1 = _3035;
                        frontier_phi_67_pred_2 = _3036;
                        frontier_phi_67_pred_3 = _3033;
                        frontier_phi_67_pred_4 = _3032;
                        frontier_phi_67_pred_5 = _3031;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        uint _3250 = _3046;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3334;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3261 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3261 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3261 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3261 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_2635, _3368.z, fma(_2634, _3368.y, _3368.x * _2633)) + _3368.w;
                            _3381 = !((fma(_2635, _3349.z, fma(_2634, _3349.y, _3349.x * _2633)) + _3349.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3276.x - _2633;
                                float _3409 = _3276.y - _2634;
                                float _3410 = _3276.z - _2635;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3277 * _3277));
                                float _4555 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3426 = sqrt(_3411) * _3292.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_940, _943, _946))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_2635, _3319.z, fma(_2634, _3319.y, _3319.x * _2633)) + _3319.w) / _3380;
                                float _3440 = (fma(_2635, _3334.z, fma(_2634, _3334.y, _3334.x * _2633)) + _3334.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4571 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _1000;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2918;
                                float _3470 = _3416 - _2919;
                                float _3471 = _3417 - _2920;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_940, _943, _946), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4582 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3483 = dot(vec3(_940, _943, _946), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4593 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_940, _943, _946), vec3(_3415, _3416, _3417))) + _3492;
                                float _4604 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4615 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3520 * _3304.x;
                                frontier_phi_73_pred_1 = _3520 * _3304.y;
                                frontier_phi_73_pred_2 = _3446 * _3292.z;
                                frontier_phi_73_pred_3 = _3446 * _3292.y;
                                frontier_phi_73_pred_4 = _3446 * _3292.x;
                                frontier_phi_73_pred_5 = _3520 * _3304.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_73_pred;
                            _3525 = frontier_phi_73_pred_1;
                            _3529 = frontier_phi_73_pred_2;
                            _3528 = frontier_phi_73_pred_3;
                            _3527 = frontier_phi_73_pred_4;
                            _3526 = frontier_phi_73_pred_5;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3234;
                        frontier_phi_67_pred_1 = _3235;
                        frontier_phi_67_pred_2 = _3236;
                        frontier_phi_67_pred_3 = _3233;
                        frontier_phi_67_pred_4 = _3232;
                        frontier_phi_67_pred_5 = _3231;
                    }
                    _2899 = frontier_phi_67_pred;
                    _2901 = frontier_phi_67_pred_1;
                    _2903 = frontier_phi_67_pred_2;
                    _2897 = frontier_phi_67_pred_3;
                    _2895 = frontier_phi_67_pred_4;
                    _2893 = frontier_phi_67_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2893;
                        _3032 = _2895;
                        _3033 = _2897;
                        _3034 = _2899;
                        _3035 = _2901;
                        _3036 = _2903;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2901;
                frontier_phi_55_56_ladder_1 = _2903;
                frontier_phi_55_56_ladder_2 = _2899;
                frontier_phi_55_56_ladder_3 = _2897;
                frontier_phi_55_56_ladder_4 = _2895;
                frontier_phi_55_56_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_55_56_ladder = _2788;
                frontier_phi_55_56_ladder_1 = _2790;
                frontier_phi_55_56_ladder_2 = _2786;
                frontier_phi_55_56_ladder_3 = _2784;
                frontier_phi_55_56_ladder_4 = _2782;
                frontier_phi_55_56_ladder_5 = _2780;
            }
            _2892 = frontier_phi_55_56_ladder_5;
            _2894 = frontier_phi_55_56_ladder_4;
            _2896 = frontier_phi_55_56_ladder_3;
            _2898 = frontier_phi_55_56_ladder_2;
            _2900 = frontier_phi_55_56_ladder;
            _2902 = frontier_phi_55_56_ladder_1;
        }
        float _2907 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _2692 = (_2907 * _2898) + _2147;
        _2694 = (_2907 * _2900) + _2149;
        _2696 = (_2907 * _2902) + _2151;
        _2698 = ((_2892 * 0.039999999105930328369140625) * _2907) + _2477;
        _2700 = ((_2894 * 0.039999999105930328369140625) * _2907) + _2479;
        _2702 = ((_2896 * 0.039999999105930328369140625) * _2907) + _2481;
    }
    else
    {
        _2692 = _2147;
        _2694 = _2149;
        _2696 = _2151;
        _2698 = _2477;
        _2700 = _2479;
        _2702 = _2481;
    }
    float _4631 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4642 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4653 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    uint _2722 = _273 + 6u;
    float _2730 = _921 / cbSceneParam._m0[86u].x;
    float _2731 = _922 / cbSceneParam._m0[86u].y;
    vec4 _2745 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2747 = _2745.x;
    float _2748 = _2745.y;
    float _2749 = _2745.z;
    float _2750 = _2745.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _2805 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _2806 = _2805 / _855;
        float _2817 = _2806 * _906;
        float _2818 = _907 * _2806;
        float _2819 = (-0.0) - _2818;
        float _2820 = _2806 * _908;
        float _2822 = (cbSceneParam._m0[77u].w * _2819) / _2805;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2818;
        float _2830 = sqrt(((_2817 * _2817) + (_2818 * _2818)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2805)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2993;
        if (abs((_2819 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2993 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2955 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _2993 = ((abs(_2830 / _2819) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2840 * _2964) - exp2(_2840 * _2965)) * _2953))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _2995 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, 1.0), 0.0);
        float _3004 = exp2((_2993 * (-1.44269502162933349609375)) * (1.0 - _2995.w));
        float _3005 = log2(_3004);
        float _3021 = log2(_2750);
        _2842 = (exp2(_3021 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].x)) * _2995.x) / cbSceneParam._m0[78u].x)) + _2747;
        _2844 = (exp2(_3021 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].y)) * _2995.y) / cbSceneParam._m0[78u].y)) + _2748;
        _2846 = (exp2(_3021 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].z)) * _2995.z) / cbSceneParam._m0[78u].z)) + _2749;
        _2848 = _3004 * _2750;
    }
    else
    {
        _2842 = _2747;
        _2844 = _2748;
        _2846 = _2749;
        _2848 = _2750;
    }
    float _2860 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2861 = _2860 == 3.0;
    float _2862 = log2(_2848);
    float _2869 = exp2(_2862 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2692 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _984))) + ((_2698 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2870 = exp2(_2862 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2694 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _984))) + ((_2700 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2862 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2696 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _984))) + ((_2702 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2880 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2880 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.y = _2880 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.z = _2880 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.w = cbInstanceData._m0[_2722].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2722].w;
}


