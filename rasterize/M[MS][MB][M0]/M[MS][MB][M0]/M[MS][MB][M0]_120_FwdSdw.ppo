#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1340;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3928 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3939 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3950 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3961 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _426) + _520;
    float _532 = ((((_499.x - _518) * _426) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _426) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3972 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    float _542 = _532 + ((((_472.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _543 = _533 + ((((_472.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _546 = fma(_539, _246, fma(_543, _253, _542 * _239));
    float _549 = fma(_539, _247, fma(_543, _254, _542 * _240));
    float _552 = fma(_539, _248, fma(_543, _255, _542 * _241));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _607 = ((_602 - _603) * cbMtdParam._m0[24u].z) + _603;
    float _609 = (cbMtdParam._m0[19u].x + dot(vec4(_556 * _546, _556 * _549, _556 * _552, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_607 * cbMtdParam._m0[21u].z);
    float _3983 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _612 = (-0.0) - cbMtdParam._m0[24u].y;
    float _614 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
    float _622 = _610 - ((_610 * TEXCOORD_8.x) * _615);
    float _623 = _610 - ((_610 * TEXCOORD_8.y) * _615);
    float _624 = _610 - ((_610 * TEXCOORD_8.z) * _615);
    float _631 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _635 = ((isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : min(_631, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _643 = (_635 - (((_607 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _635))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4014 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _648 = ((_622 * (cbMtdParam._m0[17u].x - _452)) * _644) + _452;
    float _649 = ((_623 * (cbMtdParam._m0[17u].y - _453)) * _644) + _453;
    float _650 = ((_624 * (cbMtdParam._m0[17u].z - _454)) * _644) + _454;
    vec4 _662 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _690 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4025 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _699 = ((((cbMtdParam._m0[10u].x - _648) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _691) + _648;
    float _700 = ((((cbMtdParam._m0[10u].y - _649) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _691) + _649;
    float _701 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _650)) * _691) + _650;
    float _706 = (((_472.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    vec4 _720 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _4036 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _738 = (((_720.z - _706) * _622) * _644) + _706;
    float _741 = ((cbMtdParam._m0[23u].y - _738) * _691) + _738;
    vec4 _760 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _766 = (_760.x * 2.0) + (-1.0);
    float _767 = (_760.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4047 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _788 = (((cbMtdParam._m0[21u].x * _542) + ((_727 - _542) * _622)) * _644) + _542;
    float _789 = (((cbMtdParam._m0[21u].x * _543) + ((_728 - _543) * _623)) * _644) + _543;
    float _790 = (((sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) - _539) * _624) * _644) + _539;
    float _801 = (((_766 - _788) + (_788 * cbMtdParam._m0[22u].z)) * _691) + _788;
    float _802 = (((_767 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _691) + _789;
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) - _790) * _691) + _790;
    float _805 = cbMtdParam._m0[22u].x + _572.w;
    float _808 = fma(_803, _246, fma(_802, _253, _801 * _239));
    float _811 = fma(_803, _247, fma(_802, _254, _801 * _240));
    float _814 = fma(_803, _248, fma(_802, _255, _801 * _241));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _4058 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _822 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4080 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4091 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4102 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _928 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _931 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _945 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_945].z;
    float _4113 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _969 = ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * TEXCOORD_5.w) * _965.x;
    float _970 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _973 = _970 * 2.0;
    float _977 = (_973 * _819) - _898;
    float _978 = (_973 * _820) - _899;
    float _979 = (_973 * _821) - _900;
    float _983 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _4146 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _985 = sqrt(_822);
    float _998 = exp2((_985 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_985 * 3.0));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1339;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1064 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1068 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1072 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1097 = _1030 + _819;
        float _1098 = _1034 + _820;
        float _1099 = _1038 + _821;
        float _1109 = fma(_1099, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097)) - _1064;
        float _1110 = fma(_1099, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097)) - _1068;
        float _1111 = fma(_1099, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097)) - _1072;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1064 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1068 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[34u].z) + ((((((_1072 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1167 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1133.x + (-0.5));
        float _1169 = _1167 * (_1133.y + (-0.5));
        float _1170 = _1167 * (_1133.z + (-0.5));
        float _1177 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1140.x + (-0.5));
        float _1179 = _1177 * (_1140.y + (-0.5));
        float _1180 = _1177 * (_1140.z + (-0.5));
        float _1187 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1147.x + (-0.5));
        float _1189 = _1187 * (_1147.y + (-0.5));
        float _1190 = _1187 * (_1147.z + (-0.5));
        float _1197 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1154.x + (-0.5));
        float _1199 = _1197 * (_1154.y + (-0.5));
        float _1200 = _1197 * (_1154.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1221 = (dot(vec3(_819, _820, _821), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1231 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4194 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1233 + 1.0))) + _1238) * _1201;
        float _1248 = _1169 * 0.5;
        float _1249 = _1179 * 0.5;
        float _1250 = _1189 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_819, _820, _821), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4227 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1275 + 1.0))) + _1280) * _1202;
        float _1290 = _1170 * 0.5;
        float _1291 = _1180 * 0.5;
        float _1292 = _1190 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_819, _820, _821), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4260 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1317 + 1.0))) + _1322) * _1203;
        _1339 = _1170;
        _1341 = _1169;
        _1342 = _1168;
        _1343 = _1180;
        _1344 = _1179;
        _1345 = _1178;
        _1346 = _1190;
        _1347 = _1189;
        _1348 = _1188;
        _1349 = _1203;
        _1350 = _1202;
        _1351 = _1201;
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1340;
        _1341 = _1340;
        _1342 = _1340;
        _1343 = _1340;
        _1344 = _1340;
        _1345 = _1340;
        _1346 = _1340;
        _1347 = _1340;
        _1348 = _1340;
        _1349 = _1340;
        _1350 = _1340;
        _1351 = _1340;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1383 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1387 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1410 = _1030 + _819;
        float _1411 = _1034 + _820;
        float _1412 = _1038 + _821;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_819, _820, _821), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4323 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_819, _820, _821), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4356 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_819, _820, _821), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4389 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1340;
        _1649 = _1340;
        _1650 = _1340;
        _1651 = _1340;
        _1652 = _1340;
        _1653 = _1340;
        _1654 = _1340;
        _1655 = _1340;
        _1656 = _1340;
        _1657 = _1340;
        _1658 = _1340;
        _1659 = _1340;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1352)) + _1352;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1353)) + _1353;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1354)) + _1354;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _977 * 0.5;
    float _1717 = _978 * 0.5;
    float _1718 = _979 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1339, _1343, _1346, _1349));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_979, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977));
        float _1847 = fma(_979, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977));
        float _1850 = fma(_979, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1878 = frontier_phi_14_12_ladder;
        }
        float _2048;
        if (_1847 > 0.0)
        {
            _2048 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2048 = frontier_phi_23_19_ladder;
        }
        float _2343;
        if (_1850 > 0.0)
        {
            _2343 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2343 = frontier_phi_35_30_ladder;
        }
        float _2345 = isnan(_2048) ? _1878 : (isnan(_1878) ? _2048 : min(_1878, _2048));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1844) + _1833;
        float _2351 = (_2346 * _1847) + _1837;
        float _2352 = (_2346 * _1850) + _1841;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_13_35_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_13_35_ladder_2;
        _1868 = frontier_phi_13_35_ladder_1;
        _1870 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_977, _978, _979), _1785);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_979, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977));
        float _1943 = fma(_979, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977));
        float _1946 = fma(_979, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977));
        float _2053;
        if (_1940 > 0.0)
        {
            _2053 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2053 = frontier_phi_25_21_ladder;
        }
        float _2370;
        if (_1943 > 0.0)
        {
            _2370 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2370 = frontier_phi_37_32_ladder;
        }
        float _2697;
        if (_1946 > 0.0)
        {
            _2697 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2697 = frontier_phi_47_44_ladder;
        }
        float _2699 = isnan(_2370) ? _2053 : (isnan(_2053) ? _2370 : min(_2053, _2370));
        float _2700 = isnan(_2697) ? _2699 : (isnan(_2699) ? _2697 : min(_2699, _2697));
        float _2704 = (_2700 * _1940) + _1929;
        float _2705 = (_2700 * _1943) + _1933;
        float _2706 = (_2700 * _1946) + _1937;
        float _2707 = _2700 * 9.9999997473787516355514526367188e-05;
        float _2708 = (-1.0) - _2707;
        float _2710 = _2707 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2706 > _2710) || ((_2706 < _2708) || ((_2705 > _2710) || ((_2705 < _2708) || ((_2704 < _2708) || (_2704 > _2710))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2706, cbModelParam._m0[17u].z, fma(_2705, cbModelParam._m0[17u].y, _2704 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2706, cbModelParam._m0[18u].z, fma(_2705, cbModelParam._m0[18u].y, _2704 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2706, cbModelParam._m0[19u].z, fma(_2705, cbModelParam._m0[19u].y, _2704 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_22_47_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_22_47_ladder_2;
        _1967 = frontier_phi_22_47_ladder_1;
        _1969 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_977, _978, _979), _1875);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1981 = ((((1.0 - _998) * ((_985 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_998 * _985)) * _969;
    float _1982 = _1981 * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1983 = _1981 * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1984 = _1981 * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2040 = _2027 / _2039;
    float _2041 = _2031 / _2039;
    float _2042 = _2035 / _2039;
    float _2189;
    float _2190;
    float _2191;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2069 = ((uint(_2042 > cbSceneParam._m0[59u].y) + uint(_2042 > cbSceneParam._m0[59u].x)) + uint(_2042 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2070 = _2069 + 43u;
        uint _2078 = _2069 + 44u;
        uint _2086 = _2069 + 45u;
        uint _2094 = _2069 + 46u;
        float _2105 = fma(_2039, cbSceneParam._m0[_2070].w, fma(_2035, cbSceneParam._m0[_2070].z, fma(_2031, cbSceneParam._m0[_2070].y, _2027 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2039, cbSceneParam._m0[_2078].w, fma(_2035, cbSceneParam._m0[_2078].z, fma(_2031, cbSceneParam._m0[_2078].y, _2027 * cbSceneParam._m0[_2078].x)));
        float _2117 = fma(_2039, cbSceneParam._m0[_2094].w, fma(_2035, cbSceneParam._m0[_2094].z, fma(_2031, cbSceneParam._m0[_2094].y, _2027 * cbSceneParam._m0[_2094].x)));
        float _2122 = cbSceneParam._m0[33u].z * _2117;
        float _2124 = cbSceneParam._m0[33u].w * _2117;
        float _2127 = fma(_2039, cbSceneParam._m0[_2086].w, fma(_2035, cbSceneParam._m0[_2086].z, fma(_2031, cbSceneParam._m0[_2086].y, _2027 * cbSceneParam._m0[_2086].x))) / _2117;
        float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
        float _4515 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2182 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2105) / _2117, (_2124 + _2109) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2105) / _2117, (_2109 - _2122) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2122) / _2117, (_2109 - _2124) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2124) / _2117, (_2122 + _2109) / _2117), _2127), 0.0)).x), vec4(0.25)));
        _2189 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
        _2190 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
        _2191 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2189 = 1.0;
        _2190 = 1.0;
        _2191 = 1.0;
    }
    float _2255;
    float _2257;
    float _2259;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2243 = fma(_2039, cbSceneParam._m0[63u].w, fma(_2035, cbSceneParam._m0[63u].z, fma(_2031, cbSceneParam._m0[63u].y, _2027 * cbSceneParam._m0[63u].x)));
        float _2244 = fma(_2039, cbSceneParam._m0[60u].w, fma(_2035, cbSceneParam._m0[60u].z, fma(_2031, cbSceneParam._m0[60u].y, _2027 * cbSceneParam._m0[60u].x))) / _2243;
        float _2245 = fma(_2039, cbSceneParam._m0[61u].w, fma(_2035, cbSceneParam._m0[61u].z, fma(_2031, cbSceneParam._m0[61u].y, _2027 * cbSceneParam._m0[61u].x))) / _2243;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2244 >= cbSceneParam._m0[64u].x) && (_2245 >= cbSceneParam._m0[64u].y)) && (_2244 <= cbSceneParam._m0[64u].z)) && (_2245 <= cbSceneParam._m0[64u].w))
        {
            float _2383 = fma(_2039, cbSceneParam._m0[62u].w, fma(_2035, cbSceneParam._m0[62u].z, fma(_2031, cbSceneParam._m0[62u].y, _2027 * cbSceneParam._m0[62u].x))) / _2243;
            float _2387 = isnan(cbSceneParam._m0[41u].w) ? _2383 : (isnan(_2383) ? cbSceneParam._m0[41u].w : max(_2383, cbSceneParam._m0[41u].w));
            float _2430 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
            float _4531 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
            float _2437 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2244, cbSceneParam._m0[33u].w + _2245), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2244, _2245 - cbSceneParam._m0[33u].z), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].z, _2245 - cbSceneParam._m0[33u].w), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2245), _2387), 0.0)).x), vec4(0.25)));
            float _2441 = 1.0 - (_2437 * cbSceneParam._m0[34u].x);
            float _2442 = 1.0 - (_2437 * cbSceneParam._m0[34u].y);
            float _2443 = 1.0 - (_2437 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_34_33_ladder_1 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_34_33_ladder_2 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
        }
        else
        {
            frontier_phi_34_33_ladder = _2191;
            frontier_phi_34_33_ladder_1 = _2190;
            frontier_phi_34_33_ladder_2 = _2189;
        }
        _2255 = frontier_phi_34_33_ladder_2;
        _2257 = frontier_phi_34_33_ladder_1;
        _2259 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2255 = _2189;
        _2257 = _2190;
        _2259 = _2191;
    }
    uvec4 _2264 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2266 = _2264.x * 14u;
    uint _2267 = _2266 + 13u;
    float _2274 = _969 + (-1.0);
    float _2279 = (cbLight._m0[_2267].x * _2274) + 1.0;
    float _2280 = (cbLight._m0[_2267].y * _2274) + 1.0;
    float _2281 = (cbLight._m0[_2267].z * _2274) + 1.0;
    float _2282 = (cbLight._m0[_2267].w * _2274) + 1.0;
    uint _2283 = _2266 + 5u;
    float _2289 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2293 = _2266 + 4u;
    float _2302 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2306 = _2266 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_819, _820, _821));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_819, _820, _821));
    float _4567 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4578 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2283].x * _2289) * _2327) + (((cbLight._m0[_2293].x * _2255) * _2302) * _2325);
    float _2335 = ((_2289 * cbLight._m0[_2283].y) * _2327) + (((cbLight._m0[_2293].y * _2257) * _2302) * _2325);
    float _2336 = ((_2289 * cbLight._m0[_2283].z) * _2327) + (((cbLight._m0[_2293].z * _2259) * _2302) * _2325);
    uvec4 _2340 = floatBitsToUint(cbLight._m0[_2266 + 12u]);
    bool _2342 = _2340.x == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2342)
    {
        _2444 = _2334;
        _2446 = _2335;
        _2448 = _2336;
    }
    else
    {
        uint _2452 = _2266 + 6u;
        float _2468 = (dot(vec3(cbLight._m0[_2266 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4589 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2471 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2444 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2334;
        _2446 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2335;
        _2448 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2336;
    }
    bool _2451 = _2340.y == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2451)
    {
        _2506 = _2444;
        _2508 = _2446;
        _2510 = _2448;
    }
    else
    {
        uint _2668 = _2266 + 7u;
        float _2684 = (dot(vec3(cbLight._m0[_2266 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2685 = _2684 * _2684;
        float _4605 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2686 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2687 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2506 = (((cbLight._m0[_2668].x * 0.3183098733425140380859375) * _2686) * _2687) + _2444;
        _2508 = (((cbLight._m0[_2668].y * 0.3183098733425140380859375) * _2686) * _2687) + _2446;
        _2510 = (((cbLight._m0[_2668].z * 0.3183098733425140380859375) * _2686) * _2687) + _2448;
    }
    uint _2513 = _2266 + 8u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _822) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2266].x + _898;
    float _2529 = cbLight._m0[_2266].y + _899;
    float _2530 = cbLight._m0[_2266].z + _900;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2266].xyz));
    float _4621 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _4632 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _2542 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2543 = dot(vec3(_819, _820, _821), vec3(_2535, _2536, _2537));
    float _4643 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2535, _2536, _2537));
    float _4654 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2527 * _2527;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2566 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2567 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2542 * ((_2541 * _2567) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2567) + _2527) * _2541))) * _2541;
    float _4665 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    uint _2594 = _2266 + 9u;
    float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _822) * 0.949999988079071044921875);
    float _2606 = _2605 * _2605;
    float _2607 = cbLight._m0[_2306].x + _898;
    float _2608 = cbLight._m0[_2306].y + _899;
    float _2609 = cbLight._m0[_2306].z + _900;
    float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
    float _2614 = _2613 * _2607;
    float _2615 = _2613 * _2608;
    float _2616 = _2613 * _2609;
    float _2617 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2306].xyz));
    float _4676 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2621 = dot(vec3(_819, _820, _821), vec3(_2614, _2615, _2616));
    float _4687 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2614, _2615, _2616));
    float _4698 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2606 * _2606;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2643 = 1.0 - _2606;
    float _2653 = (0.5 / (((_2542 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2643) + _2606) * _2620))) * _2620;
    float _4709 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    float _2665 = (((_2642 * cbLight._m0[_2594].x) * _2655) * _2289) + ((((cbLight._m0[_2513].x * _2255) * _2566) * _2580) * _2302);
    float _2666 = (((_2642 * cbLight._m0[_2594].y) * _2655) * _2289) + ((((cbLight._m0[_2513].y * _2257) * _2566) * _2580) * _2302);
    float _2667 = (((_2642 * cbLight._m0[_2594].z) * _2655) * _2289) + ((((cbLight._m0[_2513].z * _2259) * _2566) * _2580) * _2302);
    float _2723;
    float _2725;
    float _2727;
    if (_2342)
    {
        _2723 = _2665;
        _2725 = _2666;
        _2727 = _2667;
    }
    else
    {
        uint _2729 = _2266 + 2u;
        uint _2733 = _2266 + 10u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _822) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _898;
        float _2750 = cbLight._m0[_2729].y + _899;
        float _2751 = cbLight._m0[_2729].z + _900;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2729].xyz));
        float _4720 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2763 = dot(vec3(_819, _820, _821), vec3(_2756, _2757, _2758));
        float _4731 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4742 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2784 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2785 = 1.0 - _2748;
        float _2795 = (0.5 / (((_2542 * ((_2762 * _2785) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2785) + _2748) * _2762))) * _2762;
        float _4753 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2723 = (((_2784 * cbLight._m0[_2733].x) * _2797) * _2798) + _2665;
        _2725 = (((_2784 * cbLight._m0[_2733].y) * _2797) * _2798) + _2666;
        _2727 = (((_2784 * cbLight._m0[_2733].z) * _2797) * _2798) + _2667;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2451)
    {
        _2829 = _2723;
        _2831 = _2725;
        _2833 = _2727;
    }
    else
    {
        uint _2840 = _2266 + 3u;
        uint _2844 = _2266 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _822) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _898;
        float _2861 = cbLight._m0[_2840].y + _899;
        float _2862 = cbLight._m0[_2840].z + _900;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2840].xyz));
        float _4769 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2874 = dot(vec3(_819, _820, _821), vec3(_2867, _2868, _2869));
        float _4780 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4791 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2895 = (exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2896 = 1.0 - _2859;
        float _2906 = (0.5 / (((_2542 * ((_2873 * _2896) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2896) + _2859) * _2873))) * _2873;
        float _4802 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2829 = (((_2895 * cbLight._m0[_2844].x) * _2908) * _2909) + _2723;
        _2831 = (((_2895 * cbLight._m0[_2844].y) * _2908) * _2909) + _2725;
        _2833 = (((_2895 * cbLight._m0[_2844].z) * _2908) * _2909) + _2727;
    }
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_2264.y == 0u)
    {
        uvec4 _2930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2931 = _2930.x;
        uint _2942 = uint((float(_2930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2931))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2931)));
        float _2952 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2953 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        uint _2956 = uint(isnan(14.0) ? _2953 : (isnan(_2953) ? 14.0 : min(_2953, 14.0)));
        uvec4 _2961 = texelFetch(g_lightClusterGridBuffer, int(((_2956 << 2u) + (_2942 << 6u)) >> 2u));
        uint _2962 = _2961.x;
        uint _2963 = _2930.z;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((((1u << ((_2963 >> 4u) & 15u)) + 4294967295u) & _2962) == 0u) || ((_2963 & 240u) == 0u))
        {
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
        }
        else
        {
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3202)
                {
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3190;
                    frontier_phi_66_pred_2 = _3189;
                    frontier_phi_66_pred_3 = _3188;
                    frontier_phi_66_pred_4 = _3187;
                    frontier_phi_66_pred_5 = _3186;
                }
                else
                {
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    uint _3316;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3201;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    for (;;)
                    {
                        uint _3320 = uint(findLSB(_3316)) + (_3192 << 5u);
                        uint _3317 = (_3316 + 4294967295u) & _3316;
                        uint _3322 = _3320 * 48u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3342 = (_3320 * 48u) + 4u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3361 = (_3320 * 48u) + 8u;
                        vec3 _3372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x));
                        float _3376 = _3336.x - _2040;
                        float _3377 = _3336.y - _2041;
                        float _3378 = _3336.z - _2042;
                        float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                        float _3382 = inversesqrt(_3379);
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3386 = dot(vec3(_925, _928, _931), vec3(_3383, _3384, _3385));
                        float _3391 = 1.0 - (_3379 * _3336.w);
                        float _4828 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3393 = sqrt(_3379) * _3355.w;
                        float _3396 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3386) + _3397;
                        float _3403 = _3393 * _3393;
                        float _3407 = ((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3392) / ((_3403 * 0.699999988079071044921875) + 1.0);
                        float _3411 = (-0.0) - _2040;
                        float _3412 = (-0.0) - _2041;
                        float _3413 = (-0.0) - _2042;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3427 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                        float _3428 = 1.0 - _985;
                        float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                        float _3436 = _3435 * _3435;
                        float _3437 = _3436 * _3436;
                        float _3438 = _3418 + _3383;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                        float _3448 = dot(vec3(_925, _928, _931), vec3(_3418, _3419, _3420));
                        float _4844 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3452 = dot(vec3(_925, _928, _931), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                        float _4855 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                        float _3460 = _3396 * _3436;
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3386) + _3461;
                        float _4866 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3466 = 1.0 - _3436;
                        float _3476 = (0.5 / (((_3465 * ((_3451 * _3466) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3436) * _3451))) * _3465;
                        float _4877 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3487 = (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3459 * _3459) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125))) * _3392;
                        _3245 = (_3407 * _3355.x) + _3313;
                        _3246 = (_3407 * _3355.y) + _3314;
                        _3247 = (_3407 * _3355.z) + _3315;
                        _3242 = (_3487 * _3372.x) + _3310;
                        _3243 = (_3487 * _3372.y) + _3311;
                        _3244 = (_3487 * _3372.z) + _3312;
                        if (_3317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3317;
                        }
                    }
                    frontier_phi_66_pred = _3247;
                    frontier_phi_66_pred_1 = _3246;
                    frontier_phi_66_pred_2 = _3245;
                    frontier_phi_66_pred_3 = _3244;
                    frontier_phi_66_pred_4 = _3243;
                    frontier_phi_66_pred_5 = _3242;
                }
                _3053 = frontier_phi_66_pred;
                _3051 = frontier_phi_66_pred_1;
                _3049 = frontier_phi_66_pred_2;
                _3047 = frontier_phi_66_pred_3;
                _3045 = frontier_phi_66_pred_4;
                _3043 = frontier_phi_66_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _3043;
                    _3187 = _3045;
                    _3188 = _3047;
                    _3189 = _3049;
                    _3190 = _3051;
                    _3191 = _3053;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
        }
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.z;
        uint _3059 = (_3057 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _3059) & _2962) == 0u)
        {
            _3154 = _3042;
            _3156 = _3044;
            _3158 = _3046;
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float _3180 = _3179 * _2040;
            float _3181 = _3179 * _2041;
            float _3182 = _3179 * _2042;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3059 < ((_3057 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3293 = _3042;
                float _3294 = _3044;
                float _3295 = _3046;
                float _3296 = _3048;
                float _3297 = _3050;
                float _3298 = _3052;
                uint _3299 = _3059;
                uint _3308;
                bool _3309;
                for (;;)
                {
                    _3308 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3299 << 2u)) >> 2u)).x;
                    _3309 = _3308 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3309)
                    {
                        frontier_phi_72_pred = _3298;
                        frontier_phi_72_pred_1 = _3297;
                        frontier_phi_72_pred_2 = _3296;
                        frontier_phi_72_pred_3 = _3295;
                        frontier_phi_72_pred_4 = _3294;
                        frontier_phi_72_pred_5 = _3293;
                    }
                    else
                    {
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        uint _3511 = _3308;
                        uint _3512;
                        vec4 _3537;
                        float _3538;
                        vec4 _3553;
                        vec3 _3565;
                        vec4 _3580;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3522 = ((_3299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3511));
                            _3512 = (_3511 + 4294967295u) & _3511;
                            uint _3524 = _3522 * 40u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3538 = _3537.w;
                            uint _3540 = (_3522 * 40u) + 4u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3522 * 40u) + 8u;
                            _3565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x));
                            uint _3567 = (_3522 * 40u) + 16u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3522 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3522 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3522 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2042, _3629.z, fma(_2041, _3629.y, _3629.x * _2040)) + _3629.w;
                            _3642 = !((fma(_2042, _3610.z, fma(_2041, _3610.y, _3610.x * _2040)) + _3610.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3537.x - _2040;
                                float _3670 = _3537.y - _2041;
                                float _3671 = _3537.z - _2042;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3538 * _3538));
                                float _4888 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3687 = sqrt(_3672) * _3553.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_925, _928, _931))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2042, _3580.z, fma(_2041, _3580.y, _3580.x * _2040)) + _3580.w) / _3641;
                                float _3701 = (fma(_2042, _3595.z, fma(_2041, _3595.y, _3595.x * _2040)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4904 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _985;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3180;
                                float _3731 = _3677 - _3181;
                                float _3732 = _3678 - _3182;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_925, _928, _931), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _4915 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3744 = dot(vec3(_925, _928, _931), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4926 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_925, _928, _931), vec3(_3676, _3677, _3678))) + _3753;
                                float _4937 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4948 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3707 * _3553.y;
                                frontier_phi_78_pred_1 = _3707 * _3553.x;
                                frontier_phi_78_pred_2 = _3781 * _3565.z;
                                frontier_phi_78_pred_3 = _3781 * _3565.y;
                                frontier_phi_78_pred_4 = _3781 * _3565.x;
                                frontier_phi_78_pred_5 = _3707 * _3553.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_78_pred;
                            _3788 = frontier_phi_78_pred_1;
                            _3787 = frontier_phi_78_pred_2;
                            _3786 = frontier_phi_78_pred_3;
                            _3785 = frontier_phi_78_pred_4;
                            _3790 = frontier_phi_78_pred_5;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            if (_3512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3512;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3497;
                        frontier_phi_72_pred_1 = _3496;
                        frontier_phi_72_pred_2 = _3495;
                        frontier_phi_72_pred_3 = _3494;
                        frontier_phi_72_pred_4 = _3493;
                        frontier_phi_72_pred_5 = _3492;
                    }
                    _3165 = frontier_phi_72_pred;
                    _3163 = frontier_phi_72_pred_1;
                    _3161 = frontier_phi_72_pred_2;
                    _3159 = frontier_phi_72_pred_3;
                    _3157 = frontier_phi_72_pred_4;
                    _3155 = frontier_phi_72_pred_5;
                    uint _3300 = _3299 + 1u;
                    if (_3300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3293 = _3155;
                        _3294 = _3157;
                        _3295 = _3159;
                        _3296 = _3161;
                        _3297 = _3163;
                        _3298 = _3165;
                        _3299 = _3300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3165;
                frontier_phi_60_61_ladder_1 = _3163;
                frontier_phi_60_61_ladder_2 = _3159;
                frontier_phi_60_61_ladder_3 = _3157;
                frontier_phi_60_61_ladder_4 = _3155;
                frontier_phi_60_61_ladder_5 = _3161;
            }
            else
            {
                frontier_phi_60_61_ladder = _3052;
                frontier_phi_60_61_ladder_1 = _3050;
                frontier_phi_60_61_ladder_2 = _3046;
                frontier_phi_60_61_ladder_3 = _3044;
                frontier_phi_60_61_ladder_4 = _3042;
                frontier_phi_60_61_ladder_5 = _3048;
            }
            _3154 = frontier_phi_60_61_ladder_4;
            _3156 = frontier_phi_60_61_ladder_3;
            _3158 = frontier_phi_60_61_ladder_2;
            _3160 = frontier_phi_60_61_ladder_5;
            _3162 = frontier_phi_60_61_ladder_1;
            _3164 = frontier_phi_60_61_ladder;
        }
        float _3169 = isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0));
        _2975 = (_3169 * _3160) + _2506;
        _2977 = (_3169 * _3162) + _2508;
        _2979 = (_3169 * _3164) + _2510;
        _2981 = ((_3154 * 0.039999999105930328369140625) * _3169) + _2829;
        _2983 = ((_3156 * 0.039999999105930328369140625) * _3169) + _2831;
        _2985 = ((_3158 * 0.039999999105930328369140625) * _3169) + _2833;
    }
    else
    {
        _2975 = _2506;
        _2977 = _2508;
        _2979 = _2510;
        _2981 = _2829;
        _2983 = _2831;
        _2985 = _2833;
    }
    float _4964 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4975 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4986 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    uint _3005 = _277 + 6u;
    float _3013 = _906 / cbSceneParam._m0[86u].x;
    float _3014 = _907 / cbSceneParam._m0[86u].y;
    vec4 _3028 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3030 = _3028.x;
    float _3031 = _3028.y;
    float _3032 = _3028.z;
    float _3033 = _3028.w;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _3067 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _3068 = _3067 / _840;
        float _3079 = _3068 * _891;
        float _3080 = _892 * _3068;
        float _3081 = (-0.0) - _3080;
        float _3082 = _3068 * _893;
        float _3084 = (cbSceneParam._m0[77u].w * _3081) / _3067;
        float _3085 = _3084 + cbSceneParam._m0[79u].w;
        float _3086 = cbSceneParam._m0[79u].w - _3080;
        float _3092 = sqrt(((_3079 * _3079) + (_3080 * _3080)) + (_3082 * _3082));
        float _3095 = (1.0 - (cbSceneParam._m0[77u].w / _3067)) * _3092;
        float _3100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3102 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3255;
        if (abs((_3081 - _3084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3255 = ((((_3085 > 0.0) ? exp2(_3100 * _3085) : (2.0 - exp2(_3102 * _3085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3095;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : max(_3085, _3086));
            float _3217 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : min(_3085, _3086));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3255 = ((abs(_3092 / _3081) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3100 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3100 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3102 * _3226) - exp2(_3102 * _3227)) * _3215))) + (_3095 * cbSceneParam._m0[80u].z);
        }
        vec4 _3257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, 1.0), 0.0);
        float _3266 = exp2((_3255 * (-1.44269502162933349609375)) * (1.0 - _3257.w));
        float _3267 = log2(_3266);
        float _3283 = log2(_3033);
        _3104 = (exp2(_3283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].x)) * _3257.x) / cbSceneParam._m0[78u].x)) + _3030;
        _3106 = (exp2(_3283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].y)) * _3257.y) / cbSceneParam._m0[78u].y)) + _3031;
        _3108 = (exp2(_3283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].z)) * _3257.z) / cbSceneParam._m0[78u].z)) + _3032;
        _3110 = _3266 * _3033;
    }
    else
    {
        _3104 = _3030;
        _3106 = _3031;
        _3108 = _3032;
        _3110 = _3033;
    }
    float _3122 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3123 = _3122 == 3.0;
    float _3124 = log2(_3110);
    float _3131 = exp2(_3124 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2975 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _969))) + ((_2981 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3132 = exp2(_3124 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2977 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _969))) + ((_2983 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3133 = exp2(_3124 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2979 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _969))) + ((_2985 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3142 = (_3122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3142 * (_3123 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.y = _3142 * (_3123 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.z = _3142 * (_3123 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.w = cbInstanceData._m0[_3005].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3005].w;
}


