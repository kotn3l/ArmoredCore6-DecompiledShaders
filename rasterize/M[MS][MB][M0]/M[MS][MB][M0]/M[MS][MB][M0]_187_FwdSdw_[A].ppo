#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1344;
float _3986;
float _3987;
float _3988;
float _3989;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _375 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _375) * cbMtdParam._m0[24u].x) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3998 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _400 = (_393 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _401 = (_393 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _402 = (_393 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].x) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4009 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _521 = ((_493.x - _512) * _393) + _512;
    float _522 = ((_493.y - _513) * _393) + _513;
    float _523 = ((_493.z - _514) * _393) + _514;
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _548 = ((_535.z - _523) * _466) + _523;
    float _551 = ((((_535.x - _521) * _466) + _521) * 2.0) + (-1.0);
    float _553 = ((((_535.y - _522) * _466) + _522) * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _4020 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))));
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _599 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _602 = ((isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : min(_599, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _611 = (_602 - ((((((_592 - _593) * cbMtdParam._m0[24u].z) + _593) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _602))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4041 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _619 = (_612 * (cbMtdParam._m0[17u].x - _473)) + _473;
    float _620 = (_612 * (cbMtdParam._m0[17u].y - _474)) + _474;
    float _621 = (_612 * (cbMtdParam._m0[17u].z - _475)) + _475;
    vec4 _633 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _663 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_635 - _636) * cbMtdParam._m0[24u].w) + _636) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4052 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _672 = ((((cbMtdParam._m0[10u].x - _619) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _664) + _619;
    float _673 = ((((cbMtdParam._m0[10u].y - _620) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _664) + _620;
    float _674 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _621)) * _664) + _621;
    vec4 _688 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4063 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _705 = (_612 * (_688.z - _548)) + _548;
    float _708 = ((cbMtdParam._m0[23u].y - _705) * _664) + _705;
    vec4 _727 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _733 = (_727.x * 2.0) + (-1.0);
    float _734 = (_727.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4074 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _752 = (((_695 - _551) + (cbMtdParam._m0[21u].x * _551)) * _612) + _551;
    float _753 = (((_696 - _553) + (cbMtdParam._m0[21u].x * _553)) * _612) + _553;
    float _754 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) - _559)) + _559;
    float _765 = (((_733 - _752) + (_752 * cbMtdParam._m0[22u].z)) * _664) + _752;
    float _766 = (((_734 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _664) + _753;
    float _767 = ((sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) - _754) * _664) + _754;
    float _769 = cbMtdParam._m0[22u].x + _572.w;
    float _772 = fma(_767, _244 * NORMAL.x, fma(_766, _251 * TANGENT.x, (_237 * _229) * _765));
    float _775 = fma(_767, _244 * NORMAL.y, fma(_766, _251 * TANGENT.y, (_237 * _230) * _765));
    float _778 = fma(_767, _244 * NORMAL.z, fma(_766, _251 * TANGENT.z, (_237 * _231) * _765));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _4085 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _786 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4107 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4118 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4129 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1025 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1031 = (cbMatDynParam._m0[5u].x * _1025) + cbMatDynParam._m0[5u].y;
        float _4140 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1036 = (cbMatDynParam._m0[5u].z * _1025) + cbMatDynParam._m0[5u].w;
        float _4151 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) - _1032)) + _1032) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _904 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _907 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _920 = _257 + 9u;
    uint _921 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4162 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _945 = ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_783, _784, _785), vec3(_862, _863, _864));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _783) - _862;
    float _954 = (_949 * _784) - _863;
    float _955 = (_949 * _785) - _864;
    float _959 = abs(dot(vec3(_862, _863, _864), vec3(_783, _784, _785)));
    float _4195 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_786);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1072 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1076 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1101 = _1006 + _783;
        float _1102 = _1010 + _784;
        float _1103 = _1014 + _785;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1068;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1072;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1076;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_783, _784, _785), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4243 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_783, _784, _785), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4276 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_783, _784, _785), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4309 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1389 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1393 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1416 = _1006 + _783;
        float _1417 = _1010 + _784;
        float _1418 = _1014 + _785;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_783, _784, _785), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4372 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_783, _784, _785), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4405 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_783, _784, _785), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4438 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1344;
        _1655 = _1344;
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = _1344;
        _1665 = _1344;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1356)) + _1356;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1357)) + _1357;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1358)) + _1358;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _953 * 0.5;
    float _1723 = _954 * 0.5;
    float _1724 = _955 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1839 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1843 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1847 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1850 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1853 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1856 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1884;
        if (_1850 > 0.0)
        {
            _1884 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1884 = frontier_phi_17_15_ladder;
        }
        float _2054;
        if (_1853 > 0.0)
        {
            _2054 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2054 = frontier_phi_26_22_ladder;
        }
        float _2349;
        if (_1856 > 0.0)
        {
            _2349 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2349 = frontier_phi_38_33_ladder;
        }
        float _2351 = isnan(_2054) ? _1884 : (isnan(_1884) ? _2054 : min(_1884, _2054));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1850) + _1839;
        float _2357 = (_2352 * _1853) + _1843;
        float _2358 = (_2352 * _1856) + _1847;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_16_38_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1872 = frontier_phi_16_38_ladder_2;
        _1874 = frontier_phi_16_38_ladder_1;
        _1876 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1791);
        _1872 = _1860.x * cbModelParam._m0[1u].y;
        _1874 = _1860.y * cbModelParam._m0[1u].y;
        _1876 = _1860.z * cbModelParam._m0[1u].y;
    }
    float _1880 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1880 : min(cbModelParam._m0[25u].w, _1880));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1935 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1939 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1943 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1946 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1949 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1952 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2059;
        if (_1946 > 0.0)
        {
            _2059 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2059 = frontier_phi_28_24_ladder;
        }
        float _2376;
        if (_1949 > 0.0)
        {
            _2376 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2376 = frontier_phi_40_35_ladder;
        }
        float _2703;
        if (_1952 > 0.0)
        {
            _2703 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2703 = frontier_phi_50_47_ladder;
        }
        float _2705 = isnan(_2376) ? _2059 : (isnan(_2059) ? _2376 : min(_2059, _2376));
        float _2706 = isnan(_2703) ? _2705 : (isnan(_2705) ? _2703 : min(_2705, _2703));
        float _2710 = (_2706 * _1946) + _1935;
        float _2711 = (_2706 * _1949) + _1939;
        float _2712 = (_2706 * _1952) + _1943;
        float _2713 = _2706 * 9.9999997473787516355514526367188e-05;
        float _2714 = (-1.0) - _2713;
        float _2716 = _2713 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2712 > _2716) || ((_2712 < _2714) || ((_2711 > _2716) || ((_2711 < _2714) || ((_2710 < _2714) || (_2710 > _2716))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2712, cbModelParam._m0[17u].z, fma(_2711, cbModelParam._m0[17u].y, _2710 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2712, cbModelParam._m0[18u].z, fma(_2711, cbModelParam._m0[18u].y, _2710 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2712, cbModelParam._m0[19u].z, fma(_2711, cbModelParam._m0[19u].y, _2710 * cbModelParam._m0[19u].x))), _1881);
            frontier_phi_25_50_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _1971 = frontier_phi_25_50_ladder_2;
        _1973 = frontier_phi_25_50_ladder_1;
        _1975 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1881);
        _1971 = _1955.x * cbModelParam._m0[1u].z;
        _1973 = _1955.y * cbModelParam._m0[1u].z;
        _1975 = _1955.z * cbModelParam._m0[1u].z;
    }
    float _1987 = ((((1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_974 * _961)) * _945;
    float _1988 = _1987 * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1989 = _1987 * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1990 = _1987 * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1993 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1988 * cbSceneParam._m0[91u].x));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2046 = _2033 / _2045;
    float _2047 = _2037 / _2045;
    float _2048 = _2041 / _2045;
    float _2195;
    float _2196;
    float _2197;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2075 = ((uint(_2048 > cbSceneParam._m0[59u].y) + uint(_2048 > cbSceneParam._m0[59u].x)) + uint(_2048 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2076 = _2075 + 43u;
        uint _2084 = _2075 + 44u;
        uint _2092 = _2075 + 45u;
        uint _2100 = _2075 + 46u;
        float _2111 = fma(_2045, cbSceneParam._m0[_2076].w, fma(_2041, cbSceneParam._m0[_2076].z, fma(_2037, cbSceneParam._m0[_2076].y, _2033 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2045, cbSceneParam._m0[_2084].w, fma(_2041, cbSceneParam._m0[_2084].z, fma(_2037, cbSceneParam._m0[_2084].y, _2033 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2045, cbSceneParam._m0[_2100].w, fma(_2041, cbSceneParam._m0[_2100].z, fma(_2037, cbSceneParam._m0[_2100].y, _2033 * cbSceneParam._m0[_2100].x)));
        float _2128 = cbSceneParam._m0[33u].z * _2123;
        float _2130 = cbSceneParam._m0[33u].w * _2123;
        float _2133 = fma(_2045, cbSceneParam._m0[_2092].w, fma(_2041, cbSceneParam._m0[_2092].z, fma(_2037, cbSceneParam._m0[_2092].y, _2033 * cbSceneParam._m0[_2092].x))) / _2123;
        float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
        float _4564 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2188 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 + _2111) / _2123, (_2130 + _2115) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 + _2111) / _2123, (_2115 - _2128) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2128) / _2123, (_2115 - _2130) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2130) / _2123, (_2128 + _2115) / _2123), _2133), 0.0)).x), vec4(0.25)));
        _2195 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
        _2196 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
        _2197 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2195 = 1.0;
        _2196 = 1.0;
        _2197 = 1.0;
    }
    float _2261;
    float _2263;
    float _2265;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2249 = fma(_2045, cbSceneParam._m0[63u].w, fma(_2041, cbSceneParam._m0[63u].z, fma(_2037, cbSceneParam._m0[63u].y, _2033 * cbSceneParam._m0[63u].x)));
        float _2250 = fma(_2045, cbSceneParam._m0[60u].w, fma(_2041, cbSceneParam._m0[60u].z, fma(_2037, cbSceneParam._m0[60u].y, _2033 * cbSceneParam._m0[60u].x))) / _2249;
        float _2251 = fma(_2045, cbSceneParam._m0[61u].w, fma(_2041, cbSceneParam._m0[61u].z, fma(_2037, cbSceneParam._m0[61u].y, _2033 * cbSceneParam._m0[61u].x))) / _2249;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2250 >= cbSceneParam._m0[64u].x) && (_2251 >= cbSceneParam._m0[64u].y)) && (_2250 <= cbSceneParam._m0[64u].z)) && (_2251 <= cbSceneParam._m0[64u].w))
        {
            float _2389 = fma(_2045, cbSceneParam._m0[62u].w, fma(_2041, cbSceneParam._m0[62u].z, fma(_2037, cbSceneParam._m0[62u].y, _2033 * cbSceneParam._m0[62u].x))) / _2249;
            float _2393 = isnan(cbSceneParam._m0[41u].w) ? _2389 : (isnan(_2389) ? cbSceneParam._m0[41u].w : max(_2389, cbSceneParam._m0[41u].w));
            float _2436 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
            float _4580 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
            float _2443 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2250, cbSceneParam._m0[33u].w + _2251), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2250, _2251 - cbSceneParam._m0[33u].z), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].z, _2251 - cbSceneParam._m0[33u].w), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2251), _2393), 0.0)).x), vec4(0.25)));
            float _2447 = 1.0 - (_2443 * cbSceneParam._m0[34u].x);
            float _2448 = 1.0 - (_2443 * cbSceneParam._m0[34u].y);
            float _2449 = 1.0 - (_2443 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_37_36_ladder_1 = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_37_36_ladder_2 = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
        }
        else
        {
            frontier_phi_37_36_ladder = _2197;
            frontier_phi_37_36_ladder_1 = _2196;
            frontier_phi_37_36_ladder_2 = _2195;
        }
        _2261 = frontier_phi_37_36_ladder_2;
        _2263 = frontier_phi_37_36_ladder_1;
        _2265 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2261 = _2195;
        _2263 = _2196;
        _2265 = _2197;
    }
    uvec4 _2270 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2272 = _2270.x * 14u;
    uint _2273 = _2272 + 13u;
    float _2280 = _945 + (-1.0);
    float _2285 = (cbLight._m0[_2273].x * _2280) + 1.0;
    float _2286 = (cbLight._m0[_2273].y * _2280) + 1.0;
    float _2287 = (cbLight._m0[_2273].z * _2280) + 1.0;
    float _2288 = (cbLight._m0[_2273].w * _2280) + 1.0;
    uint _2289 = _2272 + 5u;
    float _2295 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2299 = _2272 + 4u;
    float _2308 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2312 = _2272 | 1u;
    float _2323 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_783, _784, _785));
    float _2326 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_783, _784, _785));
    float _4616 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _4627 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2333 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2340 = ((cbLight._m0[_2289].x * _2295) * _2333) + (((cbLight._m0[_2299].x * _2261) * _2308) * _2331);
    float _2341 = ((_2295 * cbLight._m0[_2289].y) * _2333) + (((cbLight._m0[_2299].y * _2263) * _2308) * _2331);
    float _2342 = ((_2295 * cbLight._m0[_2289].z) * _2333) + (((cbLight._m0[_2299].z * _2265) * _2308) * _2331);
    uvec4 _2346 = floatBitsToUint(cbLight._m0[_2272 + 12u]);
    bool _2348 = _2346.x == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2348)
    {
        _2450 = _2340;
        _2452 = _2341;
        _2454 = _2342;
    }
    else
    {
        uint _2458 = _2272 + 6u;
        float _2474 = (dot(vec3(cbLight._m0[_2272 + 2u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4638 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2477 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2450 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2340;
        _2452 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2341;
        _2454 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2342;
    }
    bool _2457 = _2346.y == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2457)
    {
        _2512 = _2450;
        _2514 = _2452;
        _2516 = _2454;
    }
    else
    {
        uint _2674 = _2272 + 7u;
        float _2690 = (dot(vec3(cbLight._m0[_2272 + 3u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2691 = _2690 * _2690;
        float _4654 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2692 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2693 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2512 = (((cbLight._m0[_2674].x * 0.3183098733425140380859375) * _2692) * _2693) + _2450;
        _2514 = (((cbLight._m0[_2674].y * 0.3183098733425140380859375) * _2692) * _2693) + _2452;
        _2516 = (((cbLight._m0[_2674].z * 0.3183098733425140380859375) * _2692) * _2693) + _2454;
    }
    uint _2519 = _2272 + 8u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _786) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2272].x + _862;
    float _2535 = cbLight._m0[_2272].y + _863;
    float _2536 = cbLight._m0[_2272].z + _864;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2272].xyz));
    float _4670 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _4681 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2548 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2549 = dot(vec3(_783, _784, _785), vec3(_2541, _2542, _2543));
    float _4692 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2541, _2542, _2543));
    float _4703 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2533 * _2533;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2572 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2573 = 1.0 - _2533;
    float _2584 = (0.5 / (((_2548 * ((_2547 * _2573) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2573) + _2533) * _2547))) * _2547;
    float _4714 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    uint _2600 = _2272 + 9u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _786) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2312].x + _862;
    float _2614 = cbLight._m0[_2312].y + _863;
    float _2615 = cbLight._m0[_2312].z + _864;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2312].xyz));
    float _4725 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2627 = dot(vec3(_783, _784, _785), vec3(_2620, _2621, _2622));
    float _4736 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2620, _2621, _2622));
    float _4747 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2612 * _2612;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2648 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2649 = 1.0 - _2612;
    float _2659 = (0.5 / (((_2548 * ((_2626 * _2649) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2649) + _2612) * _2626))) * _2626;
    float _4758 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    float _2671 = (((_2648 * cbLight._m0[_2600].x) * _2661) * _2295) + ((((cbLight._m0[_2519].x * _2261) * _2572) * _2586) * _2308);
    float _2672 = (((_2648 * cbLight._m0[_2600].y) * _2661) * _2295) + ((((cbLight._m0[_2519].y * _2263) * _2572) * _2586) * _2308);
    float _2673 = (((_2648 * cbLight._m0[_2600].z) * _2661) * _2295) + ((((cbLight._m0[_2519].z * _2265) * _2572) * _2586) * _2308);
    float _2729;
    float _2731;
    float _2733;
    if (_2348)
    {
        _2729 = _2671;
        _2731 = _2672;
        _2733 = _2673;
    }
    else
    {
        uint _2735 = _2272 + 2u;
        uint _2739 = _2272 + 10u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _786) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _862;
        float _2756 = cbLight._m0[_2735].y + _863;
        float _2757 = cbLight._m0[_2735].z + _864;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2735].xyz));
        float _4769 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2769 = dot(vec3(_783, _784, _785), vec3(_2762, _2763, _2764));
        float _4780 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4791 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2790 = (exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2791 = 1.0 - _2754;
        float _2801 = (0.5 / (((_2548 * ((_2768 * _2791) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2791) + _2754) * _2768))) * _2768;
        float _4802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2729 = (((_2790 * cbLight._m0[_2739].x) * _2803) * _2804) + _2671;
        _2731 = (((_2790 * cbLight._m0[_2739].y) * _2803) * _2804) + _2672;
        _2733 = (((_2790 * cbLight._m0[_2739].z) * _2803) * _2804) + _2673;
    }
    float _2835;
    float _2837;
    float _2839;
    if (_2457)
    {
        _2835 = _2729;
        _2837 = _2731;
        _2839 = _2733;
    }
    else
    {
        uint _2846 = _2272 + 3u;
        uint _2850 = _2272 + 11u;
        float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2846].w)) * _786) * 0.949999988079071044921875);
        float _2865 = _2864 * _2864;
        float _2866 = cbLight._m0[_2846].x + _862;
        float _2867 = cbLight._m0[_2846].y + _863;
        float _2868 = cbLight._m0[_2846].z + _864;
        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
        float _2873 = _2872 * _2866;
        float _2874 = _2872 * _2867;
        float _2875 = _2872 * _2868;
        float _2876 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2846].xyz));
        float _4818 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2880 = dot(vec3(_783, _784, _785), vec3(_2873, _2874, _2875));
        float _4829 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2884 = dot(vec3(cbLight._m0[_2846].xyz), vec3(_2873, _2874, _2875));
        float _4840 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2888 = _2865 * _2865;
        float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
        float _2901 = (exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2902 = 1.0 - _2865;
        float _2912 = (0.5 / (((_2548 * ((_2879 * _2902) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2902) + _2865) * _2879))) * _2879;
        float _4851 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2835 = (((_2901 * cbLight._m0[_2850].x) * _2914) * _2915) + _2729;
        _2837 = (((_2901 * cbLight._m0[_2850].y) * _2914) * _2915) + _2731;
        _2839 = (((_2901 * cbLight._m0[_2850].z) * _2914) * _2915) + _2733;
    }
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_2270.y == 0u)
    {
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.x;
        uint _2948 = uint((float(_2936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2937))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2937)));
        float _2958 = (log2(_2048 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2959 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        uint _2962 = uint(isnan(14.0) ? _2959 : (isnan(_2959) ? 14.0 : min(_2959, 14.0)));
        uvec4 _2967 = texelFetch(g_lightClusterGridBuffer, int(((_2962 << 2u) + (_2948 << 6u)) >> 2u));
        uint _2968 = _2967.x;
        uint _2969 = _2936.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2969 >> 4u) & 15u)) + 4294967295u) & _2968) == 0u) || ((_2969 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            uint _3207 = 0u;
            uint _3216;
            bool _3217;
            for (;;)
            {
                _3216 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3207 << 2u)) >> 2u)).x;
                _3217 = _3216 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3217)
                {
                    frontier_phi_71_pred = _3206;
                    frontier_phi_71_pred_1 = _3205;
                    frontier_phi_71_pred_2 = _3204;
                    frontier_phi_71_pred_3 = _3203;
                    frontier_phi_71_pred_4 = _3202;
                    frontier_phi_71_pred_5 = _3201;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3216;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3207 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2046;
                        float _3413 = _3372.y - _2047;
                        float _3414 = _3372.z - _2048;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_901, _904, _907), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4877 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3432 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3422) + _3433;
                        float _3439 = _3429 * _3429;
                        float _3443 = ((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3428) / ((_3439 * 0.699999988079071044921875) + 1.0);
                        float _3447 = (-0.0) - _2046;
                        float _3448 = (-0.0) - _2047;
                        float _3449 = (-0.0) - _2048;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3463 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                        float _3464 = 1.0 - _961;
                        float _3471 = sqrt(1.0 - ((1.0 - (_3464 * _3464)) * (1.0 - (_3463 * _3463))));
                        float _3472 = _3471 * _3471;
                        float _3473 = _3472 * _3472;
                        float _3474 = _3454 + _3419;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3484 = dot(vec3(_901, _904, _907), vec3(_3454, _3455, _3456));
                        float _4893 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3488 = dot(vec3(_901, _904, _907), vec3(_3480 * _3474, _3480 * _3475, _3480 * _3476));
                        float _4904 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3495 = ((_3491 * _3491) * (_3473 + (-1.0))) + 1.0;
                        float _3496 = _3432 * _3472;
                        float _3497 = _3496 * _3496;
                        float _3500 = ((1.0 - _3497) * _3422) + _3497;
                        float _4915 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3502 = 1.0 - _3472;
                        float _3512 = (0.5 / (((_3501 * ((_3487 * _3502) + _3472)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3472) * _3487))) * _3501;
                        float _4926 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3523 = (((_3473 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3495 * _3495) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3276 = (_3443 * _3391.x) + _3349;
                        _3277 = (_3443 * _3391.y) + _3350;
                        _3278 = (_3443 * _3391.z) + _3351;
                        _3273 = (_3523 * _3408.x) + _3346;
                        _3274 = (_3523 * _3408.y) + _3347;
                        _3275 = (_3523 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_71_pred = _3278;
                    frontier_phi_71_pred_1 = _3277;
                    frontier_phi_71_pred_2 = _3276;
                    frontier_phi_71_pred_3 = _3275;
                    frontier_phi_71_pred_4 = _3274;
                    frontier_phi_71_pred_5 = _3273;
                }
                _3059 = frontier_phi_71_pred;
                _3057 = frontier_phi_71_pred_1;
                _3055 = frontier_phi_71_pred_2;
                _3053 = frontier_phi_71_pred_3;
                _3051 = frontier_phi_71_pred_4;
                _3049 = frontier_phi_71_pred_5;
                uint _3208 = _3207 + 1u;
                if (_3208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3201 = _3049;
                    _3202 = _3051;
                    _3203 = _3053;
                    _3204 = _3055;
                    _3205 = _3057;
                    _3206 = _3059;
                    _3207 = _3208;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((4294967295u << _3065) & _2968) == 0u)
        {
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
            _3179 = _3058;
        }
        else
        {
            float _3194 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
            float _3195 = _3194 * _2046;
            float _3196 = _3194 * _2047;
            float _3197 = _3194 * _2048;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3329 = _3048;
                float _3330 = _3050;
                float _3331 = _3052;
                float _3332 = _3054;
                float _3333 = _3056;
                float _3334 = _3058;
                uint _3335 = _3065;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3345)
                    {
                        frontier_phi_82_pred = _3334;
                        frontier_phi_82_pred_1 = _3333;
                        frontier_phi_82_pred_2 = _3332;
                        frontier_phi_82_pred_3 = _3331;
                        frontier_phi_82_pred_4 = _3330;
                        frontier_phi_82_pred_5 = _3329;
                    }
                    else
                    {
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        uint _3556 = _3344;
                        uint _3557;
                        vec4 _3582;
                        float _3583;
                        vec4 _3598;
                        vec3 _3610;
                        vec4 _3625;
                        vec4 _3640;
                        float _3686;
                        bool _3687;
                        for (;;)
                        {
                            uint _3567 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3556));
                            _3557 = (_3556 + 4294967295u) & _3556;
                            uint _3569 = _3567 * 40u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3583 = _3582.w;
                            uint _3585 = (_3567 * 40u) + 4u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3567 * 40u) + 8u;
                            _3610 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x));
                            uint _3612 = (_3567 * 40u) + 16u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3567 * 40u) + 20u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3567 * 40u) + 24u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3661 = (_3567 * 40u) + 28u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            _3686 = fma(_2048, _3674.z, fma(_2047, _3674.y, _3674.x * _2046)) + _3674.w;
                            _3687 = !((fma(_2048, _3655.z, fma(_2047, _3655.y, _3655.x * _2046)) + _3655.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3687)
                            {
                                float _3714 = _3582.x - _2046;
                                float _3715 = _3582.y - _2047;
                                float _3716 = _3582.z - _2048;
                                float _3717 = dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716));
                                float _3720 = inversesqrt(_3717);
                                float _3721 = _3720 * _3714;
                                float _3722 = _3720 * _3715;
                                float _3723 = _3720 * _3716;
                                float _3727 = 1.0 - (_3717 / (_3583 * _3583));
                                float _4937 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3732 = sqrt(_3717) * _3598.w;
                                float _3734 = 1.39999997615814208984375 / (_3732 + 1.39999997615814208984375);
                                float _3735 = _3734 * _3734;
                                float _3738 = ((1.0 - _3735) * dot(vec3(_3721, _3722, _3723), vec3(_901, _904, _907))) + _3735;
                                float _3741 = _3732 * _3732;
                                float _3745 = (fma(_2048, _3625.z, fma(_2047, _3625.y, _3625.x * _2046)) + _3625.w) / _3686;
                                float _3746 = (fma(_2048, _3640.z, fma(_2047, _3640.y, _3640.x * _2046)) + _3640.w) / _3686;
                                float _3750 = 1.0 - dot(vec2(_3745, _3746), vec2(_3745, _3746));
                                float _4953 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3752 = _3751 * (((isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0))) * _3728) / ((_3741 * 0.699999988079071044921875) + 1.0));
                                float _3764 = exp2(log2(1.0 / ((_3741 * 3.5) + 5.0)) * 0.25);
                                float _3765 = 1.0 - _961;
                                float _3772 = sqrt(1.0 - ((1.0 - (_3765 * _3765)) * (1.0 - (_3764 * _3764))));
                                float _3773 = _3772 * _3772;
                                float _3774 = _3773 * _3773;
                                float _3775 = _3721 - _3195;
                                float _3776 = _3722 - _3196;
                                float _3777 = _3723 - _3197;
                                float _3781 = inversesqrt(dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777)));
                                float _3785 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3195, (-0.0) - _3196, (-0.0) - _3197));
                                float _4964 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3788 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3789 = dot(vec3(_901, _904, _907), vec3(_3781 * _3775, _3781 * _3776, _3781 * _3777));
                                float _4975 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3796 = ((_3792 * _3792) * (_3774 + (-1.0))) + 1.0;
                                float _3797 = _3734 * _3773;
                                float _3798 = _3797 * _3797;
                                float _3804 = ((1.0 - _3798) * dot(vec3(_901, _904, _907), vec3(_3721, _3722, _3723))) + _3798;
                                float _4986 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3806 = 1.0 - _3773;
                                float _3816 = (0.5 / (((_3805 * ((_3788 * _3806) + _3773)) + 9.9999999392252902907785028219223e-09) + (((_3805 * _3806) + _3773) * _3788))) * _3805;
                                float _4997 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3826 = (_3751 * _3728) * (((_3774 * 3.1415927410125732421875) * (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) / ((_3796 * _3796) * ((_3741 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3752 * _3598.z;
                                frontier_phi_88_pred_1 = _3752 * _3598.y;
                                frontier_phi_88_pred_2 = _3752 * _3598.x;
                                frontier_phi_88_pred_3 = _3826 * _3610.z;
                                frontier_phi_88_pred_4 = _3826 * _3610.y;
                                frontier_phi_88_pred_5 = _3826 * _3610.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3835 = frontier_phi_88_pred;
                            _3834 = frontier_phi_88_pred_1;
                            _3833 = frontier_phi_88_pred_2;
                            _3832 = frontier_phi_88_pred_3;
                            _3831 = frontier_phi_88_pred_4;
                            _3830 = frontier_phi_88_pred_5;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            if (_3557 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3557;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3542;
                        frontier_phi_82_pred_1 = _3541;
                        frontier_phi_82_pred_2 = _3540;
                        frontier_phi_82_pred_3 = _3539;
                        frontier_phi_82_pred_4 = _3538;
                        frontier_phi_82_pred_5 = _3537;
                    }
                    _3180 = frontier_phi_82_pred;
                    _3178 = frontier_phi_82_pred_1;
                    _3176 = frontier_phi_82_pred_2;
                    _3174 = frontier_phi_82_pred_3;
                    _3172 = frontier_phi_82_pred_4;
                    _3170 = frontier_phi_82_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3170;
                        _3330 = _3172;
                        _3331 = _3174;
                        _3332 = _3176;
                        _3333 = _3178;
                        _3334 = _3180;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3176;
                frontier_phi_63_64_ladder_1 = _3180;
                frontier_phi_63_64_ladder_2 = _3178;
                frontier_phi_63_64_ladder_3 = _3174;
                frontier_phi_63_64_ladder_4 = _3172;
                frontier_phi_63_64_ladder_5 = _3170;
            }
            else
            {
                frontier_phi_63_64_ladder = _3054;
                frontier_phi_63_64_ladder_1 = _3058;
                frontier_phi_63_64_ladder_2 = _3056;
                frontier_phi_63_64_ladder_3 = _3052;
                frontier_phi_63_64_ladder_4 = _3050;
                frontier_phi_63_64_ladder_5 = _3048;
            }
            _3169 = frontier_phi_63_64_ladder_5;
            _3171 = frontier_phi_63_64_ladder_4;
            _3173 = frontier_phi_63_64_ladder_3;
            _3175 = frontier_phi_63_64_ladder;
            _3177 = frontier_phi_63_64_ladder_2;
            _3179 = frontier_phi_63_64_ladder_1;
        }
        float _3184 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2981 = (_3184 * _3175) + _2512;
        _2983 = (_3184 * _3177) + _2514;
        _2985 = (_3184 * _3179) + _2516;
        _2987 = ((_3169 * 0.039999999105930328369140625) * _3184) + _2835;
        _2989 = ((_3171 * 0.039999999105930328369140625) * _3184) + _2837;
        _2991 = ((_3173 * 0.039999999105930328369140625) * _3184) + _2839;
    }
    else
    {
        _2981 = _2512;
        _2983 = _2514;
        _2985 = _2516;
        _2987 = _2835;
        _2989 = _2837;
        _2991 = _2839;
    }
    float _5013 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _5024 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _5035 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _3008 = ((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_2981 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _945))) + ((_2987 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _3009 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2983 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _945))) + ((_2989 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_2985 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _945))) + ((_2991 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    uint _3011 = _257 + 6u;
    float _3019 = _882 / cbSceneParam._m0[86u].x;
    float _3020 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _3074 = _3073 / _804;
        float _3085 = _3074 * _855;
        float _3086 = _856 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3089 = _3074 * _857;
        float _3091 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3086;
        float _3099 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3286;
        if (abs((_3087 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3286 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3230 = 1.0 / cbSceneParam._m0[80u].x;
            float _3231 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3232 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            _3286 = ((abs(_3099 / _3087) * cbSceneParam._m0[80u].y) * ((((_3241 - _3242) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))))) * _3230)) - ((exp2(_3109 * _3241) - exp2(_3109 * _3242)) * _3230))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3288 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3297 = exp2((_3286 * (-1.44269502162933349609375)) * (1.0 - _3288.w));
        float _3298 = log2(_3297);
        float _3314 = log2(_3039);
        _3111 = (exp2(_3314 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].x)) * _3288.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3113 = (exp2(_3314 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].y)) * _3288.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3115 = (exp2(_3314 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].z)) * _3288.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3117 = _3297 * _3039;
    }
    else
    {
        _3111 = _3036;
        _3113 = _3037;
        _3115 = _3038;
        _3117 = _3039;
    }
    bool _3324;
    vec4 _3127;
    vec4 _3149;
    float _3151;
    float _3155;
    float _3156;
    float _3157;
    float _3158;
    bool _3168;
    for (;;)
    {
        _3127 = cbMatDynParam._m0[0u];
        float _3129 = roundEven(_3127.y);
        bool _3130 = _3129 == 3.0;
        float _3131 = log2(_3117);
        float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * _3008;
        float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * _3009;
        float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * _3010;
        float _3147 = _871 + (-0.5);
        _3149 = cbMtdParam._m0[1u];
        _3151 = _3149.y * _3147;
        float _3154 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3155 = _3154 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
        _3156 = _3154 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
        _3157 = _3154 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
        _3158 = _3147 * 0.999000012874603271484375;
        _3168 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3168)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3158) < 0.5)
            {
                _3324 = true;
                break;
            }
        }
        uint _3265 = _920 + uint(_3127.w);
        if ((cbInstanceData._m0[_3265].w < 1.0) && ((cbInstanceData._m0[_3265].w + _3158) < 0.5))
        {
            _3324 = true;
            break;
        }
        if ((_3151 + 1.0) < _3149.x)
        {
            _3324 = true;
            break;
        }
        _3324 = false;
        break;
    }
    float _3528;
    if (_3324)
    {
        discard_state = true;
        _3528 = 0.0;
    }
    else
    {
        _3528 = cbInstanceData._m0[_3011].w;
    }
    SV_Target.x = _3155;
    SV_Target.y = _3156;
    SV_Target.z = _3157;
    SV_Target.w = _3528;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3011].w;
    discard_exit();
}


