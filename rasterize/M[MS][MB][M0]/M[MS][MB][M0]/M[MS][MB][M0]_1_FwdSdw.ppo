#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _817;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _254 = _250.z;
    float _259 = (_250.x * 2.0) + (-1.0);
    float _261 = (_250.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3414 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))));
    float _273 = cbMtdParam._m0[22u].x + _250.w;
    float _276 = fma(_268, _199 * NORMAL.x, fma(_261, _206 * TANGENT.x, (_192 * _184) * _259));
    float _279 = fma(_268, _199 * NORMAL.y, fma(_261, _206 * TANGENT.y, (_192 * _185) * _259));
    float _282 = fma(_268, _199 * NORMAL.z, fma(_261, _206 * TANGENT.z, (_192 * _186) * _259));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3425 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _290 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3447 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3458 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3469 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _402 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _405 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3480 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _445 = ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * TEXCOORD_5.w) * _441.x;
    float _446 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _287) - _369;
    float _454 = (_449 * _288) - _370;
    float _455 = (_449 * _289) - _371;
    float _459 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3513 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_290);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _816;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _545 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _549 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _574 = _506 + _287;
        float _575 = _510 + _288;
        float _576 = _514 + _289;
        float _586 = fma(_576, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574)) - _541;
        float _587 = fma(_576, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574)) - _545;
        float _588 = fma(_576, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574)) - _549;
        float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
        float _605 = ((_592 * _586) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_541 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _606 = ((_592 * _587) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_545 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _607 = ((_592 * _588) / cbModelParam._m0[34u].z) + ((((((_549 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        float _644 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_610.x + (-0.5));
        float _646 = _644 * (_610.y + (-0.5));
        float _647 = _644 * (_610.z + (-0.5));
        float _654 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_617.x + (-0.5));
        float _656 = _654 * (_617.y + (-0.5));
        float _657 = _654 * (_617.z + (-0.5));
        float _664 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_624.x + (-0.5));
        float _666 = _664 * (_624.y + (-0.5));
        float _667 = _664 * (_624.z + (-0.5));
        float _674 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_631.x + (-0.5));
        float _676 = _674 * (_631.y + (-0.5));
        float _677 = _674 * (_631.z + (-0.5));
        float _678 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _679 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = _645 * 0.5;
        float _682 = _655 * 0.5;
        float _683 = _665 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _698 = (dot(vec3(_287, _288, _289), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _708 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_678 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3561 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_710 + 1.0))) + _715) * _678;
        float _725 = _646 * 0.5;
        float _726 = _656 * 0.5;
        float _727 = _666 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_287, _288, _289), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_679 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3594 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_752 + 1.0))) + _757) * _679;
        float _767 = _647 * 0.5;
        float _768 = _657 * 0.5;
        float _769 = _667 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_287, _288, _289), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3627 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_794 + 1.0))) + _799) * _680;
        _816 = _647;
        _818 = _646;
        _819 = _645;
        _820 = _657;
        _821 = _656;
        _822 = _655;
        _823 = _667;
        _824 = _666;
        _825 = _665;
        _826 = _680;
        _827 = _679;
        _828 = _678;
        _829 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _830 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
    }
    else
    {
        _816 = _817;
        _818 = _817;
        _819 = _817;
        _820 = _817;
        _821 = _817;
        _822 = _817;
        _823 = _817;
        _824 = _817;
        _825 = _817;
        _826 = _817;
        _827 = _817;
        _828 = _817;
        _829 = 0.0;
        _830 = 0.0;
        _831 = 0.0;
    }
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _856 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _860 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _864 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _887 = _506 + _287;
        float _888 = _510 + _288;
        float _889 = _514 + _289;
        float _899 = fma(_889, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887)) - _856;
        float _900 = fma(_889, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887)) - _860;
        float _901 = fma(_889, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887)) - _864;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_856 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_860 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[35u].z) + ((((((_864 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _955 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_922.x + (-0.5));
        float _957 = _955 * (_922.y + (-0.5));
        float _958 = _955 * (_922.z + (-0.5));
        float _965 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_929.x + (-0.5));
        float _967 = _965 * (_929.y + (-0.5));
        float _968 = _965 * (_929.z + (-0.5));
        float _975 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_936.x + (-0.5));
        float _977 = _975 * (_936.y + (-0.5));
        float _978 = _975 * (_936.z + (-0.5));
        float _985 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_943.x + (-0.5));
        float _987 = _985 * (_943.y + (-0.5));
        float _988 = _985 * (_943.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_287, _288, _289), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3690 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1019 + 1.0))) + _1024) * _989;
        float _1034 = _957 * 0.5;
        float _1035 = _967 * 0.5;
        float _1036 = _977 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_287, _288, _289), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3723 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1061 + 1.0))) + _1066) * _990;
        float _1076 = _958 * 0.5;
        float _1077 = _968 * 0.5;
        float _1078 = _978 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_287, _288, _289), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3756 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1103 + 1.0))) + _1108) * _991;
        _1125 = _958;
        _1126 = _957;
        _1127 = _956;
        _1128 = _968;
        _1129 = _967;
        _1130 = _966;
        _1131 = _978;
        _1132 = _977;
        _1133 = _976;
        _1134 = _991;
        _1135 = _990;
        _1136 = _989;
        _1137 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1138 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1139 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _817;
        _1126 = _817;
        _1127 = _817;
        _1128 = _817;
        _1129 = _817;
        _1130 = _817;
        _1131 = _817;
        _1132 = _817;
        _1133 = _817;
        _1134 = _817;
        _1135 = _817;
        _1136 = _817;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1149 = (cbModelParam._m0[1u].x * (_1137 - _829)) + _829;
    float _1150 = (cbModelParam._m0[1u].x * (_1138 - _830)) + _830;
    float _1151 = (cbModelParam._m0[1u].x * (_1139 - _831)) + _831;
    float _1172 = fma(_1151, cbSceneParam._m0[89u].z, fma(_1150, cbSceneParam._m0[89u].y, _1149 * cbSceneParam._m0[89u].x));
    float _1175 = fma(_1151, cbSceneParam._m0[90u].z, fma(_1150, cbSceneParam._m0[90u].y, _1149 * cbSceneParam._m0[90u].x));
    float _1178 = fma(_1151, cbSceneParam._m0[91u].z, fma(_1150, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1149));
    float _1193 = _453 * 0.5;
    float _1194 = _454 * 0.5;
    float _1195 = _455 * 0.5;
    float _1196 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1127, _1130, _1133, _1136));
    float _1199 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1126, _1129, _1132, _1135));
    float _1202 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1125, _1128, _1131, _1134));
    float _1236;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1209 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_816, _820, _823, _826));
        float _1213 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_818, _821, _824, _827));
        float _1217 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_819, _822, _825, _828));
        float _1224 = dot(vec4(cbModelParam._m0[39u]), vec4(_1193, _1194, _1195, 1.0));
        _1236 = dot(vec3(isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1236 = 1.0;
    }
    float _1247;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1238 = dot(vec4(cbModelParam._m0[40u]), vec4(_1193, _1194, _1195, 1.0));
        _1247 = dot(vec3(isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1238) ? 0.0 : (isnan(0.0) ? _1238 : max(0.0, _1238))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1247 = 1.0;
    }
    float _1251 = (_1247 * cbModelParam._m0[1u].x) + (_1236 * (1.0 - cbModelParam._m0[1u].x));
    float _1261 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _290);
    float _1262 = isnan(_1261) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1261 : min(cbModelParam._m0[25u].z, _1261));
    float _1344;
    float _1346;
    float _1348;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1311 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1315 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1319 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1322 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1325 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1328 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1356;
        if (_1322 > 0.0)
        {
            _1356 = abs((1.0 - _1311) / _1322);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1311 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1356 = frontier_phi_14_12_ladder;
        }
        float _1529;
        if (_1325 > 0.0)
        {
            _1529 = abs((1.0 - _1315) / _1325);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1315 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1529 = frontier_phi_23_19_ladder;
        }
        float _1825;
        if (_1328 > 0.0)
        {
            _1825 = abs((1.0 - _1319) / _1328);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1319 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1825 = frontier_phi_35_30_ladder;
        }
        float _1827 = isnan(_1529) ? _1356 : (isnan(_1356) ? _1529 : min(_1356, _1529));
        float _1828 = isnan(_1825) ? _1827 : (isnan(_1827) ? _1825 : min(_1827, _1825));
        float _1832 = (_1828 * _1322) + _1311;
        float _1833 = (_1828 * _1325) + _1315;
        float _1834 = (_1828 * _1328) + _1319;
        float _1835 = _1828 * 9.9999997473787516355514526367188e-05;
        float _1837 = (-1.0) - _1835;
        float _1839 = _1835 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1834 > _1839) || ((_1834 < _1837) || ((_1833 > _1839) || ((_1833 < _1837) || ((_1832 < _1837) || (_1832 > _1839))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1834, cbModelParam._m0[9u].z, fma(_1833, cbModelParam._m0[9u].y, _1832 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1834, cbModelParam._m0[10u].z, fma(_1833, cbModelParam._m0[10u].y, _1832 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1834, cbModelParam._m0[11u].z, fma(_1833, cbModelParam._m0[11u].y, _1832 * cbModelParam._m0[11u].x))), _1262);
            frontier_phi_13_35_ladder = _1979.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1979.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1979.x * cbModelParam._m0[1u].y;
        }
        _1344 = frontier_phi_13_35_ladder_2;
        _1346 = frontier_phi_13_35_ladder_1;
        _1348 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1262);
        _1344 = _1332.x * cbModelParam._m0[1u].y;
        _1346 = _1332.y * cbModelParam._m0[1u].y;
        _1348 = _1332.z * cbModelParam._m0[1u].y;
    }
    float _1352 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _290);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1352 : min(cbModelParam._m0[25u].w, _1352));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1409 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1413 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1417 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1420 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1423 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1426 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1534;
        if (_1420 > 0.0)
        {
            _1534 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1534 = frontier_phi_25_21_ladder;
        }
        float _1852;
        if (_1423 > 0.0)
        {
            _1852 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1852 = frontier_phi_37_32_ladder;
        }
        float _2179;
        if (_1426 > 0.0)
        {
            _2179 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2179 = frontier_phi_47_44_ladder;
        }
        float _2181 = isnan(_1852) ? _1534 : (isnan(_1534) ? _1852 : min(_1534, _1852));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1420) + _1409;
        float _2187 = (_2182 * _1423) + _1413;
        float _2188 = (_2182 * _1426) + _1417;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2189;
        float _2192 = _2189 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2188 > _2192) || ((_2188 < _2190) || ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 < _2190) || (_2186 > _2192))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2188, cbModelParam._m0[17u].z, fma(_2187, cbModelParam._m0[17u].y, _2186 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2188, cbModelParam._m0[18u].z, fma(_2187, cbModelParam._m0[18u].y, _2186 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2188, cbModelParam._m0[19u].z, fma(_2187, cbModelParam._m0[19u].y, _2186 * cbModelParam._m0[19u].x))), _1353);
            frontier_phi_22_47_ladder = _2306.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2306.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2306.x * cbModelParam._m0[1u].z;
        }
        _1445 = frontier_phi_22_47_ladder_2;
        _1447 = frontier_phi_22_47_ladder_1;
        _1449 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1353);
        _1445 = _1429.x * cbModelParam._m0[1u].z;
        _1447 = _1429.y * cbModelParam._m0[1u].z;
        _1449 = _1429.z * cbModelParam._m0[1u].z;
    }
    float _1461 = ((((1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_474 * _461)) * _445;
    float _1462 = _1461 * ((cbModelParam._m0[1u].w * (_1445 - _1344)) + _1344);
    float _1463 = _1461 * ((cbModelParam._m0[1u].w * (_1447 - _1346)) + _1346);
    float _1464 = _1461 * ((cbModelParam._m0[1u].w * (_1449 - _1348)) + _1348);
    float _1467 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, _1462 * cbSceneParam._m0[91u].x));
    float _1508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1512 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1521 = _1508 / _1520;
    float _1522 = _1512 / _1520;
    float _1523 = _1516 / _1520;
    float _1670;
    float _1671;
    float _1672;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1550 = ((uint(_1523 > cbSceneParam._m0[59u].y) + uint(_1523 > cbSceneParam._m0[59u].x)) + uint(_1523 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1551 = _1550 + 43u;
        uint _1559 = _1550 + 44u;
        uint _1567 = _1550 + 45u;
        uint _1575 = _1550 + 46u;
        float _1586 = fma(_1520, cbSceneParam._m0[_1551].w, fma(_1516, cbSceneParam._m0[_1551].z, fma(_1512, cbSceneParam._m0[_1551].y, _1508 * cbSceneParam._m0[_1551].x)));
        float _1590 = fma(_1520, cbSceneParam._m0[_1559].w, fma(_1516, cbSceneParam._m0[_1559].z, fma(_1512, cbSceneParam._m0[_1559].y, _1508 * cbSceneParam._m0[_1559].x)));
        float _1598 = fma(_1520, cbSceneParam._m0[_1575].w, fma(_1516, cbSceneParam._m0[_1575].z, fma(_1512, cbSceneParam._m0[_1575].y, _1508 * cbSceneParam._m0[_1575].x)));
        float _1603 = cbSceneParam._m0[33u].z * _1598;
        float _1605 = cbSceneParam._m0[33u].w * _1598;
        float _1608 = fma(_1520, cbSceneParam._m0[_1567].w, fma(_1516, cbSceneParam._m0[_1567].z, fma(_1512, cbSceneParam._m0[_1567].y, _1508 * cbSceneParam._m0[_1567].x))) / _1598;
        float _1656 = (cbSceneParam._m0[33u].x - sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523))) * cbSceneParam._m0[33u].y;
        float _3882 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1663 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 + _1586) / _1598, (_1605 + _1590) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1605 + _1586) / _1598, (_1590 - _1603) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 - _1603) / _1598, (_1590 - _1605) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 - _1605) / _1598, (_1603 + _1590) / _1598), _1608), 0.0)).x), vec4(0.25)));
        _1670 = 1.0 - (_1663 * cbSceneParam._m0[34u].x);
        _1671 = 1.0 - (_1663 * cbSceneParam._m0[34u].y);
        _1672 = 1.0 - (_1663 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1670 = 1.0;
        _1671 = 1.0;
        _1672 = 1.0;
    }
    float _1736;
    float _1738;
    float _1740;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1724 = fma(_1520, cbSceneParam._m0[63u].w, fma(_1516, cbSceneParam._m0[63u].z, fma(_1512, cbSceneParam._m0[63u].y, _1508 * cbSceneParam._m0[63u].x)));
        float _1725 = fma(_1520, cbSceneParam._m0[60u].w, fma(_1516, cbSceneParam._m0[60u].z, fma(_1512, cbSceneParam._m0[60u].y, _1508 * cbSceneParam._m0[60u].x))) / _1724;
        float _1726 = fma(_1520, cbSceneParam._m0[61u].w, fma(_1516, cbSceneParam._m0[61u].z, fma(_1512, cbSceneParam._m0[61u].y, _1508 * cbSceneParam._m0[61u].x))) / _1724;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1725 >= cbSceneParam._m0[64u].x) && (_1726 >= cbSceneParam._m0[64u].y)) && (_1725 <= cbSceneParam._m0[64u].z)) && (_1726 <= cbSceneParam._m0[64u].w))
        {
            float _1865 = fma(_1520, cbSceneParam._m0[62u].w, fma(_1516, cbSceneParam._m0[62u].z, fma(_1512, cbSceneParam._m0[62u].y, _1508 * cbSceneParam._m0[62u].x))) / _1724;
            float _1869 = isnan(cbSceneParam._m0[41u].w) ? _1865 : (isnan(_1865) ? cbSceneParam._m0[41u].w : max(_1865, cbSceneParam._m0[41u].w));
            float _1912 = (cbSceneParam._m0[33u].x - sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523))) * cbSceneParam._m0[33u].y;
            float _3898 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
            float _1919 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1725, cbSceneParam._m0[33u].w + _1726), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1725, _1726 - cbSceneParam._m0[33u].z), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1725 - cbSceneParam._m0[33u].z, _1726 - cbSceneParam._m0[33u].w), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1725 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1726), _1869), 0.0)).x), vec4(0.25)));
            float _1923 = 1.0 - (_1919 * cbSceneParam._m0[34u].x);
            float _1924 = 1.0 - (_1919 * cbSceneParam._m0[34u].y);
            float _1925 = 1.0 - (_1919 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1925) ? _1672 : (isnan(_1672) ? _1925 : min(_1672, _1925));
            frontier_phi_34_33_ladder_1 = isnan(_1924) ? _1671 : (isnan(_1671) ? _1924 : min(_1671, _1924));
            frontier_phi_34_33_ladder_2 = isnan(_1923) ? _1670 : (isnan(_1670) ? _1923 : min(_1670, _1923));
        }
        else
        {
            frontier_phi_34_33_ladder = _1672;
            frontier_phi_34_33_ladder_1 = _1671;
            frontier_phi_34_33_ladder_2 = _1670;
        }
        _1736 = frontier_phi_34_33_ladder_2;
        _1738 = frontier_phi_34_33_ladder_1;
        _1740 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1736 = _1670;
        _1738 = _1671;
        _1740 = _1672;
    }
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1755 = _445 + (-1.0);
    float _1760 = (cbLight._m0[_1748].x * _1755) + 1.0;
    float _1761 = (cbLight._m0[_1748].y * _1755) + 1.0;
    float _1762 = (cbLight._m0[_1748].z * _1755) + 1.0;
    float _1763 = (cbLight._m0[_1748].w * _1755) + 1.0;
    uint _1764 = _1747 + 5u;
    float _1770 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1774 = _1747 + 4u;
    float _1784 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1788 = _1747 | 1u;
    float _1799 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_287, _288, _289));
    float _1802 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_287, _288, _289));
    float _3934 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _3945 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1807 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1809 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1816 = ((cbLight._m0[_1764].x * _1770) * _1809) + (((cbLight._m0[_1774].x * _1736) * _1784) * _1807);
    float _1817 = ((_1770 * cbLight._m0[_1764].y) * _1809) + (((cbLight._m0[_1774].y * _1738) * _1784) * _1807);
    float _1818 = ((_1770 * cbLight._m0[_1764].z) * _1809) + (((cbLight._m0[_1774].z * _1740) * _1784) * _1807);
    uvec4 _1822 = floatBitsToUint(cbLight._m0[_1747 + 12u]);
    bool _1824 = _1822.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1824)
    {
        _1926 = _1816;
        _1928 = _1817;
        _1930 = _1818;
    }
    else
    {
        uint _1934 = _1747 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1747 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3956 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1953 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1816;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1817;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1818;
    }
    bool _1933 = _1822.y == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1933)
    {
        _1988 = _1926;
        _1990 = _1928;
        _1992 = _1930;
    }
    else
    {
        uint _2150 = _1747 + 7u;
        float _2166 = (dot(vec3(cbLight._m0[_1747 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _3972 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2169 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1988 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _1926;
        _1990 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _1928;
        _1992 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _1930;
    }
    uint _1995 = _1747 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _290) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1747].x + _369;
    float _2011 = cbLight._m0[_1747].y + _370;
    float _2012 = cbLight._m0[_1747].z + _371;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1747].xyz));
    float _3988 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2024 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _2025 = dot(vec3(_287, _288, _289), vec3(_2017, _2018, _2019));
    float _4010 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_2017, _2018, _2019));
    float _4021 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2009;
    float _2060 = (0.5 / (((_2024 * ((_2023 * _2049) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2049) + _2009) * _2023))) * _2023;
    float _4032 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2076 = _1747 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _290) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1788].x + _369;
    float _2090 = cbLight._m0[_1788].y + _370;
    float _2091 = cbLight._m0[_1788].z + _371;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1788].xyz));
    float _4043 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2103 = dot(vec3(_287, _288, _289), vec3(_2096, _2097, _2098));
    float _4054 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_2096, _2097, _2098));
    float _4065 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2088;
    float _2135 = (0.5 / (((_2024 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2125) + _2088) * _2102))) * _2102;
    float _4076 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2147 = (((_2124 * cbLight._m0[_2076].x) * _2137) * _1770) + ((((cbLight._m0[_1995].x * _1736) * _2048) * _2062) * _1784);
    float _2148 = (((_2124 * cbLight._m0[_2076].y) * _2137) * _1770) + ((((cbLight._m0[_1995].y * _1738) * _2048) * _2062) * _1784);
    float _2149 = (((_2124 * cbLight._m0[_2076].z) * _2137) * _1770) + ((((cbLight._m0[_1995].z * _1740) * _2048) * _2062) * _1784);
    float _2205;
    float _2207;
    float _2209;
    if (_1824)
    {
        _2205 = _2147;
        _2207 = _2148;
        _2209 = _2149;
    }
    else
    {
        uint _2211 = _1747 + 2u;
        uint _2215 = _1747 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _290) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _369;
        float _2232 = cbLight._m0[_2211].y + _370;
        float _2233 = cbLight._m0[_2211].z + _371;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2211].xyz));
        float _4087 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2245 = dot(vec3(_287, _288, _289), vec3(_2238, _2239, _2240));
        float _4098 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4109 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_2024 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2267) + _2230) * _2244))) * _2244;
        float _4120 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2205 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2147;
        _2207 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2148;
        _2209 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2149;
    }
    float _2311;
    float _2313;
    float _2315;
    if (_1933)
    {
        _2311 = _2205;
        _2313 = _2207;
        _2315 = _2209;
    }
    else
    {
        uint _2322 = _1747 + 3u;
        uint _2326 = _1747 + 11u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _290) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _369;
        float _2343 = cbLight._m0[_2322].y + _370;
        float _2344 = cbLight._m0[_2322].z + _371;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2322].xyz));
        float _4136 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2356 = dot(vec3(_287, _288, _289), vec3(_2349, _2350, _2351));
        float _4147 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4158 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2378 = 1.0 - _2341;
        float _2388 = (0.5 / (((_2024 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2378) + _2341) * _2355))) * _2355;
        float _4169 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2311 = (((_2377 * cbLight._m0[_2326].x) * _2390) * _2391) + _2205;
        _2313 = (((_2377 * cbLight._m0[_2326].y) * _2390) * _2391) + _2207;
        _2315 = (((_2377 * cbLight._m0[_2326].z) * _2390) * _2391) + _2209;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1745.y == 0u)
    {
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2413)));
        float _2434 = (log2(_1523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
        }
        else
        {
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2685)
                {
                    frontier_phi_66_pred = _2674;
                    frontier_phi_66_pred_1 = _2673;
                    frontier_phi_66_pred_2 = _2672;
                    frontier_phi_66_pred_3 = _2671;
                    frontier_phi_66_pred_4 = _2670;
                    frontier_phi_66_pred_5 = _2669;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2684;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2675 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _1521;
                        float _2860 = _2819.y - _1522;
                        float _2861 = _2819.z - _1523;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_399, _402, _405), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4195 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _1521;
                        float _2895 = (-0.0) - _1522;
                        float _2896 = (-0.0) - _1523;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2910 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2911 = 1.0 - _461;
                        float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                        float _2919 = _2918 * _2918;
                        float _2920 = _2919 * _2919;
                        float _2921 = _2901 + _2866;
                        float _2922 = _2902 + _2867;
                        float _2923 = _2903 + _2868;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2931 = dot(vec3(_399, _402, _405), vec3(_2901, _2902, _2903));
                        float _4211 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2935 = dot(vec3(_399, _402, _405), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                        float _4222 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                        float _2943 = _2879 * _2919;
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2869) + _2944;
                        float _4233 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2949 = 1.0 - _2919;
                        float _2959 = (0.5 / (((_2948 * ((_2934 * _2949) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2949) + _2919) * _2934))) * _2948;
                        float _4244 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2970 = (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2942 * _2942) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2728 = (_2890 * _2838.x) + _2796;
                        _2729 = (_2890 * _2838.y) + _2797;
                        _2730 = (_2890 * _2838.z) + _2798;
                        _2725 = (_2970 * _2855.x) + _2793;
                        _2726 = (_2970 * _2855.y) + _2794;
                        _2727 = (_2970 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_66_pred = _2730;
                    frontier_phi_66_pred_1 = _2729;
                    frontier_phi_66_pred_2 = _2728;
                    frontier_phi_66_pred_3 = _2727;
                    frontier_phi_66_pred_4 = _2726;
                    frontier_phi_66_pred_5 = _2725;
                }
                _2535 = frontier_phi_66_pred;
                _2533 = frontier_phi_66_pred_1;
                _2531 = frontier_phi_66_pred_2;
                _2529 = frontier_phi_66_pred_3;
                _2527 = frontier_phi_66_pred_4;
                _2525 = frontier_phi_66_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2525;
                    _2670 = _2527;
                    _2671 = _2529;
                    _2672 = _2531;
                    _2673 = _2533;
                    _2674 = _2535;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
        }
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.z;
        uint _2541 = (_2539 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2541) & _2444) == 0u)
        {
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
            _2643 = _2530;
            _2645 = _2532;
            _2647 = _2534;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
            float _2663 = _2662 * _1521;
            float _2664 = _2662 * _1522;
            float _2665 = _2662 * _1523;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2541 < ((_2539 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2776 = _2524;
                float _2777 = _2526;
                float _2778 = _2528;
                float _2779 = _2530;
                float _2780 = _2532;
                float _2781 = _2534;
                uint _2782 = _2541;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2792)
                    {
                        frontier_phi_72_pred = _2781;
                        frontier_phi_72_pred_1 = _2780;
                        frontier_phi_72_pred_2 = _2779;
                        frontier_phi_72_pred_3 = _2778;
                        frontier_phi_72_pred_4 = _2777;
                        frontier_phi_72_pred_5 = _2776;
                    }
                    else
                    {
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _2988 = _2776;
                        float _2989 = _2777;
                        float _2990 = _2778;
                        float _2991 = _2779;
                        float _2992 = _2780;
                        float _2993 = _2781;
                        uint _2994 = _2791;
                        uint _2995;
                        vec4 _3020;
                        float _3021;
                        vec4 _3036;
                        vec3 _3048;
                        vec4 _3064;
                        vec4 _3080;
                        float _3127;
                        bool _3128;
                        for (;;)
                        {
                            uint _3005 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2994));
                            _2995 = (_2994 + 4294967295u) & _2994;
                            uint _3007 = _3005 * 40u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3021 = _3020.w;
                            uint _3023 = (_3005 * 40u) + 4u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3038 = (_3005 * 40u) + 8u;
                            _3048 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x));
                            uint _3051 = (_3005 * 40u) + 16u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3067 = (_3005 * 40u) + 20u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3005 * 40u) + 24u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3102 = (_3005 * 40u) + 28u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3127 = fma(_1523, _3115.z, fma(_1522, _3115.y, _3115.x * _1521)) + _3115.w;
                            _3128 = !((fma(_1523, _3096.z, fma(_1522, _3096.y, _3096.x * _1521)) + _3096.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3128)
                            {
                                float _3155 = _3020.x - _1521;
                                float _3156 = _3020.y - _1522;
                                float _3157 = _3020.z - _1523;
                                float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                                float _3161 = inversesqrt(_3158);
                                float _3162 = _3161 * _3155;
                                float _3163 = _3161 * _3156;
                                float _3164 = _3161 * _3157;
                                float _3168 = 1.0 - (_3158 / (_3021 * _3021));
                                float _4255 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3173 = sqrt(_3158) * _3036.w;
                                float _3175 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                                float _3176 = _3175 * _3175;
                                float _3179 = ((1.0 - _3176) * dot(vec3(_3162, _3163, _3164), vec3(_399, _402, _405))) + _3176;
                                float _3182 = _3173 * _3173;
                                float _3186 = (fma(_1523, _3064.z, fma(_1522, _3064.y, _3064.x * _1521)) + _3064.w) / _3127;
                                float _3187 = (fma(_1523, _3080.z, fma(_1522, _3080.y, _3080.x * _1521)) + _3080.w) / _3127;
                                float _3191 = 1.0 - dot(vec2(_3186, _3187), vec2(_3186, _3187));
                                float _4271 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3193 = _3192 * (((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3169) / ((_3182 * 0.699999988079071044921875) + 1.0));
                                float _3205 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                                float _3206 = 1.0 - _461;
                                float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                                float _3214 = _3213 * _3213;
                                float _3215 = _3214 * _3214;
                                float _3216 = _3162 - _2663;
                                float _3217 = _3163 - _2664;
                                float _3218 = _3164 - _2665;
                                float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                                float _3226 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4282 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3230 = dot(vec3(_399, _402, _405), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                                float _4293 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                                float _3238 = _3175 * _3214;
                                float _3239 = _3238 * _3238;
                                float _3245 = ((1.0 - _3239) * dot(vec3(_399, _402, _405), vec3(_3162, _3163, _3164))) + _3239;
                                float _4304 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3247 = 1.0 - _3214;
                                float _3257 = (0.5 / (((_3246 * ((_3229 * _3247) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3214) * _3229))) * _3246;
                                float _4315 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3267 = (_3192 * _3169) * (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3237 * _3237) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3193 * _3036.y;
                                frontier_phi_78_pred_1 = _3193 * _3036.x;
                                frontier_phi_78_pred_2 = _3267 * _3048.z;
                                frontier_phi_78_pred_3 = _3267 * _3048.y;
                                frontier_phi_78_pred_4 = _3267 * _3048.x;
                                frontier_phi_78_pred_5 = _3193 * _3036.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3275 = frontier_phi_78_pred;
                            _3274 = frontier_phi_78_pred_1;
                            _3273 = frontier_phi_78_pred_2;
                            _3272 = frontier_phi_78_pred_3;
                            _3271 = frontier_phi_78_pred_4;
                            _3276 = frontier_phi_78_pred_5;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            if (_2995 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2995;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2980;
                        frontier_phi_72_pred_1 = _2979;
                        frontier_phi_72_pred_2 = _2978;
                        frontier_phi_72_pred_3 = _2977;
                        frontier_phi_72_pred_4 = _2976;
                        frontier_phi_72_pred_5 = _2975;
                    }
                    _2648 = frontier_phi_72_pred;
                    _2646 = frontier_phi_72_pred_1;
                    _2644 = frontier_phi_72_pred_2;
                    _2642 = frontier_phi_72_pred_3;
                    _2640 = frontier_phi_72_pred_4;
                    _2638 = frontier_phi_72_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2638;
                        _2777 = _2640;
                        _2778 = _2642;
                        _2779 = _2644;
                        _2780 = _2646;
                        _2781 = _2648;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2648;
                frontier_phi_60_61_ladder_1 = _2646;
                frontier_phi_60_61_ladder_2 = _2642;
                frontier_phi_60_61_ladder_3 = _2640;
                frontier_phi_60_61_ladder_4 = _2638;
                frontier_phi_60_61_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_60_61_ladder = _2534;
                frontier_phi_60_61_ladder_1 = _2532;
                frontier_phi_60_61_ladder_2 = _2528;
                frontier_phi_60_61_ladder_3 = _2526;
                frontier_phi_60_61_ladder_4 = _2524;
                frontier_phi_60_61_ladder_5 = _2530;
            }
            _2637 = frontier_phi_60_61_ladder_4;
            _2639 = frontier_phi_60_61_ladder_3;
            _2641 = frontier_phi_60_61_ladder_2;
            _2643 = frontier_phi_60_61_ladder_5;
            _2645 = frontier_phi_60_61_ladder_1;
            _2647 = frontier_phi_60_61_ladder;
        }
        float _2652 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2457 = (_2652 * _2643) + _1988;
        _2459 = (_2652 * _2645) + _1990;
        _2461 = (_2652 * _2647) + _1992;
        _2463 = ((_2637 * 0.039999999105930328369140625) * _2652) + _2311;
        _2465 = ((_2639 * 0.039999999105930328369140625) * _2652) + _2313;
        _2467 = ((_2641 * 0.039999999105930328369140625) * _2652) + _2315;
    }
    else
    {
        _2457 = _1988;
        _2459 = _1990;
        _2461 = _1992;
        _2463 = _2311;
        _2465 = _2313;
        _2467 = _2315;
    }
    float _4331 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4342 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4353 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    uint _2487 = _418 + 6u;
    float _2495 = _377 / cbSceneParam._m0[86u].x;
    float _2496 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2510 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2512 = _2510.x;
    float _2513 = _2510.y;
    float _2514 = _2510.z;
    float _2515 = _2510.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2549 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2550 = _2549 / _310;
        float _2561 = _2550 * _362;
        float _2562 = _363 * _2550;
        float _2563 = (-0.0) - _2562;
        float _2565 = _2550 * _364;
        float _2567 = (cbSceneParam._m0[77u].w * _2563) / _2549;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2562;
        float _2575 = sqrt(((_2561 * _2561) + (_2562 * _2562)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2549)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2738;
        if (abs((_2563 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2738 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2700 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2738 = ((abs(_2575 / _2563) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2585 * _2709) - exp2(_2585 * _2710)) * _2698))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2740 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, 1.0), 0.0);
        float _2749 = exp2((_2738 * (-1.44269502162933349609375)) * (1.0 - _2740.w));
        float _2750 = log2(_2749);
        float _2766 = log2(_2515);
        _2587 = (exp2(_2766 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].x)) * _2740.x) / cbSceneParam._m0[78u].x)) + _2512;
        _2589 = (exp2(_2766 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].y)) * _2740.y) / cbSceneParam._m0[78u].y)) + _2513;
        _2591 = (exp2(_2766 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].z)) * _2740.z) / cbSceneParam._m0[78u].z)) + _2514;
        _2593 = _2749 * _2515;
    }
    else
    {
        _2587 = _2512;
        _2589 = _2513;
        _2591 = _2514;
        _2593 = _2515;
    }
    float _2605 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2606 = _2605 == 3.0;
    float _2607 = log2(_2593);
    float _2614 = exp2(_2607 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2457 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _445))) + ((_2463 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2615 = exp2(_2607 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2459 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _445))) + ((_2465 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2616 = exp2(_2607 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2461 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _445))) + ((_2467 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2625 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2625 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.y = _2625 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.z = _2625 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.w = cbInstanceData._m0[_2487].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2487].w;
}


