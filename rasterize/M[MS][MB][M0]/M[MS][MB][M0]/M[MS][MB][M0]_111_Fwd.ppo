#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1151;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3457 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _370) + _445;
    float _457 = ((((_424.x - _443) * _370) + _443) * 2.0) + (-1.0);
    float _458 = ((((_424.y - _444) * _370) + _444) * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3468 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _467 = _457 + ((((_397.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _468 = _458 + ((((_397.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _471 = fma(_464, _222, fma(_468, _229, _467 * _215));
    float _474 = fma(_464, _223, fma(_468, _230, _467 * _216));
    float _477 = fma(_464, _224, fma(_468, _231, _467 * _217));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = 1.0 - _527;
    float _532 = ((_527 - _528) * cbMtdParam._m0[24u].z) + _528;
    float _534 = (cbMtdParam._m0[19u].x + dot(vec4(_481 * _471, _481 * _474, _481 * _477, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_532 * cbMtdParam._m0[21u].z);
    float _3479 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _550 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_532 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3490 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _555 = ((_535 * (cbMtdParam._m0[17u].x - _377)) * _551) + _377;
    float _556 = ((_535 * (cbMtdParam._m0[17u].y - _378)) * _551) + _378;
    float _557 = ((_535 * (cbMtdParam._m0[17u].z - _379)) * _551) + _379;
    float _562 = (((_397.z - _454) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _454;
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _582 = (_575.x * 2.0) + (-1.0);
    float _583 = (_575.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3501 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _593 = (((_575.z - _562) * _535) * _551) + _562;
    float _608 = (((cbMtdParam._m0[21u].x * _467) + ((_582 - _467) * _535)) * _551) + _467;
    float _609 = (((cbMtdParam._m0[21u].x * _468) + ((_583 - _468) * _535)) * _551) + _468;
    float _610 = (((sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) - _464) * _535) * _551) + _464;
    float _615 = cbMtdParam._m0[22u].x + _497.w;
    float _618 = fma(_610, _222, fma(_609, _229, _608 * _215));
    float _621 = fma(_610, _223, fma(_609, _230, _608 * _216));
    float _624 = fma(_610, _224, fma(_609, _231, _608 * _217));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3512 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _632 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3534 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3545 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3556 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _739 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _742 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _756 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3567 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _780 = ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _629) - _709;
    float _789 = (_784 * _630) - _710;
    float _790 = (_784 * _631) - _711;
    float _794 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3600 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_632);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1150;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _875 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _879 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _883 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _908 = _841 + _629;
        float _909 = _845 + _630;
        float _910 = _849 + _631;
        float _920 = fma(_910, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908)) - _875;
        float _921 = fma(_910, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908)) - _879;
        float _922 = fma(_910, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908)) - _883;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_875 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_879 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[34u].z) + ((((((_883 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _978 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_944.x + (-0.5));
        float _980 = _978 * (_944.y + (-0.5));
        float _981 = _978 * (_944.z + (-0.5));
        float _988 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_951.x + (-0.5));
        float _990 = _988 * (_951.y + (-0.5));
        float _991 = _988 * (_951.z + (-0.5));
        float _998 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_958.x + (-0.5));
        float _1000 = _998 * (_958.y + (-0.5));
        float _1001 = _998 * (_958.z + (-0.5));
        float _1008 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_965.x + (-0.5));
        float _1010 = _1008 * (_965.y + (-0.5));
        float _1011 = _1008 * (_965.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1032 = (dot(vec3(_629, _630, _631), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1042 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3648 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1044 + 1.0))) + _1049) * _1012;
        float _1059 = _980 * 0.5;
        float _1060 = _990 * 0.5;
        float _1061 = _1000 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_629, _630, _631), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3681 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1086 + 1.0))) + _1091) * _1013;
        float _1101 = _981 * 0.5;
        float _1102 = _991 * 0.5;
        float _1103 = _1001 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_629, _630, _631), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3714 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1128 + 1.0))) + _1133) * _1014;
        _1150 = _981;
        _1152 = _980;
        _1153 = _979;
        _1154 = _991;
        _1155 = _990;
        _1156 = _989;
        _1157 = _1001;
        _1158 = _1000;
        _1159 = _999;
        _1160 = _1014;
        _1161 = _1013;
        _1162 = _1012;
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = _1151;
        _1152 = _1151;
        _1153 = _1151;
        _1154 = _1151;
        _1155 = _1151;
        _1156 = _1151;
        _1157 = _1151;
        _1158 = _1151;
        _1159 = _1151;
        _1160 = _1151;
        _1161 = _1151;
        _1162 = _1151;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1194 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1198 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1221 = _841 + _629;
        float _1222 = _845 + _630;
        float _1223 = _849 + _631;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_629, _630, _631), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3777 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_629, _630, _631), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3810 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_629, _630, _631), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3843 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1151;
        _1460 = _1151;
        _1461 = _1151;
        _1462 = _1151;
        _1463 = _1151;
        _1464 = _1151;
        _1465 = _1151;
        _1466 = _1151;
        _1467 = _1151;
        _1468 = _1151;
        _1469 = _1151;
        _1470 = _1151;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _788 * 0.5;
    float _1528 = _789 * 0.5;
    float _1529 = _790 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1570;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1150, _1154, _1157, _1160));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1581;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1572 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1585 = (_1581 * cbModelParam._m0[1u].x) + (_1570 * (1.0 - cbModelParam._m0[1u].x));
    float _1595 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1595 : min(cbModelParam._m0[25u].z, _1595));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1658 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1661 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1689 = frontier_phi_14_12_ladder;
        }
        float _1890;
        if (_1658 > 0.0)
        {
            _1890 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1890 = frontier_phi_23_19_ladder;
        }
        float _2133;
        if (_1661 > 0.0)
        {
            _2133 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2133 = frontier_phi_35_30_ladder;
        }
        float _2135 = isnan(_1890) ? _1689 : (isnan(_1689) ? _1890 : min(_1689, _1890));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1655) + _1644;
        float _2141 = (_2136 * _1658) + _1648;
        float _2142 = (_2136 * _1661) + _1652;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2143;
        float _2147 = _2143 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 > _2147) || ((_2141 < _2145) || ((_2140 < _2145) || (_2140 > _2147))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2142, cbModelParam._m0[9u].z, fma(_2141, cbModelParam._m0[9u].y, _2140 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2142, cbModelParam._m0[10u].z, fma(_2141, cbModelParam._m0[10u].y, _2140 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2142, cbModelParam._m0[11u].z, fma(_2141, cbModelParam._m0[11u].y, _2140 * cbModelParam._m0[11u].x))), _1596);
            frontier_phi_13_35_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_13_35_ladder_2;
        _1679 = frontier_phi_13_35_ladder_1;
        _1681 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1596);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1740 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1744 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1748 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1751 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1754 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1757 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1895;
        if (_1751 > 0.0)
        {
            _1895 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1895 = frontier_phi_25_21_ladder;
        }
        float _2160;
        if (_1754 > 0.0)
        {
            _2160 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2160 = frontier_phi_37_32_ladder;
        }
        float _2365;
        if (_1757 > 0.0)
        {
            _2365 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2365 = frontier_phi_46_43_ladder;
        }
        float _2367 = isnan(_2160) ? _1895 : (isnan(_1895) ? _2160 : min(_1895, _2160));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1751) + _1740;
        float _2373 = (_2368 * _1754) + _1744;
        float _2374 = (_2368 * _1757) + _1748;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_22_46_ladder = _2573.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2573.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2573.x * cbModelParam._m0[1u].z;
        }
        _1776 = frontier_phi_22_46_ladder_2;
        _1778 = frontier_phi_22_46_ladder_1;
        _1780 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1686);
        _1776 = _1760.x * cbModelParam._m0[1u].z;
        _1778 = _1760.y * cbModelParam._m0[1u].z;
        _1780 = _1760.z * cbModelParam._m0[1u].z;
    }
    float _1792 = ((((1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_809 * _796)) * _780;
    float _1793 = _1792 * ((cbModelParam._m0[1u].w * (_1776 - _1677)) + _1677);
    float _1794 = _1792 * ((cbModelParam._m0[1u].w * (_1778 - _1679)) + _1679);
    float _1795 = _1792 * ((cbModelParam._m0[1u].w * (_1780 - _1681)) + _1681);
    float _1798 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1793 * cbSceneParam._m0[91u].x));
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _780 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1849 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1853 = _1816 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_629, _630, _631));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_629, _630, _631));
    float _3979 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _3990 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1833].x * _1839) * _1874) + ((cbLight._m0[_1843].x * _1849) * _1872);
    float _1882 = ((_1839 * cbLight._m0[_1833].y) * _1874) + ((_1849 * cbLight._m0[_1843].y) * _1872);
    float _1883 = ((_1839 * cbLight._m0[_1833].z) * _1874) + ((_1849 * cbLight._m0[_1843].z) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1816 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _4001 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1927 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2104 = _1816 + 7u;
        float _2120 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4017 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2123 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1945 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _1900;
        _1947 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _1902;
        _1949 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _1904;
    }
    uint _1952 = _1816 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _632) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1816].x + _709;
    float _1968 = cbLight._m0[_1816].y + _710;
    float _1969 = cbLight._m0[_1816].z + _711;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1816].xyz));
    float _4033 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _1981 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1982 = dot(vec3(_629, _630, _631), vec3(_1974, _1975, _1976));
    float _4055 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1974, _1975, _1976));
    float _4066 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1981 * ((_1980 * _2006) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2006) + _1966) * _1980))) * _1980;
    float _4077 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2030 = _1816 + 9u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _632) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1853].x + _709;
    float _2044 = cbLight._m0[_1853].y + _710;
    float _2045 = cbLight._m0[_1853].z + _711;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1853].xyz));
    float _4088 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2057 = dot(vec3(_629, _630, _631), vec3(_2050, _2051, _2052));
    float _4099 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2050, _2051, _2052));
    float _4110 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2042 * _2042;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2042;
    float _2089 = (0.5 / (((_1981 * ((_2056 * _2079) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2079) + _2042) * _2056))) * _2056;
    float _4121 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2091 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    float _2101 = (((_2078 * cbLight._m0[_2030].x) * _2091) * _1839) + (((_2005 * cbLight._m0[_1952].x) * _2019) * _1849);
    float _2102 = (((_2078 * cbLight._m0[_2030].y) * _2091) * _1839) + (((_2005 * cbLight._m0[_1952].y) * _2019) * _1849);
    float _2103 = (((_2078 * cbLight._m0[_2030].z) * _2091) * _1839) + (((_2005 * cbLight._m0[_1952].z) * _2019) * _1849);
    float _2165;
    float _2167;
    float _2169;
    if (_1889)
    {
        _2165 = _2101;
        _2167 = _2102;
        _2169 = _2103;
    }
    else
    {
        uint _2171 = _1816 + 2u;
        uint _2175 = _1816 + 10u;
        float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _632) * 0.949999988079071044921875);
        float _2190 = _2189 * _2189;
        float _2191 = cbLight._m0[_2171].x + _709;
        float _2192 = cbLight._m0[_2171].y + _710;
        float _2193 = cbLight._m0[_2171].z + _711;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2198 = _2197 * _2191;
        float _2199 = _2197 * _2192;
        float _2200 = _2197 * _2193;
        float _2201 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2171].xyz));
        float _4132 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2205 = dot(vec3(_629, _630, _631), vec3(_2198, _2199, _2200));
        float _4143 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2198, _2199, _2200));
        float _4154 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2213 = _2190 * _2190;
        float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
        float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2227 = 1.0 - _2190;
        float _2237 = (0.5 / (((_1981 * ((_2204 * _2227) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2227) + _2190) * _2204))) * _2204;
        float _4165 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
        float _2240 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2165 = (((_2226 * cbLight._m0[_2175].x) * _2239) * _2240) + _2101;
        _2167 = (((_2226 * cbLight._m0[_2175].y) * _2239) * _2240) + _2102;
        _2169 = (((_2226 * cbLight._m0[_2175].z) * _2239) * _2240) + _2103;
    }
    float _2275;
    float _2277;
    float _2279;
    if (_1907)
    {
        _2275 = _2165;
        _2277 = _2167;
        _2279 = _2169;
    }
    else
    {
        uint _2286 = _1816 + 3u;
        uint _2290 = _1816 + 11u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _632) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _709;
        float _2307 = cbLight._m0[_2286].y + _710;
        float _2308 = cbLight._m0[_2286].z + _711;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2286].xyz));
        float _4181 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2320 = dot(vec3(_629, _630, _631), vec3(_2313, _2314, _2315));
        float _4192 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4203 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2342 = 1.0 - _2305;
        float _2352 = (0.5 / (((_1981 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2342) + _2305) * _2319))) * _2319;
        float _4214 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2354 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2355 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2275 = (((_2341 * cbLight._m0[_2290].x) * _2354) * _2355) + _2165;
        _2277 = (((_2341 * cbLight._m0[_2290].y) * _2354) * _2355) + _2167;
        _2279 = (((_2341 * cbLight._m0[_2290].z) * _2354) * _2355) + _2169;
    }
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_1814.y == 0u)
    {
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2430;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2430;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2430;
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.x;
        uint _2457 = uint((float(_2445.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2446))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2446)));
        float _2467 = (log2(_2433 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2468 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        uint _2471 = uint(isnan(14.0) ? _2468 : (isnan(_2468) ? 14.0 : min(_2468, 14.0)));
        uvec4 _2476 = texelFetch(g_lightClusterGridBuffer, int(((_2471 << 2u) + (_2457 << 6u)) >> 2u));
        uint _2477 = _2476.x;
        uint _2478 = _2445.z;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((((1u << ((_2478 >> 4u) & 15u)) + 4294967295u) & _2477) == 0u) || ((_2478 & 240u) == 0u))
        {
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
        }
        else
        {
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2471 << 5u) + (_2457 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2739)
                {
                    frontier_phi_61_pred = _2723;
                    frontier_phi_61_pred_1 = _2728;
                    frontier_phi_61_pred_2 = _2727;
                    frontier_phi_61_pred_3 = _2726;
                    frontier_phi_61_pred_4 = _2725;
                    frontier_phi_61_pred_5 = _2724;
                }
                else
                {
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    uint _2853;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2738;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2857 = uint(findLSB(_2853)) + (_2729 << 5u);
                        uint _2854 = (_2853 + 4294967295u) & _2853;
                        uint _2859 = _2857 * 48u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 3u)).x));
                        uint _2879 = (_2857 * 48u) + 4u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2898 = (_2857 * 48u) + 8u;
                        vec3 _2909 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x));
                        float _2913 = _2873.x - _2431;
                        float _2914 = _2873.y - _2432;
                        float _2915 = _2873.z - _2433;
                        float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                        float _2919 = inversesqrt(_2916);
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2923 = dot(vec3(_736, _739, _742), vec3(_2920, _2921, _2922));
                        float _2928 = 1.0 - (_2916 * _2873.w);
                        float _4240 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2930 = sqrt(_2916) * _2892.w;
                        float _2933 = 1.39999997615814208984375 / (_2930 + 1.39999997615814208984375);
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2923) + _2934;
                        float _2940 = _2930 * _2930;
                        float _2944 = ((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2929) / ((_2940 * 0.699999988079071044921875) + 1.0);
                        float _2948 = (-0.0) - _2431;
                        float _2949 = (-0.0) - _2432;
                        float _2950 = (-0.0) - _2433;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2965 = exp2(log2(1.0 / ((_2940 * 3.5) + 5.0)) * 0.25);
                        float _2966 = 1.0 - _796;
                        float _2973 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * (1.0 - (_2965 * _2965))));
                        float _2974 = _2973 * _2973;
                        float _2975 = _2974 * _2974;
                        float _2976 = _2955 + _2920;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2986 = dot(vec3(_736, _739, _742), vec3(_2955, _2956, _2957));
                        float _4256 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2990 = dot(vec3(_736, _739, _742), vec3(_2982 * _2976, _2982 * _2977, _2982 * _2978));
                        float _4267 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2997 = ((_2993 * _2993) * (_2975 + (-1.0))) + 1.0;
                        float _2998 = _2933 * _2974;
                        float _2999 = _2998 * _2998;
                        float _3002 = ((1.0 - _2999) * _2923) + _2999;
                        float _4278 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3004 = 1.0 - _2974;
                        float _3014 = (0.5 / (((_3003 * ((_2989 * _3004) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_3003 * _3004) + _2974) * _2989))) * _3003;
                        float _4289 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3025 = (((_2975 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_2997 * _2997) * ((_2940 * 2.1991131305694580078125) + 3.141590118408203125))) * _2929;
                        _2782 = (_2944 * _2892.x) + _2850;
                        _2783 = (_2944 * _2892.y) + _2851;
                        _2784 = (_2944 * _2892.z) + _2852;
                        _2779 = (_3025 * _2909.x) + _2847;
                        _2780 = (_3025 * _2909.y) + _2848;
                        _2781 = (_3025 * _2909.z) + _2849;
                        if (_2854 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2854;
                        }
                    }
                    frontier_phi_61_pred = _2779;
                    frontier_phi_61_pred_1 = _2784;
                    frontier_phi_61_pred_2 = _2783;
                    frontier_phi_61_pred_3 = _2782;
                    frontier_phi_61_pred_4 = _2781;
                    frontier_phi_61_pred_5 = _2780;
                }
                _2579 = frontier_phi_61_pred;
                _2589 = frontier_phi_61_pred_1;
                _2587 = frontier_phi_61_pred_2;
                _2585 = frontier_phi_61_pred_3;
                _2583 = frontier_phi_61_pred_4;
                _2581 = frontier_phi_61_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2579;
                    _2724 = _2581;
                    _2725 = _2583;
                    _2726 = _2585;
                    _2727 = _2587;
                    _2728 = _2589;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
        }
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.z;
        uint _2595 = (_2593 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2595) & _2477) == 0u)
        {
            _2691 = _2578;
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
            float _2717 = _2716 * _2431;
            float _2718 = _2716 * _2432;
            float _2719 = _2716 * _2433;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2595 < ((_2593 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2830 = _2578;
                float _2831 = _2580;
                float _2832 = _2582;
                float _2833 = _2584;
                float _2834 = _2586;
                float _2835 = _2588;
                uint _2836 = _2595;
                uint _2845;
                bool _2846;
                for (;;)
                {
                    _2845 = texelFetch(g_lightClassification, int((((_2471 << 5u) + (_2457 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                    _2846 = _2845 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2846)
                    {
                        frontier_phi_67_pred = _2833;
                        frontier_phi_67_pred_1 = _2834;
                        frontier_phi_67_pred_2 = _2835;
                        frontier_phi_67_pred_3 = _2832;
                        frontier_phi_67_pred_4 = _2831;
                        frontier_phi_67_pred_5 = _2830;
                    }
                    else
                    {
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        uint _3049 = _2845;
                        uint _3050;
                        vec4 _3075;
                        float _3076;
                        vec4 _3091;
                        vec3 _3103;
                        vec4 _3118;
                        vec4 _3133;
                        float _3179;
                        bool _3180;
                        for (;;)
                        {
                            uint _3060 = ((_2836 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3049));
                            _3050 = (_3049 + 4294967295u) & _3049;
                            uint _3062 = _3060 * 40u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.w;
                            uint _3078 = (_3060 * 40u) + 4u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3060 * 40u) + 8u;
                            _3103 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x));
                            uint _3105 = (_3060 * 40u) + 16u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3060 * 40u) + 20u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3060 * 40u) + 24u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3154 = (_3060 * 40u) + 28u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3179 = fma(_2433, _3167.z, fma(_2432, _3167.y, _3167.x * _2431)) + _3167.w;
                            _3180 = !((fma(_2433, _3148.z, fma(_2432, _3148.y, _3148.x * _2431)) + _3148.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3180)
                            {
                                float _3207 = _3075.x - _2431;
                                float _3208 = _3075.y - _2432;
                                float _3209 = _3075.z - _2433;
                                float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                                float _3213 = inversesqrt(_3210);
                                float _3214 = _3213 * _3207;
                                float _3215 = _3213 * _3208;
                                float _3216 = _3213 * _3209;
                                float _3220 = 1.0 - (_3210 / (_3076 * _3076));
                                float _4300 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3225 = sqrt(_3210) * _3091.w;
                                float _3227 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                                float _3228 = _3227 * _3227;
                                float _3231 = ((1.0 - _3228) * dot(vec3(_3214, _3215, _3216), vec3(_736, _739, _742))) + _3228;
                                float _3234 = _3225 * _3225;
                                float _3238 = (fma(_2433, _3118.z, fma(_2432, _3118.y, _3118.x * _2431)) + _3118.w) / _3179;
                                float _3239 = (fma(_2433, _3133.z, fma(_2432, _3133.y, _3133.x * _2431)) + _3133.w) / _3179;
                                float _3243 = 1.0 - dot(vec2(_3238, _3239), vec2(_3238, _3239));
                                float _4316 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3245 = _3244 * (((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3221) / ((_3234 * 0.699999988079071044921875) + 1.0));
                                float _3257 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                                float _3258 = 1.0 - _796;
                                float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                                float _3266 = _3265 * _3265;
                                float _3267 = _3266 * _3266;
                                float _3268 = _3214 - _2717;
                                float _3269 = _3215 - _2718;
                                float _3270 = _3216 - _2719;
                                float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                                float _3278 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4327 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3282 = dot(vec3(_736, _739, _742), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                                float _4338 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                                float _3290 = _3227 * _3266;
                                float _3291 = _3290 * _3290;
                                float _3297 = ((1.0 - _3291) * dot(vec3(_736, _739, _742), vec3(_3214, _3215, _3216))) + _3291;
                                float _4349 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3299 = 1.0 - _3266;
                                float _3309 = (0.5 / (((_3298 * ((_3281 * _3299) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3266) * _3281))) * _3298;
                                float _4360 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3319 = (_3244 * _3221) * (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3289 * _3289) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3319 * _3103.x;
                                frontier_phi_73_pred_1 = _3319 * _3103.y;
                                frontier_phi_73_pred_2 = _3245 * _3091.z;
                                frontier_phi_73_pred_3 = _3245 * _3091.y;
                                frontier_phi_73_pred_4 = _3245 * _3091.x;
                                frontier_phi_73_pred_5 = _3319 * _3103.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_73_pred;
                            _3324 = frontier_phi_73_pred_1;
                            _3328 = frontier_phi_73_pred_2;
                            _3327 = frontier_phi_73_pred_3;
                            _3326 = frontier_phi_73_pred_4;
                            _3325 = frontier_phi_73_pred_5;
                            _3033 = _3326 + _3046;
                            _3034 = _3327 + _3047;
                            _3035 = _3328 + _3048;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            _3032 = _3325 + _3045;
                            if (_3050 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3050;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3033;
                        frontier_phi_67_pred_1 = _3034;
                        frontier_phi_67_pred_2 = _3035;
                        frontier_phi_67_pred_3 = _3032;
                        frontier_phi_67_pred_4 = _3031;
                        frontier_phi_67_pred_5 = _3030;
                    }
                    _2698 = frontier_phi_67_pred;
                    _2700 = frontier_phi_67_pred_1;
                    _2702 = frontier_phi_67_pred_2;
                    _2696 = frontier_phi_67_pred_3;
                    _2694 = frontier_phi_67_pred_4;
                    _2692 = frontier_phi_67_pred_5;
                    uint _2837 = _2836 + 1u;
                    if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2830 = _2692;
                        _2831 = _2694;
                        _2832 = _2696;
                        _2833 = _2698;
                        _2834 = _2700;
                        _2835 = _2702;
                        _2836 = _2837;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2700;
                frontier_phi_55_56_ladder_1 = _2702;
                frontier_phi_55_56_ladder_2 = _2698;
                frontier_phi_55_56_ladder_3 = _2696;
                frontier_phi_55_56_ladder_4 = _2694;
                frontier_phi_55_56_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_55_56_ladder = _2586;
                frontier_phi_55_56_ladder_1 = _2588;
                frontier_phi_55_56_ladder_2 = _2584;
                frontier_phi_55_56_ladder_3 = _2582;
                frontier_phi_55_56_ladder_4 = _2580;
                frontier_phi_55_56_ladder_5 = _2578;
            }
            _2691 = frontier_phi_55_56_ladder_5;
            _2693 = frontier_phi_55_56_ladder_4;
            _2695 = frontier_phi_55_56_ladder_3;
            _2697 = frontier_phi_55_56_ladder_2;
            _2699 = frontier_phi_55_56_ladder;
            _2701 = frontier_phi_55_56_ladder_1;
        }
        float _2706 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2490 = (_2706 * _2697) + _1945;
        _2492 = (_2706 * _2699) + _1947;
        _2494 = (_2706 * _2701) + _1949;
        _2496 = ((_2691 * 0.039999999105930328369140625) * _2706) + _2275;
        _2498 = ((_2693 * 0.039999999105930328369140625) * _2706) + _2277;
        _2500 = ((_2695 * 0.039999999105930328369140625) * _2706) + _2279;
    }
    else
    {
        _2490 = _1945;
        _2492 = _1947;
        _2494 = _1949;
        _2496 = _2275;
        _2498 = _2277;
        _2500 = _2279;
    }
    float _4376 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4387 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4398 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    uint _2520 = _234 + 6u;
    float _2528 = _717 / cbSceneParam._m0[86u].x;
    float _2529 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2543 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2528, _2529, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2545 = _2543.x;
    float _2546 = _2543.y;
    float _2547 = _2543.z;
    float _2548 = _2543.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2603 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2604 = _2603 / _650;
        float _2615 = _2604 * _702;
        float _2616 = _703 * _2604;
        float _2617 = (-0.0) - _2616;
        float _2619 = _2604 * _704;
        float _2621 = (cbSceneParam._m0[77u].w * _2617) / _2603;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2616;
        float _2629 = sqrt(((_2615 * _2615) + (_2616 * _2616)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2603)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2617 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2754 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2792 = ((abs(_2629 / _2617) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2639 * _2763) - exp2(_2639 * _2764)) * _2752))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2528, _2529, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2548);
        _2641 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2545;
        _2643 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2546;
        _2645 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2547;
        _2647 = _2803 * _2548;
    }
    else
    {
        _2641 = _2545;
        _2643 = _2546;
        _2645 = _2547;
        _2647 = _2548;
    }
    float _2659 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2660 = _2659 == 3.0;
    float _2661 = log2(_2647);
    float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2490 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _780))) + ((_2496 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2492 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _780))) + ((_2498 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2494 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _780))) + ((_2500 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2679 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2679 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.y = _2679 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.z = _2679 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.w = cbInstanceData._m0[_2520].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2520].w;
}


