#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1133;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3438 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _444 = ((_414.z - _435) * _366) + _435;
    float _447 = ((((_414.x - _433) * _366) + _433) * 2.0) + (-1.0);
    float _449 = ((((_414.y - _434) * _366) + _434) * 2.0) + (-1.0);
    float _450 = dot(vec2(_447, _449), vec2(_447, _449));
    float _3449 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    float _458 = fma(_455, _218, fma(_449, _225, _447 * _211));
    float _461 = fma(_455, _219, fma(_449, _226, _447 * _212));
    float _464 = fma(_455, _220, fma(_449, _227, _447 * _213));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _519 = ((_514 - _515) * cbMtdParam._m0[24u].z) + _515;
    float _521 = (cbMtdParam._m0[19u].x + dot(vec4(_468 * _458, _468 * _461, _468 * _464, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_519 * cbMtdParam._m0[21u].z);
    float _3460 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _537 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_519 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3471 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _542 = ((_522 * ((_394.x * cbMtdParam._m0[18u].x) - _373)) * _538) + _373;
    float _543 = ((_522 * ((_394.y * cbMtdParam._m0[18u].y) - _374)) * _538) + _374;
    float _544 = ((_522 * ((_394.z * cbMtdParam._m0[18u].z) - _375)) * _538) + _375;
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _564 = (_557.x * 2.0) + (-1.0);
    float _565 = (_557.y * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3482 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _575 = (((_557.z - _444) * _522) * _538) + _444;
    float _590 = (((cbMtdParam._m0[21u].x * _447) + ((_564 - _447) * _522)) * _538) + _447;
    float _591 = (((cbMtdParam._m0[21u].x * _449) + ((_565 - _449) * _522)) * _538) + _449;
    float _592 = (((sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) - _455) * _522) * _538) + _455;
    float _597 = cbMtdParam._m0[22u].x + _484.w;
    float _600 = fma(_592, _218, fma(_591, _225, _590 * _211));
    float _603 = fma(_592, _219, fma(_591, _226, _590 * _212));
    float _606 = fma(_592, _220, fma(_591, _227, _590 * _213));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3493 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _614 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3515 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3526 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3537 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _721 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _724 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _738 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3548 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _762 = ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * TEXCOORD_5.w) * _758.x;
    float _763 = dot(vec3(_611, _612, _613), vec3(_691, _692, _693));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _611) - _691;
    float _771 = (_766 * _612) - _692;
    float _772 = (_766 * _613) - _693;
    float _776 = abs(dot(vec3(_691, _692, _693), vec3(_611, _612, _613)));
    float _3581 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_614);
    float _791 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_831, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823));
        float _861 = fma(_831, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823));
        float _865 = fma(_831, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823));
        float _890 = _823 + _611;
        float _891 = _827 + _612;
        float _892 = _831 + _613;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_611, _612, _613), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3629 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_611, _612, _613), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3662 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_611, _612, _613), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3695 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_831, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823));
        float _1176 = fma(_831, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823));
        float _1180 = fma(_831, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823));
        float _1203 = _823 + _611;
        float _1204 = _827 + _612;
        float _1205 = _831 + _613;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_611, _612, _613), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3758 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_611, _612, _613), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3791 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_611, _612, _613), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3824 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1133;
        _1442 = _1133;
        _1443 = _1133;
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1147)) + _1147;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _770 * 0.5;
    float _1510 = _771 * 0.5;
    float _1511 = _772 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _614);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_831, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_831, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_831, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1639 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1642 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1670 = frontier_phi_14_12_ladder;
        }
        float _1870;
        if (_1639 > 0.0)
        {
            _1870 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1870 = frontier_phi_23_19_ladder;
        }
        float _2113;
        if (_1642 > 0.0)
        {
            _2113 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2113 = frontier_phi_35_30_ladder;
        }
        float _2115 = isnan(_1870) ? _1670 : (isnan(_1670) ? _1870 : min(_1670, _1870));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1636) + _1625;
        float _2121 = (_2116 * _1639) + _1629;
        float _2122 = (_2116 * _1642) + _1633;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_13_35_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_13_35_ladder_2;
        _1660 = frontier_phi_13_35_ladder_1;
        _1662 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1578);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _614);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_831, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_831, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_831, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1734 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1737 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1875;
        if (_1731 > 0.0)
        {
            _1875 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1875 = frontier_phi_25_21_ladder;
        }
        float _2140;
        if (_1734 > 0.0)
        {
            _2140 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2140 = frontier_phi_37_32_ladder;
        }
        float _2345;
        if (_1737 > 0.0)
        {
            _2345 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2345 = frontier_phi_46_43_ladder;
        }
        float _2347 = isnan(_2140) ? _1875 : (isnan(_1875) ? _2140 : min(_1875, _2140));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1731) + _1720;
        float _2353 = (_2348 * _1734) + _1724;
        float _2354 = (_2348 * _1737) + _1728;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2354, cbModelParam._m0[17u].z, fma(_2353, cbModelParam._m0[17u].y, _2352 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2354, cbModelParam._m0[18u].z, fma(_2353, cbModelParam._m0[18u].y, _2352 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2354, cbModelParam._m0[19u].z, fma(_2353, cbModelParam._m0[19u].y, _2352 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_22_46_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_22_46_ladder_2;
        _1758 = frontier_phi_22_46_ladder_1;
        _1760 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1667);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1772 = ((((1.0 - _791) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_791 * _778)) * _762;
    float _1773 = _1772 * ((cbModelParam._m0[1u].w * (_1756 - _1658)) + _1658);
    float _1774 = _1772 * ((cbModelParam._m0[1u].w * (_1758 - _1660)) + _1660);
    float _1775 = _1772 * ((cbModelParam._m0[1u].w * (_1760 - _1662)) + _1662);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _762 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1829 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1833 = _1796 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_611, _612, _613));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_611, _612, _613));
    float _3960 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _3971 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1813].x * _1819) * _1854) + ((cbLight._m0[_1823].x * _1829) * _1852);
    float _1862 = ((_1819 * cbLight._m0[_1813].y) * _1854) + ((_1829 * cbLight._m0[_1823].y) * _1852);
    float _1863 = ((_1819 * cbLight._m0[_1813].z) * _1854) + ((_1829 * cbLight._m0[_1823].z) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1869)
    {
        _1880 = _1861;
        _1882 = _1862;
        _1884 = _1863;
    }
    else
    {
        uint _1888 = _1796 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3982 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1907 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1861;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1862;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1863;
    }
    bool _1887 = _1867.y == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1887)
    {
        _1925 = _1880;
        _1927 = _1882;
        _1929 = _1884;
    }
    else
    {
        uint _2084 = _1796 + 7u;
        float _2100 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _3998 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2103 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1925 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _1880;
        _1927 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _1882;
        _1929 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _1884;
    }
    uint _1932 = _1796 + 8u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _614) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1796].x + _691;
    float _1948 = cbLight._m0[_1796].y + _692;
    float _1949 = cbLight._m0[_1796].z + _693;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1796].xyz));
    float _4014 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _1961 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1962 = dot(vec3(_611, _612, _613), vec3(_1954, _1955, _1956));
    float _4036 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1954, _1955, _1956));
    float _4047 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1946 * _1946;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1985 = (exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1986 = 1.0 - _1946;
    float _1997 = (0.5 / (((_1961 * ((_1960 * _1986) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _1986) + _1946) * _1960))) * _1960;
    float _4058 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    uint _2010 = _1796 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _614) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1833].x + _691;
    float _2024 = cbLight._m0[_1833].y + _692;
    float _2025 = cbLight._m0[_1833].z + _693;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1833].xyz));
    float _4069 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2037 = dot(vec3(_611, _612, _613), vec3(_2030, _2031, _2032));
    float _4080 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2030, _2031, _2032));
    float _4091 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2022;
    float _2069 = (0.5 / (((_1961 * ((_2036 * _2059) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2059) + _2022) * _2036))) * _2036;
    float _4102 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2081 = (((_2058 * cbLight._m0[_2010].x) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].x) * _1999) * _1829);
    float _2082 = (((_2058 * cbLight._m0[_2010].y) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].y) * _1999) * _1829);
    float _2083 = (((_2058 * cbLight._m0[_2010].z) * _2071) * _1819) + (((_1985 * cbLight._m0[_1932].z) * _1999) * _1829);
    float _2145;
    float _2147;
    float _2149;
    if (_1869)
    {
        _2145 = _2081;
        _2147 = _2082;
        _2149 = _2083;
    }
    else
    {
        uint _2151 = _1796 + 2u;
        uint _2155 = _1796 + 10u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _614) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _691;
        float _2172 = cbLight._m0[_2151].y + _692;
        float _2173 = cbLight._m0[_2151].z + _693;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2151].xyz));
        float _4113 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2185 = dot(vec3(_611, _612, _613), vec3(_2178, _2179, _2180));
        float _4124 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4135 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1961 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2207) + _2170) * _2184))) * _2184;
        float _4146 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2145 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2081;
        _2147 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2082;
        _2149 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2083;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1887)
    {
        _2255 = _2145;
        _2257 = _2147;
        _2259 = _2149;
    }
    else
    {
        uint _2266 = _1796 + 3u;
        uint _2270 = _1796 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _614) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _691;
        float _2287 = cbLight._m0[_2266].y + _692;
        float _2288 = cbLight._m0[_2266].z + _693;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2266].xyz));
        float _4162 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2300 = dot(vec3(_611, _612, _613), vec3(_2293, _2294, _2295));
        float _4173 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4184 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2322 = 1.0 - _2285;
        float _2332 = (0.5 / (((_1961 * ((_2299 * _2322) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2322) + _2285) * _2299))) * _2299;
        float _4195 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2255 = (((_2321 * cbLight._m0[_2270].x) * _2334) * _2335) + _2145;
        _2257 = (((_2321 * cbLight._m0[_2270].y) * _2334) * _2335) + _2147;
        _2259 = (((_2321 * cbLight._m0[_2270].z) * _2334) * _2335) + _2149;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1794.y == 0u)
    {
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2410;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2410;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2410;
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.x;
        uint _2437 = uint((float(_2425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2426))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2426)));
        float _2447 = (log2(_2413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2448 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        uint _2451 = uint(isnan(14.0) ? _2448 : (isnan(_2448) ? 14.0 : min(_2448, 14.0)));
        uvec4 _2456 = texelFetch(g_lightClusterGridBuffer, int(((_2451 << 2u) + (_2437 << 6u)) >> 2u));
        uint _2457 = _2456.x;
        uint _2458 = _2425.z;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((((1u << ((_2458 >> 4u) & 15u)) + 4294967295u) & _2457) == 0u) || ((_2458 & 240u) == 0u))
        {
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
        }
        else
        {
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            uint _2709 = 0u;
            uint _2718;
            bool _2719;
            for (;;)
            {
                _2718 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                _2719 = _2718 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2719)
                {
                    frontier_phi_61_pred = _2703;
                    frontier_phi_61_pred_1 = _2708;
                    frontier_phi_61_pred_2 = _2707;
                    frontier_phi_61_pred_3 = _2706;
                    frontier_phi_61_pred_4 = _2705;
                    frontier_phi_61_pred_5 = _2704;
                }
                else
                {
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    uint _2833;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2718;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    for (;;)
                    {
                        uint _2837 = uint(findLSB(_2833)) + (_2709 << 5u);
                        uint _2834 = (_2833 + 4294967295u) & _2833;
                        uint _2839 = _2837 * 48u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2859 = (_2837 * 48u) + 4u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 3u)).x));
                        uint _2878 = (_2837 * 48u) + 8u;
                        vec3 _2889 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x));
                        float _2893 = _2853.x - _2411;
                        float _2894 = _2853.y - _2412;
                        float _2895 = _2853.z - _2413;
                        float _2896 = dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895));
                        float _2899 = inversesqrt(_2896);
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2903 = dot(vec3(_718, _721, _724), vec3(_2900, _2901, _2902));
                        float _2908 = 1.0 - (_2896 * _2853.w);
                        float _4221 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2909 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2910 = sqrt(_2896) * _2872.w;
                        float _2913 = 1.39999997615814208984375 / (_2910 + 1.39999997615814208984375);
                        float _2914 = _2913 * _2913;
                        float _2917 = ((1.0 - _2914) * _2903) + _2914;
                        float _2920 = _2910 * _2910;
                        float _2924 = ((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2909) / ((_2920 * 0.699999988079071044921875) + 1.0);
                        float _2928 = (-0.0) - _2411;
                        float _2929 = (-0.0) - _2412;
                        float _2930 = (-0.0) - _2413;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2945 = exp2(log2(1.0 / ((_2920 * 3.5) + 5.0)) * 0.25);
                        float _2946 = 1.0 - _778;
                        float _2953 = sqrt(1.0 - ((1.0 - (_2946 * _2946)) * (1.0 - (_2945 * _2945))));
                        float _2954 = _2953 * _2953;
                        float _2955 = _2954 * _2954;
                        float _2956 = _2935 + _2900;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2966 = dot(vec3(_718, _721, _724), vec3(_2935, _2936, _2937));
                        float _4237 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2969 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2970 = dot(vec3(_718, _721, _724), vec3(_2962 * _2956, _2962 * _2957, _2962 * _2958));
                        float _4248 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2977 = ((_2973 * _2973) * (_2955 + (-1.0))) + 1.0;
                        float _2978 = _2913 * _2954;
                        float _2979 = _2978 * _2978;
                        float _2982 = ((1.0 - _2979) * _2903) + _2979;
                        float _4259 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2984 = 1.0 - _2954;
                        float _2994 = (0.5 / (((_2983 * ((_2969 * _2984) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2983 * _2984) + _2954) * _2969))) * _2983;
                        float _4270 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _3005 = (((_2955 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2977 * _2977) * ((_2920 * 2.1991131305694580078125) + 3.141590118408203125))) * _2909;
                        _2762 = (_2924 * _2872.x) + _2830;
                        _2763 = (_2924 * _2872.y) + _2831;
                        _2764 = (_2924 * _2872.z) + _2832;
                        _2759 = (_3005 * _2889.x) + _2827;
                        _2760 = (_3005 * _2889.y) + _2828;
                        _2761 = (_3005 * _2889.z) + _2829;
                        if (_2834 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2834;
                        }
                    }
                    frontier_phi_61_pred = _2759;
                    frontier_phi_61_pred_1 = _2764;
                    frontier_phi_61_pred_2 = _2763;
                    frontier_phi_61_pred_3 = _2762;
                    frontier_phi_61_pred_4 = _2761;
                    frontier_phi_61_pred_5 = _2760;
                }
                _2559 = frontier_phi_61_pred;
                _2569 = frontier_phi_61_pred_1;
                _2567 = frontier_phi_61_pred_2;
                _2565 = frontier_phi_61_pred_3;
                _2563 = frontier_phi_61_pred_4;
                _2561 = frontier_phi_61_pred_5;
                uint _2710 = _2709 + 1u;
                if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2703 = _2559;
                    _2704 = _2561;
                    _2705 = _2563;
                    _2706 = _2565;
                    _2707 = _2567;
                    _2708 = _2569;
                    _2709 = _2710;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
        }
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.z;
        uint _2575 = (_2573 >> 8u) & 15u;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((4294967295u << _2575) & _2457) == 0u)
        {
            _2671 = _2558;
            _2673 = _2560;
            _2675 = _2562;
            _2677 = _2564;
            _2679 = _2566;
            _2681 = _2568;
        }
        else
        {
            float _2696 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
            float _2697 = _2696 * _2411;
            float _2698 = _2696 * _2412;
            float _2699 = _2696 * _2413;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2575 < ((_2573 >> 12u) & 15u))
            {
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2810 = _2558;
                float _2811 = _2560;
                float _2812 = _2562;
                float _2813 = _2564;
                float _2814 = _2566;
                float _2815 = _2568;
                uint _2816 = _2575;
                uint _2825;
                bool _2826;
                for (;;)
                {
                    _2825 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2816 << 2u)) >> 2u)).x;
                    _2826 = _2825 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2826)
                    {
                        frontier_phi_67_pred = _2813;
                        frontier_phi_67_pred_1 = _2814;
                        frontier_phi_67_pred_2 = _2815;
                        frontier_phi_67_pred_3 = _2812;
                        frontier_phi_67_pred_4 = _2811;
                        frontier_phi_67_pred_5 = _2810;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        uint _3029 = _2825;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3098;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3040 = ((_2816 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3085 = (_3040 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3040 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3040 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3040 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2413, _3148.z, fma(_2412, _3148.y, _3148.x * _2411)) + _3148.w;
                            _3161 = !((fma(_2413, _3129.z, fma(_2412, _3129.y, _3129.x * _2411)) + _3129.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3055.x - _2411;
                                float _3189 = _3055.y - _2412;
                                float _3190 = _3055.z - _2413;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3056 * _3056));
                                float _4281 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3206 = sqrt(_3191) * _3071.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_718, _721, _724))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2413, _3098.z, fma(_2412, _3098.y, _3098.x * _2411)) + _3098.w) / _3160;
                                float _3220 = (fma(_2413, _3114.z, fma(_2412, _3114.y, _3114.x * _2411)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4297 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _778;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2697;
                                float _3250 = _3196 - _2698;
                                float _3251 = _3197 - _2699;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_718, _721, _724), vec3((-0.0) - _2697, (-0.0) - _2698, (-0.0) - _2699));
                                float _4308 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3263 = dot(vec3(_718, _721, _724), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4319 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_718, _721, _724), vec3(_3195, _3196, _3197))) + _3272;
                                float _4330 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4341 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3300 * _3083.x;
                                frontier_phi_73_pred_1 = _3300 * _3083.y;
                                frontier_phi_73_pred_2 = _3226 * _3071.z;
                                frontier_phi_73_pred_3 = _3226 * _3071.y;
                                frontier_phi_73_pred_4 = _3226 * _3071.x;
                                frontier_phi_73_pred_5 = _3300 * _3083.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3304 = frontier_phi_73_pred;
                            _3305 = frontier_phi_73_pred_1;
                            _3309 = frontier_phi_73_pred_2;
                            _3308 = frontier_phi_73_pred_3;
                            _3307 = frontier_phi_73_pred_4;
                            _3306 = frontier_phi_73_pred_5;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3013;
                        frontier_phi_67_pred_1 = _3014;
                        frontier_phi_67_pred_2 = _3015;
                        frontier_phi_67_pred_3 = _3012;
                        frontier_phi_67_pred_4 = _3011;
                        frontier_phi_67_pred_5 = _3010;
                    }
                    _2678 = frontier_phi_67_pred;
                    _2680 = frontier_phi_67_pred_1;
                    _2682 = frontier_phi_67_pred_2;
                    _2676 = frontier_phi_67_pred_3;
                    _2674 = frontier_phi_67_pred_4;
                    _2672 = frontier_phi_67_pred_5;
                    uint _2817 = _2816 + 1u;
                    if (_2817 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2810 = _2672;
                        _2811 = _2674;
                        _2812 = _2676;
                        _2813 = _2678;
                        _2814 = _2680;
                        _2815 = _2682;
                        _2816 = _2817;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2680;
                frontier_phi_55_56_ladder_1 = _2682;
                frontier_phi_55_56_ladder_2 = _2678;
                frontier_phi_55_56_ladder_3 = _2676;
                frontier_phi_55_56_ladder_4 = _2674;
                frontier_phi_55_56_ladder_5 = _2672;
            }
            else
            {
                frontier_phi_55_56_ladder = _2566;
                frontier_phi_55_56_ladder_1 = _2568;
                frontier_phi_55_56_ladder_2 = _2564;
                frontier_phi_55_56_ladder_3 = _2562;
                frontier_phi_55_56_ladder_4 = _2560;
                frontier_phi_55_56_ladder_5 = _2558;
            }
            _2671 = frontier_phi_55_56_ladder_5;
            _2673 = frontier_phi_55_56_ladder_4;
            _2675 = frontier_phi_55_56_ladder_3;
            _2677 = frontier_phi_55_56_ladder_2;
            _2679 = frontier_phi_55_56_ladder;
            _2681 = frontier_phi_55_56_ladder_1;
        }
        float _2686 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2470 = (_2686 * _2677) + _1925;
        _2472 = (_2686 * _2679) + _1927;
        _2474 = (_2686 * _2681) + _1929;
        _2476 = ((_2671 * 0.039999999105930328369140625) * _2686) + _2255;
        _2478 = ((_2673 * 0.039999999105930328369140625) * _2686) + _2257;
        _2480 = ((_2675 * 0.039999999105930328369140625) * _2686) + _2259;
    }
    else
    {
        _2470 = _1925;
        _2472 = _1927;
        _2474 = _1929;
        _2476 = _2255;
        _2478 = _2257;
        _2480 = _2259;
    }
    float _4357 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4368 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4379 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    uint _2500 = _230 + 6u;
    float _2508 = _699 / cbSceneParam._m0[86u].x;
    float _2509 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2523 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2525 = _2523.x;
    float _2526 = _2523.y;
    float _2527 = _2523.z;
    float _2528 = _2523.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2583 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2584 = _2583 / _632;
        float _2595 = _2584 * _684;
        float _2596 = _685 * _2584;
        float _2597 = (-0.0) - _2596;
        float _2599 = _2584 * _686;
        float _2601 = (cbSceneParam._m0[77u].w * _2597) / _2583;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2596;
        float _2609 = sqrt(((_2595 * _2595) + (_2596 * _2596)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2583)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2772;
        if (abs((_2597 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2772 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2732 = 1.0 / cbSceneParam._m0[80u].x;
            float _2733 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2734 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            _2772 = ((abs(_2609 / _2597) * cbSceneParam._m0[80u].y) * ((((_2743 - _2744) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))))) * _2732)) - ((exp2(_2619 * _2743) - exp2(_2619 * _2744)) * _2732))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2774 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, 1.0), 0.0);
        float _2783 = exp2((_2772 * (-1.44269502162933349609375)) * (1.0 - _2774.w));
        float _2784 = log2(_2783);
        float _2800 = log2(_2528);
        _2621 = (exp2(_2800 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].x)) * _2774.x) / cbSceneParam._m0[78u].x)) + _2525;
        _2623 = (exp2(_2800 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].y)) * _2774.y) / cbSceneParam._m0[78u].y)) + _2526;
        _2625 = (exp2(_2800 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].z)) * _2774.z) / cbSceneParam._m0[78u].z)) + _2527;
        _2627 = _2783 * _2528;
    }
    else
    {
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
        _2627 = _2528;
    }
    float _2639 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2640 = _2639 == 3.0;
    float _2641 = log2(_2627);
    float _2648 = exp2(_2641 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2470 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _762))) + ((_2476 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2649 = exp2(_2641 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2472 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _762))) + ((_2478 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2650 = exp2(_2641 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2474 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _762))) + ((_2480 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2659 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2659 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.y = _2659 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.z = _2659 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.w = cbInstanceData._m0[_2500].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2500].w;
}


