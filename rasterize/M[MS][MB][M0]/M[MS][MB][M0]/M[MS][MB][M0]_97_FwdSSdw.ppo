#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1134;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3464 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _370) + _445;
    float _457 = ((((_424.x - _443) * _370) + _443) * 2.0) + (-1.0);
    float _458 = ((((_424.y - _444) * _370) + _444) * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3475 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    float _467 = _457 + ((((_397.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _468 = _458 + ((((_397.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _471 = fma(_464, _222, fma(_468, _229, _467 * _215));
    float _474 = fma(_464, _223, fma(_468, _230, _467 * _216));
    float _477 = fma(_464, _224, fma(_468, _231, _467 * _217));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = 1.0 - _527;
    float _534 = (cbMtdParam._m0[19u].x + dot(vec4(_481 * _471, _481 * _474, _481 * _477, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_527 - _528) * cbMtdParam._m0[24u].z) + _528) * cbMtdParam._m0[21u].z);
    float _3486 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _542 = (_535 * (cbMtdParam._m0[17u].x - _377)) + _377;
    float _543 = (_535 * (cbMtdParam._m0[17u].y - _378)) + _378;
    float _544 = (_535 * (cbMtdParam._m0[17u].z - _379)) + _379;
    float _549 = (((_397.z - _454) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _454;
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _569 = (_562.x * 2.0) + (-1.0);
    float _570 = (_562.y * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3497 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _579 = ((_562.z - _549) * _535) + _549;
    float _589 = ((sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) - _464) * _535) + _464;
    float _592 = (((_569 - _467) * _535) + _467) + (cbMtdParam._m0[21u].x * _467);
    float _593 = (((_570 - _468) * _535) + _468) + (cbMtdParam._m0[21u].x * _468);
    float _598 = cbMtdParam._m0[22u].x + _497.w;
    float _601 = fma(_589, _222, fma(_593, _229, _592 * _215));
    float _604 = fma(_589, _223, fma(_593, _230, _592 * _216));
    float _607 = fma(_589, _224, fma(_593, _231, _592 * _217));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3508 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _615 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3530 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3541 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3552 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _722 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _725 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _739 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3563 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _763 = ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * TEXCOORD_5.w) * _759.x;
    float _764 = dot(vec3(_612, _613, _614), vec3(_692, _693, _694));
    float _767 = _764 * 2.0;
    float _771 = (_767 * _612) - _692;
    float _772 = (_767 * _613) - _693;
    float _773 = (_767 * _614) - _694;
    float _777 = abs(dot(vec3(_692, _693, _694), vec3(_612, _613, _614)));
    float _3596 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _779 = sqrt(_615);
    float _792 = exp2((_779 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_779 * 3.0));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _858 = fma(_832, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824));
        float _862 = fma(_832, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824));
        float _866 = fma(_832, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824));
        float _891 = _824 + _612;
        float _892 = _828 + _613;
        float _893 = _832 + _614;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _858;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _862;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _866;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_858 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_862 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_866 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_612, _613, _614), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3644 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_612, _613, _614), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3677 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_612, _613, _614), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3710 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_832, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _824));
        float _1177 = fma(_832, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _824));
        float _1181 = fma(_832, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _824));
        float _1204 = _824 + _612;
        float _1205 = _828 + _613;
        float _1206 = _832 + _614;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_612, _613, _614), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3773 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_612, _613, _614), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3806 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_612, _613, _614), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3839 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1134;
        _1443 = _1134;
        _1444 = _1134;
        _1445 = _1134;
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = _1134;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1147)) + _1147;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1148)) + _1148;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _771 * 0.5;
    float _1511 = _772 * 0.5;
    float _1512 = _773 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_832, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_832, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_832, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_773, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771));
        float _1641 = fma(_773, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771));
        float _1644 = fma(_773, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1672 = frontier_phi_14_12_ladder;
        }
        float _1894;
        if (_1641 > 0.0)
        {
            _1894 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1894 = frontier_phi_23_19_ladder;
        }
        float _2140;
        if (_1644 > 0.0)
        {
            _2140 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2140 = frontier_phi_35_30_ladder;
        }
        float _2142 = isnan(_1894) ? _1672 : (isnan(_1672) ? _1894 : min(_1672, _1894));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1638) + _1627;
        float _2148 = (_2143 * _1641) + _1631;
        float _2149 = (_2143 * _1644) + _1635;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_13_35_ladder_2;
        _1662 = frontier_phi_13_35_ladder_1;
        _1664 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_771, _772, _773), _1579);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_832, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_832, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_832, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_773, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771));
        float _1737 = fma(_773, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771));
        float _1740 = fma(_773, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771));
        float _1899;
        if (_1734 > 0.0)
        {
            _1899 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1899 = frontier_phi_25_21_ladder;
        }
        float _2167;
        if (_1737 > 0.0)
        {
            _2167 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2167 = frontier_phi_37_32_ladder;
        }
        float _2372;
        if (_1740 > 0.0)
        {
            _2372 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2372 = frontier_phi_46_43_ladder;
        }
        float _2374 = isnan(_2167) ? _1899 : (isnan(_1899) ? _2167 : min(_1899, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1734) + _1723;
        float _2380 = (_2375 * _1737) + _1727;
        float _2381 = (_2375 * _1740) + _1731;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_22_46_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_22_46_ladder_2;
        _1761 = frontier_phi_22_46_ladder_1;
        _1763 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_771, _772, _773), _1669);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _792) * ((_779 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_792 * _779)) * _763;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    vec4 _1795 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_700, _701));
    float _1797 = _1795.w;
    float _1809 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1797);
    float _1810 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1797);
    float _1811 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1797);
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _763 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1853 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1857 = _1817 | 1u;
    float _1868 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_612, _613, _614));
    float _1871 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_612, _613, _614));
    float _3975 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _3986 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1876 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.3183098733425140380859375;
    float _1878 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1885 = ((cbLight._m0[_1834].x * _1840) * _1878) + (((cbLight._m0[_1844].x * _1809) * _1853) * _1876);
    float _1886 = ((_1840 * cbLight._m0[_1834].y) * _1878) + (((cbLight._m0[_1844].y * _1810) * _1853) * _1876);
    float _1887 = ((_1840 * cbLight._m0[_1834].z) * _1878) + (((cbLight._m0[_1844].z * _1811) * _1853) * _1876);
    uvec4 _1891 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1893 = _1891.x == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1893)
    {
        _1904 = _1885;
        _1906 = _1886;
        _1908 = _1887;
    }
    else
    {
        uint _1912 = _1817 + 6u;
        float _1928 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3997 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1931 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1904 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1885;
        _1906 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1886;
        _1908 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1887;
    }
    bool _1911 = _1891.y == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1911)
    {
        _1949 = _1904;
        _1951 = _1906;
        _1953 = _1908;
    }
    else
    {
        uint _2111 = _1817 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4013 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2130 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1949 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1904;
        _1951 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1906;
        _1953 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1908;
    }
    uint _1956 = _1817 + 8u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _615) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1817].x + _692;
    float _1972 = cbLight._m0[_1817].y + _693;
    float _1973 = cbLight._m0[_1817].z + _694;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1817].xyz));
    float _4029 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _1985 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1986 = dot(vec3(_612, _613, _614), vec3(_1978, _1979, _1980));
    float _4051 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1978, _1979, _1980));
    float _4062 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1970 * _1970;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1985 * ((_1984 * _2010) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2010) + _1970) * _1984))) * _1984;
    float _4073 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    uint _2037 = _1817 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _615) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1857].x + _692;
    float _2051 = cbLight._m0[_1857].y + _693;
    float _2052 = cbLight._m0[_1857].z + _694;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1857].xyz));
    float _4084 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2064 = dot(vec3(_612, _613, _614), vec3(_2057, _2058, _2059));
    float _4095 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2057, _2058, _2059));
    float _4106 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1985 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2086) + _2049) * _2063))) * _2063;
    float _4117 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1840) + ((((cbLight._m0[_1956].x * _1809) * _2009) * _2023) * _1853);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1840) + ((((cbLight._m0[_1956].y * _1810) * _2009) * _2023) * _1853);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1840) + ((((cbLight._m0[_1956].z * _1811) * _2009) * _2023) * _1853);
    float _2172;
    float _2174;
    float _2176;
    if (_1893)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1817 + 2u;
        uint _2182 = _1817 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _615) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _692;
        float _2199 = cbLight._m0[_2178].y + _693;
        float _2200 = cbLight._m0[_2178].z + _694;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2178].xyz));
        float _4128 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2212 = dot(vec3(_612, _613, _614), vec3(_2205, _2206, _2207));
        float _4139 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4150 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1985 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2234) + _2197) * _2211))) * _2211;
        float _4161 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1911)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1817 + 3u;
        uint _2297 = _1817 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _615) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _692;
        float _2314 = cbLight._m0[_2293].y + _693;
        float _2315 = cbLight._m0[_2293].z + _694;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2293].xyz));
        float _4177 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2327 = dot(vec3(_612, _613, _614), vec3(_2320, _2321, _2322));
        float _4188 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4199 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1985 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2349) + _2312) * _2326))) * _2326;
        float _4210 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1815.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            uint _2736 = 0u;
            uint _2745;
            bool _2746;
            for (;;)
            {
                _2745 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                _2746 = _2745 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2746)
                {
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2745;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2736 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2438;
                        float _2921 = _2880.y - _2439;
                        float _2922 = _2880.z - _2440;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_719, _722, _725), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4236 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2438;
                        float _2956 = (-0.0) - _2439;
                        float _2957 = (-0.0) - _2440;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _779;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_719, _722, _725), vec3(_2962, _2963, _2964));
                        float _4252 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2997 = dot(vec3(_719, _722, _725), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4263 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4274 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4285 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2789 = (_2951 * _2899.x) + _2857;
                        _2790 = (_2951 * _2899.y) + _2858;
                        _2791 = (_2951 * _2899.z) + _2859;
                        _2786 = (_3032 * _2916.x) + _2854;
                        _2787 = (_3032 * _2916.y) + _2855;
                        _2788 = (_3032 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                _2586 = frontier_phi_61_pred;
                _2596 = frontier_phi_61_pred_1;
                _2594 = frontier_phi_61_pred_2;
                _2592 = frontier_phi_61_pred_3;
                _2590 = frontier_phi_61_pred_4;
                _2588 = frontier_phi_61_pred_5;
                uint _2737 = _2736 + 1u;
                if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2730 = _2586;
                    _2731 = _2588;
                    _2732 = _2590;
                    _2733 = _2592;
                    _2734 = _2594;
                    _2735 = _2596;
                    _2736 = _2737;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
        }
        else
        {
            float _2723 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2724 = _2723 * _2438;
            float _2725 = _2723 * _2439;
            float _2726 = _2723 * _2440;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2837 = _2585;
                float _2838 = _2587;
                float _2839 = _2589;
                float _2840 = _2591;
                float _2841 = _2593;
                float _2842 = _2595;
                uint _2843 = _2602;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2853)
                    {
                        frontier_phi_67_pred = _2840;
                        frontier_phi_67_pred_1 = _2841;
                        frontier_phi_67_pred_2 = _2842;
                        frontier_phi_67_pred_3 = _2839;
                        frontier_phi_67_pred_4 = _2838;
                        frontier_phi_67_pred_5 = _2837;
                    }
                    else
                    {
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        uint _3056 = _2852;
                        uint _3057;
                        vec4 _3082;
                        float _3083;
                        vec4 _3098;
                        vec3 _3110;
                        vec4 _3125;
                        vec4 _3140;
                        float _3186;
                        bool _3187;
                        for (;;)
                        {
                            uint _3067 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3056));
                            _3057 = (_3056 + 4294967295u) & _3056;
                            uint _3069 = _3067 * 40u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3083 = _3082.w;
                            uint _3085 = (_3067 * 40u) + 4u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3067 * 40u) + 8u;
                            _3110 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x));
                            uint _3112 = (_3067 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3067 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3067 * 40u) + 24u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3161 = (_3067 * 40u) + 28u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3186 = fma(_2440, _3174.z, fma(_2439, _3174.y, _3174.x * _2438)) + _3174.w;
                            _3187 = !((fma(_2440, _3155.z, fma(_2439, _3155.y, _3155.x * _2438)) + _3155.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3187)
                            {
                                float _3214 = _3082.x - _2438;
                                float _3215 = _3082.y - _2439;
                                float _3216 = _3082.z - _2440;
                                float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                                float _3220 = inversesqrt(_3217);
                                float _3221 = _3220 * _3214;
                                float _3222 = _3220 * _3215;
                                float _3223 = _3220 * _3216;
                                float _3227 = 1.0 - (_3217 / (_3083 * _3083));
                                float _4296 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3232 = sqrt(_3217) * _3098.w;
                                float _3234 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                                float _3235 = _3234 * _3234;
                                float _3238 = ((1.0 - _3235) * dot(vec3(_3221, _3222, _3223), vec3(_719, _722, _725))) + _3235;
                                float _3241 = _3232 * _3232;
                                float _3245 = (fma(_2440, _3125.z, fma(_2439, _3125.y, _3125.x * _2438)) + _3125.w) / _3186;
                                float _3246 = (fma(_2440, _3140.z, fma(_2439, _3140.y, _3140.x * _2438)) + _3140.w) / _3186;
                                float _3250 = 1.0 - dot(vec2(_3245, _3246), vec2(_3245, _3246));
                                float _4312 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3252 = _3251 * (((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3228) / ((_3241 * 0.699999988079071044921875) + 1.0));
                                float _3264 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                                float _3265 = 1.0 - _779;
                                float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                                float _3273 = _3272 * _3272;
                                float _3274 = _3273 * _3273;
                                float _3275 = _3221 - _2724;
                                float _3276 = _3222 - _2725;
                                float _3277 = _3223 - _2726;
                                float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                                float _3285 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2724, (-0.0) - _2725, (-0.0) - _2726));
                                float _4323 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3289 = dot(vec3(_719, _722, _725), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                                float _4334 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                                float _3297 = _3234 * _3273;
                                float _3298 = _3297 * _3297;
                                float _3304 = ((1.0 - _3298) * dot(vec3(_719, _722, _725), vec3(_3221, _3222, _3223))) + _3298;
                                float _4345 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3306 = 1.0 - _3273;
                                float _3316 = (0.5 / (((_3305 * ((_3288 * _3306) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3273) * _3288))) * _3305;
                                float _4356 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3326 = (_3251 * _3228) * (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3296 * _3296) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3326 * _3110.x;
                                frontier_phi_73_pred_1 = _3326 * _3110.y;
                                frontier_phi_73_pred_2 = _3252 * _3098.z;
                                frontier_phi_73_pred_3 = _3252 * _3098.y;
                                frontier_phi_73_pred_4 = _3252 * _3098.x;
                                frontier_phi_73_pred_5 = _3326 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3330 = frontier_phi_73_pred;
                            _3331 = frontier_phi_73_pred_1;
                            _3335 = frontier_phi_73_pred_2;
                            _3334 = frontier_phi_73_pred_3;
                            _3333 = frontier_phi_73_pred_4;
                            _3332 = frontier_phi_73_pred_5;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            _3037 = _3330 + _3050;
                            _3038 = _3331 + _3051;
                            _3039 = _3332 + _3052;
                            if (_3057 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3057;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3040;
                        frontier_phi_67_pred_1 = _3041;
                        frontier_phi_67_pred_2 = _3042;
                        frontier_phi_67_pred_3 = _3039;
                        frontier_phi_67_pred_4 = _3038;
                        frontier_phi_67_pred_5 = _3037;
                    }
                    _2705 = frontier_phi_67_pred;
                    _2707 = frontier_phi_67_pred_1;
                    _2709 = frontier_phi_67_pred_2;
                    _2703 = frontier_phi_67_pred_3;
                    _2701 = frontier_phi_67_pred_4;
                    _2699 = frontier_phi_67_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2699;
                        _2838 = _2701;
                        _2839 = _2703;
                        _2840 = _2705;
                        _2841 = _2707;
                        _2842 = _2709;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2707;
                frontier_phi_55_56_ladder_1 = _2709;
                frontier_phi_55_56_ladder_2 = _2705;
                frontier_phi_55_56_ladder_3 = _2703;
                frontier_phi_55_56_ladder_4 = _2701;
                frontier_phi_55_56_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_55_56_ladder = _2593;
                frontier_phi_55_56_ladder_1 = _2595;
                frontier_phi_55_56_ladder_2 = _2591;
                frontier_phi_55_56_ladder_3 = _2589;
                frontier_phi_55_56_ladder_4 = _2587;
                frontier_phi_55_56_ladder_5 = _2585;
            }
            _2698 = frontier_phi_55_56_ladder_5;
            _2700 = frontier_phi_55_56_ladder_4;
            _2702 = frontier_phi_55_56_ladder_3;
            _2704 = frontier_phi_55_56_ladder_2;
            _2706 = frontier_phi_55_56_ladder;
            _2708 = frontier_phi_55_56_ladder_1;
        }
        float _2713 = isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0));
        _2497 = (_2713 * _2704) + _1949;
        _2499 = (_2713 * _2706) + _1951;
        _2501 = (_2713 * _2708) + _1953;
        _2503 = ((_2698 * 0.039999999105930328369140625) * _2713) + _2282;
        _2505 = ((_2700 * 0.039999999105930328369140625) * _2713) + _2284;
        _2507 = ((_2702 * 0.039999999105930328369140625) * _2713) + _2286;
    }
    else
    {
        _2497 = _1949;
        _2499 = _1951;
        _2501 = _1953;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    float _4372 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4383 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4394 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    uint _2527 = _234 + 6u;
    float _2535 = _700 / cbSceneParam._m0[86u].x;
    float _2536 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2611 = _2610 / _633;
        float _2622 = _2611 * _685;
        float _2623 = _686 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _687;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2759 = 1.0 / cbSceneParam._m0[80u].x;
            float _2760 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2761 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            _2799 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2770 - _2771) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))))) * _2759)) - ((exp2(_2646 * _2770) - exp2(_2646 * _2771)) * _2759))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2555);
        _2648 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2810 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    float _2666 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2667 = _2666 == 3.0;
    float _2668 = log2(_2654);
    float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2497 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _763))) + ((_2503 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2499 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _763))) + ((_2505 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2501 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _763))) + ((_2507 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1568)) * cbPerFrame._m0[3u].x));
    float _2686 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2527].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
}


