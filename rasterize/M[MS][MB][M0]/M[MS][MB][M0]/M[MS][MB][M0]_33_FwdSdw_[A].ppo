#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1157;
float _3803;
float _3804;
float _3805;
float _3806;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _310 = _306.z;
    float _315 = (_306.x * 2.0) + (-1.0);
    float _317 = (_306.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3815 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    float _327 = fma(_324, _229, fma(_317, _236, _315 * _222));
    float _330 = fma(_324, _230, fma(_317, _237, _315 * _223));
    float _333 = fma(_324, _231, fma(_317, _238, _315 * _224));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _375 = _373.x;
    float _376 = 1.0 - _375;
    float _383 = ((_375 - _376) * cbMtdParam._m0[24u].z) + _376;
    float _385 = (cbMtdParam._m0[19u].x + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_383 * cbMtdParam._m0[21u].z);
    float _3826 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _388 = (-0.0) - cbMtdParam._m0[24u].y;
    float _390 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
    float _398 = _386 - ((_386 * TEXCOORD_8.x) * _391);
    float _399 = _386 - ((_386 * TEXCOORD_8.y) * _391);
    float _400 = _386 - ((_386 * TEXCOORD_8.z) * _391);
    float _407 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _411 = ((isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : min(_407, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _419 = (_411 - (((_383 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _411))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3857 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _424 = ((_398 * (cbMtdParam._m0[17u].x - _286)) * _420) + _286;
    float _425 = ((_399 * (cbMtdParam._m0[17u].y - _287)) * _420) + _287;
    float _426 = ((_400 * (cbMtdParam._m0[17u].z - _288)) * _420) + _288;
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _440 = _438.x;
    float _441 = 1.0 - _440;
    float _470 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_440 - _441) * cbMtdParam._m0[24u].w) + _441) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3868 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _479 = ((((cbMtdParam._m0[10u].x - _424) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _471) + _424;
    float _480 = ((((cbMtdParam._m0[10u].y - _425) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _471) + _425;
    float _481 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _426)) * _471) + _426;
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _502 = (_495.x * 2.0) + (-1.0);
    float _503 = (_495.y * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3879 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _513 = (((_495.z - _310) * _398) * _420) + _310;
    float _516 = ((cbMtdParam._m0[23u].y - _513) * _471) + _513;
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _541 = (_535.x * 2.0) + (-1.0);
    float _542 = (_535.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3890 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _563 = (((cbMtdParam._m0[21u].x * _315) + ((_502 - _315) * _398)) * _420) + _315;
    float _564 = (((cbMtdParam._m0[21u].x * _317) + ((_503 - _317) * _399)) * _420) + _317;
    float _565 = (((sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _324) * _400) * _420) + _324;
    float _576 = (((_541 - _563) + (_563 * cbMtdParam._m0[22u].z)) * _471) + _563;
    float _577 = (((_542 - _564) + (_564 * cbMtdParam._m0[22u].z)) * _471) + _564;
    float _578 = ((sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) - _565) * _471) + _565;
    float _580 = cbMtdParam._m0[22u].x + _306.w;
    float _583 = fma(_578, _229, fma(_577, _236, _576 * _222));
    float _586 = fma(_578, _230, fma(_577, _237, _576 * _223));
    float _589 = fma(_578, _231, fma(_577, _238, _576 * _224));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _594 = _593 * _583;
    float _595 = _593 * _586;
    float _596 = _593 * _589;
    float _3901 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _597 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3923 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3934 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3945 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _615 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    vec4 _679 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _681 = _679.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _838 = sqrt(((_665 * _665) + (_666 * _666)) + (_667 * _667));
        float _844 = (cbMatDynParam._m0[5u].x * _838) + cbMatDynParam._m0[5u].y;
        float _3956 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _849 = (cbMatDynParam._m0[5u].z * _838) + cbMatDynParam._m0[5u].w;
        float _3967 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _845)) + _845) < ((_681 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_596, cbSceneParam._m0[5u].z, fma(_595, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _594));
    float _717 = fma(_596, cbSceneParam._m0[6u].z, fma(_595, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _594));
    float _720 = fma(_596, cbSceneParam._m0[7u].z, fma(_595, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _594));
    uint _733 = _241 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3978 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _758 = ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * TEXCOORD_5.w) * _754.x;
    float _759 = dot(vec3(_594, _595, _596), vec3(_672, _673, _674));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _594) - _672;
    float _767 = (_762 * _595) - _673;
    float _768 = (_762 * _596) - _674;
    float _772 = abs(dot(vec3(_672, _673, _674), vec3(_594, _595, _596)));
    float _4011 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_597);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _885 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _889 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _914 = _819 + _594;
        float _915 = _823 + _595;
        float _916 = _827 + _596;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_594, _595, _596), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _4059 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_594, _595, _596), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _4092 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_594, _595, _596), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4125 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1203 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1207 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1230 = _819 + _594;
        float _1231 = _823 + _595;
        float _1232 = _827 + _596;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_594, _595, _596), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4188 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_594, _595, _596), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4221 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_594, _595, _596), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4254 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = _1157;
        _1479 = _1157;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _766 * 0.5;
    float _1537 = _767 * 0.5;
    float _1538 = _768 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1667 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1670 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1869;
        if (_1667 > 0.0)
        {
            _1869 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1869 = frontier_phi_26_22_ladder;
        }
        float _2165;
        if (_1670 > 0.0)
        {
            _2165 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2165 = frontier_phi_38_33_ladder;
        }
        float _2167 = isnan(_1869) ? _1698 : (isnan(_1698) ? _1869 : min(_1698, _1869));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1664) + _1653;
        float _2173 = (_2168 * _1667) + _1657;
        float _2174 = (_2168 * _1670) + _1661;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_16_38_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1605);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1763 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1766 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1874;
        if (_1760 > 0.0)
        {
            _1874 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1874 = frontier_phi_28_24_ladder;
        }
        float _2192;
        if (_1763 > 0.0)
        {
            _2192 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2192 = frontier_phi_40_35_ladder;
        }
        float _2519;
        if (_1766 > 0.0)
        {
            _2519 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2519 = frontier_phi_50_47_ladder;
        }
        float _2521 = isnan(_2192) ? _1874 : (isnan(_1874) ? _2192 : min(_1874, _2192));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1760) + _1749;
        float _2527 = (_2522 * _1763) + _1753;
        float _2528 = (_2522 * _1766) + _1757;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_50_ladder = _2646.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2646.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2646.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_50_ladder_2;
        _1787 = frontier_phi_25_50_ladder_1;
        _1789 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1801 = ((((1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_787 * _774)) * _758;
    float _1802 = _1801 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1803 = _1801 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1804 = _1801 * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1861 = _1848 / _1860;
    float _1862 = _1852 / _1860;
    float _1863 = _1856 / _1860;
    float _2010;
    float _2011;
    float _2012;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1890 = ((uint(_1863 > cbSceneParam._m0[59u].y) + uint(_1863 > cbSceneParam._m0[59u].x)) + uint(_1863 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1891 = _1890 + 43u;
        uint _1899 = _1890 + 44u;
        uint _1907 = _1890 + 45u;
        uint _1915 = _1890 + 46u;
        float _1926 = fma(_1860, cbSceneParam._m0[_1891].w, fma(_1856, cbSceneParam._m0[_1891].z, fma(_1852, cbSceneParam._m0[_1891].y, _1848 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1860, cbSceneParam._m0[_1899].w, fma(_1856, cbSceneParam._m0[_1899].z, fma(_1852, cbSceneParam._m0[_1899].y, _1848 * cbSceneParam._m0[_1899].x)));
        float _1938 = fma(_1860, cbSceneParam._m0[_1915].w, fma(_1856, cbSceneParam._m0[_1915].z, fma(_1852, cbSceneParam._m0[_1915].y, _1848 * cbSceneParam._m0[_1915].x)));
        float _1943 = cbSceneParam._m0[33u].z * _1938;
        float _1945 = cbSceneParam._m0[33u].w * _1938;
        float _1948 = fma(_1860, cbSceneParam._m0[_1907].w, fma(_1856, cbSceneParam._m0[_1907].z, fma(_1852, cbSceneParam._m0[_1907].y, _1848 * cbSceneParam._m0[_1907].x))) / _1938;
        float _1996 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
        float _4380 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2003 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 + _1926) / _1938, (_1945 + _1930) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 + _1926) / _1938, (_1930 - _1943) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1943) / _1938, (_1930 - _1945) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1945) / _1938, (_1943 + _1930) / _1938), _1948), 0.0)).x), vec4(0.25)));
        _2010 = 1.0 - (_2003 * cbSceneParam._m0[34u].x);
        _2011 = 1.0 - (_2003 * cbSceneParam._m0[34u].y);
        _2012 = 1.0 - (_2003 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2010 = 1.0;
        _2011 = 1.0;
        _2012 = 1.0;
    }
    float _2076;
    float _2078;
    float _2080;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2064 = fma(_1860, cbSceneParam._m0[63u].w, fma(_1856, cbSceneParam._m0[63u].z, fma(_1852, cbSceneParam._m0[63u].y, _1848 * cbSceneParam._m0[63u].x)));
        float _2065 = fma(_1860, cbSceneParam._m0[60u].w, fma(_1856, cbSceneParam._m0[60u].z, fma(_1852, cbSceneParam._m0[60u].y, _1848 * cbSceneParam._m0[60u].x))) / _2064;
        float _2066 = fma(_1860, cbSceneParam._m0[61u].w, fma(_1856, cbSceneParam._m0[61u].z, fma(_1852, cbSceneParam._m0[61u].y, _1848 * cbSceneParam._m0[61u].x))) / _2064;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2065 >= cbSceneParam._m0[64u].x) && (_2066 >= cbSceneParam._m0[64u].y)) && (_2065 <= cbSceneParam._m0[64u].z)) && (_2066 <= cbSceneParam._m0[64u].w))
        {
            float _2205 = fma(_1860, cbSceneParam._m0[62u].w, fma(_1856, cbSceneParam._m0[62u].z, fma(_1852, cbSceneParam._m0[62u].y, _1848 * cbSceneParam._m0[62u].x))) / _2064;
            float _2209 = isnan(cbSceneParam._m0[41u].w) ? _2205 : (isnan(_2205) ? cbSceneParam._m0[41u].w : max(_2205, cbSceneParam._m0[41u].w));
            float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
            float _4396 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
            float _2259 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2065, cbSceneParam._m0[33u].w + _2066), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2065, _2066 - cbSceneParam._m0[33u].z), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].z, _2066 - cbSceneParam._m0[33u].w), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2066), _2209), 0.0)).x), vec4(0.25)));
            float _2263 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
            float _2264 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
            float _2265 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2265) ? _2012 : (isnan(_2012) ? _2265 : min(_2012, _2265));
            frontier_phi_37_36_ladder_1 = isnan(_2264) ? _2011 : (isnan(_2011) ? _2264 : min(_2011, _2264));
            frontier_phi_37_36_ladder_2 = isnan(_2263) ? _2010 : (isnan(_2010) ? _2263 : min(_2010, _2263));
        }
        else
        {
            frontier_phi_37_36_ladder = _2012;
            frontier_phi_37_36_ladder_1 = _2011;
            frontier_phi_37_36_ladder_2 = _2010;
        }
        _2076 = frontier_phi_37_36_ladder_2;
        _2078 = frontier_phi_37_36_ladder_1;
        _2080 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2076 = _2010;
        _2078 = _2011;
        _2080 = _2012;
    }
    uvec4 _2085 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _2087 = _2085.x * 14u;
    uint _2088 = _2087 + 13u;
    float _2095 = _758 + (-1.0);
    float _2100 = (cbLight._m0[_2088].x * _2095) + 1.0;
    float _2101 = (cbLight._m0[_2088].y * _2095) + 1.0;
    float _2102 = (cbLight._m0[_2088].z * _2095) + 1.0;
    float _2103 = (cbLight._m0[_2088].w * _2095) + 1.0;
    uint _2104 = _2087 + 5u;
    float _2110 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2114 = _2087 + 4u;
    float _2124 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2128 = _2087 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_594, _595, _596));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_594, _595, _596));
    float _4432 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4443 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2104].x * _2110) * _2149) + (((cbLight._m0[_2114].x * _2076) * _2124) * _2147);
    float _2157 = ((_2110 * cbLight._m0[_2104].y) * _2149) + (((cbLight._m0[_2114].y * _2078) * _2124) * _2147);
    float _2158 = ((_2110 * cbLight._m0[_2104].z) * _2149) + (((cbLight._m0[_2114].z * _2080) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2087 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2164)
    {
        _2266 = _2156;
        _2268 = _2157;
        _2270 = _2158;
    }
    else
    {
        uint _2274 = _2087 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2087 + 2u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4454 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2293 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2156;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2157;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2158;
    }
    bool _2273 = _2162.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2273)
    {
        _2328 = _2266;
        _2330 = _2268;
        _2332 = _2270;
    }
    else
    {
        uint _2490 = _2087 + 7u;
        float _2506 = (dot(vec3(cbLight._m0[_2087 + 3u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4470 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2509 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2328 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2266;
        _2330 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2268;
        _2332 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2270;
    }
    uint _2335 = _2087 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _597) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2087].x + _672;
    float _2351 = cbLight._m0[_2087].y + _673;
    float _2352 = cbLight._m0[_2087].z + _674;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2087].xyz));
    float _4486 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2364 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2365 = dot(vec3(_594, _595, _596), vec3(_2357, _2358, _2359));
    float _4508 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2357, _2358, _2359));
    float _4519 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2364 * ((_2363 * _2389) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2389) + _2349) * _2363))) * _2363;
    float _4530 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2416 = _2087 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _597) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2128].x + _672;
    float _2430 = cbLight._m0[_2128].y + _673;
    float _2431 = cbLight._m0[_2128].z + _674;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2128].xyz));
    float _4541 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2443 = dot(vec3(_594, _595, _596), vec3(_2436, _2437, _2438));
    float _4552 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2436, _2437, _2438));
    float _4563 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2465 = 1.0 - _2428;
    float _2475 = (0.5 / (((_2364 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2465) + _2428) * _2442))) * _2442;
    float _4574 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2487 = (((_2464 * cbLight._m0[_2416].x) * _2477) * _2110) + ((((cbLight._m0[_2335].x * _2076) * _2388) * _2402) * _2124);
    float _2488 = (((_2464 * cbLight._m0[_2416].y) * _2477) * _2110) + ((((cbLight._m0[_2335].y * _2078) * _2388) * _2402) * _2124);
    float _2489 = (((_2464 * cbLight._m0[_2416].z) * _2477) * _2110) + ((((cbLight._m0[_2335].z * _2080) * _2388) * _2402) * _2124);
    float _2545;
    float _2547;
    float _2549;
    if (_2164)
    {
        _2545 = _2487;
        _2547 = _2488;
        _2549 = _2489;
    }
    else
    {
        uint _2551 = _2087 + 2u;
        uint _2555 = _2087 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _597) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _672;
        float _2572 = cbLight._m0[_2551].y + _673;
        float _2573 = cbLight._m0[_2551].z + _674;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2551].xyz));
        float _4585 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2585 = dot(vec3(_594, _595, _596), vec3(_2578, _2579, _2580));
        float _4596 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4607 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2364 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2607) + _2570) * _2584))) * _2584;
        float _4618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2545 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2487;
        _2547 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2488;
        _2549 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2489;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2273)
    {
        _2651 = _2545;
        _2653 = _2547;
        _2655 = _2549;
    }
    else
    {
        uint _2662 = _2087 + 3u;
        uint _2666 = _2087 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _597) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _672;
        float _2683 = cbLight._m0[_2662].y + _673;
        float _2684 = cbLight._m0[_2662].z + _674;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2662].xyz));
        float _4634 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2696 = dot(vec3(_594, _595, _596), vec3(_2689, _2690, _2691));
        float _4645 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4656 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2364 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2718) + _2681) * _2695))) * _2695;
        float _4667 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2651 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2545;
        _2653 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2547;
        _2655 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2549;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2085.y == 0u)
    {
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2753)));
        float _2774 = (log2(_1863 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3032)
                {
                    frontier_phi_71_pred = _3021;
                    frontier_phi_71_pred_1 = _3020;
                    frontier_phi_71_pred_2 = _3019;
                    frontier_phi_71_pred_3 = _3018;
                    frontier_phi_71_pred_4 = _3017;
                    frontier_phi_71_pred_5 = _3016;
                }
                else
                {
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    uint _3167;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3031;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3171 = uint(findLSB(_3167)) + (_3022 << 5u);
                        uint _3168 = (_3167 + 4294967295u) & _3167;
                        uint _3173 = _3171 * 48u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3193 = (_3171 * 48u) + 4u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3212 = (_3171 * 48u) + 8u;
                        vec3 _3223 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x));
                        float _3227 = _3187.x - _1861;
                        float _3228 = _3187.y - _1862;
                        float _3229 = _3187.z - _1863;
                        float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                        float _3233 = inversesqrt(_3230);
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3237 = dot(vec3(_714, _717, _720), vec3(_3234, _3235, _3236));
                        float _3242 = 1.0 - (_3230 * _3187.w);
                        float _4693 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3244 = sqrt(_3230) * _3206.w;
                        float _3247 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3237) + _3248;
                        float _3254 = _3244 * _3244;
                        float _3258 = ((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3243) / ((_3254 * 0.699999988079071044921875) + 1.0);
                        float _3262 = (-0.0) - _1861;
                        float _3263 = (-0.0) - _1862;
                        float _3264 = (-0.0) - _1863;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3278 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                        float _3279 = 1.0 - _774;
                        float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                        float _3287 = _3286 * _3286;
                        float _3288 = _3287 * _3287;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3291 = _3271 + _3236;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3299 = dot(vec3(_714, _717, _720), vec3(_3269, _3270, _3271));
                        float _4709 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3303 = dot(vec3(_714, _717, _720), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                        float _4720 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                        float _3311 = _3247 * _3287;
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3237) + _3312;
                        float _4731 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3316 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3317 = 1.0 - _3287;
                        float _3327 = (0.5 / (((_3316 * ((_3302 * _3317) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3287) * _3302))) * _3316;
                        float _4742 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3338 = (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3310 * _3310) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125))) * _3243;
                        _3091 = (_3258 * _3206.x) + _3164;
                        _3092 = (_3258 * _3206.y) + _3165;
                        _3093 = (_3258 * _3206.z) + _3166;
                        _3088 = (_3338 * _3223.x) + _3161;
                        _3089 = (_3338 * _3223.y) + _3162;
                        _3090 = (_3338 * _3223.z) + _3163;
                        if (_3168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3168;
                        }
                    }
                    frontier_phi_71_pred = _3093;
                    frontier_phi_71_pred_1 = _3092;
                    frontier_phi_71_pred_2 = _3091;
                    frontier_phi_71_pred_3 = _3090;
                    frontier_phi_71_pred_4 = _3089;
                    frontier_phi_71_pred_5 = _3088;
                }
                _2875 = frontier_phi_71_pred;
                _2873 = frontier_phi_71_pred_1;
                _2871 = frontier_phi_71_pred_2;
                _2869 = frontier_phi_71_pred_3;
                _2867 = frontier_phi_71_pred_4;
                _2865 = frontier_phi_71_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2865;
                    _3017 = _2867;
                    _3018 = _2869;
                    _3019 = _2871;
                    _3020 = _2873;
                    _3021 = _2875;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2881) & _2784) == 0u)
        {
            _2984 = _2864;
            _2986 = _2866;
            _2988 = _2868;
            _2990 = _2870;
            _2992 = _2872;
            _2994 = _2874;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
            float _3010 = _3009 * _1861;
            float _3011 = _3009 * _1862;
            float _3012 = _3009 * _1863;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3144 = _2864;
                float _3145 = _2866;
                float _3146 = _2868;
                float _3147 = _2870;
                float _3148 = _2872;
                float _3149 = _2874;
                uint _3150 = _2881;
                uint _3159;
                bool _3160;
                for (;;)
                {
                    _3159 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                    _3160 = _3159 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3160)
                    {
                        frontier_phi_82_pred = _3149;
                        frontier_phi_82_pred_1 = _3148;
                        frontier_phi_82_pred_2 = _3147;
                        frontier_phi_82_pred_3 = _3146;
                        frontier_phi_82_pred_4 = _3145;
                        frontier_phi_82_pred_5 = _3144;
                    }
                    else
                    {
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        uint _3371 = _3159;
                        uint _3372;
                        vec4 _3397;
                        float _3398;
                        vec4 _3413;
                        vec3 _3425;
                        vec4 _3441;
                        vec4 _3457;
                        float _3503;
                        bool _3504;
                        for (;;)
                        {
                            uint _3382 = ((_3150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3371));
                            _3372 = (_3371 + 4294967295u) & _3371;
                            uint _3384 = _3382 * 40u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3398 = _3397.w;
                            uint _3400 = (_3382 * 40u) + 4u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3382 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3428 = (_3382 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3444 = (_3382 * 40u) + 20u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3382 * 40u) + 24u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3478 = (_3382 * 40u) + 28u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3503 = fma(_1863, _3491.z, fma(_1862, _3491.y, _3491.x * _1861)) + _3491.w;
                            _3504 = !((fma(_1863, _3472.z, fma(_1862, _3472.y, _3472.x * _1861)) + _3472.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3504)
                            {
                                float _3531 = _3397.x - _1861;
                                float _3532 = _3397.y - _1862;
                                float _3533 = _3397.z - _1863;
                                float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                                float _3537 = inversesqrt(_3534);
                                float _3538 = _3537 * _3531;
                                float _3539 = _3537 * _3532;
                                float _3540 = _3537 * _3533;
                                float _3544 = 1.0 - (_3534 / (_3398 * _3398));
                                float _4753 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3549 = sqrt(_3534) * _3413.w;
                                float _3551 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                                float _3552 = _3551 * _3551;
                                float _3555 = ((1.0 - _3552) * dot(vec3(_3538, _3539, _3540), vec3(_714, _717, _720))) + _3552;
                                float _3558 = _3549 * _3549;
                                float _3562 = (fma(_1863, _3441.z, fma(_1862, _3441.y, _3441.x * _1861)) + _3441.w) / _3503;
                                float _3563 = (fma(_1863, _3457.z, fma(_1862, _3457.y, _3457.x * _1861)) + _3457.w) / _3503;
                                float _3567 = 1.0 - dot(vec2(_3562, _3563), vec2(_3562, _3563));
                                float _4769 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3569 = _3568 * (((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3545) / ((_3558 * 0.699999988079071044921875) + 1.0));
                                float _3581 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                                float _3582 = 1.0 - _774;
                                float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                                float _3590 = _3589 * _3589;
                                float _3591 = _3590 * _3590;
                                float _3592 = _3538 - _3010;
                                float _3593 = _3539 - _3011;
                                float _3594 = _3540 - _3012;
                                float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                                float _3602 = dot(vec3(_714, _717, _720), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4780 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3606 = dot(vec3(_714, _717, _720), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                                float _4791 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                                float _3614 = _3551 * _3590;
                                float _3615 = _3614 * _3614;
                                float _3621 = ((1.0 - _3615) * dot(vec3(_714, _717, _720), vec3(_3538, _3539, _3540))) + _3615;
                                float _4802 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3623 = 1.0 - _3590;
                                float _3633 = (0.5 / (((_3622 * ((_3605 * _3623) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3590) * _3605))) * _3622;
                                float _4813 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3643 = (_3568 * _3545) * (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3613 * _3613) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3569 * _3413.z;
                                frontier_phi_88_pred_1 = _3569 * _3413.y;
                                frontier_phi_88_pred_2 = _3569 * _3413.x;
                                frontier_phi_88_pred_3 = _3643 * _3425.z;
                                frontier_phi_88_pred_4 = _3643 * _3425.y;
                                frontier_phi_88_pred_5 = _3643 * _3425.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_88_pred;
                            _3651 = frontier_phi_88_pred_1;
                            _3650 = frontier_phi_88_pred_2;
                            _3649 = frontier_phi_88_pred_3;
                            _3648 = frontier_phi_88_pred_4;
                            _3647 = frontier_phi_88_pred_5;
                            _3355 = _3650 + _3368;
                            _3356 = _3651 + _3369;
                            _3357 = _3652 + _3370;
                            _3352 = _3647 + _3365;
                            _3353 = _3648 + _3366;
                            _3354 = _3649 + _3367;
                            if (_3372 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3372;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3357;
                        frontier_phi_82_pred_1 = _3356;
                        frontier_phi_82_pred_2 = _3355;
                        frontier_phi_82_pred_3 = _3354;
                        frontier_phi_82_pred_4 = _3353;
                        frontier_phi_82_pred_5 = _3352;
                    }
                    _2995 = frontier_phi_82_pred;
                    _2993 = frontier_phi_82_pred_1;
                    _2991 = frontier_phi_82_pred_2;
                    _2989 = frontier_phi_82_pred_3;
                    _2987 = frontier_phi_82_pred_4;
                    _2985 = frontier_phi_82_pred_5;
                    uint _3151 = _3150 + 1u;
                    if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3144 = _2985;
                        _3145 = _2987;
                        _3146 = _2989;
                        _3147 = _2991;
                        _3148 = _2993;
                        _3149 = _2995;
                        _3150 = _3151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2991;
                frontier_phi_63_64_ladder_1 = _2995;
                frontier_phi_63_64_ladder_2 = _2993;
                frontier_phi_63_64_ladder_3 = _2989;
                frontier_phi_63_64_ladder_4 = _2987;
                frontier_phi_63_64_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_63_64_ladder = _2870;
                frontier_phi_63_64_ladder_1 = _2874;
                frontier_phi_63_64_ladder_2 = _2872;
                frontier_phi_63_64_ladder_3 = _2868;
                frontier_phi_63_64_ladder_4 = _2866;
                frontier_phi_63_64_ladder_5 = _2864;
            }
            _2984 = frontier_phi_63_64_ladder_5;
            _2986 = frontier_phi_63_64_ladder_4;
            _2988 = frontier_phi_63_64_ladder_3;
            _2990 = frontier_phi_63_64_ladder;
            _2992 = frontier_phi_63_64_ladder_2;
            _2994 = frontier_phi_63_64_ladder_1;
        }
        float _2999 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2797 = (_2999 * _2990) + _2328;
        _2799 = (_2999 * _2992) + _2330;
        _2801 = (_2999 * _2994) + _2332;
        _2803 = ((_2984 * 0.039999999105930328369140625) * _2999) + _2651;
        _2805 = ((_2986 * 0.039999999105930328369140625) * _2999) + _2653;
        _2807 = ((_2988 * 0.039999999105930328369140625) * _2999) + _2655;
    }
    else
    {
        _2797 = _2328;
        _2799 = _2330;
        _2801 = _2332;
        _2803 = _2651;
        _2805 = _2653;
        _2807 = _2655;
    }
    float _4829 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4840 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4851 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2824 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2797 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _758))) + ((_2803 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2799 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _758))) + ((_2805 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2801 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _758))) + ((_2807 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    uint _2827 = _241 + 6u;
    float _2835 = _693 / cbSceneParam._m0[86u].x;
    float _2836 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _615 : (isnan(_615) ? cbSceneParam._m0[77u].w : min(_615, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_615 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_615) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _615 : min(cbSceneParam._m0[80u].w, _615));
        float _2890 = _2889 / _615;
        float _2901 = _2890 * _665;
        float _2902 = _666 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2904 = _2890 * _667;
        float _2906 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2902;
        float _2914 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2903 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3047 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3101 = ((abs(_2914 / _2903) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2924 * _3056) - exp2(_2924 * _3057)) * _3045))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2855);
        _2926 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2928 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2930 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2932 = _3112 * _2855;
    }
    else
    {
        _2926 = _2852;
        _2928 = _2853;
        _2930 = _2854;
        _2932 = _2855;
    }
    bool _3139;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2973;
    bool _2983;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * _2824;
        float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * _2825;
        float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * _2826;
        float _2962 = _681 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2973 = _2962 * 0.999000012874603271484375;
        _2983 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2983)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2973) < 0.5)
            {
                _3139 = true;
                break;
            }
        }
        uint _3080 = _733 + uint(_2942.w);
        if ((cbInstanceData._m0[_3080].w < 1.0) && ((cbInstanceData._m0[_3080].w + _2973) < 0.5))
        {
            _3139 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3139 = true;
            break;
        }
        _3139 = false;
        break;
    }
    float _3343;
    if (_3139)
    {
        discard_state = true;
        _3343 = 0.0;
    }
    else
    {
        _3343 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3343;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


