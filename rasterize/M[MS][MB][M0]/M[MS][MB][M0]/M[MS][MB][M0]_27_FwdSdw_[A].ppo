#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1232;
float _3876;
float _3877;
float _3878;
float _3879;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3888 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3899 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3910 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3921 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    float _419 = fma(_410, _238, fma(_416, _245, _415 * _231));
    float _422 = fma(_410, _239, fma(_416, _246, _415 * _232));
    float _425 = fma(_410, _240, fma(_416, _247, _415 * _233));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _477 = (cbMtdParam._m0[19u].x + dot(vec4(_429 * _419, _429 * _422, _429 * _425, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_467 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[21u].z);
    float _3932 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _480 = (-0.0) - cbMtdParam._m0[24u].y;
    float _482 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
    float _490 = _478 - ((_478 * TEXCOORD_8.x) * _483);
    float _491 = _478 - ((_478 * TEXCOORD_8.y) * _483);
    float _492 = _478 - ((_478 * TEXCOORD_8.z) * _483);
    float _499 = (_490 * (cbMtdParam._m0[17u].x - _349)) + _349;
    float _500 = (_491 * (cbMtdParam._m0[17u].y - _350)) + _350;
    float _501 = (_492 * (cbMtdParam._m0[17u].z - _351)) + _351;
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _544 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_515 - _516) * cbMtdParam._m0[24u].w) + _516) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3953 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _553 = ((((cbMtdParam._m0[10u].x - _499) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _545) + _499;
    float _554 = ((((cbMtdParam._m0[10u].y - _500) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _545) + _500;
    float _555 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _501)) * _545) + _501;
    float _560 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _581 = (_574.x * 2.0) + (-1.0);
    float _582 = (_574.y * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3964 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _591 = ((_574.z - _560) * _490) + _560;
    float _594 = ((cbMtdParam._m0[23u].y - _591) * _545) + _591;
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _619 = (_613.x * 2.0) + (-1.0);
    float _620 = (_613.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3975 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _636 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _410) * _492) + _410;
    float _639 = (((_581 - _415) * _490) + _415) + (cbMtdParam._m0[21u].x * _415);
    float _640 = (((_582 - _416) * _491) + _416) + (cbMtdParam._m0[21u].x * _416);
    float _651 = (((_619 - _639) + (_639 * cbMtdParam._m0[22u].z)) * _545) + _639;
    float _652 = (((_620 - _640) + (_640 * cbMtdParam._m0[22u].z)) * _545) + _640;
    float _653 = (_545 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _636)) + _636;
    float _655 = cbMtdParam._m0[22u].x + _395.w;
    float _658 = fma(_653, _238, fma(_652, _245, _651 * _231));
    float _661 = fma(_653, _239, fma(_652, _246, _651 * _232));
    float _664 = fma(_653, _240, fma(_652, _247, _651 * _233));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3986 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _672 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4008 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4019 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4030 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _740 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _730);
    float _741 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _730);
    float _742 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _730);
    float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
    float _747 = _740 * _746;
    float _748 = _741 * _746;
    float _749 = _742 * _746;
    vec4 _754 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _756 = _754.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _913 = sqrt(((_740 * _740) + (_741 * _741)) + (_742 * _742));
        float _919 = (cbMatDynParam._m0[5u].x * _913) + cbMatDynParam._m0[5u].y;
        float _4041 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _924 = (cbMatDynParam._m0[5u].z * _913) + cbMatDynParam._m0[5u].w;
        float _4052 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) - _920)) + _920) < ((_756 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _789 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _792 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _795 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _808 = _269 + 9u;
    uint _809 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_809].z;
    float _4063 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _833 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_669, _670, _671), vec3(_747, _748, _749));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _669) - _747;
    float _842 = (_837 * _670) - _748;
    float _843 = (_837 * _671) - _749;
    float _847 = abs(dot(vec3(_747, _748, _749), vec3(_669, _670, _671)));
    float _4096 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_672);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _960 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _964 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _989 = _894 + _669;
        float _990 = _898 + _670;
        float _991 = _902 + _671;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_669, _670, _671), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _4144 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_669, _670, _671), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4177 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_669, _670, _671), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4210 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1278 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1282 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1305 = _894 + _669;
        float _1306 = _898 + _670;
        float _1307 = _902 + _671;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_669, _670, _671), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4273 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_669, _670, _671), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4306 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_669, _670, _671), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4339 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = _1232;
        _1553 = _1232;
        _1554 = _1232;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1244)) + _1244;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1245)) + _1245;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1246)) + _1246;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _841 * 0.5;
    float _1612 = _842 * 0.5;
    float _1613 = _843 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1742 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1745 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1773 = frontier_phi_17_15_ladder;
        }
        float _1944;
        if (_1742 > 0.0)
        {
            _1944 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1944 = frontier_phi_26_22_ladder;
        }
        float _2240;
        if (_1745 > 0.0)
        {
            _2240 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2240 = frontier_phi_38_33_ladder;
        }
        float _2242 = isnan(_1944) ? _1773 : (isnan(_1773) ? _1944 : min(_1773, _1944));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1739) + _1728;
        float _2248 = (_2243 * _1742) + _1732;
        float _2249 = (_2243 * _1745) + _1736;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_16_38_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_16_38_ladder_2;
        _1763 = frontier_phi_16_38_ladder_1;
        _1765 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1680);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1838 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1841 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1949;
        if (_1835 > 0.0)
        {
            _1949 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1949 = frontier_phi_28_24_ladder;
        }
        float _2267;
        if (_1838 > 0.0)
        {
            _2267 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2267 = frontier_phi_40_35_ladder;
        }
        float _2594;
        if (_1841 > 0.0)
        {
            _2594 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2594 = frontier_phi_50_47_ladder;
        }
        float _2596 = isnan(_2267) ? _1949 : (isnan(_1949) ? _2267 : min(_1949, _2267));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1835) + _1824;
        float _2602 = (_2597 * _1838) + _1828;
        float _2603 = (_2597 * _1841) + _1832;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_25_50_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_25_50_ladder_2;
        _1862 = frontier_phi_25_50_ladder_1;
        _1864 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1770);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1876 = ((((1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_862 * _849)) * _833;
    float _1877 = _1876 * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1878 = _1876 * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1879 = _1876 * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1882 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1936 = _1923 / _1935;
    float _1937 = _1927 / _1935;
    float _1938 = _1931 / _1935;
    float _2085;
    float _2086;
    float _2087;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1965 = ((uint(_1938 > cbSceneParam._m0[59u].y) + uint(_1938 > cbSceneParam._m0[59u].x)) + uint(_1938 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1966 = _1965 + 43u;
        uint _1974 = _1965 + 44u;
        uint _1982 = _1965 + 45u;
        uint _1990 = _1965 + 46u;
        float _2001 = fma(_1935, cbSceneParam._m0[_1966].w, fma(_1931, cbSceneParam._m0[_1966].z, fma(_1927, cbSceneParam._m0[_1966].y, _1923 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1935, cbSceneParam._m0[_1974].w, fma(_1931, cbSceneParam._m0[_1974].z, fma(_1927, cbSceneParam._m0[_1974].y, _1923 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1935, cbSceneParam._m0[_1990].w, fma(_1931, cbSceneParam._m0[_1990].z, fma(_1927, cbSceneParam._m0[_1990].y, _1923 * cbSceneParam._m0[_1990].x)));
        float _2018 = cbSceneParam._m0[33u].z * _2013;
        float _2020 = cbSceneParam._m0[33u].w * _2013;
        float _2023 = fma(_1935, cbSceneParam._m0[_1982].w, fma(_1931, cbSceneParam._m0[_1982].z, fma(_1927, cbSceneParam._m0[_1982].y, _1923 * cbSceneParam._m0[_1982].x))) / _2013;
        float _2071 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
        float _4465 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2078 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _2001) / _2013, (_2020 + _2005) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 + _2001) / _2013, (_2005 - _2018) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2018) / _2013, (_2005 - _2020) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2020) / _2013, (_2018 + _2005) / _2013), _2023), 0.0)).x), vec4(0.25)));
        _2085 = 1.0 - (_2078 * cbSceneParam._m0[34u].x);
        _2086 = 1.0 - (_2078 * cbSceneParam._m0[34u].y);
        _2087 = 1.0 - (_2078 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2085 = 1.0;
        _2086 = 1.0;
        _2087 = 1.0;
    }
    float _2151;
    float _2153;
    float _2155;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2139 = fma(_1935, cbSceneParam._m0[63u].w, fma(_1931, cbSceneParam._m0[63u].z, fma(_1927, cbSceneParam._m0[63u].y, _1923 * cbSceneParam._m0[63u].x)));
        float _2140 = fma(_1935, cbSceneParam._m0[60u].w, fma(_1931, cbSceneParam._m0[60u].z, fma(_1927, cbSceneParam._m0[60u].y, _1923 * cbSceneParam._m0[60u].x))) / _2139;
        float _2141 = fma(_1935, cbSceneParam._m0[61u].w, fma(_1931, cbSceneParam._m0[61u].z, fma(_1927, cbSceneParam._m0[61u].y, _1923 * cbSceneParam._m0[61u].x))) / _2139;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2140 >= cbSceneParam._m0[64u].x) && (_2141 >= cbSceneParam._m0[64u].y)) && (_2140 <= cbSceneParam._m0[64u].z)) && (_2141 <= cbSceneParam._m0[64u].w))
        {
            float _2280 = fma(_1935, cbSceneParam._m0[62u].w, fma(_1931, cbSceneParam._m0[62u].z, fma(_1927, cbSceneParam._m0[62u].y, _1923 * cbSceneParam._m0[62u].x))) / _2139;
            float _2284 = isnan(cbSceneParam._m0[41u].w) ? _2280 : (isnan(_2280) ? cbSceneParam._m0[41u].w : max(_2280, cbSceneParam._m0[41u].w));
            float _2327 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
            float _4481 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
            float _2334 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2140, cbSceneParam._m0[33u].w + _2141), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2140, _2141 - cbSceneParam._m0[33u].z), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].z, _2141 - cbSceneParam._m0[33u].w), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2141), _2284), 0.0)).x), vec4(0.25)));
            float _2338 = 1.0 - (_2334 * cbSceneParam._m0[34u].x);
            float _2339 = 1.0 - (_2334 * cbSceneParam._m0[34u].y);
            float _2340 = 1.0 - (_2334 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2340) ? _2087 : (isnan(_2087) ? _2340 : min(_2087, _2340));
            frontier_phi_37_36_ladder_1 = isnan(_2339) ? _2086 : (isnan(_2086) ? _2339 : min(_2086, _2339));
            frontier_phi_37_36_ladder_2 = isnan(_2338) ? _2085 : (isnan(_2085) ? _2338 : min(_2085, _2338));
        }
        else
        {
            frontier_phi_37_36_ladder = _2087;
            frontier_phi_37_36_ladder_1 = _2086;
            frontier_phi_37_36_ladder_2 = _2085;
        }
        _2151 = frontier_phi_37_36_ladder_2;
        _2153 = frontier_phi_37_36_ladder_1;
        _2155 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2151 = _2085;
        _2153 = _2086;
        _2155 = _2087;
    }
    uvec4 _2160 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2162 = _2160.x * 14u;
    uint _2163 = _2162 + 13u;
    float _2170 = _833 + (-1.0);
    float _2175 = (cbLight._m0[_2163].x * _2170) + 1.0;
    float _2176 = (cbLight._m0[_2163].y * _2170) + 1.0;
    float _2177 = (cbLight._m0[_2163].z * _2170) + 1.0;
    float _2178 = (cbLight._m0[_2163].w * _2170) + 1.0;
    uint _2179 = _2162 + 5u;
    float _2185 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2189 = _2162 + 4u;
    float _2199 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2203 = _2162 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_669, _670, _671));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_669, _670, _671));
    float _4517 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4528 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2179].x * _2185) * _2224) + (((cbLight._m0[_2189].x * _2151) * _2199) * _2222);
    float _2232 = ((_2185 * cbLight._m0[_2179].y) * _2224) + (((cbLight._m0[_2189].y * _2153) * _2199) * _2222);
    float _2233 = ((_2185 * cbLight._m0[_2179].z) * _2224) + (((cbLight._m0[_2189].z * _2155) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2162 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2239)
    {
        _2341 = _2231;
        _2343 = _2232;
        _2345 = _2233;
    }
    else
    {
        uint _2349 = _2162 + 6u;
        float _2365 = (dot(vec3(cbLight._m0[_2162 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4539 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2368 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2341 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2231;
        _2343 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2232;
        _2345 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2233;
    }
    bool _2348 = _2237.y == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2348)
    {
        _2403 = _2341;
        _2405 = _2343;
        _2407 = _2345;
    }
    else
    {
        uint _2565 = _2162 + 7u;
        float _2581 = (dot(vec3(cbLight._m0[_2162 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4555 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2584 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2403 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2341;
        _2405 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2343;
        _2407 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2345;
    }
    uint _2410 = _2162 + 8u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _672) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2162].x + _747;
    float _2426 = cbLight._m0[_2162].y + _748;
    float _2427 = cbLight._m0[_2162].z + _749;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2162].xyz));
    float _4571 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _4582 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2439 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2440 = dot(vec3(_669, _670, _671), vec3(_2432, _2433, _2434));
    float _4593 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2432, _2433, _2434));
    float _4604 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2424 * _2424;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2464 = 1.0 - _2424;
    float _2475 = (0.5 / (((_2439 * ((_2438 * _2464) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2464) + _2424) * _2438))) * _2438;
    float _4615 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    uint _2491 = _2162 + 9u;
    float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _672) * 0.949999988079071044921875);
    float _2503 = _2502 * _2502;
    float _2504 = cbLight._m0[_2203].x + _747;
    float _2505 = cbLight._m0[_2203].y + _748;
    float _2506 = cbLight._m0[_2203].z + _749;
    float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
    float _2511 = _2510 * _2504;
    float _2512 = _2510 * _2505;
    float _2513 = _2510 * _2506;
    float _2514 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2203].xyz));
    float _4626 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2518 = dot(vec3(_669, _670, _671), vec3(_2511, _2512, _2513));
    float _4637 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2511, _2512, _2513));
    float _4648 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2503 * _2503;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2540 = 1.0 - _2503;
    float _2550 = (0.5 / (((_2439 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2540) + _2503) * _2517))) * _2517;
    float _4659 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    float _2562 = (((_2539 * cbLight._m0[_2491].x) * _2552) * _2185) + ((((cbLight._m0[_2410].x * _2151) * _2463) * _2477) * _2199);
    float _2563 = (((_2539 * cbLight._m0[_2491].y) * _2552) * _2185) + ((((cbLight._m0[_2410].y * _2153) * _2463) * _2477) * _2199);
    float _2564 = (((_2539 * cbLight._m0[_2491].z) * _2552) * _2185) + ((((cbLight._m0[_2410].z * _2155) * _2463) * _2477) * _2199);
    float _2620;
    float _2622;
    float _2624;
    if (_2239)
    {
        _2620 = _2562;
        _2622 = _2563;
        _2624 = _2564;
    }
    else
    {
        uint _2626 = _2162 + 2u;
        uint _2630 = _2162 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _672) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _747;
        float _2647 = cbLight._m0[_2626].y + _748;
        float _2648 = cbLight._m0[_2626].z + _749;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2626].xyz));
        float _4670 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2660 = dot(vec3(_669, _670, _671), vec3(_2653, _2654, _2655));
        float _4681 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4692 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2681 = (exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2682 = 1.0 - _2645;
        float _2692 = (0.5 / (((_2439 * ((_2659 * _2682) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2682) + _2645) * _2659))) * _2659;
        float _4703 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2620 = (((_2681 * cbLight._m0[_2630].x) * _2694) * _2695) + _2562;
        _2622 = (((_2681 * cbLight._m0[_2630].y) * _2694) * _2695) + _2563;
        _2624 = (((_2681 * cbLight._m0[_2630].z) * _2694) * _2695) + _2564;
    }
    float _2726;
    float _2728;
    float _2730;
    if (_2348)
    {
        _2726 = _2620;
        _2728 = _2622;
        _2730 = _2624;
    }
    else
    {
        uint _2737 = _2162 + 3u;
        uint _2741 = _2162 + 11u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _672) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _747;
        float _2758 = cbLight._m0[_2737].y + _748;
        float _2759 = cbLight._m0[_2737].z + _749;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2737].xyz));
        float _4719 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2771 = dot(vec3(_669, _670, _671), vec3(_2764, _2765, _2766));
        float _4730 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4741 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2792 = (exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2793 = 1.0 - _2756;
        float _2803 = (0.5 / (((_2439 * ((_2770 * _2793) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2793) + _2756) * _2770))) * _2770;
        float _4752 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2726 = (((_2792 * cbLight._m0[_2741].x) * _2805) * _2806) + _2620;
        _2728 = (((_2792 * cbLight._m0[_2741].y) * _2805) * _2806) + _2622;
        _2730 = (((_2792 * cbLight._m0[_2741].z) * _2805) * _2806) + _2624;
    }
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_2160.y == 0u)
    {
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.x;
        uint _2839 = uint((float(_2827.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2828))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2828)));
        float _2849 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2850 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        uint _2853 = uint(isnan(14.0) ? _2850 : (isnan(_2850) ? 14.0 : min(_2850, 14.0)));
        uvec4 _2858 = texelFetch(g_lightClusterGridBuffer, int(((_2853 << 2u) + (_2839 << 6u)) >> 2u));
        uint _2859 = _2858.x;
        uint _2860 = _2827.z;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((((1u << ((_2860 >> 4u) & 15u)) + 4294967295u) & _2859) == 0u) || ((_2860 & 240u) == 0u))
        {
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
        }
        else
        {
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            uint _3097 = 0u;
            uint _3106;
            bool _3107;
            for (;;)
            {
                _3106 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                _3107 = _3106 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3107)
                {
                    frontier_phi_71_pred = _3096;
                    frontier_phi_71_pred_1 = _3095;
                    frontier_phi_71_pred_2 = _3094;
                    frontier_phi_71_pred_3 = _3093;
                    frontier_phi_71_pred_4 = _3092;
                    frontier_phi_71_pred_5 = _3091;
                }
                else
                {
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    uint _3242;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3106;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3246 = uint(findLSB(_3242)) + (_3097 << 5u);
                        uint _3243 = (_3242 + 4294967295u) & _3242;
                        uint _3248 = _3246 * 48u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3268 = (_3246 * 48u) + 4u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3287 = (_3246 * 48u) + 8u;
                        vec3 _3298 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x));
                        float _3302 = _3262.x - _1936;
                        float _3303 = _3262.y - _1937;
                        float _3304 = _3262.z - _1938;
                        float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                        float _3308 = inversesqrt(_3305);
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3312 = dot(vec3(_789, _792, _795), vec3(_3309, _3310, _3311));
                        float _3317 = 1.0 - (_3305 * _3262.w);
                        float _4778 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3319 = sqrt(_3305) * _3281.w;
                        float _3322 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3312) + _3323;
                        float _3329 = _3319 * _3319;
                        float _3333 = ((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3318) / ((_3329 * 0.699999988079071044921875) + 1.0);
                        float _3337 = (-0.0) - _1936;
                        float _3338 = (-0.0) - _1937;
                        float _3339 = (-0.0) - _1938;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3353 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                        float _3354 = 1.0 - _849;
                        float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                        float _3362 = _3361 * _3361;
                        float _3363 = _3362 * _3362;
                        float _3364 = _3344 + _3309;
                        float _3365 = _3345 + _3310;
                        float _3366 = _3346 + _3311;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3374 = dot(vec3(_789, _792, _795), vec3(_3344, _3345, _3346));
                        float _4794 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3378 = dot(vec3(_789, _792, _795), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                        float _4805 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                        float _3386 = _3322 * _3362;
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3312) + _3387;
                        float _4816 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3392 = 1.0 - _3362;
                        float _3402 = (0.5 / (((_3391 * ((_3377 * _3392) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3362) * _3377))) * _3391;
                        float _4827 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3413 = (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3385 * _3385) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125))) * _3318;
                        _3166 = (_3333 * _3281.x) + _3239;
                        _3167 = (_3333 * _3281.y) + _3240;
                        _3168 = (_3333 * _3281.z) + _3241;
                        _3163 = (_3413 * _3298.x) + _3236;
                        _3164 = (_3413 * _3298.y) + _3237;
                        _3165 = (_3413 * _3298.z) + _3238;
                        if (_3243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3243;
                        }
                    }
                    frontier_phi_71_pred = _3168;
                    frontier_phi_71_pred_1 = _3167;
                    frontier_phi_71_pred_2 = _3166;
                    frontier_phi_71_pred_3 = _3165;
                    frontier_phi_71_pred_4 = _3164;
                    frontier_phi_71_pred_5 = _3163;
                }
                _2950 = frontier_phi_71_pred;
                _2948 = frontier_phi_71_pred_1;
                _2946 = frontier_phi_71_pred_2;
                _2944 = frontier_phi_71_pred_3;
                _2942 = frontier_phi_71_pred_4;
                _2940 = frontier_phi_71_pred_5;
                uint _3098 = _3097 + 1u;
                if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3091 = _2940;
                    _3092 = _2942;
                    _3093 = _2944;
                    _3094 = _2946;
                    _3095 = _2948;
                    _3096 = _2950;
                    _3097 = _3098;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
        }
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.z;
        uint _2956 = (_2954 >> 8u) & 15u;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((4294967295u << _2956) & _2859) == 0u)
        {
            _3059 = _2939;
            _3061 = _2941;
            _3063 = _2943;
            _3065 = _2945;
            _3067 = _2947;
            _3069 = _2949;
        }
        else
        {
            float _3084 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float _3085 = _3084 * _1936;
            float _3086 = _3084 * _1937;
            float _3087 = _3084 * _1938;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2956 < ((_2954 >> 12u) & 15u))
            {
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3219 = _2939;
                float _3220 = _2941;
                float _3221 = _2943;
                float _3222 = _2945;
                float _3223 = _2947;
                float _3224 = _2949;
                uint _3225 = _2956;
                uint _3234;
                bool _3235;
                for (;;)
                {
                    _3234 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                    _3235 = _3234 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3235)
                    {
                        frontier_phi_82_pred = _3224;
                        frontier_phi_82_pred_1 = _3223;
                        frontier_phi_82_pred_2 = _3222;
                        frontier_phi_82_pred_3 = _3221;
                        frontier_phi_82_pred_4 = _3220;
                        frontier_phi_82_pred_5 = _3219;
                    }
                    else
                    {
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3440 = _3219;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        float _3443 = _3222;
                        float _3444 = _3223;
                        float _3445 = _3224;
                        uint _3446 = _3234;
                        uint _3447;
                        vec4 _3472;
                        float _3473;
                        vec4 _3488;
                        vec3 _3500;
                        vec4 _3515;
                        vec4 _3530;
                        float _3576;
                        bool _3577;
                        for (;;)
                        {
                            uint _3457 = ((_3225 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3446));
                            _3447 = (_3446 + 4294967295u) & _3446;
                            uint _3459 = _3457 * 40u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3473 = _3472.w;
                            uint _3475 = (_3457 * 40u) + 4u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3457 * 40u) + 8u;
                            _3500 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x));
                            uint _3502 = (_3457 * 40u) + 16u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3457 * 40u) + 20u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3457 * 40u) + 24u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3551 = (_3457 * 40u) + 28u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3576 = fma(_1938, _3564.z, fma(_1937, _3564.y, _3564.x * _1936)) + _3564.w;
                            _3577 = !((fma(_1938, _3545.z, fma(_1937, _3545.y, _3545.x * _1936)) + _3545.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3577)
                            {
                                float _3604 = _3472.x - _1936;
                                float _3605 = _3472.y - _1937;
                                float _3606 = _3472.z - _1938;
                                float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                                float _3610 = inversesqrt(_3607);
                                float _3611 = _3610 * _3604;
                                float _3612 = _3610 * _3605;
                                float _3613 = _3610 * _3606;
                                float _3617 = 1.0 - (_3607 / (_3473 * _3473));
                                float _4838 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3622 = sqrt(_3607) * _3488.w;
                                float _3624 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                                float _3625 = _3624 * _3624;
                                float _3628 = ((1.0 - _3625) * dot(vec3(_3611, _3612, _3613), vec3(_789, _792, _795))) + _3625;
                                float _3631 = _3622 * _3622;
                                float _3635 = (fma(_1938, _3515.z, fma(_1937, _3515.y, _3515.x * _1936)) + _3515.w) / _3576;
                                float _3636 = (fma(_1938, _3530.z, fma(_1937, _3530.y, _3530.x * _1936)) + _3530.w) / _3576;
                                float _3640 = 1.0 - dot(vec2(_3635, _3636), vec2(_3635, _3636));
                                float _4854 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3642 = _3641 * (((isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0))) * _3618) / ((_3631 * 0.699999988079071044921875) + 1.0));
                                float _3654 = exp2(log2(1.0 / ((_3631 * 3.5) + 5.0)) * 0.25);
                                float _3655 = 1.0 - _849;
                                float _3662 = sqrt(1.0 - ((1.0 - (_3655 * _3655)) * (1.0 - (_3654 * _3654))));
                                float _3663 = _3662 * _3662;
                                float _3664 = _3663 * _3663;
                                float _3665 = _3611 - _3085;
                                float _3666 = _3612 - _3086;
                                float _3667 = _3613 - _3087;
                                float _3671 = inversesqrt(dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667)));
                                float _3675 = dot(vec3(_789, _792, _795), vec3((-0.0) - _3085, (-0.0) - _3086, (-0.0) - _3087));
                                float _4865 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3679 = dot(vec3(_789, _792, _795), vec3(_3671 * _3665, _3671 * _3666, _3671 * _3667));
                                float _4876 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3686 = ((_3682 * _3682) * (_3664 + (-1.0))) + 1.0;
                                float _3687 = _3624 * _3663;
                                float _3688 = _3687 * _3687;
                                float _3694 = ((1.0 - _3688) * dot(vec3(_789, _792, _795), vec3(_3611, _3612, _3613))) + _3688;
                                float _4887 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3696 = 1.0 - _3663;
                                float _3706 = (0.5 / (((_3695 * ((_3678 * _3696) + _3663)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3663) * _3678))) * _3695;
                                float _4898 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3716 = (_3641 * _3618) * (((_3664 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3686 * _3686) * ((_3631 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3642 * _3488.z;
                                frontier_phi_88_pred_1 = _3642 * _3488.y;
                                frontier_phi_88_pred_2 = _3642 * _3488.x;
                                frontier_phi_88_pred_3 = _3716 * _3500.z;
                                frontier_phi_88_pred_4 = _3716 * _3500.y;
                                frontier_phi_88_pred_5 = _3716 * _3500.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3725 = frontier_phi_88_pred;
                            _3724 = frontier_phi_88_pred_1;
                            _3723 = frontier_phi_88_pred_2;
                            _3722 = frontier_phi_88_pred_3;
                            _3721 = frontier_phi_88_pred_4;
                            _3720 = frontier_phi_88_pred_5;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            if (_3447 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3447;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3432;
                        frontier_phi_82_pred_1 = _3431;
                        frontier_phi_82_pred_2 = _3430;
                        frontier_phi_82_pred_3 = _3429;
                        frontier_phi_82_pred_4 = _3428;
                        frontier_phi_82_pred_5 = _3427;
                    }
                    _3070 = frontier_phi_82_pred;
                    _3068 = frontier_phi_82_pred_1;
                    _3066 = frontier_phi_82_pred_2;
                    _3064 = frontier_phi_82_pred_3;
                    _3062 = frontier_phi_82_pred_4;
                    _3060 = frontier_phi_82_pred_5;
                    uint _3226 = _3225 + 1u;
                    if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3219 = _3060;
                        _3220 = _3062;
                        _3221 = _3064;
                        _3222 = _3066;
                        _3223 = _3068;
                        _3224 = _3070;
                        _3225 = _3226;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3066;
                frontier_phi_63_64_ladder_1 = _3070;
                frontier_phi_63_64_ladder_2 = _3068;
                frontier_phi_63_64_ladder_3 = _3064;
                frontier_phi_63_64_ladder_4 = _3062;
                frontier_phi_63_64_ladder_5 = _3060;
            }
            else
            {
                frontier_phi_63_64_ladder = _2945;
                frontier_phi_63_64_ladder_1 = _2949;
                frontier_phi_63_64_ladder_2 = _2947;
                frontier_phi_63_64_ladder_3 = _2943;
                frontier_phi_63_64_ladder_4 = _2941;
                frontier_phi_63_64_ladder_5 = _2939;
            }
            _3059 = frontier_phi_63_64_ladder_5;
            _3061 = frontier_phi_63_64_ladder_4;
            _3063 = frontier_phi_63_64_ladder_3;
            _3065 = frontier_phi_63_64_ladder;
            _3067 = frontier_phi_63_64_ladder_2;
            _3069 = frontier_phi_63_64_ladder_1;
        }
        float _3074 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2872 = (_3074 * _3065) + _2403;
        _2874 = (_3074 * _3067) + _2405;
        _2876 = (_3074 * _3069) + _2407;
        _2878 = ((_3059 * 0.039999999105930328369140625) * _3074) + _2726;
        _2880 = ((_3061 * 0.039999999105930328369140625) * _3074) + _2728;
        _2882 = ((_3063 * 0.039999999105930328369140625) * _3074) + _2730;
    }
    else
    {
        _2872 = _2403;
        _2874 = _2405;
        _2876 = _2407;
        _2878 = _2726;
        _2880 = _2728;
        _2882 = _2730;
    }
    float _4914 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4925 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4936 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2899 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2872 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _833))) + ((_2878 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2900 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2874 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _833))) + ((_2880 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2901 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2876 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _833))) + ((_2882 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    uint _2902 = _269 + 6u;
    float _2910 = _768 / cbSceneParam._m0[86u].x;
    float _2911 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2925 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2927 = _2925.x;
    float _2928 = _2925.y;
    float _2929 = _2925.z;
    float _2930 = _2925.w;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2964 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2965 = _2964 / _690;
        float _2976 = _2965 * _740;
        float _2977 = _741 * _2965;
        float _2978 = (-0.0) - _2977;
        float _2979 = _2965 * _742;
        float _2981 = (cbSceneParam._m0[77u].w * _2978) / _2964;
        float _2982 = _2981 + cbSceneParam._m0[79u].w;
        float _2983 = cbSceneParam._m0[79u].w - _2977;
        float _2989 = sqrt(((_2976 * _2976) + (_2977 * _2977)) + (_2979 * _2979));
        float _2992 = (1.0 - (cbSceneParam._m0[77u].w / _2964)) * _2989;
        float _2997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_2978 - _2981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_2982 > 0.0) ? exp2(_2997 * _2982) : (2.0 - exp2(_2999 * _2982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2992;
        }
        else
        {
            float _3120 = 1.0 / cbSceneParam._m0[80u].x;
            float _3121 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : max(_2982, _2983));
            float _3122 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : min(_2982, _2983));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            _3176 = ((abs(_2989 / _2978) * cbSceneParam._m0[80u].y) * ((((_3131 - _3132) * 2.0) - ((exp2(_2997 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)))) - exp2(_2997 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))))) * _3120)) - ((exp2(_2999 * _3131) - exp2(_2999 * _3132)) * _3120))) + (_2992 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2930);
        _3001 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2927;
        _3003 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2928;
        _3005 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2929;
        _3007 = _3187 * _2930;
    }
    else
    {
        _3001 = _2927;
        _3003 = _2928;
        _3005 = _2929;
        _3007 = _2930;
    }
    bool _3214;
    vec4 _3017;
    vec4 _3039;
    float _3041;
    float _3045;
    float _3046;
    float _3047;
    float _3048;
    bool _3058;
    for (;;)
    {
        _3017 = cbMatDynParam._m0[0u];
        float _3019 = roundEven(_3017.y);
        bool _3020 = _3019 == 3.0;
        float _3021 = log2(_3007);
        float _3028 = exp2(_3021 * cbSceneParam._m0[78u].x) * _2899;
        float _3029 = exp2(_3021 * cbSceneParam._m0[78u].y) * _2900;
        float _3030 = exp2(_3021 * cbSceneParam._m0[78u].z) * _2901;
        float _3037 = _756 + (-0.5);
        _3039 = cbMtdParam._m0[1u];
        _3041 = _3039.y * _3037;
        float _3044 = (_3019 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3045 = _3044 * (_3020 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3001)));
        _3046 = _3044 * (_3020 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3003)));
        _3047 = _3044 * (_3020 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3005)));
        _3048 = _3037 * 0.999000012874603271484375;
        _3058 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3058)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3048) < 0.5)
            {
                _3214 = true;
                break;
            }
        }
        uint _3155 = _808 + uint(_3017.w);
        if ((cbInstanceData._m0[_3155].w < 1.0) && ((cbInstanceData._m0[_3155].w + _3048) < 0.5))
        {
            _3214 = true;
            break;
        }
        if ((_3041 + 1.0) < _3039.x)
        {
            _3214 = true;
            break;
        }
        _3214 = false;
        break;
    }
    float _3418;
    if (_3214)
    {
        discard_state = true;
        _3418 = 0.0;
    }
    else
    {
        _3418 = cbInstanceData._m0[_2902].w;
    }
    SV_Target.x = _3045;
    SV_Target.y = _3046;
    SV_Target.z = _3047;
    SV_Target.w = _3418;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2902].w;
    discard_exit();
}


