#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1118;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3706 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _446 = ((_416.z - _437) * _368) + _437;
    float _449 = ((((_416.x - _435) * _368) + _435) * 2.0) + (-1.0);
    float _451 = ((((_416.y - _436) * _368) + _436) * 2.0) + (-1.0);
    float _452 = dot(vec2(_449, _451), vec2(_449, _451));
    float _3717 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _460 = fma(_457, _220, fma(_451, _227, _449 * _213));
    float _463 = fma(_457, _221, fma(_451, _228, _449 * _214));
    float _466 = fma(_457, _222, fma(_451, _229, _449 * _215));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _516 = _514.x;
    float _517 = 1.0 - _516;
    float _523 = (cbMtdParam._m0[19u].x + dot(vec4(_470 * _460, _470 * _463, _470 * _466, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_516 - _517) * cbMtdParam._m0[24u].z) + _517) * cbMtdParam._m0[21u].z);
    float _3728 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _531 = (_524 * ((_396.x * cbMtdParam._m0[18u].x) - _375)) + _375;
    float _532 = (_524 * ((_396.y * cbMtdParam._m0[18u].y) - _376)) + _376;
    float _533 = (_524 * ((_396.z * cbMtdParam._m0[18u].z) - _377)) + _377;
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _553 = (_546.x * 2.0) + (-1.0);
    float _554 = (_546.y * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3739 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _563 = ((_546.z - _446) * _524) + _446;
    float _573 = ((sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) - _457) * _524) + _457;
    float _576 = (((_553 - _449) * _524) + _449) + (cbMtdParam._m0[21u].x * _449);
    float _577 = (((_554 - _451) * _524) + _451) + (cbMtdParam._m0[21u].x * _451);
    float _582 = cbMtdParam._m0[22u].x + _486.w;
    float _585 = fma(_573, _220, fma(_577, _227, _576 * _213));
    float _588 = fma(_573, _221, fma(_577, _228, _576 * _214));
    float _591 = fma(_573, _222, fma(_577, _229, _576 * _215));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    float _596 = _595 * _585;
    float _597 = _595 * _588;
    float _598 = _595 * _591;
    float _3750 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _599 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3772 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3783 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3794 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _617 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _669 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _659);
    float _670 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _659);
    float _671 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _659);
    float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
    float _676 = _669 * _675;
    float _677 = _670 * _675;
    float _678 = _671 * _675;
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _703 = fma(_598, cbSceneParam._m0[5u].z, fma(_597, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _596));
    float _706 = fma(_598, cbSceneParam._m0[6u].z, fma(_597, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _596));
    float _709 = fma(_598, cbSceneParam._m0[7u].z, fma(_597, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _596));
    uint _723 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3805 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _684, cbSceneParam._m0[86u].y * _685));
    float _747 = ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * TEXCOORD_5.w) * _743.x;
    float _748 = dot(vec3(_596, _597, _598), vec3(_676, _677, _678));
    float _751 = _748 * 2.0;
    float _755 = (_751 * _596) - _676;
    float _756 = (_751 * _597) - _677;
    float _757 = (_751 * _598) - _678;
    float _761 = abs(dot(vec3(_676, _677, _678), vec3(_596, _597, _598)));
    float _3838 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _763 = sqrt(_599);
    float _776 = exp2((_763 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_763 * 3.0));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_816, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808));
        float _846 = fma(_816, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808));
        float _850 = fma(_816, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808));
        float _875 = _808 + _596;
        float _876 = _812 + _597;
        float _877 = _816 + _598;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_596, _597, _598), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3886 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_596, _597, _598), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3919 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_596, _597, _598), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3952 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_816, cbModelParam._m0[30u].z, fma(_812, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808));
        float _1161 = fma(_816, cbModelParam._m0[31u].z, fma(_812, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808));
        float _1165 = fma(_816, cbModelParam._m0[32u].z, fma(_812, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808));
        float _1188 = _808 + _596;
        float _1189 = _812 + _597;
        float _1190 = _816 + _598;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_596, _597, _598), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4015 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_596, _597, _598), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4048 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_596, _597, _598), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4081 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1118;
        _1427 = _1118;
        _1428 = _1118;
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1132)) + _1132;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _755 * 0.5;
    float _1495 = _756 * 0.5;
    float _1496 = _757 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _599);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1610 = fma(_816, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808)) + cbModelParam._m0[13u].w;
        float _1614 = fma(_816, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808)) + cbModelParam._m0[14u].w;
        float _1618 = fma(_816, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808)) + cbModelParam._m0[15u].w;
        float _1621 = fma(_757, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755));
        float _1624 = fma(_757, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755));
        float _1627 = fma(_757, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755));
        float _1655;
        if (_1621 > 0.0)
        {
            _1655 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1655 = frontier_phi_14_12_ladder;
        }
        float _1824;
        if (_1624 > 0.0)
        {
            _1824 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1824 = frontier_phi_23_19_ladder;
        }
        float _2119;
        if (_1627 > 0.0)
        {
            _2119 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2119 = frontier_phi_35_30_ladder;
        }
        float _2121 = isnan(_1824) ? _1655 : (isnan(_1655) ? _1824 : min(_1655, _1824));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1621) + _1610;
        float _2127 = (_2122 * _1624) + _1614;
        float _2128 = (_2122 * _1627) + _1618;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1643 = frontier_phi_13_35_ladder_2;
        _1645 = frontier_phi_13_35_ladder_1;
        _1647 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_755, _756, _757), _1563);
        _1643 = _1631.x * cbModelParam._m0[1u].y;
        _1645 = _1631.y * cbModelParam._m0[1u].y;
        _1647 = _1631.z * cbModelParam._m0[1u].y;
    }
    float _1651 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _599);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1651 : min(cbModelParam._m0[25u].w, _1651));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_816, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_816, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_816, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_757, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755));
        float _1719 = fma(_757, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755));
        float _1722 = fma(_757, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755));
        float _1829;
        if (_1716 > 0.0)
        {
            _1829 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1829 = frontier_phi_25_21_ladder;
        }
        float _2146;
        if (_1719 > 0.0)
        {
            _2146 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2146 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1722 > 0.0)
        {
            _2473 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2473 = frontier_phi_47_44_ladder;
        }
        float _2475 = isnan(_2146) ? _1829 : (isnan(_1829) ? _2146 : min(_1829, _2146));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1716) + _1705;
        float _2481 = (_2476 * _1719) + _1709;
        float _2482 = (_2476 * _1722) + _1713;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1652);
            frontier_phi_22_47_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_22_47_ladder_2;
        _1743 = frontier_phi_22_47_ladder_1;
        _1745 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_755, _756, _757), _1652);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1757 = ((((1.0 - _776) * ((_763 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_776 * _763)) * _747;
    float _1758 = _1757 * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1759 = _1757 * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1760 = _1757 * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1816 = _1803 / _1815;
    float _1817 = _1807 / _1815;
    float _1818 = _1811 / _1815;
    float _1965;
    float _1966;
    float _1967;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1845 = ((uint(_1818 > cbSceneParam._m0[59u].y) + uint(_1818 > cbSceneParam._m0[59u].x)) + uint(_1818 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1846 = _1845 + 43u;
        uint _1854 = _1845 + 44u;
        uint _1862 = _1845 + 45u;
        uint _1870 = _1845 + 46u;
        float _1881 = fma(_1815, cbSceneParam._m0[_1846].w, fma(_1811, cbSceneParam._m0[_1846].z, fma(_1807, cbSceneParam._m0[_1846].y, _1803 * cbSceneParam._m0[_1846].x)));
        float _1885 = fma(_1815, cbSceneParam._m0[_1854].w, fma(_1811, cbSceneParam._m0[_1854].z, fma(_1807, cbSceneParam._m0[_1854].y, _1803 * cbSceneParam._m0[_1854].x)));
        float _1893 = fma(_1815, cbSceneParam._m0[_1870].w, fma(_1811, cbSceneParam._m0[_1870].z, fma(_1807, cbSceneParam._m0[_1870].y, _1803 * cbSceneParam._m0[_1870].x)));
        float _1898 = cbSceneParam._m0[33u].z * _1893;
        float _1900 = cbSceneParam._m0[33u].w * _1893;
        float _1903 = fma(_1815, cbSceneParam._m0[_1862].w, fma(_1811, cbSceneParam._m0[_1862].z, fma(_1807, cbSceneParam._m0[_1862].y, _1803 * cbSceneParam._m0[_1862].x))) / _1893;
        float _1951 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
        float _4207 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1958 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 + _1881) / _1893, (_1900 + _1885) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 + _1881) / _1893, (_1885 - _1898) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1898) / _1893, (_1885 - _1900) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1900) / _1893, (_1898 + _1885) / _1893), _1903), 0.0)).x), vec4(0.25)));
        _1965 = 1.0 - (_1958 * cbSceneParam._m0[34u].x);
        _1966 = 1.0 - (_1958 * cbSceneParam._m0[34u].y);
        _1967 = 1.0 - (_1958 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1965 = 1.0;
        _1966 = 1.0;
        _1967 = 1.0;
    }
    float _2031;
    float _2033;
    float _2035;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2019 = fma(_1815, cbSceneParam._m0[63u].w, fma(_1811, cbSceneParam._m0[63u].z, fma(_1807, cbSceneParam._m0[63u].y, _1803 * cbSceneParam._m0[63u].x)));
        float _2020 = fma(_1815, cbSceneParam._m0[60u].w, fma(_1811, cbSceneParam._m0[60u].z, fma(_1807, cbSceneParam._m0[60u].y, _1803 * cbSceneParam._m0[60u].x))) / _2019;
        float _2021 = fma(_1815, cbSceneParam._m0[61u].w, fma(_1811, cbSceneParam._m0[61u].z, fma(_1807, cbSceneParam._m0[61u].y, _1803 * cbSceneParam._m0[61u].x))) / _2019;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2020 >= cbSceneParam._m0[64u].x) && (_2021 >= cbSceneParam._m0[64u].y)) && (_2020 <= cbSceneParam._m0[64u].z)) && (_2021 <= cbSceneParam._m0[64u].w))
        {
            float _2159 = fma(_1815, cbSceneParam._m0[62u].w, fma(_1811, cbSceneParam._m0[62u].z, fma(_1807, cbSceneParam._m0[62u].y, _1803 * cbSceneParam._m0[62u].x))) / _2019;
            float _2163 = isnan(cbSceneParam._m0[41u].w) ? _2159 : (isnan(_2159) ? cbSceneParam._m0[41u].w : max(_2159, cbSceneParam._m0[41u].w));
            float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
            float _4223 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
            float _2213 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2020, cbSceneParam._m0[33u].w + _2021), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2020, _2021 - cbSceneParam._m0[33u].z), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].z, _2021 - cbSceneParam._m0[33u].w), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2021), _2163), 0.0)).x), vec4(0.25)));
            float _2217 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
            float _2218 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
            float _2219 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
            frontier_phi_34_33_ladder_1 = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
            frontier_phi_34_33_ladder_2 = isnan(_2217) ? _1965 : (isnan(_1965) ? _2217 : min(_1965, _2217));
        }
        else
        {
            frontier_phi_34_33_ladder = _1967;
            frontier_phi_34_33_ladder_1 = _1966;
            frontier_phi_34_33_ladder_2 = _1965;
        }
        _2031 = frontier_phi_34_33_ladder_2;
        _2033 = frontier_phi_34_33_ladder_1;
        _2035 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2031 = _1965;
        _2033 = _1966;
        _2035 = _1967;
    }
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _747 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2078 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2082 = _2042 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_596, _597, _598));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_596, _597, _598));
    float _4259 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4270 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2059].x * _2065) * _2103) + (((cbLight._m0[_2069].x * _2031) * _2078) * _2101);
    float _2111 = ((_2065 * cbLight._m0[_2059].y) * _2103) + (((cbLight._m0[_2069].y * _2033) * _2078) * _2101);
    float _2112 = ((_2065 * cbLight._m0[_2059].z) * _2103) + (((cbLight._m0[_2069].z * _2035) * _2078) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2118)
    {
        _2220 = _2110;
        _2222 = _2111;
        _2224 = _2112;
    }
    else
    {
        uint _2228 = _2042 + 6u;
        float _2244 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_596, _597, _598)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4281 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2247 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2220 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2110;
        _2222 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2111;
        _2224 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2112;
    }
    bool _2227 = _2116.y == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2227)
    {
        _2282 = _2220;
        _2284 = _2222;
        _2286 = _2224;
    }
    else
    {
        uint _2444 = _2042 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_596, _597, _598)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4297 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2463 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2282 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2220;
        _2284 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2222;
        _2286 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2224;
    }
    uint _2289 = _2042 + 8u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _599) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2042].x + _676;
    float _2305 = cbLight._m0[_2042].y + _677;
    float _2306 = cbLight._m0[_2042].z + _678;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2042].xyz));
    float _4313 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _4324 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _2318 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2319 = dot(vec3(_596, _597, _598), vec3(_2311, _2312, _2313));
    float _4335 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2311, _2312, _2313));
    float _4346 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2303 * _2303;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2343 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2318 * ((_2317 * _2343) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2343) + _2303) * _2317))) * _2317;
    float _4357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    uint _2370 = _2042 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _599) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2082].x + _676;
    float _2384 = cbLight._m0[_2082].y + _677;
    float _2385 = cbLight._m0[_2082].z + _678;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2082].xyz));
    float _4368 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2397 = dot(vec3(_596, _597, _598), vec3(_2390, _2391, _2392));
    float _4379 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2390, _2391, _2392));
    float _4390 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2419 = 1.0 - _2382;
    float _2429 = (0.5 / (((_2318 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2419) + _2382) * _2396))) * _2396;
    float _4401 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2441 = (((_2418 * cbLight._m0[_2370].x) * _2431) * _2065) + ((((cbLight._m0[_2289].x * _2031) * _2342) * _2356) * _2078);
    float _2442 = (((_2418 * cbLight._m0[_2370].y) * _2431) * _2065) + ((((cbLight._m0[_2289].y * _2033) * _2342) * _2356) * _2078);
    float _2443 = (((_2418 * cbLight._m0[_2370].z) * _2431) * _2065) + ((((cbLight._m0[_2289].z * _2035) * _2342) * _2356) * _2078);
    float _2499;
    float _2501;
    float _2503;
    if (_2118)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2042 + 2u;
        uint _2509 = _2042 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _599) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _676;
        float _2526 = cbLight._m0[_2505].y + _677;
        float _2527 = cbLight._m0[_2505].z + _678;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2505].xyz));
        float _4412 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2539 = dot(vec3(_596, _597, _598), vec3(_2532, _2533, _2534));
        float _4423 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4434 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2561 = 1.0 - _2524;
        float _2571 = (0.5 / (((_2318 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2561) + _2524) * _2538))) * _2538;
        float _4445 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2499 = (((_2560 * cbLight._m0[_2509].x) * _2573) * _2574) + _2441;
        _2501 = (((_2560 * cbLight._m0[_2509].y) * _2573) * _2574) + _2442;
        _2503 = (((_2560 * cbLight._m0[_2509].z) * _2573) * _2574) + _2443;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2227)
    {
        _2605 = _2499;
        _2607 = _2501;
        _2609 = _2503;
    }
    else
    {
        uint _2616 = _2042 + 3u;
        uint _2620 = _2042 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _599) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _676;
        float _2637 = cbLight._m0[_2616].y + _677;
        float _2638 = cbLight._m0[_2616].z + _678;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2616].xyz));
        float _4461 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2650 = dot(vec3(_596, _597, _598), vec3(_2643, _2644, _2645));
        float _4472 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4483 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2671 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2672 = 1.0 - _2635;
        float _2682 = (0.5 / (((_2318 * ((_2649 * _2672) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2672) + _2635) * _2649))) * _2649;
        float _4494 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2605 = (((_2671 * cbLight._m0[_2620].x) * _2684) * _2685) + _2499;
        _2607 = (((_2671 * cbLight._m0[_2620].y) * _2684) * _2685) + _2501;
        _2609 = (((_2671 * cbLight._m0[_2620].z) * _2684) * _2685) + _2503;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2040.y == 0u)
    {
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _2707)));
        float _2728 = (log2(_1818 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            uint _2969 = 0u;
            uint _2978;
            bool _2979;
            for (;;)
            {
                _2978 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                _2979 = _2978 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2979)
                {
                    frontier_phi_66_pred = _2968;
                    frontier_phi_66_pred_1 = _2967;
                    frontier_phi_66_pred_2 = _2966;
                    frontier_phi_66_pred_3 = _2965;
                    frontier_phi_66_pred_4 = _2964;
                    frontier_phi_66_pred_5 = _2963;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2978;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2969 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _1816;
                        float _3154 = _3113.y - _1817;
                        float _3155 = _3113.z - _1818;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_703, _706, _709), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4520 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _1816;
                        float _3189 = (-0.0) - _1817;
                        float _3190 = (-0.0) - _1818;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3204 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _763;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3217 = _3197 + _3162;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_703, _706, _709), vec3(_3195, _3196, _3197));
                        float _4536 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3229 = dot(vec3(_703, _706, _709), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4547 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3173 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3163) + _3238;
                        float _4558 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4569 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3236 * _3236) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3022 = (_3184 * _3132.x) + _3090;
                        _3023 = (_3184 * _3132.y) + _3091;
                        _3024 = (_3184 * _3132.z) + _3092;
                        _3019 = (_3264 * _3149.x) + _3087;
                        _3020 = (_3264 * _3149.y) + _3088;
                        _3021 = (_3264 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3023;
                    frontier_phi_66_pred_2 = _3022;
                    frontier_phi_66_pred_3 = _3021;
                    frontier_phi_66_pred_4 = _3020;
                    frontier_phi_66_pred_5 = _3019;
                }
                _2829 = frontier_phi_66_pred;
                _2827 = frontier_phi_66_pred_1;
                _2825 = frontier_phi_66_pred_2;
                _2823 = frontier_phi_66_pred_3;
                _2821 = frontier_phi_66_pred_4;
                _2819 = frontier_phi_66_pred_5;
                uint _2970 = _2969 + 1u;
                if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2963 = _2819;
                    _2964 = _2821;
                    _2965 = _2823;
                    _2966 = _2825;
                    _2967 = _2827;
                    _2968 = _2829;
                    _2969 = _2970;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((4294967295u << _2835) & _2738) == 0u)
        {
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
        }
        else
        {
            float _2956 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
            float _2957 = _2956 * _1816;
            float _2958 = _2956 * _1817;
            float _2959 = _2956 * _1818;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _3070 = _2818;
                float _3071 = _2820;
                float _3072 = _2822;
                float _3073 = _2824;
                float _3074 = _2826;
                float _3075 = _2828;
                uint _3076 = _2835;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3086)
                    {
                        frontier_phi_72_pred = _3075;
                        frontier_phi_72_pred_1 = _3074;
                        frontier_phi_72_pred_2 = _3073;
                        frontier_phi_72_pred_3 = _3072;
                        frontier_phi_72_pred_4 = _3071;
                        frontier_phi_72_pred_5 = _3070;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        uint _3288 = _3085;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3373;
                        float _3419;
                        bool _3420;
                        for (;;)
                        {
                            uint _3299 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3360 = (_3299 * 40u) + 20u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3299 * 40u) + 24u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3394 = (_3299 * 40u) + 28u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3419 = fma(_1818, _3407.z, fma(_1817, _3407.y, _3407.x * _1816)) + _3407.w;
                            _3420 = !((fma(_1818, _3388.z, fma(_1817, _3388.y, _3388.x * _1816)) + _3388.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3420)
                            {
                                float _3447 = _3314.x - _1816;
                                float _3448 = _3314.y - _1817;
                                float _3449 = _3314.z - _1818;
                                float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                                float _3453 = inversesqrt(_3450);
                                float _3454 = _3453 * _3447;
                                float _3455 = _3453 * _3448;
                                float _3456 = _3453 * _3449;
                                float _3460 = 1.0 - (_3450 / (_3315 * _3315));
                                float _4580 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3465 = sqrt(_3450) * _3330.w;
                                float _3467 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                                float _3468 = _3467 * _3467;
                                float _3471 = ((1.0 - _3468) * dot(vec3(_3454, _3455, _3456), vec3(_703, _706, _709))) + _3468;
                                float _3474 = _3465 * _3465;
                                float _3478 = (fma(_1818, _3357.z, fma(_1817, _3357.y, _3357.x * _1816)) + _3357.w) / _3419;
                                float _3479 = (fma(_1818, _3373.z, fma(_1817, _3373.y, _3373.x * _1816)) + _3373.w) / _3419;
                                float _3483 = 1.0 - dot(vec2(_3478, _3479), vec2(_3478, _3479));
                                float _4596 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3485 = _3484 * (((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3461) / ((_3474 * 0.699999988079071044921875) + 1.0));
                                float _3497 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                                float _3498 = 1.0 - _763;
                                float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                                float _3506 = _3505 * _3505;
                                float _3507 = _3506 * _3506;
                                float _3508 = _3454 - _2957;
                                float _3509 = _3455 - _2958;
                                float _3510 = _3456 - _2959;
                                float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                                float _3518 = dot(vec3(_703, _706, _709), vec3((-0.0) - _2957, (-0.0) - _2958, (-0.0) - _2959));
                                float _4607 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3522 = dot(vec3(_703, _706, _709), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                                float _4618 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                                float _3530 = _3467 * _3506;
                                float _3531 = _3530 * _3530;
                                float _3537 = ((1.0 - _3531) * dot(vec3(_703, _706, _709), vec3(_3454, _3455, _3456))) + _3531;
                                float _4629 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3539 = 1.0 - _3506;
                                float _3549 = (0.5 / (((_3538 * ((_3521 * _3539) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3506) * _3521))) * _3538;
                                float _4640 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3559 = (_3484 * _3461) * (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3529 * _3529) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3485 * _3330.y;
                                frontier_phi_78_pred_1 = _3485 * _3330.x;
                                frontier_phi_78_pred_2 = _3559 * _3342.z;
                                frontier_phi_78_pred_3 = _3559 * _3342.y;
                                frontier_phi_78_pred_4 = _3559 * _3342.x;
                                frontier_phi_78_pred_5 = _3485 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3567 = frontier_phi_78_pred;
                            _3566 = frontier_phi_78_pred_1;
                            _3565 = frontier_phi_78_pred_2;
                            _3564 = frontier_phi_78_pred_3;
                            _3563 = frontier_phi_78_pred_4;
                            _3568 = frontier_phi_78_pred_5;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            _3274 = _3568 + _3287;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3274;
                        frontier_phi_72_pred_1 = _3273;
                        frontier_phi_72_pred_2 = _3272;
                        frontier_phi_72_pred_3 = _3271;
                        frontier_phi_72_pred_4 = _3270;
                        frontier_phi_72_pred_5 = _3269;
                    }
                    _2942 = frontier_phi_72_pred;
                    _2940 = frontier_phi_72_pred_1;
                    _2938 = frontier_phi_72_pred_2;
                    _2936 = frontier_phi_72_pred_3;
                    _2934 = frontier_phi_72_pred_4;
                    _2932 = frontier_phi_72_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2932;
                        _3071 = _2934;
                        _3072 = _2936;
                        _3073 = _2938;
                        _3074 = _2940;
                        _3075 = _2942;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2942;
                frontier_phi_60_61_ladder_1 = _2940;
                frontier_phi_60_61_ladder_2 = _2936;
                frontier_phi_60_61_ladder_3 = _2934;
                frontier_phi_60_61_ladder_4 = _2932;
                frontier_phi_60_61_ladder_5 = _2938;
            }
            else
            {
                frontier_phi_60_61_ladder = _2828;
                frontier_phi_60_61_ladder_1 = _2826;
                frontier_phi_60_61_ladder_2 = _2822;
                frontier_phi_60_61_ladder_3 = _2820;
                frontier_phi_60_61_ladder_4 = _2818;
                frontier_phi_60_61_ladder_5 = _2824;
            }
            _2931 = frontier_phi_60_61_ladder_4;
            _2933 = frontier_phi_60_61_ladder_3;
            _2935 = frontier_phi_60_61_ladder_2;
            _2937 = frontier_phi_60_61_ladder_5;
            _2939 = frontier_phi_60_61_ladder_1;
            _2941 = frontier_phi_60_61_ladder;
        }
        float _2946 = isnan(1.0) ? _747 : (isnan(_747) ? 1.0 : min(_747, 1.0));
        _2751 = (_2946 * _2937) + _2282;
        _2753 = (_2946 * _2939) + _2284;
        _2755 = (_2946 * _2941) + _2286;
        _2757 = ((_2931 * 0.039999999105930328369140625) * _2946) + _2605;
        _2759 = ((_2933 * 0.039999999105930328369140625) * _2946) + _2607;
        _2761 = ((_2935 * 0.039999999105930328369140625) * _2946) + _2609;
    }
    else
    {
        _2751 = _2282;
        _2753 = _2284;
        _2755 = _2286;
        _2757 = _2605;
        _2759 = _2607;
        _2761 = _2609;
    }
    float _4656 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4667 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4678 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    uint _2781 = _232 + 6u;
    float _2789 = _684 / cbSceneParam._m0[86u].x;
    float _2790 = _685 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _617 : (isnan(_617) ? cbSceneParam._m0[77u].w : min(_617, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_617 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_617) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _617 : min(cbSceneParam._m0[80u].w, _617));
        float _2844 = _2843 / _617;
        float _2855 = _2844 * _669;
        float _2856 = _670 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2859 = _2844 * _671;
        float _2861 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2862 = _2861 + cbSceneParam._m0[79u].w;
        float _2863 = cbSceneParam._m0[79u].w - _2856;
        float _2869 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2859 * _2859));
        float _2872 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2869;
        float _2877 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2879 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2857 - _2861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2862 > 0.0) ? exp2(_2877 * _2862) : (2.0 - exp2(_2879 * _2862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2872;
        }
        else
        {
            float _2992 = 1.0 / cbSceneParam._m0[80u].x;
            float _2993 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : max(_2862, _2863));
            float _2994 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : min(_2862, _2863));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            _3032 = ((abs(_2869 / _2857) * cbSceneParam._m0[80u].y) * ((((_3003 - _3004) * 2.0) - ((exp2(_2877 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0)))) - exp2(_2877 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))))) * _2992)) - ((exp2(_2879 * _3003) - exp2(_2879 * _3004)) * _2992))) + (_2872 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2809);
        _2881 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2883 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2885 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2887 = _3043 * _2809;
    }
    else
    {
        _2881 = _2806;
        _2883 = _2807;
        _2885 = _2808;
        _2887 = _2809;
    }
    float _2899 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2900 = _2899 == 3.0;
    float _2901 = log2(_2887);
    float _2908 = exp2(_2901 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2751 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _747))) + ((_2757 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2909 = exp2(_2901 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2753 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _747))) + ((_2759 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2910 = exp2(_2901 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2755 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _747))) + ((_2761 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2919 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2919 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.y = _2919 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.z = _2919 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.w = cbInstanceData._m0[_2781].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
}


