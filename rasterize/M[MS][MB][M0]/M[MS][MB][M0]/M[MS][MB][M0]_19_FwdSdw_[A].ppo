#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1203;
float _3848;
float _3849;
float _3850;
float _3851;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3860 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3871 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3882 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _344;
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = _397.z;
    float _405 = (_397.x * 2.0) + (-1.0);
    float _406 = (_397.y * 2.0) + (-1.0);
    float _407 = dot(vec2(_405, _406), vec2(_405, _406));
    float _3893 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))));
    float _417 = _405 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_371.x * 2.0) + (-1.0)));
    float _418 = _406 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_371.y * 2.0) + (-1.0)));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _437 = _435.x;
    float _438 = 1.0 - _437;
    float _447 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _450 = ((isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : min(_447, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _459 = (_450 - ((((((_437 - _438) * cbMtdParam._m0[24u].z) + _438) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _450))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3914 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _467 = (_460 * (cbMtdParam._m0[17u].x - _351)) + _351;
    float _468 = (_460 * (cbMtdParam._m0[17u].y - _352)) + _352;
    float _469 = (_460 * (cbMtdParam._m0[17u].z - _353)) + _353;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _484 = _482.x;
    float _485 = 1.0 - _484;
    float _512 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_484 - _485) * cbMtdParam._m0[24u].w) + _485) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3925 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _521 = ((((cbMtdParam._m0[10u].x - _467) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _513) + _467;
    float _522 = ((((cbMtdParam._m0[10u].y - _468) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _513) + _468;
    float _523 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _469)) * _513) + _469;
    float _528 = (((_371.z - _401) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _401;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _549 = (_542.x * 2.0) + (-1.0);
    float _550 = (_542.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3936 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _559 = (_460 * (_542.z - _528)) + _528;
    float _562 = ((cbMtdParam._m0[23u].y - _559) * _513) + _559;
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _590 = (_584.x * 2.0) + (-1.0);
    float _591 = (_584.y * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3947 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _609 = (((_549 - _417) + (cbMtdParam._m0[21u].x * _417)) * _460) + _417;
    float _610 = (((_550 - _418) + (cbMtdParam._m0[21u].x * _418)) * _460) + _418;
    float _611 = (_460 * (sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) - _412)) + _412;
    float _622 = (((_590 - _609) + (_609 * cbMtdParam._m0[22u].z)) * _513) + _609;
    float _623 = (((_591 - _610) + (_610 * cbMtdParam._m0[22u].z)) * _513) + _610;
    float _624 = ((sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _611) * _513) + _611;
    float _626 = cbMtdParam._m0[22u].x + _397.w;
    float _629 = fma(_624, _239 * NORMAL.x, fma(_623, _246 * TANGENT.x, (_232 * _224) * _622));
    float _632 = fma(_624, _239 * NORMAL.y, fma(_623, _246 * TANGENT.y, (_232 * _225) * _622));
    float _635 = fma(_624, _239 * NORMAL.z, fma(_623, _246 * TANGENT.z, (_232 * _226) * _622));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3958 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _643 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3980 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3991 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4002 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    vec4 _725 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _727 = _725.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _884 = sqrt(((_711 * _711) + (_712 * _712)) + (_713 * _713));
        float _890 = (cbMatDynParam._m0[5u].x * _884) + cbMatDynParam._m0[5u].y;
        float _4013 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _895 = (cbMatDynParam._m0[5u].z * _884) + cbMatDynParam._m0[5u].w;
        float _4024 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) - _891)) + _891) < ((_727 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _763 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _766 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _779 = _271 + 9u;
    uint _780 = _779 + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_780].z;
    float _4035 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _804 = ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_640, _641, _642), vec3(_718, _719, _720));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _640) - _718;
    float _813 = (_808 * _641) - _719;
    float _814 = (_808 * _642) - _720;
    float _818 = abs(dot(vec3(_718, _719, _720), vec3(_640, _641, _642)));
    float _4068 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_643);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1202;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _931 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _935 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _960 = _865 + _640;
        float _961 = _869 + _641;
        float _962 = _873 + _642;
        float _972 = fma(_962, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960)) - _927;
        float _973 = fma(_962, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960)) - _931;
        float _974 = fma(_962, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960)) - _935;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1030 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_996.x + (-0.5));
        float _1032 = _1030 * (_996.y + (-0.5));
        float _1033 = _1030 * (_996.z + (-0.5));
        float _1040 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1003.x + (-0.5));
        float _1042 = _1040 * (_1003.y + (-0.5));
        float _1043 = _1040 * (_1003.z + (-0.5));
        float _1050 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1010.x + (-0.5));
        float _1052 = _1050 * (_1010.y + (-0.5));
        float _1053 = _1050 * (_1010.z + (-0.5));
        float _1060 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1017.x + (-0.5));
        float _1062 = _1060 * (_1017.y + (-0.5));
        float _1063 = _1060 * (_1017.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1084 = (dot(vec3(_640, _641, _642), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1094 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _4116 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1096 + 1.0))) + _1101) * _1064;
        float _1111 = _1032 * 0.5;
        float _1112 = _1042 * 0.5;
        float _1113 = _1052 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_640, _641, _642), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _4149 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1138 + 1.0))) + _1143) * _1065;
        float _1153 = _1033 * 0.5;
        float _1154 = _1043 * 0.5;
        float _1155 = _1053 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_640, _641, _642), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _4182 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1180 + 1.0))) + _1185) * _1066;
        _1202 = _1033;
        _1204 = _1032;
        _1205 = _1031;
        _1206 = _1043;
        _1207 = _1042;
        _1208 = _1041;
        _1209 = _1053;
        _1210 = _1052;
        _1211 = _1051;
        _1212 = _1066;
        _1213 = _1065;
        _1214 = _1064;
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _1203;
        _1204 = _1203;
        _1205 = _1203;
        _1206 = _1203;
        _1207 = _1203;
        _1208 = _1203;
        _1209 = _1203;
        _1210 = _1203;
        _1211 = _1203;
        _1212 = _1203;
        _1213 = _1203;
        _1214 = _1203;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1245 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1249 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1253 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1276 = _865 + _640;
        float _1277 = _869 + _641;
        float _1278 = _873 + _642;
        float _1288 = fma(_1278, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276)) - _1245;
        float _1289 = fma(_1278, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276)) - _1249;
        float _1290 = fma(_1278, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276)) - _1253;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1245 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1249 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[35u].z) + ((((((_1253 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1344 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1311.x + (-0.5));
        float _1346 = _1344 * (_1311.y + (-0.5));
        float _1347 = _1344 * (_1311.z + (-0.5));
        float _1354 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1318.x + (-0.5));
        float _1356 = _1354 * (_1318.y + (-0.5));
        float _1357 = _1354 * (_1318.z + (-0.5));
        float _1364 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1325.x + (-0.5));
        float _1366 = _1364 * (_1325.y + (-0.5));
        float _1367 = _1364 * (_1325.z + (-0.5));
        float _1374 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1332.x + (-0.5));
        float _1376 = _1374 * (_1332.y + (-0.5));
        float _1377 = _1374 * (_1332.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_640, _641, _642), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4245 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1408 + 1.0))) + _1413) * _1378;
        float _1423 = _1346 * 0.5;
        float _1424 = _1356 * 0.5;
        float _1425 = _1366 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_640, _641, _642), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4278 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1450 + 1.0))) + _1455) * _1379;
        float _1465 = _1347 * 0.5;
        float _1466 = _1357 * 0.5;
        float _1467 = _1367 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_640, _641, _642), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4311 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1492 + 1.0))) + _1497) * _1380;
        _1514 = _1347;
        _1515 = _1346;
        _1516 = _1345;
        _1517 = _1357;
        _1518 = _1356;
        _1519 = _1355;
        _1520 = _1367;
        _1521 = _1366;
        _1522 = _1365;
        _1523 = _1380;
        _1524 = _1379;
        _1525 = _1378;
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1203;
        _1515 = _1203;
        _1516 = _1203;
        _1517 = _1203;
        _1518 = _1203;
        _1519 = _1203;
        _1520 = _1203;
        _1521 = _1203;
        _1522 = _1203;
        _1523 = _1203;
        _1524 = _1203;
        _1525 = _1203;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1215)) + _1215;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1216)) + _1216;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1217)) + _1217;
    float _1561 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1538));
    float _1582 = _812 * 0.5;
    float _1583 = _813 * 0.5;
    float _1584 = _814 * 0.5;
    float _1585 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1588 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1591 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1625;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1598 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1202, _1206, _1209, _1212));
        float _1602 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1606 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1613 = dot(vec4(cbModelParam._m0[39u]), vec4(_1582, _1583, _1584, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1636;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1627 = dot(vec4(cbModelParam._m0[40u]), vec4(_1582, _1583, _1584, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1640 = (_1636 * cbModelParam._m0[1u].x) + (_1625 * (1.0 - cbModelParam._m0[1u].x));
    float _1650 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1650 : min(cbModelParam._m0[25u].z, _1650));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1713 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1716 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1744 = frontier_phi_17_15_ladder;
        }
        float _1915;
        if (_1713 > 0.0)
        {
            _1915 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1915 = frontier_phi_26_22_ladder;
        }
        float _2211;
        if (_1716 > 0.0)
        {
            _2211 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2211 = frontier_phi_38_33_ladder;
        }
        float _2213 = isnan(_1915) ? _1744 : (isnan(_1744) ? _1915 : min(_1744, _1915));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1710) + _1699;
        float _2219 = (_2214 * _1713) + _1703;
        float _2220 = (_2214 * _1716) + _1707;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2221;
        float _2225 = _2221 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 > _2225) || ((_2219 < _2223) || ((_2218 < _2223) || (_2218 > _2225))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2220, cbModelParam._m0[9u].z, fma(_2219, cbModelParam._m0[9u].y, _2218 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2220, cbModelParam._m0[10u].z, fma(_2219, cbModelParam._m0[10u].y, _2218 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2220, cbModelParam._m0[11u].z, fma(_2219, cbModelParam._m0[11u].y, _2218 * cbModelParam._m0[11u].x))), _1651);
            frontier_phi_16_38_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_16_38_ladder_2;
        _1734 = frontier_phi_16_38_ladder_1;
        _1736 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1651);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1809 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1812 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1920;
        if (_1806 > 0.0)
        {
            _1920 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1920 = frontier_phi_28_24_ladder;
        }
        float _2238;
        if (_1809 > 0.0)
        {
            _2238 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2238 = frontier_phi_40_35_ladder;
        }
        float _2565;
        if (_1812 > 0.0)
        {
            _2565 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2565 = frontier_phi_50_47_ladder;
        }
        float _2567 = isnan(_2238) ? _1920 : (isnan(_1920) ? _2238 : min(_1920, _2238));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1806) + _1795;
        float _2573 = (_2568 * _1809) + _1799;
        float _2574 = (_2568 * _1812) + _1803;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_25_50_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_25_50_ladder_2;
        _1833 = frontier_phi_25_50_ladder_1;
        _1835 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1741);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1847 = ((((1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _820)) * _804;
    float _1848 = _1847 * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1849 = _1847 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1850 = _1847 * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1853 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1902 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1907 = _1894 / _1906;
    float _1908 = _1898 / _1906;
    float _1909 = _1902 / _1906;
    float _2056;
    float _2057;
    float _2058;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1936 = ((uint(_1909 > cbSceneParam._m0[59u].y) + uint(_1909 > cbSceneParam._m0[59u].x)) + uint(_1909 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1937 = _1936 + 43u;
        uint _1945 = _1936 + 44u;
        uint _1953 = _1936 + 45u;
        uint _1961 = _1936 + 46u;
        float _1972 = fma(_1906, cbSceneParam._m0[_1937].w, fma(_1902, cbSceneParam._m0[_1937].z, fma(_1898, cbSceneParam._m0[_1937].y, _1894 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1906, cbSceneParam._m0[_1945].w, fma(_1902, cbSceneParam._m0[_1945].z, fma(_1898, cbSceneParam._m0[_1945].y, _1894 * cbSceneParam._m0[_1945].x)));
        float _1984 = fma(_1906, cbSceneParam._m0[_1961].w, fma(_1902, cbSceneParam._m0[_1961].z, fma(_1898, cbSceneParam._m0[_1961].y, _1894 * cbSceneParam._m0[_1961].x)));
        float _1989 = cbSceneParam._m0[33u].z * _1984;
        float _1991 = cbSceneParam._m0[33u].w * _1984;
        float _1994 = fma(_1906, cbSceneParam._m0[_1953].w, fma(_1902, cbSceneParam._m0[_1953].z, fma(_1898, cbSceneParam._m0[_1953].y, _1894 * cbSceneParam._m0[_1953].x))) / _1984;
        float _2042 = (cbSceneParam._m0[33u].x - sqrt(((_1908 * _1908) + (_1907 * _1907)) + (_1909 * _1909))) * cbSceneParam._m0[33u].y;
        float _4437 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2049 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 + _1972) / _1984, (_1991 + _1976) / _1984), _1994), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 + _1972) / _1984, (_1976 - _1989) / _1984), _1994), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1972 - _1989) / _1984, (_1976 - _1991) / _1984), _1994), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1972 - _1991) / _1984, (_1989 + _1976) / _1984), _1994), 0.0)).x), vec4(0.25)));
        _2056 = 1.0 - (_2049 * cbSceneParam._m0[34u].x);
        _2057 = 1.0 - (_2049 * cbSceneParam._m0[34u].y);
        _2058 = 1.0 - (_2049 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2056 = 1.0;
        _2057 = 1.0;
        _2058 = 1.0;
    }
    float _2122;
    float _2124;
    float _2126;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2110 = fma(_1906, cbSceneParam._m0[63u].w, fma(_1902, cbSceneParam._m0[63u].z, fma(_1898, cbSceneParam._m0[63u].y, _1894 * cbSceneParam._m0[63u].x)));
        float _2111 = fma(_1906, cbSceneParam._m0[60u].w, fma(_1902, cbSceneParam._m0[60u].z, fma(_1898, cbSceneParam._m0[60u].y, _1894 * cbSceneParam._m0[60u].x))) / _2110;
        float _2112 = fma(_1906, cbSceneParam._m0[61u].w, fma(_1902, cbSceneParam._m0[61u].z, fma(_1898, cbSceneParam._m0[61u].y, _1894 * cbSceneParam._m0[61u].x))) / _2110;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2111 >= cbSceneParam._m0[64u].x) && (_2112 >= cbSceneParam._m0[64u].y)) && (_2111 <= cbSceneParam._m0[64u].z)) && (_2112 <= cbSceneParam._m0[64u].w))
        {
            float _2251 = fma(_1906, cbSceneParam._m0[62u].w, fma(_1902, cbSceneParam._m0[62u].z, fma(_1898, cbSceneParam._m0[62u].y, _1894 * cbSceneParam._m0[62u].x))) / _2110;
            float _2255 = isnan(cbSceneParam._m0[41u].w) ? _2251 : (isnan(_2251) ? cbSceneParam._m0[41u].w : max(_2251, cbSceneParam._m0[41u].w));
            float _2298 = (cbSceneParam._m0[33u].x - sqrt(((_1908 * _1908) + (_1907 * _1907)) + (_1909 * _1909))) * cbSceneParam._m0[33u].y;
            float _4453 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
            float _2305 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2111, cbSceneParam._m0[33u].w + _2112), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2111, _2112 - cbSceneParam._m0[33u].z), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2111 - cbSceneParam._m0[33u].z, _2112 - cbSceneParam._m0[33u].w), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2111 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2112), _2255), 0.0)).x), vec4(0.25)));
            float _2309 = 1.0 - (_2305 * cbSceneParam._m0[34u].x);
            float _2310 = 1.0 - (_2305 * cbSceneParam._m0[34u].y);
            float _2311 = 1.0 - (_2305 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2311) ? _2058 : (isnan(_2058) ? _2311 : min(_2058, _2311));
            frontier_phi_37_36_ladder_1 = isnan(_2310) ? _2057 : (isnan(_2057) ? _2310 : min(_2057, _2310));
            frontier_phi_37_36_ladder_2 = isnan(_2309) ? _2056 : (isnan(_2056) ? _2309 : min(_2056, _2309));
        }
        else
        {
            frontier_phi_37_36_ladder = _2058;
            frontier_phi_37_36_ladder_1 = _2057;
            frontier_phi_37_36_ladder_2 = _2056;
        }
        _2122 = frontier_phi_37_36_ladder_2;
        _2124 = frontier_phi_37_36_ladder_1;
        _2126 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2122 = _2056;
        _2124 = _2057;
        _2126 = _2058;
    }
    uvec4 _2131 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2133 = _2131.x * 14u;
    uint _2134 = _2133 + 13u;
    float _2141 = _804 + (-1.0);
    float _2146 = (cbLight._m0[_2134].x * _2141) + 1.0;
    float _2147 = (cbLight._m0[_2134].y * _2141) + 1.0;
    float _2148 = (cbLight._m0[_2134].z * _2141) + 1.0;
    float _2149 = (cbLight._m0[_2134].w * _2141) + 1.0;
    uint _2150 = _2133 + 5u;
    float _2156 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2160 = _2133 + 4u;
    float _2170 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2174 = _2133 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_640, _641, _642));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_640, _641, _642));
    float _4489 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4500 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2150].x * _2156) * _2195) + (((cbLight._m0[_2160].x * _2122) * _2170) * _2193);
    float _2203 = ((_2156 * cbLight._m0[_2150].y) * _2195) + (((cbLight._m0[_2160].y * _2124) * _2170) * _2193);
    float _2204 = ((_2156 * cbLight._m0[_2150].z) * _2195) + (((cbLight._m0[_2160].z * _2126) * _2170) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2133 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2210)
    {
        _2312 = _2202;
        _2314 = _2203;
        _2316 = _2204;
    }
    else
    {
        uint _2320 = _2133 + 6u;
        float _2336 = (dot(vec3(cbLight._m0[_2133 + 2u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4511 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2339 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2312 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2202;
        _2314 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2203;
        _2316 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2204;
    }
    bool _2319 = _2208.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2319)
    {
        _2374 = _2312;
        _2376 = _2314;
        _2378 = _2316;
    }
    else
    {
        uint _2536 = _2133 + 7u;
        float _2552 = (dot(vec3(cbLight._m0[_2133 + 3u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _2553 = _2552 * _2552;
        float _4527 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2554 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2555 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2374 = (((cbLight._m0[_2536].x * 0.3183098733425140380859375) * _2554) * _2555) + _2312;
        _2376 = (((cbLight._m0[_2536].y * 0.3183098733425140380859375) * _2554) * _2555) + _2314;
        _2378 = (((cbLight._m0[_2536].z * 0.3183098733425140380859375) * _2554) * _2555) + _2316;
    }
    uint _2381 = _2133 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _643) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2133].x + _718;
    float _2397 = cbLight._m0[_2133].y + _719;
    float _2398 = cbLight._m0[_2133].z + _720;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2133].xyz));
    float _4543 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _4554 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2410 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2411 = dot(vec3(_640, _641, _642), vec3(_2403, _2404, _2405));
    float _4565 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2403, _2404, _2405));
    float _4576 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2410 * ((_2409 * _2435) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2435) + _2395) * _2409))) * _2409;
    float _4587 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2462 = _2133 + 9u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _643) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2174].x + _718;
    float _2476 = cbLight._m0[_2174].y + _719;
    float _2477 = cbLight._m0[_2174].z + _720;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2174].xyz));
    float _4598 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2489 = dot(vec3(_640, _641, _642), vec3(_2482, _2483, _2484));
    float _4609 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2482, _2483, _2484));
    float _4620 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2474 * _2474;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2511 = 1.0 - _2474;
    float _2521 = (0.5 / (((_2410 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2511) + _2474) * _2488))) * _2488;
    float _4631 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    float _2533 = (((_2510 * cbLight._m0[_2462].x) * _2523) * _2156) + ((((cbLight._m0[_2381].x * _2122) * _2434) * _2448) * _2170);
    float _2534 = (((_2510 * cbLight._m0[_2462].y) * _2523) * _2156) + ((((cbLight._m0[_2381].y * _2124) * _2434) * _2448) * _2170);
    float _2535 = (((_2510 * cbLight._m0[_2462].z) * _2523) * _2156) + ((((cbLight._m0[_2381].z * _2126) * _2434) * _2448) * _2170);
    float _2591;
    float _2593;
    float _2595;
    if (_2210)
    {
        _2591 = _2533;
        _2593 = _2534;
        _2595 = _2535;
    }
    else
    {
        uint _2597 = _2133 + 2u;
        uint _2601 = _2133 + 10u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _643) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _718;
        float _2618 = cbLight._m0[_2597].y + _719;
        float _2619 = cbLight._m0[_2597].z + _720;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2597].xyz));
        float _4642 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2631 = dot(vec3(_640, _641, _642), vec3(_2624, _2625, _2626));
        float _4653 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4664 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2652 = (exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2653 = 1.0 - _2616;
        float _2663 = (0.5 / (((_2410 * ((_2630 * _2653) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2653) + _2616) * _2630))) * _2630;
        float _4675 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2591 = (((_2652 * cbLight._m0[_2601].x) * _2665) * _2666) + _2533;
        _2593 = (((_2652 * cbLight._m0[_2601].y) * _2665) * _2666) + _2534;
        _2595 = (((_2652 * cbLight._m0[_2601].z) * _2665) * _2666) + _2535;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2319)
    {
        _2697 = _2591;
        _2699 = _2593;
        _2701 = _2595;
    }
    else
    {
        uint _2708 = _2133 + 3u;
        uint _2712 = _2133 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _643) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _718;
        float _2729 = cbLight._m0[_2708].y + _719;
        float _2730 = cbLight._m0[_2708].z + _720;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2708].xyz));
        float _4691 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2742 = dot(vec3(_640, _641, _642), vec3(_2735, _2736, _2737));
        float _4702 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4713 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2763 = (exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2764 = 1.0 - _2727;
        float _2774 = (0.5 / (((_2410 * ((_2741 * _2764) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2764) + _2727) * _2741))) * _2741;
        float _4724 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2697 = (((_2763 * cbLight._m0[_2712].x) * _2776) * _2777) + _2591;
        _2699 = (((_2763 * cbLight._m0[_2712].y) * _2776) * _2777) + _2593;
        _2701 = (((_2763 * cbLight._m0[_2712].z) * _2776) * _2777) + _2595;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2131.y == 0u)
    {
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.x;
        uint _2810 = uint((float(_2798.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2799))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2799)));
        float _2820 = (log2(_1909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2821 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        uint _2824 = uint(isnan(14.0) ? _2821 : (isnan(_2821) ? 14.0 : min(_2821, 14.0)));
        uvec4 _2829 = texelFetch(g_lightClusterGridBuffer, int(((_2824 << 2u) + (_2810 << 6u)) >> 2u));
        uint _2830 = _2829.x;
        uint _2831 = _2798.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2831 >> 4u) & 15u)) + 4294967295u) & _2830) == 0u) || ((_2831 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            uint _3069 = 0u;
            uint _3078;
            bool _3079;
            for (;;)
            {
                _3078 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                _3079 = _3078 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3079)
                {
                    frontier_phi_71_pred = _3068;
                    frontier_phi_71_pred_1 = _3067;
                    frontier_phi_71_pred_2 = _3066;
                    frontier_phi_71_pred_3 = _3065;
                    frontier_phi_71_pred_4 = _3064;
                    frontier_phi_71_pred_5 = _3063;
                }
                else
                {
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    uint _3214;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3078;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3218 = uint(findLSB(_3214)) + (_3069 << 5u);
                        uint _3215 = (_3214 + 4294967295u) & _3214;
                        uint _3220 = _3218 * 48u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3240 = (_3218 * 48u) + 4u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3259 = (_3218 * 48u) + 8u;
                        vec3 _3270 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x));
                        float _3274 = _3234.x - _1907;
                        float _3275 = _3234.y - _1908;
                        float _3276 = _3234.z - _1909;
                        float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                        float _3280 = inversesqrt(_3277);
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3284 = dot(vec3(_760, _763, _766), vec3(_3281, _3282, _3283));
                        float _3289 = 1.0 - (_3277 * _3234.w);
                        float _4750 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3291 = sqrt(_3277) * _3253.w;
                        float _3294 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3284) + _3295;
                        float _3301 = _3291 * _3291;
                        float _3305 = ((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3290) / ((_3301 * 0.699999988079071044921875) + 1.0);
                        float _3309 = (-0.0) - _1907;
                        float _3310 = (-0.0) - _1908;
                        float _3311 = (-0.0) - _1909;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3325 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                        float _3326 = 1.0 - _820;
                        float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                        float _3334 = _3333 * _3333;
                        float _3335 = _3334 * _3334;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3338 = _3318 + _3283;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3346 = dot(vec3(_760, _763, _766), vec3(_3316, _3317, _3318));
                        float _4766 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3350 = dot(vec3(_760, _763, _766), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                        float _4777 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                        float _3358 = _3294 * _3334;
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3284) + _3359;
                        float _4788 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3364 = 1.0 - _3334;
                        float _3374 = (0.5 / (((_3363 * ((_3349 * _3364) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3334) * _3349))) * _3363;
                        float _4799 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3385 = (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3357 * _3357) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125))) * _3290;
                        _3138 = (_3305 * _3253.x) + _3211;
                        _3139 = (_3305 * _3253.y) + _3212;
                        _3140 = (_3305 * _3253.z) + _3213;
                        _3135 = (_3385 * _3270.x) + _3208;
                        _3136 = (_3385 * _3270.y) + _3209;
                        _3137 = (_3385 * _3270.z) + _3210;
                        if (_3215 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3215;
                        }
                    }
                    frontier_phi_71_pred = _3140;
                    frontier_phi_71_pred_1 = _3139;
                    frontier_phi_71_pred_2 = _3138;
                    frontier_phi_71_pred_3 = _3137;
                    frontier_phi_71_pred_4 = _3136;
                    frontier_phi_71_pred_5 = _3135;
                }
                _2921 = frontier_phi_71_pred;
                _2919 = frontier_phi_71_pred_1;
                _2917 = frontier_phi_71_pred_2;
                _2915 = frontier_phi_71_pred_3;
                _2913 = frontier_phi_71_pred_4;
                _2911 = frontier_phi_71_pred_5;
                uint _3070 = _3069 + 1u;
                if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3063 = _2911;
                    _3064 = _2913;
                    _3065 = _2915;
                    _3066 = _2917;
                    _3067 = _2919;
                    _3068 = _2921;
                    _3069 = _3070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((4294967295u << _2927) & _2830) == 0u)
        {
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
        }
        else
        {
            float _3056 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
            float _3057 = _3056 * _1907;
            float _3058 = _3056 * _1908;
            float _3059 = _3056 * _1909;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3191 = _2910;
                float _3192 = _2912;
                float _3193 = _2914;
                float _3194 = _2916;
                float _3195 = _2918;
                float _3196 = _2920;
                uint _3197 = _2927;
                uint _3206;
                bool _3207;
                for (;;)
                {
                    _3206 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                    _3207 = _3206 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3207)
                    {
                        frontier_phi_82_pred = _3196;
                        frontier_phi_82_pred_1 = _3195;
                        frontier_phi_82_pred_2 = _3194;
                        frontier_phi_82_pred_3 = _3193;
                        frontier_phi_82_pred_4 = _3192;
                        frontier_phi_82_pred_5 = _3191;
                    }
                    else
                    {
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        uint _3418 = _3206;
                        uint _3419;
                        vec4 _3444;
                        float _3445;
                        vec4 _3460;
                        vec3 _3472;
                        vec4 _3487;
                        vec4 _3502;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3429 = ((_3197 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3418));
                            _3419 = (_3418 + 4294967295u) & _3418;
                            uint _3431 = _3429 * 40u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3445 = _3444.w;
                            uint _3447 = (_3429 * 40u) + 4u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3429 * 40u) + 8u;
                            _3472 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x));
                            uint _3474 = (_3429 * 40u) + 16u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3429 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3429 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3429 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_1909, _3536.z, fma(_1908, _3536.y, _3536.x * _1907)) + _3536.w;
                            _3549 = !((fma(_1909, _3517.z, fma(_1908, _3517.y, _3517.x * _1907)) + _3517.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3444.x - _1907;
                                float _3577 = _3444.y - _1908;
                                float _3578 = _3444.z - _1909;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3445 * _3445));
                                float _4810 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3594 = sqrt(_3579) * _3460.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_760, _763, _766))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_1909, _3487.z, fma(_1908, _3487.y, _3487.x * _1907)) + _3487.w) / _3548;
                                float _3608 = (fma(_1909, _3502.z, fma(_1908, _3502.y, _3502.x * _1907)) + _3502.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4826 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _820;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3057;
                                float _3638 = _3584 - _3058;
                                float _3639 = _3585 - _3059;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_760, _763, _766), vec3((-0.0) - _3057, (-0.0) - _3058, (-0.0) - _3059));
                                float _4837 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3651 = dot(vec3(_760, _763, _766), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4848 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_760, _763, _766), vec3(_3583, _3584, _3585))) + _3660;
                                float _4859 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4870 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3614 * _3460.z;
                                frontier_phi_88_pred_1 = _3614 * _3460.y;
                                frontier_phi_88_pred_2 = _3614 * _3460.x;
                                frontier_phi_88_pred_3 = _3688 * _3472.z;
                                frontier_phi_88_pred_4 = _3688 * _3472.y;
                                frontier_phi_88_pred_5 = _3688 * _3472.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3697 = frontier_phi_88_pred;
                            _3696 = frontier_phi_88_pred_1;
                            _3695 = frontier_phi_88_pred_2;
                            _3694 = frontier_phi_88_pred_3;
                            _3693 = frontier_phi_88_pred_4;
                            _3692 = frontier_phi_88_pred_5;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            if (_3419 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3419;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3404;
                        frontier_phi_82_pred_1 = _3403;
                        frontier_phi_82_pred_2 = _3402;
                        frontier_phi_82_pred_3 = _3401;
                        frontier_phi_82_pred_4 = _3400;
                        frontier_phi_82_pred_5 = _3399;
                    }
                    _3042 = frontier_phi_82_pred;
                    _3040 = frontier_phi_82_pred_1;
                    _3038 = frontier_phi_82_pred_2;
                    _3036 = frontier_phi_82_pred_3;
                    _3034 = frontier_phi_82_pred_4;
                    _3032 = frontier_phi_82_pred_5;
                    uint _3198 = _3197 + 1u;
                    if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3191 = _3032;
                        _3192 = _3034;
                        _3193 = _3036;
                        _3194 = _3038;
                        _3195 = _3040;
                        _3196 = _3042;
                        _3197 = _3198;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3038;
                frontier_phi_63_64_ladder_1 = _3042;
                frontier_phi_63_64_ladder_2 = _3040;
                frontier_phi_63_64_ladder_3 = _3036;
                frontier_phi_63_64_ladder_4 = _3034;
                frontier_phi_63_64_ladder_5 = _3032;
            }
            else
            {
                frontier_phi_63_64_ladder = _2916;
                frontier_phi_63_64_ladder_1 = _2920;
                frontier_phi_63_64_ladder_2 = _2918;
                frontier_phi_63_64_ladder_3 = _2914;
                frontier_phi_63_64_ladder_4 = _2912;
                frontier_phi_63_64_ladder_5 = _2910;
            }
            _3031 = frontier_phi_63_64_ladder_5;
            _3033 = frontier_phi_63_64_ladder_4;
            _3035 = frontier_phi_63_64_ladder_3;
            _3037 = frontier_phi_63_64_ladder;
            _3039 = frontier_phi_63_64_ladder_2;
            _3041 = frontier_phi_63_64_ladder_1;
        }
        float _3046 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2843 = (_3046 * _3037) + _2374;
        _2845 = (_3046 * _3039) + _2376;
        _2847 = (_3046 * _3041) + _2378;
        _2849 = ((_3031 * 0.039999999105930328369140625) * _3046) + _2697;
        _2851 = ((_3033 * 0.039999999105930328369140625) * _3046) + _2699;
        _2853 = ((_3035 * 0.039999999105930328369140625) * _3046) + _2701;
    }
    else
    {
        _2843 = _2374;
        _2845 = _2376;
        _2847 = _2378;
        _2849 = _2697;
        _2851 = _2699;
        _2853 = _2701;
    }
    float _4886 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4897 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4908 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2870 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2843 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _804))) + ((_2849 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1640)) * cbPerFrame._m0[3u].x);
    float _2871 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2845 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _804))) + ((_2851 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1640)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2847 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _804))) + ((_2853 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1640)) * cbPerFrame._m0[3u].x);
    uint _2873 = _271 + 6u;
    float _2881 = _739 / cbSceneParam._m0[86u].x;
    float _2882 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2896 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2898 = _2896.x;
    float _2899 = _2896.y;
    float _2900 = _2896.z;
    float _2901 = _2896.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2936 = _2935 / _661;
        float _2947 = _2936 * _711;
        float _2948 = _712 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2951 = _2936 * _713;
        float _2953 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2954 = _2953 + cbSceneParam._m0[79u].w;
        float _2955 = cbSceneParam._m0[79u].w - _2948;
        float _2961 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2951 * _2951));
        float _2964 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2961;
        float _2969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2949 - _2953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2954 > 0.0) ? exp2(_2969 * _2954) : (2.0 - exp2(_2971 * _2954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2964;
        }
        else
        {
            float _3092 = 1.0 / cbSceneParam._m0[80u].x;
            float _3093 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : max(_2954, _2955));
            float _3094 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : min(_2954, _2955));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            _3148 = ((abs(_2961 / _2949) * cbSceneParam._m0[80u].y) * ((((_3103 - _3104) * 2.0) - ((exp2(_2969 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)))) - exp2(_2969 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))))) * _3092)) - ((exp2(_2971 * _3103) - exp2(_2971 * _3104)) * _3092))) + (_2964 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2901);
        _2973 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2898;
        _2975 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2899;
        _2977 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2900;
        _2979 = _3159 * _2901;
    }
    else
    {
        _2973 = _2898;
        _2975 = _2899;
        _2977 = _2900;
        _2979 = _2901;
    }
    bool _3186;
    vec4 _2989;
    vec4 _3011;
    float _3013;
    float _3017;
    float _3018;
    float _3019;
    float _3020;
    bool _3030;
    for (;;)
    {
        _2989 = cbMatDynParam._m0[0u];
        float _2991 = roundEven(_2989.y);
        bool _2992 = _2991 == 3.0;
        float _2993 = log2(_2979);
        float _3000 = exp2(_2993 * cbSceneParam._m0[78u].x) * _2870;
        float _3001 = exp2(_2993 * cbSceneParam._m0[78u].y) * _2871;
        float _3002 = exp2(_2993 * cbSceneParam._m0[78u].z) * _2872;
        float _3009 = _727 + (-0.5);
        _3011 = cbMtdParam._m0[1u];
        _3013 = _3011.y * _3009;
        float _3016 = (_2991 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3017 = _3016 * (_2992 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2973)));
        _3018 = _3016 * (_2992 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2975)));
        _3019 = _3016 * (_2992 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2977)));
        _3020 = _3009 * 0.999000012874603271484375;
        _3030 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3030)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3020) < 0.5)
            {
                _3186 = true;
                break;
            }
        }
        uint _3127 = _779 + uint(_2989.w);
        if ((cbInstanceData._m0[_3127].w < 1.0) && ((cbInstanceData._m0[_3127].w + _3020) < 0.5))
        {
            _3186 = true;
            break;
        }
        if ((_3013 + 1.0) < _3011.x)
        {
            _3186 = true;
            break;
        }
        _3186 = false;
        break;
    }
    float _3390;
    if (_3186)
    {
        discard_state = true;
        _3390 = 0.0;
    }
    else
    {
        _3390 = cbInstanceData._m0[_2873].w;
    }
    SV_Target.x = _3017;
    SV_Target.y = _3018;
    SV_Target.z = _3019;
    SV_Target.w = _3390;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2873].w;
    discard_exit();
}


