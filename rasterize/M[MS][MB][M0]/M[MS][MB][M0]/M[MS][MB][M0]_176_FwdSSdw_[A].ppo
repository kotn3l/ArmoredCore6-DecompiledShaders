#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1334;
float _3719;
float _3720;
float _3721;
float _3722;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3731 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3742 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3753 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _401 = _399.x;
    float _411 = dot(vec4(_401, _399.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _428 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_401 - _411) * cbMtdParam._m0[24u].x) + _411) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3764 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _436 = (_429 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _437 = (_429 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _438 = (_429 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _477 = _475.x;
    float _487 = dot(vec4(_477, _475.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _501 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_477 - _487) * cbMtdParam._m0[24u].x) + _487) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3775 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _509 = (_502 * ((_455.x * cbMtdParam._m0[13u].x) - _436)) + _436;
    float _510 = (_502 * ((_455.y * cbMtdParam._m0[13u].y) - _437)) + _437;
    float _511 = (_502 * ((_455.z * cbMtdParam._m0[13u].z) - _438)) + _438;
    float _515 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _509;
    float _518 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _510;
    float _521 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _511;
    float _528 = ((_509 - _515) * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) + _515;
    float _529 = ((_510 - _518) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _518;
    float _530 = ((_511 - _521) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _521;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _429) + _584;
    float _594 = ((_565.y - _585) * _429) + _585;
    float _595 = ((_565.z - _586) * _429) + _586;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _298) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _299) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _502) + _595;
    float _623 = ((((_607.x - _593) * _502) + _593) * 2.0) + (-1.0);
    float _624 = ((((_607.y - _594) * _502) + _594) * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3786 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _630 = sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))));
    float _635 = _623 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_542.x * 2.0) + (-1.0)));
    float _636 = _624 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_542.y * 2.0) + (-1.0)));
    vec4 _649 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _663 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _665 = _663.x;
    float _666 = 1.0 - _665;
    float _692 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_665 - _666) * cbMtdParam._m0[24u].w) + _666) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3797 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _701 = ((((cbMtdParam._m0[10u].x - _528) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _693) + _528;
    float _702 = ((((cbMtdParam._m0[10u].y - _529) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _693) + _529;
    float _703 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _530)) * _693) + _530;
    float _708 = (((_542.z - _620) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _620;
    float _712 = ((cbMtdParam._m0[23u].y - _708) * _693) + _708;
    vec4 _731 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _737 = (_731.x * 2.0) + (-1.0);
    float _738 = (_731.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3808 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _755 = (_693 * (((cbMtdParam._m0[22u].z * _635) - _635) + _737)) + _635;
    float _756 = (_693 * (((cbMtdParam._m0[22u].z * _636) - _636) + _738)) + _636;
    float _757 = (_693 * (sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) - _630)) + _630;
    float _759 = cbMtdParam._m0[22u].x + _649.w;
    float _762 = fma(_757, _247 * NORMAL.x, fma(_756, _254 * TANGENT.x, (_240 * _232) * _755));
    float _765 = fma(_757, _247 * NORMAL.y, fma(_756, _254 * TANGENT.y, (_240 * _233) * _755));
    float _768 = fma(_757, _247 * NORMAL.z, fma(_756, _254 * TANGENT.z, (_240 * _234) * _755));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _773 = _772 * _762;
    float _774 = _772 * _765;
    float _775 = _772 * _768;
    float _3819 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _776 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3841 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3852 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3863 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _794 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _845 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _835);
    float _846 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _835);
    float _847 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _835);
    float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
    float _852 = _845 * _851;
    float _853 = _846 * _851;
    float _854 = _847 * _851;
    vec4 _859 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _861 = _859.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1015 = sqrt(((_845 * _845) + (_846 * _846)) + (_847 * _847));
        float _1021 = (cbMatDynParam._m0[5u].x * _1015) + cbMatDynParam._m0[5u].y;
        float _3874 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1026 = (cbMatDynParam._m0[5u].z * _1015) + cbMatDynParam._m0[5u].w;
        float _3885 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) - _1022)) + _1022) < ((_861 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _891 = fma(_775, cbSceneParam._m0[5u].z, fma(_774, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _773));
    float _894 = fma(_775, cbSceneParam._m0[6u].z, fma(_774, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _773));
    float _897 = fma(_775, cbSceneParam._m0[7u].z, fma(_774, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _773));
    uint _910 = _279 + 9u;
    uint _911 = _910 + uint(cbMatDynParam._m0[0u].w);
    float _917 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_911].x;
    float _918 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_911].y;
    float _919 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_911].z;
    float _3896 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _935 = ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_773, _774, _775), vec3(_852, _853, _854));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _773) - _852;
    float _944 = (_939 * _774) - _853;
    float _945 = (_939 * _775) - _854;
    float _949 = abs(dot(vec3(_852, _853, _854), vec3(_773, _774, _775)));
    float _3929 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_776);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1062 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1066 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1091 = _996 + _773;
        float _1092 = _1000 + _774;
        float _1093 = _1004 + _775;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_773, _774, _775), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3977 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_773, _774, _775), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4010 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_773, _774, _775), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4043 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1379 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1383 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1406 = _996 + _773;
        float _1407 = _1000 + _774;
        float _1408 = _1004 + _775;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_773, _774, _775), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4106 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_773, _774, _775), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4139 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_773, _774, _775), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4172 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = _1334;
        _1655 = _1334;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1346)) + _1346;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1347)) + _1347;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _943 * 0.5;
    float _1713 = _944 * 0.5;
    float _1714 = _945 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1844 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1847 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1875 = frontier_phi_17_15_ladder;
        }
        float _2098;
        if (_1844 > 0.0)
        {
            _2098 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2098 = frontier_phi_26_22_ladder;
        }
        float _2344;
        if (_1847 > 0.0)
        {
            _2344 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2344 = frontier_phi_38_33_ladder;
        }
        float _2346 = isnan(_2098) ? _1875 : (isnan(_1875) ? _2098 : min(_1875, _2098));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1841) + _1830;
        float _2352 = (_2347 * _1844) + _1834;
        float _2353 = (_2347 * _1847) + _1838;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2354;
        float _2358 = _2354 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 > _2358) || ((_2352 < _2356) || ((_2351 < _2356) || (_2351 > _2358))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2353, cbModelParam._m0[9u].z, fma(_2352, cbModelParam._m0[9u].y, _2351 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2353, cbModelParam._m0[10u].z, fma(_2352, cbModelParam._m0[10u].y, _2351 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2353, cbModelParam._m0[11u].z, fma(_2352, cbModelParam._m0[11u].y, _2351 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_16_38_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_16_38_ladder_2;
        _1865 = frontier_phi_16_38_ladder_1;
        _1867 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1781);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1941 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1944 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2103;
        if (_1938 > 0.0)
        {
            _2103 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2103 = frontier_phi_28_24_ladder;
        }
        float _2371;
        if (_1941 > 0.0)
        {
            _2371 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2371 = frontier_phi_40_35_ladder;
        }
        float _2576;
        if (_1944 > 0.0)
        {
            _2576 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2576 = frontier_phi_49_46_ladder;
        }
        float _2578 = isnan(_2371) ? _2103 : (isnan(_2103) ? _2371 : min(_2103, _2371));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1938) + _1927;
        float _2584 = (_2579 * _1941) + _1931;
        float _2585 = (_2579 * _1944) + _1935;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_25_49_ladder = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_25_49_ladder_2;
        _1965 = frontier_phi_25_49_ladder_1;
        _1967 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1872);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1979 = ((((1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_964 * _951)) * _935;
    float _1980 = _1979 * ((cbModelParam._m0[1u].w * (_1963 - _1863)) + _1863);
    float _1981 = _1979 * ((cbModelParam._m0[1u].w * (_1965 - _1865)) + _1865);
    float _1982 = _1979 * ((cbModelParam._m0[1u].w * (_1967 - _1867)) + _1867);
    float _1985 = fma(_1982, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1982, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1982, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    vec4 _1999 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_872, _873));
    float _2001 = _1999.w;
    float _2013 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2001);
    float _2014 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2001);
    float _2015 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2001);
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _935 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2057 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2061 = _2021 | 1u;
    float _2072 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_773, _774, _775));
    float _2075 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_773, _774, _775));
    float _4308 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _4319 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2082 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2089 = ((cbLight._m0[_2038].x * _2044) * _2082) + (((cbLight._m0[_2048].x * _2013) * _2057) * _2080);
    float _2090 = ((_2044 * cbLight._m0[_2038].y) * _2082) + (((cbLight._m0[_2048].y * _2014) * _2057) * _2080);
    float _2091 = ((_2044 * cbLight._m0[_2038].z) * _2082) + (((cbLight._m0[_2048].z * _2015) * _2057) * _2080);
    uvec4 _2095 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2097 = _2095.x == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2097)
    {
        _2108 = _2089;
        _2110 = _2090;
        _2112 = _2091;
    }
    else
    {
        uint _2116 = _2021 + 6u;
        float _2132 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4330 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2135 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2108 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _2089;
        _2110 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _2090;
        _2112 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _2091;
    }
    bool _2115 = _2095.y == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2115)
    {
        _2153 = _2108;
        _2155 = _2110;
        _2157 = _2112;
    }
    else
    {
        uint _2315 = _2021 + 7u;
        float _2331 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4346 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2334 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2153 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2108;
        _2155 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2110;
        _2157 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2112;
    }
    uint _2160 = _2021 + 8u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _776) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_2021].x + _852;
    float _2176 = cbLight._m0[_2021].y + _853;
    float _2177 = cbLight._m0[_2021].z + _854;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2021].xyz));
    float _4362 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2189 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2190 = dot(vec3(_773, _774, _775), vec3(_2182, _2183, _2184));
    float _4384 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2182, _2183, _2184));
    float _4395 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2174 * _2174;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2213 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2214 = 1.0 - _2174;
    float _2225 = (0.5 / (((_2189 * ((_2188 * _2214) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2214) + _2174) * _2188))) * _2188;
    float _4406 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    uint _2241 = _2021 + 9u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _776) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_2061].x + _852;
    float _2255 = cbLight._m0[_2061].y + _853;
    float _2256 = cbLight._m0[_2061].z + _854;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2061].xyz));
    float _4417 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2268 = dot(vec3(_773, _774, _775), vec3(_2261, _2262, _2263));
    float _4428 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2261, _2262, _2263));
    float _4439 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2253 * _2253;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2289 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2290 = 1.0 - _2253;
    float _2300 = (0.5 / (((_2189 * ((_2267 * _2290) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2290) + _2253) * _2267))) * _2267;
    float _4450 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    float _2312 = (((_2289 * cbLight._m0[_2241].x) * _2302) * _2044) + ((((cbLight._m0[_2160].x * _2013) * _2213) * _2227) * _2057);
    float _2313 = (((_2289 * cbLight._m0[_2241].y) * _2302) * _2044) + ((((cbLight._m0[_2160].y * _2014) * _2213) * _2227) * _2057);
    float _2314 = (((_2289 * cbLight._m0[_2241].z) * _2302) * _2044) + ((((cbLight._m0[_2160].z * _2015) * _2213) * _2227) * _2057);
    float _2376;
    float _2378;
    float _2380;
    if (_2097)
    {
        _2376 = _2312;
        _2378 = _2313;
        _2380 = _2314;
    }
    else
    {
        uint _2382 = _2021 + 2u;
        uint _2386 = _2021 + 10u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _776) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _852;
        float _2403 = cbLight._m0[_2382].y + _853;
        float _2404 = cbLight._m0[_2382].z + _854;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2382].xyz));
        float _4461 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2416 = dot(vec3(_773, _774, _775), vec3(_2409, _2410, _2411));
        float _4472 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4483 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2438 = 1.0 - _2401;
        float _2448 = (0.5 / (((_2189 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2438) + _2401) * _2415))) * _2415;
        float _4494 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2376 = (((_2437 * cbLight._m0[_2386].x) * _2450) * _2451) + _2312;
        _2378 = (((_2437 * cbLight._m0[_2386].y) * _2450) * _2451) + _2313;
        _2380 = (((_2437 * cbLight._m0[_2386].z) * _2450) * _2451) + _2314;
    }
    float _2486;
    float _2488;
    float _2490;
    if (_2115)
    {
        _2486 = _2376;
        _2488 = _2378;
        _2490 = _2380;
    }
    else
    {
        uint _2497 = _2021 + 3u;
        uint _2501 = _2021 + 11u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _776) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _852;
        float _2518 = cbLight._m0[_2497].y + _853;
        float _2519 = cbLight._m0[_2497].z + _854;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2497].xyz));
        float _4510 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2531 = dot(vec3(_773, _774, _775), vec3(_2524, _2525, _2526));
        float _4521 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4532 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2552 = (exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2553 = 1.0 - _2516;
        float _2563 = (0.5 / (((_2189 * ((_2530 * _2553) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2553) + _2516) * _2530))) * _2530;
        float _4543 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2486 = (((_2552 * cbLight._m0[_2501].x) * _2565) * _2566) + _2376;
        _2488 = (((_2552 * cbLight._m0[_2501].y) * _2565) * _2566) + _2378;
        _2490 = (((_2552 * cbLight._m0[_2501].z) * _2565) * _2566) + _2380;
    }
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_2019.y == 0u)
    {
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2641;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2641;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2641;
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.x;
        uint _2668 = uint((float(_2656.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2657))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2657)));
        float _2678 = (log2(_2644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2679 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        uint _2682 = uint(isnan(14.0) ? _2679 : (isnan(_2679) ? 14.0 : min(_2679, 14.0)));
        uvec4 _2687 = texelFetch(g_lightClusterGridBuffer, int(((_2682 << 2u) + (_2668 << 6u)) >> 2u));
        uint _2688 = _2687.x;
        uint _2689 = _2656.z;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((((1u << ((_2689 >> 4u) & 15u)) + 4294967295u) & _2688) == 0u) || ((_2689 & 240u) == 0u))
        {
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
        }
        else
        {
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            uint _2948 = 0u;
            uint _2957;
            bool _2958;
            for (;;)
            {
                _2957 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                _2958 = _2957 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2958)
                {
                    frontier_phi_66_pred = _2942;
                    frontier_phi_66_pred_1 = _2947;
                    frontier_phi_66_pred_2 = _2946;
                    frontier_phi_66_pred_3 = _2945;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2957;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2948 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _2642;
                        float _3154 = _3113.y - _2643;
                        float _3155 = _3113.z - _2644;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_891, _894, _897), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4569 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _2642;
                        float _3189 = (-0.0) - _2643;
                        float _3190 = (-0.0) - _2644;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3205 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3206 = 1.0 - _951;
                        float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                        float _3214 = _3213 * _3213;
                        float _3215 = _3214 * _3214;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3218 = _3197 + _3162;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3226 = dot(vec3(_891, _894, _897), vec3(_3195, _3196, _3197));
                        float _4585 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3230 = dot(vec3(_891, _894, _897), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                        float _4596 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                        float _3238 = _3173 * _3214;
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3163) + _3239;
                        float _4607 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3244 = 1.0 - _3214;
                        float _3254 = (0.5 / (((_3243 * ((_3229 * _3244) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3214) * _3229))) * _3243;
                        float _4618 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3265 = (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3237 * _3237) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3017 = (_3184 * _3132.x) + _3090;
                        _3018 = (_3184 * _3132.y) + _3091;
                        _3019 = (_3184 * _3132.z) + _3092;
                        _3014 = (_3265 * _3149.x) + _3087;
                        _3015 = (_3265 * _3149.y) + _3088;
                        _3016 = (_3265 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_66_pred = _3014;
                    frontier_phi_66_pred_1 = _3019;
                    frontier_phi_66_pred_2 = _3018;
                    frontier_phi_66_pred_3 = _3017;
                    frontier_phi_66_pred_4 = _3016;
                    frontier_phi_66_pred_5 = _3015;
                }
                _2790 = frontier_phi_66_pred;
                _2800 = frontier_phi_66_pred_1;
                _2798 = frontier_phi_66_pred_2;
                _2796 = frontier_phi_66_pred_3;
                _2794 = frontier_phi_66_pred_4;
                _2792 = frontier_phi_66_pred_5;
                uint _2949 = _2948 + 1u;
                if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2942 = _2790;
                    _2943 = _2792;
                    _2944 = _2794;
                    _2945 = _2796;
                    _2946 = _2798;
                    _2947 = _2800;
                    _2948 = _2949;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
        }
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.z;
        uint _2806 = (_2804 >> 8u) & 15u;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((4294967295u << _2806) & _2688) == 0u)
        {
            _2910 = _2789;
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
        }
        else
        {
            float _2935 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
            float _2936 = _2935 * _2642;
            float _2937 = _2935 * _2643;
            float _2938 = _2935 * _2644;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2806 < ((_2804 >> 12u) & 15u))
            {
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _3070 = _2789;
                float _3071 = _2791;
                float _3072 = _2793;
                float _3073 = _2795;
                float _3074 = _2797;
                float _3075 = _2799;
                uint _3076 = _2806;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3086)
                    {
                        frontier_phi_77_pred = _3075;
                        frontier_phi_77_pred_1 = _3074;
                        frontier_phi_77_pred_2 = _3073;
                        frontier_phi_77_pred_3 = _3072;
                        frontier_phi_77_pred_4 = _3071;
                        frontier_phi_77_pred_5 = _3070;
                    }
                    else
                    {
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        uint _3298 = _3085;
                        uint _3299;
                        vec4 _3324;
                        float _3325;
                        vec4 _3340;
                        vec3 _3352;
                        vec4 _3367;
                        vec4 _3382;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3309 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3298));
                            _3299 = (_3298 + 4294967295u) & _3298;
                            uint _3311 = _3309 * 40u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3325 = _3324.w;
                            uint _3327 = (_3309 * 40u) + 4u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3309 * 40u) + 8u;
                            _3352 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x));
                            uint _3354 = (_3309 * 40u) + 16u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3309 * 40u) + 20u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3309 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3309 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_2644, _3416.z, fma(_2643, _3416.y, _3416.x * _2642)) + _3416.w;
                            _3429 = !((fma(_2644, _3397.z, fma(_2643, _3397.y, _3397.x * _2642)) + _3397.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3429)
                            {
                                float _3456 = _3324.x - _2642;
                                float _3457 = _3324.y - _2643;
                                float _3458 = _3324.z - _2644;
                                float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                                float _3462 = inversesqrt(_3459);
                                float _3463 = _3462 * _3456;
                                float _3464 = _3462 * _3457;
                                float _3465 = _3462 * _3458;
                                float _3469 = 1.0 - (_3459 / (_3325 * _3325));
                                float _4629 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3474 = sqrt(_3459) * _3340.w;
                                float _3476 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                                float _3477 = _3476 * _3476;
                                float _3480 = ((1.0 - _3477) * dot(vec3(_3463, _3464, _3465), vec3(_891, _894, _897))) + _3477;
                                float _3483 = _3474 * _3474;
                                float _3487 = (fma(_2644, _3367.z, fma(_2643, _3367.y, _3367.x * _2642)) + _3367.w) / _3428;
                                float _3488 = (fma(_2644, _3382.z, fma(_2643, _3382.y, _3382.x * _2642)) + _3382.w) / _3428;
                                float _3492 = 1.0 - dot(vec2(_3487, _3488), vec2(_3487, _3488));
                                float _4645 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3494 = _3493 * (((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3470) / ((_3483 * 0.699999988079071044921875) + 1.0));
                                float _3506 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                                float _3507 = 1.0 - _951;
                                float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                                float _3515 = _3514 * _3514;
                                float _3516 = _3515 * _3515;
                                float _3517 = _3463 - _2936;
                                float _3518 = _3464 - _2937;
                                float _3519 = _3465 - _2938;
                                float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                                float _3527 = dot(vec3(_891, _894, _897), vec3((-0.0) - _2936, (-0.0) - _2937, (-0.0) - _2938));
                                float _4656 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3531 = dot(vec3(_891, _894, _897), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                                float _4667 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                                float _3539 = _3476 * _3515;
                                float _3540 = _3539 * _3539;
                                float _3546 = ((1.0 - _3540) * dot(vec3(_891, _894, _897), vec3(_3463, _3464, _3465))) + _3540;
                                float _4678 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3548 = 1.0 - _3515;
                                float _3558 = (0.5 / (((_3547 * ((_3530 * _3548) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3515) * _3530))) * _3547;
                                float _4689 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3568 = (_3493 * _3470) * (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3538 * _3538) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3494 * _3340.y;
                                frontier_phi_83_pred_1 = _3494 * _3340.x;
                                frontier_phi_83_pred_2 = _3568 * _3352.z;
                                frontier_phi_83_pred_3 = _3568 * _3352.y;
                                frontier_phi_83_pred_4 = _3568 * _3352.x;
                                frontier_phi_83_pred_5 = _3494 * _3340.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3576 = frontier_phi_83_pred;
                            _3575 = frontier_phi_83_pred_1;
                            _3574 = frontier_phi_83_pred_2;
                            _3573 = frontier_phi_83_pred_3;
                            _3572 = frontier_phi_83_pred_4;
                            _3577 = frontier_phi_83_pred_5;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            if (_3299 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3299;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3284;
                        frontier_phi_77_pred_1 = _3283;
                        frontier_phi_77_pred_2 = _3282;
                        frontier_phi_77_pred_3 = _3281;
                        frontier_phi_77_pred_4 = _3280;
                        frontier_phi_77_pred_5 = _3279;
                    }
                    _2921 = frontier_phi_77_pred;
                    _2919 = frontier_phi_77_pred_1;
                    _2917 = frontier_phi_77_pred_2;
                    _2915 = frontier_phi_77_pred_3;
                    _2913 = frontier_phi_77_pred_4;
                    _2911 = frontier_phi_77_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2911;
                        _3071 = _2913;
                        _3072 = _2915;
                        _3073 = _2917;
                        _3074 = _2919;
                        _3075 = _2921;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2915;
                frontier_phi_58_59_ladder_1 = _2921;
                frontier_phi_58_59_ladder_2 = _2919;
                frontier_phi_58_59_ladder_3 = _2917;
                frontier_phi_58_59_ladder_4 = _2913;
                frontier_phi_58_59_ladder_5 = _2911;
            }
            else
            {
                frontier_phi_58_59_ladder = _2793;
                frontier_phi_58_59_ladder_1 = _2799;
                frontier_phi_58_59_ladder_2 = _2797;
                frontier_phi_58_59_ladder_3 = _2795;
                frontier_phi_58_59_ladder_4 = _2791;
                frontier_phi_58_59_ladder_5 = _2789;
            }
            _2910 = frontier_phi_58_59_ladder_5;
            _2912 = frontier_phi_58_59_ladder_4;
            _2914 = frontier_phi_58_59_ladder;
            _2916 = frontier_phi_58_59_ladder_3;
            _2918 = frontier_phi_58_59_ladder_2;
            _2920 = frontier_phi_58_59_ladder_1;
        }
        float _2925 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2701 = (_2925 * _2916) + _2153;
        _2703 = (_2925 * _2918) + _2155;
        _2705 = (_2925 * _2920) + _2157;
        _2707 = ((_2910 * 0.039999999105930328369140625) * _2925) + _2486;
        _2709 = ((_2912 * 0.039999999105930328369140625) * _2925) + _2488;
        _2711 = ((_2914 * 0.039999999105930328369140625) * _2925) + _2490;
    }
    else
    {
        _2701 = _2153;
        _2703 = _2155;
        _2705 = _2157;
        _2707 = _2486;
        _2709 = _2488;
        _2711 = _2490;
    }
    float _4705 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4716 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4727 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2728 = ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2701 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _935))) + ((_2707 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2729 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2703 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _935))) + ((_2709 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2730 = ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2705 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _935))) + ((_2711 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2731 = _279 + 6u;
    float _2739 = _872 / cbSceneParam._m0[86u].x;
    float _2740 = _873 / cbSceneParam._m0[86u].y;
    vec4 _2754 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, (log2((isnan(cbSceneParam._m0[77u].w) ? _794 : (isnan(_794) ? cbSceneParam._m0[77u].w : min(_794, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2756 = _2754.x;
    float _2757 = _2754.y;
    float _2758 = _2754.z;
    float _2759 = _2754.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_794 > cbSceneParam._m0[78u].w)
    {
        float _2814 = isnan(_794) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _794 : min(cbSceneParam._m0[80u].w, _794));
        float _2815 = _2814 / _794;
        float _2826 = _2815 * _845;
        float _2827 = _846 * _2815;
        float _2828 = (-0.0) - _2827;
        float _2830 = _2815 * _847;
        float _2832 = (cbSceneParam._m0[77u].w * _2828) / _2814;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2827;
        float _2840 = sqrt(((_2826 * _2826) + (_2827 * _2827)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2814)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2828 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2971 = 1.0 / cbSceneParam._m0[80u].x;
            float _2972 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2973 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            _3027 = ((abs(_2840 / _2828) * cbSceneParam._m0[80u].y) * ((((_2982 - _2983) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))))) * _2971)) - ((exp2(_2850 * _2982) - exp2(_2850 * _2983)) * _2971))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2759);
        _2852 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2756;
        _2854 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2757;
        _2856 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2758;
        _2858 = _3038 * _2759;
    }
    else
    {
        _2852 = _2756;
        _2854 = _2757;
        _2856 = _2758;
        _2858 = _2759;
    }
    bool _3065;
    vec4 _2868;
    vec4 _2890;
    float _2892;
    float _2896;
    float _2897;
    float _2898;
    float _2899;
    bool _2909;
    for (;;)
    {
        _2868 = cbMatDynParam._m0[0u];
        float _2870 = roundEven(_2868.y);
        bool _2871 = _2870 == 3.0;
        float _2872 = log2(_2858);
        float _2879 = exp2(_2872 * cbSceneParam._m0[78u].x) * _2728;
        float _2880 = exp2(_2872 * cbSceneParam._m0[78u].y) * _2729;
        float _2881 = exp2(_2872 * cbSceneParam._m0[78u].z) * _2730;
        float _2888 = _861 + (-0.5);
        _2890 = cbMtdParam._m0[1u];
        _2892 = _2890.y * _2888;
        float _2895 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2896 = _2895 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
        _2897 = _2895 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
        _2898 = _2895 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
        _2899 = _2888 * 0.999000012874603271484375;
        _2909 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2909)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2899) < 0.5)
            {
                _3065 = true;
                break;
            }
        }
        uint _3006 = _910 + uint(_2868.w);
        if ((cbInstanceData._m0[_3006].w < 1.0) && ((cbInstanceData._m0[_3006].w + _2899) < 0.5))
        {
            _3065 = true;
            break;
        }
        if ((_2892 + 1.0) < _2890.x)
        {
            _3065 = true;
            break;
        }
        _3065 = false;
        break;
    }
    float _3270;
    if (_3065)
    {
        discard_state = true;
        _3270 = 0.0;
    }
    else
    {
        _3270 = cbInstanceData._m0[_2731].w;
    }
    SV_Target.x = _2896;
    SV_Target.y = _2897;
    SV_Target.z = _2898;
    SV_Target.w = _3270;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2731].w;
    discard_exit();
}


