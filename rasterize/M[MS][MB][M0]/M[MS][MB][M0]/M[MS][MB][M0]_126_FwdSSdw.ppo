#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1117;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3446 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _446 = ((_416.z - _437) * _368) + _437;
    float _449 = ((((_416.x - _435) * _368) + _435) * 2.0) + (-1.0);
    float _451 = ((((_416.y - _436) * _368) + _436) * 2.0) + (-1.0);
    float _452 = dot(vec2(_449, _451), vec2(_449, _451));
    float _3457 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _500 = _498.x;
    float _501 = 1.0 - _500;
    float _514 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_500 - _501) * cbMtdParam._m0[24u].z) + _501) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3468 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _522 = (_515 * ((_396.x * cbMtdParam._m0[18u].x) - _375)) + _375;
    float _523 = (_515 * ((_396.y * cbMtdParam._m0[18u].y) - _376)) + _376;
    float _524 = (_515 * ((_396.z * cbMtdParam._m0[18u].z) - _377)) + _377;
    float _528 = (cbMtdParam._m0[19u].w * (_473.z - _446)) + _446;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3479 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _558 = (_515 * (_541.z - _528)) + _528;
    float _561 = (((_473.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _449;
    float _562 = (((_473.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _574 = (((_548 - _561) + (cbMtdParam._m0[21u].x * _561)) * _515) + _561;
    float _575 = (((_549 - _562) + (cbMtdParam._m0[21u].x * _562)) * _515) + _562;
    float _576 = (_515 * (sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) - _457)) + _457;
    float _581 = cbMtdParam._m0[22u].x + _473.w;
    float _584 = fma(_576, _219 * NORMAL.x, fma(_575, _226 * TANGENT.x, (_212 * _204) * _574));
    float _587 = fma(_576, _219 * NORMAL.y, fma(_575, _226 * TANGENT.y, (_212 * _205) * _574));
    float _590 = fma(_576, _219 * NORMAL.z, fma(_575, _226 * TANGENT.z, (_212 * _206) * _574));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3490 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _598 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3512 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3523 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3534 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _658);
    float _669 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _658);
    float _670 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _658);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _705 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _708 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _722 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3545 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _746 = ((isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * TEXCOORD_5.w) * _742.x;
    float _747 = dot(vec3(_595, _596, _597), vec3(_675, _676, _677));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _595) - _675;
    float _755 = (_750 * _596) - _676;
    float _756 = (_750 * _597) - _677;
    float _760 = abs(dot(vec3(_675, _676, _677), vec3(_595, _596, _597)));
    float _3578 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_598);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _845 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _849 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _874 = _807 + _595;
        float _875 = _811 + _596;
        float _876 = _815 + _597;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _841;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _845;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _849;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_595, _596, _597), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3626 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_595, _596, _597), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3659 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_595, _596, _597), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3692 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1156 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1160 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1164 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1187 = _807 + _595;
        float _1188 = _811 + _596;
        float _1189 = _815 + _597;
        float _1199 = fma(_1189, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1187)) - _1156;
        float _1200 = fma(_1189, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1187)) - _1160;
        float _1201 = fma(_1189, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1187)) - _1164;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1156 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1160 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[35u].z) + ((((((_1164 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1255 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1222.x + (-0.5));
        float _1257 = _1255 * (_1222.y + (-0.5));
        float _1258 = _1255 * (_1222.z + (-0.5));
        float _1265 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1229.x + (-0.5));
        float _1267 = _1265 * (_1229.y + (-0.5));
        float _1268 = _1265 * (_1229.z + (-0.5));
        float _1275 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1236.x + (-0.5));
        float _1277 = _1275 * (_1236.y + (-0.5));
        float _1278 = _1275 * (_1236.z + (-0.5));
        float _1285 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1243.x + (-0.5));
        float _1287 = _1285 * (_1243.y + (-0.5));
        float _1288 = _1285 * (_1243.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_595, _596, _597), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3755 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1319 + 1.0))) + _1324) * _1289;
        float _1334 = _1257 * 0.5;
        float _1335 = _1267 * 0.5;
        float _1336 = _1277 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_595, _596, _597), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3788 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1361 + 1.0))) + _1366) * _1290;
        float _1376 = _1258 * 0.5;
        float _1377 = _1268 * 0.5;
        float _1378 = _1278 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_595, _596, _597), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3821 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1403 + 1.0))) + _1408) * _1291;
        _1425 = _1258;
        _1426 = _1257;
        _1427 = _1256;
        _1428 = _1268;
        _1429 = _1267;
        _1430 = _1266;
        _1431 = _1278;
        _1432 = _1277;
        _1433 = _1276;
        _1434 = _1291;
        _1435 = _1290;
        _1436 = _1289;
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1117;
        _1426 = _1117;
        _1427 = _1117;
        _1428 = _1117;
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1472 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1449));
    float _1493 = _754 * 0.5;
    float _1494 = _755 * 0.5;
    float _1495 = _756 * 0.5;
    float _1496 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1499 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1502 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1536;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1509 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1513 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1517 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1524 = dot(vec4(cbModelParam._m0[39u]), vec4(_1493, _1494, _1495, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1547;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1538 = dot(vec4(cbModelParam._m0[40u]), vec4(_1493, _1494, _1495, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1551 = (_1547 * cbModelParam._m0[1u].x) + (_1536 * (1.0 - cbModelParam._m0[1u].x));
    float _1561 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1561 : min(cbModelParam._m0[25u].z, _1561));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1609 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1613 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1617 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1620 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1623 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1626 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1654;
        if (_1620 > 0.0)
        {
            _1654 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1654 = frontier_phi_14_12_ladder;
        }
        float _1875;
        if (_1623 > 0.0)
        {
            _1875 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1875 = frontier_phi_23_19_ladder;
        }
        float _2121;
        if (_1626 > 0.0)
        {
            _2121 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2121 = frontier_phi_35_30_ladder;
        }
        float _2123 = isnan(_1875) ? _1654 : (isnan(_1654) ? _1875 : min(_1654, _1875));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1620) + _1609;
        float _2129 = (_2124 * _1623) + _1613;
        float _2130 = (_2124 * _1626) + _1617;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1562);
            frontier_phi_13_35_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1642 = frontier_phi_13_35_ladder_2;
        _1644 = frontier_phi_13_35_ladder_1;
        _1646 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1562);
        _1642 = _1630.x * cbModelParam._m0[1u].y;
        _1644 = _1630.y * cbModelParam._m0[1u].y;
        _1646 = _1630.z * cbModelParam._m0[1u].y;
    }
    float _1650 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1650 : min(cbModelParam._m0[25u].w, _1650));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1718 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1721 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1880;
        if (_1715 > 0.0)
        {
            _1880 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1880 = frontier_phi_25_21_ladder;
        }
        float _2148;
        if (_1718 > 0.0)
        {
            _2148 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2148 = frontier_phi_37_32_ladder;
        }
        float _2353;
        if (_1721 > 0.0)
        {
            _2353 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2353 = frontier_phi_46_43_ladder;
        }
        float _2355 = isnan(_2148) ? _1880 : (isnan(_1880) ? _2148 : min(_1880, _2148));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1715) + _1704;
        float _2361 = (_2356 * _1718) + _1708;
        float _2362 = (_2356 * _1721) + _1712;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1651);
            frontier_phi_22_46_ladder = _2561.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2561.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2561.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_46_ladder_2;
        _1742 = frontier_phi_22_46_ladder_1;
        _1744 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1651);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_775 * _762)) * _746;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1642)) + _1642);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1644)) + _1644);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1646)) + _1646);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    vec4 _1776 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_683, _684));
    float _1778 = _1776.w;
    float _1790 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1778);
    float _1791 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1778);
    float _1792 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1778);
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _746 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1834 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1838 = _1798 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_595, _596, _597));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_595, _596, _597));
    float _3957 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _3968 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1815].x * _1821) * _1859) + (((cbLight._m0[_1825].x * _1790) * _1834) * _1857);
    float _1867 = ((_1821 * cbLight._m0[_1815].y) * _1859) + (((cbLight._m0[_1825].y * _1791) * _1834) * _1857);
    float _1868 = ((_1821 * cbLight._m0[_1815].z) * _1859) + (((cbLight._m0[_1825].z * _1792) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1798 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _3979 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1912 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2092 = _1798 + 7u;
        float _2108 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _3995 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2111 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1930 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _1885;
        _1932 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _1887;
        _1934 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _1889;
    }
    uint _1937 = _1798 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _598) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1798].x + _675;
    float _1953 = cbLight._m0[_1798].y + _676;
    float _1954 = cbLight._m0[_1798].z + _677;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1798].xyz));
    float _4011 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _1966 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1967 = dot(vec3(_595, _596, _597), vec3(_1959, _1960, _1961));
    float _4033 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1959, _1960, _1961));
    float _4044 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1966 * ((_1965 * _1991) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1991) + _1951) * _1965))) * _1965;
    float _4055 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2018 = _1798 + 9u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _598) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1838].x + _675;
    float _2032 = cbLight._m0[_1838].y + _676;
    float _2033 = cbLight._m0[_1838].z + _677;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1838].xyz));
    float _4066 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2045 = dot(vec3(_595, _596, _597), vec3(_2038, _2039, _2040));
    float _4077 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2038, _2039, _2040));
    float _4088 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2030 * _2030;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = 1.0 - _2030;
    float _2077 = (0.5 / (((_1966 * ((_2044 * _2067) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2067) + _2030) * _2044))) * _2044;
    float _4099 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    float _2089 = (((_2066 * cbLight._m0[_2018].x) * _2079) * _1821) + ((((cbLight._m0[_1937].x * _1790) * _1990) * _2004) * _1834);
    float _2090 = (((_2066 * cbLight._m0[_2018].y) * _2079) * _1821) + ((((cbLight._m0[_1937].y * _1791) * _1990) * _2004) * _1834);
    float _2091 = (((_2066 * cbLight._m0[_2018].z) * _2079) * _1821) + ((((cbLight._m0[_1937].z * _1792) * _1990) * _2004) * _1834);
    float _2153;
    float _2155;
    float _2157;
    if (_1874)
    {
        _2153 = _2089;
        _2155 = _2090;
        _2157 = _2091;
    }
    else
    {
        uint _2159 = _1798 + 2u;
        uint _2163 = _1798 + 10u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _598) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _675;
        float _2180 = cbLight._m0[_2159].y + _676;
        float _2181 = cbLight._m0[_2159].z + _677;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2159].xyz));
        float _4110 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2193 = dot(vec3(_595, _596, _597), vec3(_2186, _2187, _2188));
        float _4121 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4132 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2215 = 1.0 - _2178;
        float _2225 = (0.5 / (((_1966 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2215) + _2178) * _2192))) * _2192;
        float _4143 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2153 = (((_2214 * cbLight._m0[_2163].x) * _2227) * _2228) + _2089;
        _2155 = (((_2214 * cbLight._m0[_2163].y) * _2227) * _2228) + _2090;
        _2157 = (((_2214 * cbLight._m0[_2163].z) * _2227) * _2228) + _2091;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1892)
    {
        _2263 = _2153;
        _2265 = _2155;
        _2267 = _2157;
    }
    else
    {
        uint _2274 = _1798 + 3u;
        uint _2278 = _1798 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _598) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _675;
        float _2295 = cbLight._m0[_2274].y + _676;
        float _2296 = cbLight._m0[_2274].z + _677;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2274].xyz));
        float _4159 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2308 = dot(vec3(_595, _596, _597), vec3(_2301, _2302, _2303));
        float _4170 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4181 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_1966 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2330) + _2293) * _2307))) * _2307;
        float _4192 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2263 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2153;
        _2265 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2155;
        _2267 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2157;
    }
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    if (_1796.y == 0u)
    {
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2418;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2418;
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2418;
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.x;
        uint _2445 = uint((float(_2433.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2434))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2434)));
        float _2455 = (log2(_2421 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2456 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        uint _2459 = uint(isnan(14.0) ? _2456 : (isnan(_2456) ? 14.0 : min(_2456, 14.0)));
        uvec4 _2464 = texelFetch(g_lightClusterGridBuffer, int(((_2459 << 2u) + (_2445 << 6u)) >> 2u));
        uint _2465 = _2464.x;
        uint _2466 = _2433.z;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        if (((((1u << ((_2466 >> 4u) & 15u)) + 4294967295u) & _2465) == 0u) || ((_2466 & 240u) == 0u))
        {
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
        }
        else
        {
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            uint _2717 = 0u;
            uint _2726;
            bool _2727;
            for (;;)
            {
                _2726 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                _2727 = _2726 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2727)
                {
                    frontier_phi_61_pred = _2711;
                    frontier_phi_61_pred_1 = _2716;
                    frontier_phi_61_pred_2 = _2715;
                    frontier_phi_61_pred_3 = _2714;
                    frontier_phi_61_pred_4 = _2713;
                    frontier_phi_61_pred_5 = _2712;
                }
                else
                {
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    uint _2841;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2726;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    for (;;)
                    {
                        uint _2845 = uint(findLSB(_2841)) + (_2717 << 5u);
                        uint _2842 = (_2841 + 4294967295u) & _2841;
                        uint _2847 = _2845 * 48u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2867 = (_2845 * 48u) + 4u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2886 = (_2845 * 48u) + 8u;
                        vec3 _2897 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x));
                        float _2901 = _2861.x - _2419;
                        float _2902 = _2861.y - _2420;
                        float _2903 = _2861.z - _2421;
                        float _2904 = dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903));
                        float _2907 = inversesqrt(_2904);
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2911 = dot(vec3(_702, _705, _708), vec3(_2908, _2909, _2910));
                        float _2916 = 1.0 - (_2904 * _2861.w);
                        float _4218 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2918 = sqrt(_2904) * _2880.w;
                        float _2921 = 1.39999997615814208984375 / (_2918 + 1.39999997615814208984375);
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2911) + _2922;
                        float _2928 = _2918 * _2918;
                        float _2932 = ((isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))) * _2917) / ((_2928 * 0.699999988079071044921875) + 1.0);
                        float _2936 = (-0.0) - _2419;
                        float _2937 = (-0.0) - _2420;
                        float _2938 = (-0.0) - _2421;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2953 = exp2(log2(1.0 / ((_2928 * 3.5) + 5.0)) * 0.25);
                        float _2954 = 1.0 - _762;
                        float _2961 = sqrt(1.0 - ((1.0 - (_2954 * _2954)) * (1.0 - (_2953 * _2953))));
                        float _2962 = _2961 * _2961;
                        float _2963 = _2962 * _2962;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2966 = _2945 + _2910;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2974 = dot(vec3(_702, _705, _708), vec3(_2943, _2944, _2945));
                        float _4234 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2978 = dot(vec3(_702, _705, _708), vec3(_2970 * _2964, _2970 * _2965, _2970 * _2966));
                        float _4245 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2985 = ((_2981 * _2981) * (_2963 + (-1.0))) + 1.0;
                        float _2986 = _2921 * _2962;
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2911) + _2987;
                        float _4256 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2992 = 1.0 - _2962;
                        float _3002 = (0.5 / (((_2991 * ((_2977 * _2992) + _2962)) + 9.9999999392252902907785028219223e-09) + (((_2991 * _2992) + _2962) * _2977))) * _2991;
                        float _4267 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3013 = (((_2963 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_2985 * _2985) * ((_2928 * 2.1991131305694580078125) + 3.141590118408203125))) * _2917;
                        _2770 = (_2932 * _2880.x) + _2838;
                        _2771 = (_2932 * _2880.y) + _2839;
                        _2772 = (_2932 * _2880.z) + _2840;
                        _2767 = (_3013 * _2897.x) + _2835;
                        _2768 = (_3013 * _2897.y) + _2836;
                        _2769 = (_3013 * _2897.z) + _2837;
                        if (_2842 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2842;
                        }
                    }
                    frontier_phi_61_pred = _2767;
                    frontier_phi_61_pred_1 = _2772;
                    frontier_phi_61_pred_2 = _2771;
                    frontier_phi_61_pred_3 = _2770;
                    frontier_phi_61_pred_4 = _2769;
                    frontier_phi_61_pred_5 = _2768;
                }
                _2567 = frontier_phi_61_pred;
                _2577 = frontier_phi_61_pred_1;
                _2575 = frontier_phi_61_pred_2;
                _2573 = frontier_phi_61_pred_3;
                _2571 = frontier_phi_61_pred_4;
                _2569 = frontier_phi_61_pred_5;
                uint _2718 = _2717 + 1u;
                if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2711 = _2567;
                    _2712 = _2569;
                    _2713 = _2571;
                    _2714 = _2573;
                    _2715 = _2575;
                    _2716 = _2577;
                    _2717 = _2718;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
        }
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.z;
        uint _2583 = (_2581 >> 8u) & 15u;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((4294967295u << _2583) & _2465) == 0u)
        {
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
        }
        else
        {
            float _2704 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
            float _2705 = _2704 * _2419;
            float _2706 = _2704 * _2420;
            float _2707 = _2704 * _2421;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2583 < ((_2581 >> 12u) & 15u))
            {
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2818 = _2566;
                float _2819 = _2568;
                float _2820 = _2570;
                float _2821 = _2572;
                float _2822 = _2574;
                float _2823 = _2576;
                uint _2824 = _2583;
                uint _2833;
                bool _2834;
                for (;;)
                {
                    _2833 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                    _2834 = _2833 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2834)
                    {
                        frontier_phi_67_pred = _2821;
                        frontier_phi_67_pred_1 = _2822;
                        frontier_phi_67_pred_2 = _2823;
                        frontier_phi_67_pred_3 = _2820;
                        frontier_phi_67_pred_4 = _2819;
                        frontier_phi_67_pred_5 = _2818;
                    }
                    else
                    {
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        uint _3037 = _2833;
                        uint _3038;
                        vec4 _3063;
                        float _3064;
                        vec4 _3079;
                        vec3 _3091;
                        vec4 _3106;
                        vec4 _3122;
                        float _3168;
                        bool _3169;
                        for (;;)
                        {
                            uint _3048 = ((_2824 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3037));
                            _3038 = (_3037 + 4294967295u) & _3037;
                            uint _3050 = _3048 * 40u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3064 = _3063.w;
                            uint _3066 = (_3048 * 40u) + 4u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3048 * 40u) + 8u;
                            _3091 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x));
                            uint _3093 = (_3048 * 40u) + 16u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3048 * 40u) + 20u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3048 * 40u) + 24u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3143 = (_3048 * 40u) + 28u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            _3168 = fma(_2421, _3156.z, fma(_2420, _3156.y, _3156.x * _2419)) + _3156.w;
                            _3169 = !((fma(_2421, _3137.z, fma(_2420, _3137.y, _3137.x * _2419)) + _3137.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3169)
                            {
                                float _3196 = _3063.x - _2419;
                                float _3197 = _3063.y - _2420;
                                float _3198 = _3063.z - _2421;
                                float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                                float _3202 = inversesqrt(_3199);
                                float _3203 = _3202 * _3196;
                                float _3204 = _3202 * _3197;
                                float _3205 = _3202 * _3198;
                                float _3209 = 1.0 - (_3199 / (_3064 * _3064));
                                float _4278 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3214 = sqrt(_3199) * _3079.w;
                                float _3216 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                                float _3217 = _3216 * _3216;
                                float _3220 = ((1.0 - _3217) * dot(vec3(_3203, _3204, _3205), vec3(_702, _705, _708))) + _3217;
                                float _3223 = _3214 * _3214;
                                float _3227 = (fma(_2421, _3106.z, fma(_2420, _3106.y, _3106.x * _2419)) + _3106.w) / _3168;
                                float _3228 = (fma(_2421, _3122.z, fma(_2420, _3122.y, _3122.x * _2419)) + _3122.w) / _3168;
                                float _3232 = 1.0 - dot(vec2(_3227, _3228), vec2(_3227, _3228));
                                float _4294 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3234 = _3233 * (((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3210) / ((_3223 * 0.699999988079071044921875) + 1.0));
                                float _3246 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                                float _3247 = 1.0 - _762;
                                float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                                float _3255 = _3254 * _3254;
                                float _3256 = _3255 * _3255;
                                float _3257 = _3203 - _2705;
                                float _3258 = _3204 - _2706;
                                float _3259 = _3205 - _2707;
                                float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                                float _3267 = dot(vec3(_702, _705, _708), vec3((-0.0) - _2705, (-0.0) - _2706, (-0.0) - _2707));
                                float _4305 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3271 = dot(vec3(_702, _705, _708), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                                float _4316 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                                float _3279 = _3216 * _3255;
                                float _3280 = _3279 * _3279;
                                float _3286 = ((1.0 - _3280) * dot(vec3(_702, _705, _708), vec3(_3203, _3204, _3205))) + _3280;
                                float _4327 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3288 = 1.0 - _3255;
                                float _3298 = (0.5 / (((_3287 * ((_3270 * _3288) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3255) * _3270))) * _3287;
                                float _4338 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3308 = (_3233 * _3210) * (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3278 * _3278) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3308 * _3091.x;
                                frontier_phi_73_pred_1 = _3308 * _3091.y;
                                frontier_phi_73_pred_2 = _3234 * _3079.z;
                                frontier_phi_73_pred_3 = _3234 * _3079.y;
                                frontier_phi_73_pred_4 = _3234 * _3079.x;
                                frontier_phi_73_pred_5 = _3308 * _3091.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3312 = frontier_phi_73_pred;
                            _3313 = frontier_phi_73_pred_1;
                            _3317 = frontier_phi_73_pred_2;
                            _3316 = frontier_phi_73_pred_3;
                            _3315 = frontier_phi_73_pred_4;
                            _3314 = frontier_phi_73_pred_5;
                            _3021 = _3315 + _3034;
                            _3022 = _3316 + _3035;
                            _3023 = _3317 + _3036;
                            _3018 = _3312 + _3031;
                            _3019 = _3313 + _3032;
                            _3020 = _3314 + _3033;
                            if (_3038 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3038;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3021;
                        frontier_phi_67_pred_1 = _3022;
                        frontier_phi_67_pred_2 = _3023;
                        frontier_phi_67_pred_3 = _3020;
                        frontier_phi_67_pred_4 = _3019;
                        frontier_phi_67_pred_5 = _3018;
                    }
                    _2686 = frontier_phi_67_pred;
                    _2688 = frontier_phi_67_pred_1;
                    _2690 = frontier_phi_67_pred_2;
                    _2684 = frontier_phi_67_pred_3;
                    _2682 = frontier_phi_67_pred_4;
                    _2680 = frontier_phi_67_pred_5;
                    uint _2825 = _2824 + 1u;
                    if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2818 = _2680;
                        _2819 = _2682;
                        _2820 = _2684;
                        _2821 = _2686;
                        _2822 = _2688;
                        _2823 = _2690;
                        _2824 = _2825;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2688;
                frontier_phi_55_56_ladder_1 = _2690;
                frontier_phi_55_56_ladder_2 = _2686;
                frontier_phi_55_56_ladder_3 = _2684;
                frontier_phi_55_56_ladder_4 = _2682;
                frontier_phi_55_56_ladder_5 = _2680;
            }
            else
            {
                frontier_phi_55_56_ladder = _2574;
                frontier_phi_55_56_ladder_1 = _2576;
                frontier_phi_55_56_ladder_2 = _2572;
                frontier_phi_55_56_ladder_3 = _2570;
                frontier_phi_55_56_ladder_4 = _2568;
                frontier_phi_55_56_ladder_5 = _2566;
            }
            _2679 = frontier_phi_55_56_ladder_5;
            _2681 = frontier_phi_55_56_ladder_4;
            _2683 = frontier_phi_55_56_ladder_3;
            _2685 = frontier_phi_55_56_ladder_2;
            _2687 = frontier_phi_55_56_ladder;
            _2689 = frontier_phi_55_56_ladder_1;
        }
        float _2694 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2478 = (_2694 * _2685) + _1930;
        _2480 = (_2694 * _2687) + _1932;
        _2482 = (_2694 * _2689) + _1934;
        _2484 = ((_2679 * 0.039999999105930328369140625) * _2694) + _2263;
        _2486 = ((_2681 * 0.039999999105930328369140625) * _2694) + _2265;
        _2488 = ((_2683 * 0.039999999105930328369140625) * _2694) + _2267;
    }
    else
    {
        _2478 = _1930;
        _2480 = _1932;
        _2482 = _1934;
        _2484 = _2263;
        _2486 = _2265;
        _2488 = _2267;
    }
    float _4354 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4365 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4376 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    uint _2508 = _232 + 6u;
    float _2516 = _683 / cbSceneParam._m0[86u].x;
    float _2517 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2531 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2533 = _2531.x;
    float _2534 = _2531.y;
    float _2535 = _2531.z;
    float _2536 = _2531.w;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2591 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2592 = _2591 / _616;
        float _2603 = _2592 * _668;
        float _2604 = _669 * _2592;
        float _2605 = (-0.0) - _2604;
        float _2607 = _2592 * _670;
        float _2609 = (cbSceneParam._m0[77u].w * _2605) / _2591;
        float _2610 = _2609 + cbSceneParam._m0[79u].w;
        float _2611 = cbSceneParam._m0[79u].w - _2604;
        float _2617 = sqrt(((_2603 * _2603) + (_2604 * _2604)) + (_2607 * _2607));
        float _2620 = (1.0 - (cbSceneParam._m0[77u].w / _2591)) * _2617;
        float _2625 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2627 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2780;
        if (abs((_2605 - _2609) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2780 = ((((_2610 > 0.0) ? exp2(_2625 * _2610) : (2.0 - exp2(_2627 * _2610))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2620;
        }
        else
        {
            float _2740 = 1.0 / cbSceneParam._m0[80u].x;
            float _2741 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : max(_2610, _2611));
            float _2742 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : min(_2610, _2611));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            _2780 = ((abs(_2617 / _2605) * cbSceneParam._m0[80u].y) * ((((_2751 - _2752) * 2.0) - ((exp2(_2625 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0)))) - exp2(_2625 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))))) * _2740)) - ((exp2(_2627 * _2751) - exp2(_2627 * _2752)) * _2740))) + (_2620 * cbSceneParam._m0[80u].z);
        }
        vec4 _2782 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, 1.0), 0.0);
        float _2791 = exp2((_2780 * (-1.44269502162933349609375)) * (1.0 - _2782.w));
        float _2792 = log2(_2791);
        float _2808 = log2(_2536);
        _2629 = (exp2(_2808 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].x)) * _2782.x) / cbSceneParam._m0[78u].x)) + _2533;
        _2631 = (exp2(_2808 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].y)) * _2782.y) / cbSceneParam._m0[78u].y)) + _2534;
        _2633 = (exp2(_2808 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].z)) * _2782.z) / cbSceneParam._m0[78u].z)) + _2535;
        _2635 = _2791 * _2536;
    }
    else
    {
        _2629 = _2533;
        _2631 = _2534;
        _2633 = _2535;
        _2635 = _2536;
    }
    float _2647 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2648 = _2647 == 3.0;
    float _2649 = log2(_2635);
    float _2656 = exp2(_2649 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2478 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _746))) + ((_2484 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2657 = exp2(_2649 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2480 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _746))) + ((_2486 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2658 = exp2(_2649 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2482 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _746))) + ((_2488 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2667 = (_2647 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2667 * (_2648 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.y = _2667 * (_2648 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.z = _2667 * (_2648 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.w = cbInstanceData._m0[_2508].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2508].w;
}


