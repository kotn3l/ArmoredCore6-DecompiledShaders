#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1425;
float _3806;
float _3807;
float _3808;
float _3809;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3818 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3829 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3840 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3851 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _430) + _545;
    float _557 = ((((_524.x - _543) * _430) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _430) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3862 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _596 = (_557 + ((((_497.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _597 = (_558 + ((((_497.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _600 = fma(_564, _250, fma(_597, _257, _596 * _243));
    float _603 = fma(_564, _251, fma(_597, _258, _596 * _244));
    float _606 = fma(_564, _252, fma(_597, _259, _596 * _245));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    vec4 _639 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _646 = ((_641 - _642) * cbMtdParam._m0[24u].z) + _642;
    float _648 = (cbMtdParam._m0[19u].x + dot(vec4(_610 * _600, _610 * _603, _610 * _606, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_646 * cbMtdParam._m0[21u].z);
    float _3873 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _651 = (-0.0) - cbMtdParam._m0[24u].y;
    float _653 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
    float _661 = _649 - ((_649 * TEXCOORD_8.x) * _654);
    float _662 = _649 - ((_649 * TEXCOORD_8.y) * _654);
    float _663 = _649 - ((_649 * TEXCOORD_8.z) * _654);
    float _670 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _674 = ((isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : min(_670, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _682 = (_674 - (((_646 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _674))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3904 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _687 = ((_661 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) * _683) + _456;
    float _688 = ((_662 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) * _683) + _457;
    float _689 = ((_663 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) * _683) + _458;
    vec4 _701 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _729 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3915 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _738 = ((((cbMtdParam._m0[10u].x - _687) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _730) + _687;
    float _739 = ((((cbMtdParam._m0[10u].y - _688) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _730) + _688;
    float _740 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _689)) * _730) + _689;
    float _745 = (((_497.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    float _749 = ((_584.z - _745) * cbMtdParam._m0[19u].w) + _745;
    vec4 _763 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _770 = (_763.x * 2.0) + (-1.0);
    float _771 = (_763.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3926 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _781 = (((_763.z - _749) * _661) * _683) + _749;
    float _784 = ((cbMtdParam._m0[23u].y - _781) * _730) + _781;
    vec4 _803 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3937 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _831 = (((cbMtdParam._m0[21u].x * _596) + ((_770 - _596) * _661)) * _683) + _596;
    float _832 = (((cbMtdParam._m0[21u].x * _597) + ((_771 - _597) * _662)) * _683) + _597;
    float _833 = (((sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) - _564) * _663) * _683) + _564;
    float _844 = (((_809 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _730) + _831;
    float _845 = (((_810 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _730) + _832;
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _833) * _730) + _833;
    float _850 = cbMtdParam._m0[22u].x + _584.w;
    float _853 = fma(_846, _250, fma(_845, _257, _844 * _243));
    float _856 = fma(_846, _251, fma(_845, _258, _844 * _244));
    float _859 = fma(_846, _252, fma(_845, _259, _844 * _245));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _3948 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _867 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _3970 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3981 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3992 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    vec4 _950 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _952 = _950.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1106 = sqrt(((_936 * _936) + (_937 * _937)) + (_938 * _938));
        float _1112 = (cbMatDynParam._m0[5u].x * _1106) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1117 = (cbMatDynParam._m0[5u].z * _1106) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _1113)) + _1113) < ((_952 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _963 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _964 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _982 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _985 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _988 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _1001 = _281 + 9u;
    uint _1002 = _1001 + uint(cbMatDynParam._m0[0u].w);
    float _1008 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_1002].x;
    float _1009 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_1002].y;
    float _1010 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_1002].z;
    float _4025 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _1022 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _963, cbSceneParam._m0[86u].y * _964));
    float _1026 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _1022.x;
    float _1027 = dot(vec3(_864, _865, _866), vec3(_943, _944, _945));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _864) - _943;
    float _1035 = (_1030 * _865) - _944;
    float _1036 = (_1030 * _866) - _945;
    float _1040 = abs(dot(vec3(_943, _944, _945), vec3(_864, _865, _866)));
    float _4058 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_867);
    float _1055 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1424;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1153 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1157 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1182 = _1087 + _864;
        float _1183 = _1091 + _865;
        float _1184 = _1095 + _866;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1149;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1153;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1157;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1252 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1218.x + (-0.5));
        float _1254 = _1252 * (_1218.y + (-0.5));
        float _1255 = _1252 * (_1218.z + (-0.5));
        float _1262 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1225.x + (-0.5));
        float _1264 = _1262 * (_1225.y + (-0.5));
        float _1265 = _1262 * (_1225.z + (-0.5));
        float _1272 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1232.x + (-0.5));
        float _1274 = _1272 * (_1232.y + (-0.5));
        float _1275 = _1272 * (_1232.z + (-0.5));
        float _1282 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1239.x + (-0.5));
        float _1284 = _1282 * (_1239.y + (-0.5));
        float _1285 = _1282 * (_1239.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1306 = (dot(vec3(_864, _865, _866), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1316 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4106 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1318 + 1.0))) + _1323) * _1286;
        float _1333 = _1254 * 0.5;
        float _1334 = _1264 * 0.5;
        float _1335 = _1274 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_864, _865, _866), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4139 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1360 + 1.0))) + _1365) * _1287;
        float _1375 = _1255 * 0.5;
        float _1376 = _1265 * 0.5;
        float _1377 = _1275 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_864, _865, _866), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4172 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1402 + 1.0))) + _1407) * _1288;
        _1424 = _1255;
        _1426 = _1254;
        _1427 = _1253;
        _1428 = _1265;
        _1429 = _1264;
        _1430 = _1263;
        _1431 = _1275;
        _1432 = _1274;
        _1433 = _1273;
        _1434 = _1288;
        _1435 = _1287;
        _1436 = _1286;
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1425;
        _1426 = _1425;
        _1427 = _1425;
        _1428 = _1425;
        _1429 = _1425;
        _1430 = _1425;
        _1431 = _1425;
        _1432 = _1425;
        _1433 = _1425;
        _1434 = _1425;
        _1435 = _1425;
        _1436 = _1425;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1471 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1475 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1498 = _1087 + _864;
        float _1499 = _1091 + _865;
        float _1500 = _1095 + _866;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_864, _865, _866), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4235 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_864, _865, _866), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4268 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_864, _865, _866), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4301 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1425;
        _1737 = _1425;
        _1738 = _1425;
        _1739 = _1425;
        _1740 = _1425;
        _1741 = _1425;
        _1742 = _1425;
        _1743 = _1425;
        _1744 = _1425;
        _1745 = _1425;
        _1746 = _1425;
        _1747 = _1425;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1437)) + _1437;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1438)) + _1438;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1439)) + _1439;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1034 * 0.5;
    float _1805 = _1035 * 0.5;
    float _1806 = _1036 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1424, _1428, _1431, _1434));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1934 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1937 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1965 = frontier_phi_17_15_ladder;
        }
        float _2186;
        if (_1934 > 0.0)
        {
            _2186 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2186 = frontier_phi_26_22_ladder;
        }
        float _2432;
        if (_1937 > 0.0)
        {
            _2432 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2432 = frontier_phi_38_33_ladder;
        }
        float _2434 = isnan(_2186) ? _1965 : (isnan(_1965) ? _2186 : min(_1965, _2186));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1931) + _1920;
        float _2440 = (_2435 * _1934) + _1924;
        float _2441 = (_2435 * _1937) + _1928;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_16_38_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_16_38_ladder_2;
        _1955 = frontier_phi_16_38_ladder_1;
        _1957 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1873);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2029 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2032 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2191;
        if (_2026 > 0.0)
        {
            _2191 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2191 = frontier_phi_28_24_ladder;
        }
        float _2459;
        if (_2029 > 0.0)
        {
            _2459 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2459 = frontier_phi_40_35_ladder;
        }
        float _2664;
        if (_2032 > 0.0)
        {
            _2664 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2664 = frontier_phi_49_46_ladder;
        }
        float _2666 = isnan(_2459) ? _2191 : (isnan(_2191) ? _2459 : min(_2191, _2459));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _2026) + _2015;
        float _2672 = (_2667 * _2029) + _2019;
        float _2673 = (_2667 * _2032) + _2023;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2675 = (-1.0) - _2674;
        float _2677 = _2674 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2673 > _2677) || ((_2673 < _2675) || ((_2672 > _2677) || ((_2672 < _2675) || ((_2671 < _2675) || (_2671 > _2677))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2673, cbModelParam._m0[17u].z, fma(_2672, cbModelParam._m0[17u].y, _2671 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2673, cbModelParam._m0[18u].z, fma(_2672, cbModelParam._m0[18u].y, _2671 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2673, cbModelParam._m0[19u].z, fma(_2672, cbModelParam._m0[19u].y, _2671 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_25_49_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_25_49_ladder_2;
        _2053 = frontier_phi_25_49_ladder_1;
        _2055 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1962);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2067 = ((((1.0 - _1055) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1055 * _1042)) * _1026;
    float _2068 = _2067 * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2069 = _2067 * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2070 = _2067 * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2073 = fma(_2070, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2070, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2070, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    vec4 _2087 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_963, _964));
    float _2089 = _2087.w;
    float _2101 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2089);
    float _2102 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2089);
    float _2103 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2089);
    uvec4 _2107 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2109 = _2107.x * 14u;
    uint _2110 = _2109 + 13u;
    float _2117 = _1026 + (-1.0);
    float _2122 = (cbLight._m0[_2110].x * _2117) + 1.0;
    float _2123 = (cbLight._m0[_2110].y * _2117) + 1.0;
    float _2124 = (cbLight._m0[_2110].z * _2117) + 1.0;
    float _2125 = (cbLight._m0[_2110].w * _2117) + 1.0;
    uint _2126 = _2109 + 5u;
    float _2132 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2136 = _2109 + 4u;
    float _2145 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2149 = _2109 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_864, _865, _866));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_864, _865, _866));
    float _4437 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4448 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2126].x * _2132) * _2170) + (((cbLight._m0[_2136].x * _2101) * _2145) * _2168);
    float _2178 = ((_2132 * cbLight._m0[_2126].y) * _2170) + (((cbLight._m0[_2136].y * _2102) * _2145) * _2168);
    float _2179 = ((_2132 * cbLight._m0[_2126].z) * _2170) + (((cbLight._m0[_2136].z * _2103) * _2145) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2109 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2185)
    {
        _2196 = _2177;
        _2198 = _2178;
        _2200 = _2179;
    }
    else
    {
        uint _2204 = _2109 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2109 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4459 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2223 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2177;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2178;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2179;
    }
    bool _2203 = _2183.y == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2203)
    {
        _2241 = _2196;
        _2243 = _2198;
        _2245 = _2200;
    }
    else
    {
        uint _2403 = _2109 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_2109 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4475 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2422 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2241 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2196;
        _2243 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2198;
        _2245 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2200;
    }
    uint _2248 = _2109 + 8u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _867) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2109].x + _943;
    float _2264 = cbLight._m0[_2109].y + _944;
    float _2265 = cbLight._m0[_2109].z + _945;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2109].xyz));
    float _4491 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2277 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2278 = dot(vec3(_864, _865, _866), vec3(_2270, _2271, _2272));
    float _4513 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2270, _2271, _2272));
    float _4524 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2262 * _2262;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2302 = 1.0 - _2262;
    float _2313 = (0.5 / (((_2277 * ((_2276 * _2302) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2302) + _2262) * _2276))) * _2276;
    float _4535 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    uint _2329 = _2109 + 9u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _867) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2149].x + _943;
    float _2343 = cbLight._m0[_2149].y + _944;
    float _2344 = cbLight._m0[_2149].z + _945;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2149].xyz));
    float _4546 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2356 = dot(vec3(_864, _865, _866), vec3(_2349, _2350, _2351));
    float _4557 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2349, _2350, _2351));
    float _4568 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2341 * _2341;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2378 = 1.0 - _2341;
    float _2388 = (0.5 / (((_2277 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2378) + _2341) * _2355))) * _2355;
    float _4579 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    float _2400 = (((_2377 * cbLight._m0[_2329].x) * _2390) * _2132) + ((((cbLight._m0[_2248].x * _2101) * _2301) * _2315) * _2145);
    float _2401 = (((_2377 * cbLight._m0[_2329].y) * _2390) * _2132) + ((((cbLight._m0[_2248].y * _2102) * _2301) * _2315) * _2145);
    float _2402 = (((_2377 * cbLight._m0[_2329].z) * _2390) * _2132) + ((((cbLight._m0[_2248].z * _2103) * _2301) * _2315) * _2145);
    float _2464;
    float _2466;
    float _2468;
    if (_2185)
    {
        _2464 = _2400;
        _2466 = _2401;
        _2468 = _2402;
    }
    else
    {
        uint _2470 = _2109 + 2u;
        uint _2474 = _2109 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _867) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _943;
        float _2491 = cbLight._m0[_2470].y + _944;
        float _2492 = cbLight._m0[_2470].z + _945;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2470].xyz));
        float _4590 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2504 = dot(vec3(_864, _865, _866), vec3(_2497, _2498, _2499));
        float _4601 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4612 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2526 = 1.0 - _2489;
        float _2536 = (0.5 / (((_2277 * ((_2503 * _2526) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2526) + _2489) * _2503))) * _2503;
        float _4623 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2464 = (((_2525 * cbLight._m0[_2474].x) * _2538) * _2539) + _2400;
        _2466 = (((_2525 * cbLight._m0[_2474].y) * _2538) * _2539) + _2401;
        _2468 = (((_2525 * cbLight._m0[_2474].z) * _2538) * _2539) + _2402;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2203)
    {
        _2574 = _2464;
        _2576 = _2466;
        _2578 = _2468;
    }
    else
    {
        uint _2585 = _2109 + 3u;
        uint _2589 = _2109 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _867) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _943;
        float _2606 = cbLight._m0[_2585].y + _944;
        float _2607 = cbLight._m0[_2585].z + _945;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2585].xyz));
        float _4639 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2619 = dot(vec3(_864, _865, _866), vec3(_2612, _2613, _2614));
        float _4650 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4661 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2641 = 1.0 - _2604;
        float _2651 = (0.5 / (((_2277 * ((_2618 * _2641) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2641) + _2604) * _2618))) * _2618;
        float _4672 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2574 = (((_2640 * cbLight._m0[_2589].x) * _2653) * _2654) + _2464;
        _2576 = (((_2640 * cbLight._m0[_2589].y) * _2653) * _2654) + _2466;
        _2578 = (((_2640 * cbLight._m0[_2589].z) * _2653) * _2654) + _2468;
    }
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_2107.y == 0u)
    {
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2729;
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2729;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2729;
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _964) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _963) / _2745)));
        float _2766 = (log2(_2732 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            uint _3035 = 0u;
            uint _3044;
            bool _3045;
            for (;;)
            {
                _3044 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                _3045 = _3044 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3045)
                {
                    frontier_phi_66_pred = _3029;
                    frontier_phi_66_pred_1 = _3034;
                    frontier_phi_66_pred_2 = _3033;
                    frontier_phi_66_pred_3 = _3032;
                    frontier_phi_66_pred_4 = _3031;
                    frontier_phi_66_pred_5 = _3030;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3044;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3035 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _2730;
                        float _3241 = _3200.y - _2731;
                        float _3242 = _3200.z - _2732;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_982, _985, _988), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4698 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3260 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3250) + _3261;
                        float _3267 = _3257 * _3257;
                        float _3271 = ((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3256) / ((_3267 * 0.699999988079071044921875) + 1.0);
                        float _3275 = (-0.0) - _2730;
                        float _3276 = (-0.0) - _2731;
                        float _3277 = (-0.0) - _2732;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3292 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                        float _3293 = 1.0 - _1042;
                        float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                        float _3301 = _3300 * _3300;
                        float _3302 = _3301 * _3301;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3313 = dot(vec3(_982, _985, _988), vec3(_3282, _3283, _3284));
                        float _4714 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3317 = dot(vec3(_982, _985, _988), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                        float _4725 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                        float _3325 = _3260 * _3301;
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3250) + _3326;
                        float _4736 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3331 = 1.0 - _3301;
                        float _3341 = (0.5 / (((_3330 * ((_3316 * _3331) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3301) * _3316))) * _3330;
                        float _4747 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3352 = (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3324 * _3324) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3104 = (_3271 * _3219.x) + _3177;
                        _3105 = (_3271 * _3219.y) + _3178;
                        _3106 = (_3271 * _3219.z) + _3179;
                        _3101 = (_3352 * _3236.x) + _3174;
                        _3102 = (_3352 * _3236.y) + _3175;
                        _3103 = (_3352 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3106;
                    frontier_phi_66_pred_2 = _3105;
                    frontier_phi_66_pred_3 = _3104;
                    frontier_phi_66_pred_4 = _3103;
                    frontier_phi_66_pred_5 = _3102;
                }
                _2878 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3036 = _3035 + 1u;
                if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _2888;
                    _3035 = _3036;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((4294967295u << _2894) & _2776) == 0u)
        {
            _2997 = _2877;
            _2999 = _2879;
            _3001 = _2881;
            _3003 = _2883;
            _3005 = _2885;
            _3007 = _2887;
        }
        else
        {
            float _3022 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
            float _3023 = _3022 * _2730;
            float _3024 = _3022 * _2731;
            float _3025 = _3022 * _2732;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                float _3162 = _2887;
                uint _3163 = _2894;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3173)
                    {
                        frontier_phi_77_pred = _3162;
                        frontier_phi_77_pred_1 = _3161;
                        frontier_phi_77_pred_2 = _3160;
                        frontier_phi_77_pred_3 = _3159;
                        frontier_phi_77_pred_4 = _3158;
                        frontier_phi_77_pred_5 = _3157;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        uint _3385 = _3172;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3396 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3396 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3396 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3396 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_2732, _3503.z, fma(_2731, _3503.y, _3503.x * _2730)) + _3503.w;
                            _3516 = !((fma(_2732, _3484.z, fma(_2731, _3484.y, _3484.x * _2730)) + _3484.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3411.x - _2730;
                                float _3544 = _3411.y - _2731;
                                float _3545 = _3411.z - _2732;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3412 * _3412));
                                float _4758 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3561 = sqrt(_3546) * _3427.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_982, _985, _988))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_2732, _3454.z, fma(_2731, _3454.y, _3454.x * _2730)) + _3454.w) / _3515;
                                float _3575 = (fma(_2732, _3469.z, fma(_2731, _3469.y, _3469.x * _2730)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4774 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _1042;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3606 = _3552 - _3025;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_982, _985, _988), vec3((-0.0) - _3023, (-0.0) - _3024, (-0.0) - _3025));
                                float _4785 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3618 = dot(vec3(_982, _985, _988), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4796 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_982, _985, _988), vec3(_3550, _3551, _3552))) + _3627;
                                float _4807 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4818 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3581 * _3427.y;
                                frontier_phi_83_pred_1 = _3581 * _3427.x;
                                frontier_phi_83_pred_2 = _3655 * _3439.z;
                                frontier_phi_83_pred_3 = _3655 * _3439.y;
                                frontier_phi_83_pred_4 = _3655 * _3439.x;
                                frontier_phi_83_pred_5 = _3581 * _3427.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_83_pred;
                            _3662 = frontier_phi_83_pred_1;
                            _3661 = frontier_phi_83_pred_2;
                            _3660 = frontier_phi_83_pred_3;
                            _3659 = frontier_phi_83_pred_4;
                            _3664 = frontier_phi_83_pred_5;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3371;
                        frontier_phi_77_pred_1 = _3370;
                        frontier_phi_77_pred_2 = _3369;
                        frontier_phi_77_pred_3 = _3368;
                        frontier_phi_77_pred_4 = _3367;
                        frontier_phi_77_pred_5 = _3366;
                    }
                    _3008 = frontier_phi_77_pred;
                    _3006 = frontier_phi_77_pred_1;
                    _3004 = frontier_phi_77_pred_2;
                    _3002 = frontier_phi_77_pred_3;
                    _3000 = frontier_phi_77_pred_4;
                    _2998 = frontier_phi_77_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _2998;
                        _3158 = _3000;
                        _3159 = _3002;
                        _3160 = _3004;
                        _3161 = _3006;
                        _3162 = _3008;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3002;
                frontier_phi_58_59_ladder_1 = _3008;
                frontier_phi_58_59_ladder_2 = _3006;
                frontier_phi_58_59_ladder_3 = _3004;
                frontier_phi_58_59_ladder_4 = _3000;
                frontier_phi_58_59_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_58_59_ladder = _2881;
                frontier_phi_58_59_ladder_1 = _2887;
                frontier_phi_58_59_ladder_2 = _2885;
                frontier_phi_58_59_ladder_3 = _2883;
                frontier_phi_58_59_ladder_4 = _2879;
                frontier_phi_58_59_ladder_5 = _2877;
            }
            _2997 = frontier_phi_58_59_ladder_5;
            _2999 = frontier_phi_58_59_ladder_4;
            _3001 = frontier_phi_58_59_ladder;
            _3003 = frontier_phi_58_59_ladder_3;
            _3005 = frontier_phi_58_59_ladder_2;
            _3007 = frontier_phi_58_59_ladder_1;
        }
        float _3012 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _2789 = (_3012 * _3003) + _2241;
        _2791 = (_3012 * _3005) + _2243;
        _2793 = (_3012 * _3007) + _2245;
        _2795 = ((_2997 * 0.039999999105930328369140625) * _3012) + _2574;
        _2797 = ((_2999 * 0.039999999105930328369140625) * _3012) + _2576;
        _2799 = ((_3001 * 0.039999999105930328369140625) * _3012) + _2578;
    }
    else
    {
        _2789 = _2241;
        _2791 = _2243;
        _2793 = _2245;
        _2795 = _2574;
        _2797 = _2576;
        _2799 = _2578;
    }
    float _4834 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4845 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4856 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2816 = ((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2789 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1026))) + ((_2795 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2791 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1026))) + ((_2797 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    float _2818 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2793 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1026))) + ((_2799 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    uint _2819 = _281 + 6u;
    float _2827 = _963 / cbSceneParam._m0[86u].x;
    float _2828 = _964 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _2903 = _2902 / _885;
        float _2914 = _2903 * _936;
        float _2915 = _937 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2917 = _2903 * _938;
        float _2919 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2920 = _2919 + cbSceneParam._m0[79u].w;
        float _2921 = cbSceneParam._m0[79u].w - _2915;
        float _2927 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2917 * _2917));
        float _2930 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2927;
        float _2935 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2916 - _2919) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2920 > 0.0) ? exp2(_2935 * _2920) : (2.0 - exp2(_2937 * _2920))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2930;
        }
        else
        {
            float _3058 = 1.0 / cbSceneParam._m0[80u].x;
            float _3059 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : max(_2920, _2921));
            float _3060 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : min(_2920, _2921));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            _3114 = ((abs(_2927 / _2916) * cbSceneParam._m0[80u].y) * ((((_3069 - _3070) * 2.0) - ((exp2(_2935 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0)))) - exp2(_2935 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))))) * _3058)) - ((exp2(_2937 * _3069) - exp2(_2937 * _3070)) * _3058))) + (_2930 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2847);
        _2939 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2941 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2943 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2945 = _3125 * _2847;
    }
    else
    {
        _2939 = _2844;
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
    }
    bool _3152;
    vec4 _2955;
    vec4 _2977;
    float _2979;
    float _2983;
    float _2984;
    float _2985;
    float _2986;
    bool _2996;
    for (;;)
    {
        _2955 = cbMatDynParam._m0[0u];
        float _2957 = roundEven(_2955.y);
        bool _2958 = _2957 == 3.0;
        float _2959 = log2(_2945);
        float _2966 = exp2(_2959 * cbSceneParam._m0[78u].x) * _2816;
        float _2967 = exp2(_2959 * cbSceneParam._m0[78u].y) * _2817;
        float _2968 = exp2(_2959 * cbSceneParam._m0[78u].z) * _2818;
        float _2975 = _952 + (-0.5);
        _2977 = cbMtdParam._m0[1u];
        _2979 = _2977.y * _2975;
        float _2982 = (_2957 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2983 = _2982 * (_2958 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2939)));
        _2984 = _2982 * (_2958 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2941)));
        _2985 = _2982 * (_2958 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2943)));
        _2986 = _2975 * 0.999000012874603271484375;
        _2996 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2996)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2986) < 0.5)
            {
                _3152 = true;
                break;
            }
        }
        uint _3093 = _1001 + uint(_2955.w);
        if ((cbInstanceData._m0[_3093].w < 1.0) && ((cbInstanceData._m0[_3093].w + _2986) < 0.5))
        {
            _3152 = true;
            break;
        }
        if ((_2979 + 1.0) < _2977.x)
        {
            _3152 = true;
            break;
        }
        _3152 = false;
        break;
    }
    float _3357;
    if (_3152)
    {
        discard_state = true;
        _3357 = 0.0;
    }
    else
    {
        _3357 = cbInstanceData._m0[_2819].w;
    }
    SV_Target.x = _2983;
    SV_Target.y = _2984;
    SV_Target.z = _2985;
    SV_Target.w = _3357;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
    discard_exit();
}


