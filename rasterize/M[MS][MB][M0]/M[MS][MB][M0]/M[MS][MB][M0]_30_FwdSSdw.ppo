#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1020;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3353 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    float _343 = fma(_334, _214, fma(_340, _221, _339 * _207));
    float _346 = fma(_334, _215, fma(_340, _222, _339 * _208));
    float _349 = fma(_334, _216, fma(_340, _223, _339 * _209));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _391 = _389.x;
    float _392 = 1.0 - _391;
    float _399 = ((_391 - _392) * cbMtdParam._m0[24u].z) + _392;
    float _401 = (cbMtdParam._m0[19u].x + dot(vec4(_353 * _343, _353 * _346, _353 * _349, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_399 * cbMtdParam._m0[21u].z);
    float _3364 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _417 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_399 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3375 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _422 = ((_402 * (cbMtdParam._m0[17u].x - _272)) * _418) + _272;
    float _423 = ((_402 * (cbMtdParam._m0[17u].y - _273)) * _418) + _273;
    float _424 = ((_402 * (cbMtdParam._m0[17u].z - _274)) * _418) + _274;
    float _429 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _449 = (_442.x * 2.0) + (-1.0);
    float _450 = (_442.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3386 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _460 = (((_442.z - _429) * _402) * _418) + _429;
    float _475 = (((cbMtdParam._m0[21u].x * _339) + ((_449 - _339) * _402)) * _418) + _339;
    float _476 = (((cbMtdParam._m0[21u].x * _340) + ((_450 - _340) * _402)) * _418) + _340;
    float _477 = (((sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) - _334) * _402) * _418) + _334;
    float _482 = cbMtdParam._m0[22u].x + _318.w;
    float _485 = fma(_477, _214, fma(_476, _221, _475 * _207));
    float _488 = fma(_477, _215, fma(_476, _222, _475 * _208));
    float _491 = fma(_477, _216, fma(_476, _223, _475 * _209));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3397 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _499 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3419 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3430 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3441 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _568 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _558);
    float _569 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _558);
    float _570 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _558);
    float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
    float _575 = _568 * _574;
    float _576 = _569 * _574;
    float _577 = _570 * _574;
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _608 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _611 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _625 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3452 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _649 = ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * TEXCOORD_5.w) * _645.x;
    float _650 = dot(vec3(_496, _497, _498), vec3(_575, _576, _577));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _496) - _575;
    float _658 = (_653 * _497) - _576;
    float _659 = (_653 * _498) - _577;
    float _663 = abs(dot(vec3(_575, _576, _577), vec3(_496, _497, _498)));
    float _3485 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _665 = sqrt(_499);
    float _678 = exp2((_665 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_665 * 3.0));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _748 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _752 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _777 = _710 + _496;
        float _778 = _714 + _497;
        float _779 = _718 + _498;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _744;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _748;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _752;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_496, _497, _498), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3533 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_496, _497, _498), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3566 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_496, _497, _498), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3599 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1063 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1067 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1090 = _710 + _496;
        float _1091 = _714 + _497;
        float _1092 = _718 + _498;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_496, _497, _498), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3662 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_496, _497, _498), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3695 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_496, _497, _498), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3728 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1020;
        _1329 = _1020;
        _1330 = _1020;
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1032)) + _1032;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1033)) + _1033;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1034)) + _1034;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _657 * 0.5;
    float _1397 = _658 * 0.5;
    float _1398 = _659 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1527 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1530 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1558 = frontier_phi_14_12_ladder;
        }
        float _1782;
        if (_1527 > 0.0)
        {
            _1782 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1782 = frontier_phi_23_19_ladder;
        }
        float _2028;
        if (_1530 > 0.0)
        {
            _2028 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2028 = frontier_phi_35_30_ladder;
        }
        float _2030 = isnan(_1782) ? _1558 : (isnan(_1558) ? _1782 : min(_1558, _1782));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1524) + _1513;
        float _2036 = (_2031 * _1527) + _1517;
        float _2037 = (_2031 * _1530) + _1521;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_13_35_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_13_35_ladder_2;
        _1548 = frontier_phi_13_35_ladder_1;
        _1550 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1465);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1623 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1626 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1787;
        if (_1620 > 0.0)
        {
            _1787 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1787 = frontier_phi_25_21_ladder;
        }
        float _2055;
        if (_1623 > 0.0)
        {
            _2055 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2055 = frontier_phi_37_32_ladder;
        }
        float _2260;
        if (_1626 > 0.0)
        {
            _2260 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2260 = frontier_phi_46_43_ladder;
        }
        float _2262 = isnan(_2055) ? _1787 : (isnan(_1787) ? _2055 : min(_1787, _2055));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1620) + _1609;
        float _2268 = (_2263 * _1623) + _1613;
        float _2269 = (_2263 * _1626) + _1617;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_22_46_ladder = _2468.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2468.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2468.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_22_46_ladder_2;
        _1647 = frontier_phi_22_46_ladder_1;
        _1649 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1555);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1661 = ((((1.0 - _678) * ((_665 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_678 * _665)) * _649;
    float _1662 = _1661 * ((cbModelParam._m0[1u].w * (_1645 - _1546)) + _1546);
    float _1663 = _1661 * ((cbModelParam._m0[1u].w * (_1647 - _1548)) + _1548);
    float _1664 = _1661 * ((cbModelParam._m0[1u].w * (_1649 - _1550)) + _1550);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    vec4 _1681 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_583, _584));
    float _1683 = _1681.w;
    float _1695 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1683);
    float _1696 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1683);
    float _1697 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1683);
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _649 + (-1.0);
    float _1716 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1717 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1720 = _1703 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1703 + 4u;
    float _1740 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1744 = _1703 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_496, _497, _498));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_496, _497, _498));
    float _3864 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3875 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1720].x * _1726) * _1765) + (((cbLight._m0[_1730].x * _1695) * _1740) * _1763);
    float _1773 = ((_1726 * cbLight._m0[_1720].y) * _1765) + (((cbLight._m0[_1730].y * _1696) * _1740) * _1763);
    float _1774 = ((_1726 * cbLight._m0[_1720].z) * _1765) + (((cbLight._m0[_1730].z * _1697) * _1740) * _1763);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1772;
        _1794 = _1773;
        _1796 = _1774;
    }
    else
    {
        uint _1800 = _1703 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3886 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1819 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1772;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _1999 = _1703 + 7u;
        float _2015 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _3902 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2018 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1837 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1792;
        _1839 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1794;
        _1841 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1796;
    }
    uint _1844 = _1703 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _499) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1703].x + _575;
    float _1860 = cbLight._m0[_1703].y + _576;
    float _1861 = cbLight._m0[_1703].z + _577;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1703].xyz));
    float _3918 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _1873 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1874 = dot(vec3(_496, _497, _498), vec3(_1866, _1867, _1868));
    float _3940 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1866, _1867, _1868));
    float _3951 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1873 * ((_1872 * _1898) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1898) + _1858) * _1872))) * _1872;
    float _3962 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1925 = _1703 + 9u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _499) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1744].x + _575;
    float _1939 = cbLight._m0[_1744].y + _576;
    float _1940 = cbLight._m0[_1744].z + _577;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1744].xyz));
    float _3973 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1952 = dot(vec3(_496, _497, _498), vec3(_1945, _1946, _1947));
    float _3984 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1945, _1946, _1947));
    float _3995 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1937 * _1937;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = 1.0 - _1937;
    float _1984 = (0.5 / (((_1873 * ((_1951 * _1974) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1974) + _1937) * _1951))) * _1951;
    float _4006 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    float _1996 = (((_1973 * cbLight._m0[_1925].x) * _1986) * _1726) + ((((cbLight._m0[_1844].x * _1695) * _1897) * _1911) * _1740);
    float _1997 = (((_1973 * cbLight._m0[_1925].y) * _1986) * _1726) + ((((cbLight._m0[_1844].y * _1696) * _1897) * _1911) * _1740);
    float _1998 = (((_1973 * cbLight._m0[_1925].z) * _1986) * _1726) + ((((cbLight._m0[_1844].z * _1697) * _1897) * _1911) * _1740);
    float _2060;
    float _2062;
    float _2064;
    if (_1781)
    {
        _2060 = _1996;
        _2062 = _1997;
        _2064 = _1998;
    }
    else
    {
        uint _2066 = _1703 + 2u;
        uint _2070 = _1703 + 10u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _499) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _575;
        float _2087 = cbLight._m0[_2066].y + _576;
        float _2088 = cbLight._m0[_2066].z + _577;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2066].xyz));
        float _4017 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2100 = dot(vec3(_496, _497, _498), vec3(_2093, _2094, _2095));
        float _4028 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4039 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1873 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2122) + _2085) * _2099))) * _2099;
        float _4050 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2060 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1996;
        _2062 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1997;
        _2064 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1998;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1799)
    {
        _2170 = _2060;
        _2172 = _2062;
        _2174 = _2064;
    }
    else
    {
        uint _2181 = _1703 + 3u;
        uint _2185 = _1703 + 11u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _499) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _575;
        float _2202 = cbLight._m0[_2181].y + _576;
        float _2203 = cbLight._m0[_2181].z + _577;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2181].xyz));
        float _4066 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2215 = dot(vec3(_496, _497, _498), vec3(_2208, _2209, _2210));
        float _4077 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4088 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2237 = 1.0 - _2200;
        float _2247 = (0.5 / (((_1873 * ((_2214 * _2237) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2237) + _2200) * _2214))) * _2214;
        float _4099 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2170 = (((_2236 * cbLight._m0[_2185].x) * _2249) * _2250) + _2060;
        _2172 = (((_2236 * cbLight._m0[_2185].y) * _2249) * _2250) + _2062;
        _2174 = (((_2236 * cbLight._m0[_2185].z) * _2249) * _2250) + _2064;
    }
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_1701.y == 0u)
    {
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2325;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2325;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2325;
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.x;
        uint _2352 = uint((float(_2340.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2341))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2341)));
        float _2362 = (log2(_2328 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2363 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        uint _2366 = uint(isnan(14.0) ? _2363 : (isnan(_2363) ? 14.0 : min(_2363, 14.0)));
        uvec4 _2371 = texelFetch(g_lightClusterGridBuffer, int(((_2366 << 2u) + (_2352 << 6u)) >> 2u));
        uint _2372 = _2371.x;
        uint _2373 = _2340.z;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((((1u << ((_2373 >> 4u) & 15u)) + 4294967295u) & _2372) == 0u) || ((_2373 & 240u) == 0u))
        {
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
        }
        else
        {
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2634)
                {
                    frontier_phi_61_pred = _2618;
                    frontier_phi_61_pred_1 = _2623;
                    frontier_phi_61_pred_2 = _2622;
                    frontier_phi_61_pred_3 = _2621;
                    frontier_phi_61_pred_4 = _2620;
                    frontier_phi_61_pred_5 = _2619;
                }
                else
                {
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    uint _2748;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2633;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2752 = uint(findLSB(_2748)) + (_2624 << 5u);
                        uint _2749 = (_2748 + 4294967295u) & _2748;
                        uint _2754 = _2752 * 48u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2774 = (_2752 * 48u) + 4u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2793 = (_2752 * 48u) + 8u;
                        vec3 _2804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x));
                        float _2808 = _2768.x - _2326;
                        float _2809 = _2768.y - _2327;
                        float _2810 = _2768.z - _2328;
                        float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                        float _2814 = inversesqrt(_2811);
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2818 = dot(vec3(_605, _608, _611), vec3(_2815, _2816, _2817));
                        float _2823 = 1.0 - (_2811 * _2768.w);
                        float _4125 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2825 = sqrt(_2811) * _2787.w;
                        float _2828 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2818) + _2829;
                        float _2835 = _2825 * _2825;
                        float _2839 = ((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2824) / ((_2835 * 0.699999988079071044921875) + 1.0);
                        float _2843 = (-0.0) - _2326;
                        float _2844 = (-0.0) - _2327;
                        float _2845 = (-0.0) - _2328;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2860 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                        float _2861 = 1.0 - _665;
                        float _2868 = sqrt(1.0 - ((1.0 - (_2861 * _2861)) * (1.0 - (_2860 * _2860))));
                        float _2869 = _2868 * _2868;
                        float _2870 = _2869 * _2869;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2873 = _2852 + _2817;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2881 = dot(vec3(_605, _608, _611), vec3(_2850, _2851, _2852));
                        float _4141 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2885 = dot(vec3(_605, _608, _611), vec3(_2877 * _2871, _2877 * _2872, _2877 * _2873));
                        float _4152 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2892 = ((_2888 * _2888) * (_2870 + (-1.0))) + 1.0;
                        float _2893 = _2828 * _2869;
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2818) + _2894;
                        float _4163 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2899 = 1.0 - _2869;
                        float _2909 = (0.5 / (((_2898 * ((_2884 * _2899) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2899) + _2869) * _2884))) * _2898;
                        float _4174 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2920 = (((_2870 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_2892 * _2892) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125))) * _2824;
                        _2677 = (_2839 * _2787.x) + _2745;
                        _2678 = (_2839 * _2787.y) + _2746;
                        _2679 = (_2839 * _2787.z) + _2747;
                        _2674 = (_2920 * _2804.x) + _2742;
                        _2675 = (_2920 * _2804.y) + _2743;
                        _2676 = (_2920 * _2804.z) + _2744;
                        if (_2749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2749;
                        }
                    }
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                _2474 = frontier_phi_61_pred;
                _2484 = frontier_phi_61_pred_1;
                _2482 = frontier_phi_61_pred_2;
                _2480 = frontier_phi_61_pred_3;
                _2478 = frontier_phi_61_pred_4;
                _2476 = frontier_phi_61_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2474;
                    _2619 = _2476;
                    _2620 = _2478;
                    _2621 = _2480;
                    _2622 = _2482;
                    _2623 = _2484;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
        }
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.z;
        uint _2490 = (_2488 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2490) & _2372) == 0u)
        {
            _2586 = _2473;
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
            _2594 = _2481;
            _2596 = _2483;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
            float _2612 = _2611 * _2326;
            float _2613 = _2611 * _2327;
            float _2614 = _2611 * _2328;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2490 < ((_2488 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2725 = _2473;
                float _2726 = _2475;
                float _2727 = _2477;
                float _2728 = _2479;
                float _2729 = _2481;
                float _2730 = _2483;
                uint _2731 = _2490;
                uint _2740;
                bool _2741;
                for (;;)
                {
                    _2740 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                    _2741 = _2740 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2741)
                    {
                        frontier_phi_67_pred = _2728;
                        frontier_phi_67_pred_1 = _2729;
                        frontier_phi_67_pred_2 = _2730;
                        frontier_phi_67_pred_3 = _2727;
                        frontier_phi_67_pred_4 = _2726;
                        frontier_phi_67_pred_5 = _2725;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        uint _2944 = _2740;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3014;
                        vec4 _3029;
                        float _3075;
                        bool _3076;
                        for (;;)
                        {
                            uint _2955 = ((_2731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3001 = (_2955 * 40u) + 16u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2955 * 40u) + 20u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2955 * 40u) + 24u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3050 = (_2955 * 40u) + 28u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3075 = fma(_2328, _3063.z, fma(_2327, _3063.y, _3063.x * _2326)) + _3063.w;
                            _3076 = !((fma(_2328, _3044.z, fma(_2327, _3044.y, _3044.x * _2326)) + _3044.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3076)
                            {
                                float _3103 = _2970.x - _2326;
                                float _3104 = _2970.y - _2327;
                                float _3105 = _2970.z - _2328;
                                float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                                float _3109 = inversesqrt(_3106);
                                float _3110 = _3109 * _3103;
                                float _3111 = _3109 * _3104;
                                float _3112 = _3109 * _3105;
                                float _3116 = 1.0 - (_3106 / (_2971 * _2971));
                                float _4185 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3121 = sqrt(_3106) * _2986.w;
                                float _3123 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                                float _3124 = _3123 * _3123;
                                float _3127 = ((1.0 - _3124) * dot(vec3(_3110, _3111, _3112), vec3(_605, _608, _611))) + _3124;
                                float _3130 = _3121 * _3121;
                                float _3134 = (fma(_2328, _3014.z, fma(_2327, _3014.y, _3014.x * _2326)) + _3014.w) / _3075;
                                float _3135 = (fma(_2328, _3029.z, fma(_2327, _3029.y, _3029.x * _2326)) + _3029.w) / _3075;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4201 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3117) / ((_3130 * 0.699999988079071044921875) + 1.0));
                                float _3153 = exp2(log2(1.0 / ((_3130 * 3.5) + 5.0)) * 0.25);
                                float _3154 = 1.0 - _665;
                                float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                                float _3162 = _3161 * _3161;
                                float _3163 = _3162 * _3162;
                                float _3164 = _3110 - _2612;
                                float _3165 = _3111 - _2613;
                                float _3166 = _3112 - _2614;
                                float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                                float _3174 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4212 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3178 = dot(vec3(_605, _608, _611), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                                float _4223 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                                float _3186 = _3123 * _3162;
                                float _3187 = _3186 * _3186;
                                float _3193 = ((1.0 - _3187) * dot(vec3(_605, _608, _611), vec3(_3110, _3111, _3112))) + _3187;
                                float _4234 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3195 = 1.0 - _3162;
                                float _3205 = (0.5 / (((_3194 * ((_3177 * _3195) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3162) * _3177))) * _3194;
                                float _4245 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3215 = (_3140 * _3117) * (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_3185 * _3185) * ((_3130 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3215 * _2998.x;
                                frontier_phi_73_pred_1 = _3215 * _2998.y;
                                frontier_phi_73_pred_2 = _3141 * _2986.z;
                                frontier_phi_73_pred_3 = _3141 * _2986.y;
                                frontier_phi_73_pred_4 = _3141 * _2986.x;
                                frontier_phi_73_pred_5 = _3215 * _2998.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3219 = frontier_phi_73_pred;
                            _3220 = frontier_phi_73_pred_1;
                            _3224 = frontier_phi_73_pred_2;
                            _3223 = frontier_phi_73_pred_3;
                            _3222 = frontier_phi_73_pred_4;
                            _3221 = frontier_phi_73_pred_5;
                            _2928 = _3222 + _2941;
                            _2929 = _3223 + _2942;
                            _2930 = _3224 + _2943;
                            _2925 = _3219 + _2938;
                            _2926 = _3220 + _2939;
                            _2927 = _3221 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2928;
                        frontier_phi_67_pred_1 = _2929;
                        frontier_phi_67_pred_2 = _2930;
                        frontier_phi_67_pred_3 = _2927;
                        frontier_phi_67_pred_4 = _2926;
                        frontier_phi_67_pred_5 = _2925;
                    }
                    _2593 = frontier_phi_67_pred;
                    _2595 = frontier_phi_67_pred_1;
                    _2597 = frontier_phi_67_pred_2;
                    _2591 = frontier_phi_67_pred_3;
                    _2589 = frontier_phi_67_pred_4;
                    _2587 = frontier_phi_67_pred_5;
                    uint _2732 = _2731 + 1u;
                    if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2725 = _2587;
                        _2726 = _2589;
                        _2727 = _2591;
                        _2728 = _2593;
                        _2729 = _2595;
                        _2730 = _2597;
                        _2731 = _2732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2595;
                frontier_phi_55_56_ladder_1 = _2597;
                frontier_phi_55_56_ladder_2 = _2593;
                frontier_phi_55_56_ladder_3 = _2591;
                frontier_phi_55_56_ladder_4 = _2589;
                frontier_phi_55_56_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_55_56_ladder = _2481;
                frontier_phi_55_56_ladder_1 = _2483;
                frontier_phi_55_56_ladder_2 = _2479;
                frontier_phi_55_56_ladder_3 = _2477;
                frontier_phi_55_56_ladder_4 = _2475;
                frontier_phi_55_56_ladder_5 = _2473;
            }
            _2586 = frontier_phi_55_56_ladder_5;
            _2588 = frontier_phi_55_56_ladder_4;
            _2590 = frontier_phi_55_56_ladder_3;
            _2592 = frontier_phi_55_56_ladder_2;
            _2594 = frontier_phi_55_56_ladder;
            _2596 = frontier_phi_55_56_ladder_1;
        }
        float _2601 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2385 = (_2601 * _2592) + _1837;
        _2387 = (_2601 * _2594) + _1839;
        _2389 = (_2601 * _2596) + _1841;
        _2391 = ((_2586 * 0.039999999105930328369140625) * _2601) + _2170;
        _2393 = ((_2588 * 0.039999999105930328369140625) * _2601) + _2172;
        _2395 = ((_2590 * 0.039999999105930328369140625) * _2601) + _2174;
    }
    else
    {
        _2385 = _1837;
        _2387 = _1839;
        _2389 = _1841;
        _2391 = _2170;
        _2393 = _2172;
        _2395 = _2174;
    }
    float _4261 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4272 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4283 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    uint _2415 = _226 + 6u;
    float _2423 = _583 / cbSceneParam._m0[86u].x;
    float _2424 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2438 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2440 = _2438.x;
    float _2441 = _2438.y;
    float _2442 = _2438.z;
    float _2443 = _2438.w;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2498 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2499 = _2498 / _517;
        float _2510 = _2499 * _568;
        float _2511 = _569 * _2499;
        float _2512 = (-0.0) - _2511;
        float _2514 = _2499 * _570;
        float _2516 = (cbSceneParam._m0[77u].w * _2512) / _2498;
        float _2517 = _2516 + cbSceneParam._m0[79u].w;
        float _2518 = cbSceneParam._m0[79u].w - _2511;
        float _2524 = sqrt(((_2510 * _2510) + (_2511 * _2511)) + (_2514 * _2514));
        float _2527 = (1.0 - (cbSceneParam._m0[77u].w / _2498)) * _2524;
        float _2532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2512 - _2516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2517 > 0.0) ? exp2(_2532 * _2517) : (2.0 - exp2(_2534 * _2517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2527;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : max(_2517, _2518));
            float _2649 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : min(_2517, _2518));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2687 = ((abs(_2524 / _2512) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2532 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2532 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2534 * _2658) - exp2(_2534 * _2659)) * _2647))) + (_2527 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2443);
        _2536 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2440;
        _2538 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2441;
        _2540 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2442;
        _2542 = _2698 * _2443;
    }
    else
    {
        _2536 = _2440;
        _2538 = _2441;
        _2540 = _2442;
        _2542 = _2443;
    }
    float _2554 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2555 = _2554 == 3.0;
    float _2556 = log2(_2542);
    float _2563 = exp2(_2556 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2385 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _649))) + ((_2391 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2564 = exp2(_2556 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2387 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _649))) + ((_2393 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2565 = exp2(_2556 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2389 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _649))) + ((_2395 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2574 = (_2554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2574 * (_2555 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.y = _2574 * (_2555 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.z = _2574 * (_2555 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2540)));
    SV_Target.w = cbInstanceData._m0[_2415].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2415].w;
}


