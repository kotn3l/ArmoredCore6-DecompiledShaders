#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1133;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3439 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _370) + _443;
    float _455 = ((((_422.x - _441) * _370) + _441) * 2.0) + (-1.0);
    float _456 = ((((_422.y - _442) * _370) + _442) * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3450 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _519 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_505 - _506) * cbMtdParam._m0[24u].z) + _506) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3461 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _527 = (_520 * (cbMtdParam._m0[17u].x - _377)) + _377;
    float _528 = (_520 * (cbMtdParam._m0[17u].y - _378)) + _378;
    float _529 = (_520 * (cbMtdParam._m0[17u].z - _379)) + _379;
    float _534 = (((_397.z - _452) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _452;
    float _538 = ((_478.z - _534) * cbMtdParam._m0[19u].w) + _534;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _558 = (_551.x * 2.0) + (-1.0);
    float _559 = (_551.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3472 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _568 = (_520 * (_551.z - _538)) + _538;
    float _577 = (_455 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_397.x * 2.0) + (-1.0)))) + (((_478.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _578 = (_456 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_397.y * 2.0) + (-1.0)))) + (((_478.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (((_558 - _577) + (cbMtdParam._m0[21u].x * _577)) * _520) + _577;
    float _591 = (((_559 - _578) + (cbMtdParam._m0[21u].x * _578)) * _520) + _578;
    float _592 = (_520 * (sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) - _462)) + _462;
    float _597 = cbMtdParam._m0[22u].x + _478.w;
    float _600 = fma(_592, _221 * NORMAL.x, fma(_591, _228 * TANGENT.x, (_214 * _206) * _590));
    float _603 = fma(_592, _221 * NORMAL.y, fma(_591, _228 * TANGENT.y, (_214 * _207) * _590));
    float _606 = fma(_592, _221 * NORMAL.z, fma(_591, _228 * TANGENT.z, (_214 * _208) * _590));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3483 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _614 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3505 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3516 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3527 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _721 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _724 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _738 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3538 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _762 = ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * TEXCOORD_5.w) * _758.x;
    float _763 = dot(vec3(_611, _612, _613), vec3(_691, _692, _693));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _611) - _691;
    float _771 = (_766 * _612) - _692;
    float _772 = (_766 * _613) - _693;
    float _776 = abs(dot(vec3(_691, _692, _693), vec3(_611, _612, _613)));
    float _3571 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_614);
    float _791 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_831, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823));
        float _861 = fma(_831, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823));
        float _865 = fma(_831, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823));
        float _890 = _823 + _611;
        float _891 = _827 + _612;
        float _892 = _831 + _613;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_611, _612, _613), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3619 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_611, _612, _613), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3652 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_611, _612, _613), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3685 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_831, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823));
        float _1176 = fma(_831, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823));
        float _1180 = fma(_831, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823));
        float _1203 = _823 + _611;
        float _1204 = _827 + _612;
        float _1205 = _831 + _613;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_611, _612, _613), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3748 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_611, _612, _613), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3781 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_611, _612, _613), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3814 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1133;
        _1442 = _1133;
        _1443 = _1133;
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1147)) + _1147;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _770 * 0.5;
    float _1510 = _771 * 0.5;
    float _1511 = _772 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _614);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1626 = fma(_831, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823)) + cbModelParam._m0[13u].w;
        float _1630 = fma(_831, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823)) + cbModelParam._m0[14u].w;
        float _1634 = fma(_831, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823)) + cbModelParam._m0[15u].w;
        float _1637 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1640 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1643 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1671;
        if (_1637 > 0.0)
        {
            _1671 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1671 = frontier_phi_14_12_ladder;
        }
        float _1872;
        if (_1640 > 0.0)
        {
            _1872 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1872 = frontier_phi_23_19_ladder;
        }
        float _2115;
        if (_1643 > 0.0)
        {
            _2115 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2115 = frontier_phi_35_30_ladder;
        }
        float _2117 = isnan(_1872) ? _1671 : (isnan(_1671) ? _1872 : min(_1671, _1872));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1637) + _1626;
        float _2123 = (_2118 * _1640) + _1630;
        float _2124 = (_2118 * _1643) + _1634;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_13_35_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1659 = frontier_phi_13_35_ladder_2;
        _1661 = frontier_phi_13_35_ladder_1;
        _1663 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1578);
        _1659 = _1647.x * cbModelParam._m0[1u].y;
        _1661 = _1647.y * cbModelParam._m0[1u].y;
        _1663 = _1647.z * cbModelParam._m0[1u].y;
    }
    float _1667 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _614);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1667 : min(cbModelParam._m0[25u].w, _1667));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_831, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_831, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_831, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1736 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1739 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1877;
        if (_1733 > 0.0)
        {
            _1877 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1877 = frontier_phi_25_21_ladder;
        }
        float _2142;
        if (_1736 > 0.0)
        {
            _2142 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2142 = frontier_phi_37_32_ladder;
        }
        float _2347;
        if (_1739 > 0.0)
        {
            _2347 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2347 = frontier_phi_46_43_ladder;
        }
        float _2349 = isnan(_2142) ? _1877 : (isnan(_1877) ? _2142 : min(_1877, _2142));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1733) + _1722;
        float _2355 = (_2350 * _1736) + _1726;
        float _2356 = (_2350 * _1739) + _1730;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1668);
            frontier_phi_22_46_ladder = _2555.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2555.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2555.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_22_46_ladder_2;
        _1760 = frontier_phi_22_46_ladder_1;
        _1762 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1668);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1774 = ((((1.0 - _791) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_791 * _778)) * _762;
    float _1775 = _1774 * ((cbModelParam._m0[1u].w * (_1758 - _1659)) + _1659);
    float _1776 = _1774 * ((cbModelParam._m0[1u].w * (_1760 - _1661)) + _1661);
    float _1777 = _1774 * ((cbModelParam._m0[1u].w * (_1762 - _1663)) + _1663);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _762 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1831 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1835 = _1798 | 1u;
    float _1846 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_611, _612, _613));
    float _1849 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_611, _612, _613));
    float _3950 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _3961 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1854 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1856 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1863 = ((cbLight._m0[_1815].x * _1821) * _1856) + ((cbLight._m0[_1825].x * _1831) * _1854);
    float _1864 = ((_1821 * cbLight._m0[_1815].y) * _1856) + ((_1831 * cbLight._m0[_1825].y) * _1854);
    float _1865 = ((_1821 * cbLight._m0[_1815].z) * _1856) + ((_1831 * cbLight._m0[_1825].z) * _1854);
    uvec4 _1869 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1871 = _1869.x == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1871)
    {
        _1882 = _1863;
        _1884 = _1864;
        _1886 = _1865;
    }
    else
    {
        uint _1890 = _1798 + 6u;
        float _1906 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3972 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1909 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1882 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1863;
        _1884 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1864;
        _1886 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1865;
    }
    bool _1889 = _1869.y == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1889)
    {
        _1927 = _1882;
        _1929 = _1884;
        _1931 = _1886;
    }
    else
    {
        uint _2086 = _1798 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _3988 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2105 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1927 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1882;
        _1929 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1884;
        _1931 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1886;
    }
    uint _1934 = _1798 + 8u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _614) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1798].x + _691;
    float _1950 = cbLight._m0[_1798].y + _692;
    float _1951 = cbLight._m0[_1798].z + _693;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1798].xyz));
    float _4004 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _1963 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1964 = dot(vec3(_611, _612, _613), vec3(_1956, _1957, _1958));
    float _4026 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1956, _1957, _1958));
    float _4037 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1948 * _1948;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1963 * ((_1962 * _1988) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _1988) + _1948) * _1962))) * _1962;
    float _4048 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    uint _2012 = _1798 + 9u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _614) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1835].x + _691;
    float _2026 = cbLight._m0[_1835].y + _692;
    float _2027 = cbLight._m0[_1835].z + _693;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1835].xyz));
    float _4059 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2039 = dot(vec3(_611, _612, _613), vec3(_2032, _2033, _2034));
    float _4070 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_2032, _2033, _2034));
    float _4081 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2024 * _2024;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2024;
    float _2071 = (0.5 / (((_1963 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2061) + _2024) * _2038))) * _2038;
    float _4092 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    float _2083 = (((_2060 * cbLight._m0[_2012].x) * _2073) * _1821) + (((_1987 * cbLight._m0[_1934].x) * _2001) * _1831);
    float _2084 = (((_2060 * cbLight._m0[_2012].y) * _2073) * _1821) + (((_1987 * cbLight._m0[_1934].y) * _2001) * _1831);
    float _2085 = (((_2060 * cbLight._m0[_2012].z) * _2073) * _1821) + (((_1987 * cbLight._m0[_1934].z) * _2001) * _1831);
    float _2147;
    float _2149;
    float _2151;
    if (_1871)
    {
        _2147 = _2083;
        _2149 = _2084;
        _2151 = _2085;
    }
    else
    {
        uint _2153 = _1798 + 2u;
        uint _2157 = _1798 + 10u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _614) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _691;
        float _2174 = cbLight._m0[_2153].y + _692;
        float _2175 = cbLight._m0[_2153].z + _693;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2153].xyz));
        float _4103 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2187 = dot(vec3(_611, _612, _613), vec3(_2180, _2181, _2182));
        float _4114 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4125 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2209 = 1.0 - _2172;
        float _2219 = (0.5 / (((_1963 * ((_2186 * _2209) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2209) + _2172) * _2186))) * _2186;
        float _4136 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2147 = (((_2208 * cbLight._m0[_2157].x) * _2221) * _2222) + _2083;
        _2149 = (((_2208 * cbLight._m0[_2157].y) * _2221) * _2222) + _2084;
        _2151 = (((_2208 * cbLight._m0[_2157].z) * _2221) * _2222) + _2085;
    }
    float _2257;
    float _2259;
    float _2261;
    if (_1889)
    {
        _2257 = _2147;
        _2259 = _2149;
        _2261 = _2151;
    }
    else
    {
        uint _2268 = _1798 + 3u;
        uint _2272 = _1798 + 11u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _614) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _691;
        float _2289 = cbLight._m0[_2268].y + _692;
        float _2290 = cbLight._m0[_2268].z + _693;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2268].xyz));
        float _4152 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2302 = dot(vec3(_611, _612, _613), vec3(_2295, _2296, _2297));
        float _4163 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4174 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2323 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2324 = 1.0 - _2287;
        float _2334 = (0.5 / (((_1963 * ((_2301 * _2324) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2324) + _2287) * _2301))) * _2301;
        float _4185 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2257 = (((_2323 * cbLight._m0[_2272].x) * _2336) * _2337) + _2147;
        _2259 = (((_2323 * cbLight._m0[_2272].y) * _2336) * _2337) + _2149;
        _2261 = (((_2323 * cbLight._m0[_2272].z) * _2336) * _2337) + _2151;
    }
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_1796.y == 0u)
    {
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2412;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2412;
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2412;
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.x;
        uint _2439 = uint((float(_2427.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2428))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2428)));
        float _2449 = (log2(_2415 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2450 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        uint _2453 = uint(isnan(14.0) ? _2450 : (isnan(_2450) ? 14.0 : min(_2450, 14.0)));
        uvec4 _2458 = texelFetch(g_lightClusterGridBuffer, int(((_2453 << 2u) + (_2439 << 6u)) >> 2u));
        uint _2459 = _2458.x;
        uint _2460 = _2427.z;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((((1u << ((_2460 >> 4u) & 15u)) + 4294967295u) & _2459) == 0u) || ((_2460 & 240u) == 0u))
        {
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
        }
        else
        {
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            uint _2711 = 0u;
            uint _2720;
            bool _2721;
            for (;;)
            {
                _2720 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                _2721 = _2720 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2721)
                {
                    frontier_phi_61_pred = _2705;
                    frontier_phi_61_pred_1 = _2710;
                    frontier_phi_61_pred_2 = _2709;
                    frontier_phi_61_pred_3 = _2708;
                    frontier_phi_61_pred_4 = _2707;
                    frontier_phi_61_pred_5 = _2706;
                }
                else
                {
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    uint _2835;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2720;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2839 = uint(findLSB(_2835)) + (_2711 << 5u);
                        uint _2836 = (_2835 + 4294967295u) & _2835;
                        uint _2841 = _2839 * 48u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2861 = (_2839 * 48u) + 4u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2880 = (_2839 * 48u) + 8u;
                        vec3 _2891 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x));
                        float _2895 = _2855.x - _2413;
                        float _2896 = _2855.y - _2414;
                        float _2897 = _2855.z - _2415;
                        float _2898 = dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897));
                        float _2901 = inversesqrt(_2898);
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2905 = dot(vec3(_718, _721, _724), vec3(_2902, _2903, _2904));
                        float _2910 = 1.0 - (_2898 * _2855.w);
                        float _4211 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2912 = sqrt(_2898) * _2874.w;
                        float _2915 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                        float _2916 = _2915 * _2915;
                        float _2919 = ((1.0 - _2916) * _2905) + _2916;
                        float _2922 = _2912 * _2912;
                        float _2926 = ((isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))) * _2911) / ((_2922 * 0.699999988079071044921875) + 1.0);
                        float _2930 = (-0.0) - _2413;
                        float _2931 = (-0.0) - _2414;
                        float _2932 = (-0.0) - _2415;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2937 = _2936 * _2930;
                        float _2938 = _2936 * _2931;
                        float _2939 = _2936 * _2932;
                        float _2947 = exp2(log2(1.0 / ((_2922 * 3.5) + 5.0)) * 0.25);
                        float _2948 = 1.0 - _778;
                        float _2955 = sqrt(1.0 - ((1.0 - (_2948 * _2948)) * (1.0 - (_2947 * _2947))));
                        float _2956 = _2955 * _2955;
                        float _2957 = _2956 * _2956;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2960 = _2939 + _2904;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2968 = dot(vec3(_718, _721, _724), vec3(_2937, _2938, _2939));
                        float _4227 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2971 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2972 = dot(vec3(_718, _721, _724), vec3(_2964 * _2958, _2964 * _2959, _2964 * _2960));
                        float _4238 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2979 = ((_2975 * _2975) * (_2957 + (-1.0))) + 1.0;
                        float _2980 = _2915 * _2956;
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2905) + _2981;
                        float _4249 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2986 = 1.0 - _2956;
                        float _2996 = (0.5 / (((_2985 * ((_2971 * _2986) + _2956)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2956) * _2971))) * _2985;
                        float _4260 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _3007 = (((_2957 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_2979 * _2979) * ((_2922 * 2.1991131305694580078125) + 3.141590118408203125))) * _2911;
                        _2764 = (_2926 * _2874.x) + _2832;
                        _2765 = (_2926 * _2874.y) + _2833;
                        _2766 = (_2926 * _2874.z) + _2834;
                        _2761 = (_3007 * _2891.x) + _2829;
                        _2762 = (_3007 * _2891.y) + _2830;
                        _2763 = (_3007 * _2891.z) + _2831;
                        if (_2836 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2836;
                        }
                    }
                    frontier_phi_61_pred = _2761;
                    frontier_phi_61_pred_1 = _2766;
                    frontier_phi_61_pred_2 = _2765;
                    frontier_phi_61_pred_3 = _2764;
                    frontier_phi_61_pred_4 = _2763;
                    frontier_phi_61_pred_5 = _2762;
                }
                _2561 = frontier_phi_61_pred;
                _2571 = frontier_phi_61_pred_1;
                _2569 = frontier_phi_61_pred_2;
                _2567 = frontier_phi_61_pred_3;
                _2565 = frontier_phi_61_pred_4;
                _2563 = frontier_phi_61_pred_5;
                uint _2712 = _2711 + 1u;
                if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2705 = _2561;
                    _2706 = _2563;
                    _2707 = _2565;
                    _2708 = _2567;
                    _2709 = _2569;
                    _2710 = _2571;
                    _2711 = _2712;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
        }
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.z;
        uint _2577 = (_2575 >> 8u) & 15u;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((4294967295u << _2577) & _2459) == 0u)
        {
            _2673 = _2560;
            _2675 = _2562;
            _2677 = _2564;
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
        }
        else
        {
            float _2698 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
            float _2699 = _2698 * _2413;
            float _2700 = _2698 * _2414;
            float _2701 = _2698 * _2415;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2577 < ((_2575 >> 12u) & 15u))
            {
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2812 = _2560;
                float _2813 = _2562;
                float _2814 = _2564;
                float _2815 = _2566;
                float _2816 = _2568;
                float _2817 = _2570;
                uint _2818 = _2577;
                uint _2827;
                bool _2828;
                for (;;)
                {
                    _2827 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                    _2828 = _2827 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2828)
                    {
                        frontier_phi_67_pred = _2815;
                        frontier_phi_67_pred_1 = _2816;
                        frontier_phi_67_pred_2 = _2817;
                        frontier_phi_67_pred_3 = _2814;
                        frontier_phi_67_pred_4 = _2813;
                        frontier_phi_67_pred_5 = _2812;
                    }
                    else
                    {
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        uint _3031 = _2827;
                        uint _3032;
                        vec4 _3057;
                        float _3058;
                        vec4 _3073;
                        vec3 _3085;
                        vec4 _3100;
                        vec4 _3115;
                        float _3161;
                        bool _3162;
                        for (;;)
                        {
                            uint _3042 = ((_2818 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3031));
                            _3032 = (_3031 + 4294967295u) & _3031;
                            uint _3044 = _3042 * 40u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3058 = _3057.w;
                            uint _3060 = (_3042 * 40u) + 4u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3042 * 40u) + 8u;
                            _3085 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x));
                            uint _3087 = (_3042 * 40u) + 16u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3042 * 40u) + 20u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3042 * 40u) + 24u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3136 = (_3042 * 40u) + 28u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3161 = fma(_2415, _3149.z, fma(_2414, _3149.y, _3149.x * _2413)) + _3149.w;
                            _3162 = !((fma(_2415, _3130.z, fma(_2414, _3130.y, _3130.x * _2413)) + _3130.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3162)
                            {
                                float _3189 = _3057.x - _2413;
                                float _3190 = _3057.y - _2414;
                                float _3191 = _3057.z - _2415;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3058 * _3058));
                                float _4271 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3207 = sqrt(_3192) * _3073.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3213 = ((1.0 - _3210) * dot(vec3(_3196, _3197, _3198), vec3(_718, _721, _724))) + _3210;
                                float _3216 = _3207 * _3207;
                                float _3220 = (fma(_2415, _3100.z, fma(_2414, _3100.y, _3100.x * _2413)) + _3100.w) / _3161;
                                float _3221 = (fma(_2415, _3115.z, fma(_2414, _3115.y, _3115.x * _2413)) + _3115.w) / _3161;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4287 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3203) / ((_3216 * 0.699999988079071044921875) + 1.0));
                                float _3239 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                                float _3240 = 1.0 - _778;
                                float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                                float _3248 = _3247 * _3247;
                                float _3249 = _3248 * _3248;
                                float _3250 = _3196 - _2699;
                                float _3251 = _3197 - _2700;
                                float _3252 = _3198 - _2701;
                                float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                                float _3260 = dot(vec3(_718, _721, _724), vec3((-0.0) - _2699, (-0.0) - _2700, (-0.0) - _2701));
                                float _4298 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3264 = dot(vec3(_718, _721, _724), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                                float _4309 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                                float _3272 = _3209 * _3248;
                                float _3273 = _3272 * _3272;
                                float _3279 = ((1.0 - _3273) * dot(vec3(_718, _721, _724), vec3(_3196, _3197, _3198))) + _3273;
                                float _4320 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3281 = 1.0 - _3248;
                                float _3291 = (0.5 / (((_3280 * ((_3263 * _3281) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3248) * _3263))) * _3280;
                                float _4331 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3301 = (_3226 * _3203) * (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3271 * _3271) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3301 * _3085.x;
                                frontier_phi_73_pred_1 = _3301 * _3085.y;
                                frontier_phi_73_pred_2 = _3227 * _3073.z;
                                frontier_phi_73_pred_3 = _3227 * _3073.y;
                                frontier_phi_73_pred_4 = _3227 * _3073.x;
                                frontier_phi_73_pred_5 = _3301 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3305 = frontier_phi_73_pred;
                            _3306 = frontier_phi_73_pred_1;
                            _3310 = frontier_phi_73_pred_2;
                            _3309 = frontier_phi_73_pred_3;
                            _3308 = frontier_phi_73_pred_4;
                            _3307 = frontier_phi_73_pred_5;
                            _3015 = _3308 + _3028;
                            _3016 = _3309 + _3029;
                            _3017 = _3310 + _3030;
                            _3012 = _3305 + _3025;
                            _3013 = _3306 + _3026;
                            _3014 = _3307 + _3027;
                            if (_3032 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3032;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3015;
                        frontier_phi_67_pred_1 = _3016;
                        frontier_phi_67_pred_2 = _3017;
                        frontier_phi_67_pred_3 = _3014;
                        frontier_phi_67_pred_4 = _3013;
                        frontier_phi_67_pred_5 = _3012;
                    }
                    _2680 = frontier_phi_67_pred;
                    _2682 = frontier_phi_67_pred_1;
                    _2684 = frontier_phi_67_pred_2;
                    _2678 = frontier_phi_67_pred_3;
                    _2676 = frontier_phi_67_pred_4;
                    _2674 = frontier_phi_67_pred_5;
                    uint _2819 = _2818 + 1u;
                    if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2812 = _2674;
                        _2813 = _2676;
                        _2814 = _2678;
                        _2815 = _2680;
                        _2816 = _2682;
                        _2817 = _2684;
                        _2818 = _2819;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2682;
                frontier_phi_55_56_ladder_1 = _2684;
                frontier_phi_55_56_ladder_2 = _2680;
                frontier_phi_55_56_ladder_3 = _2678;
                frontier_phi_55_56_ladder_4 = _2676;
                frontier_phi_55_56_ladder_5 = _2674;
            }
            else
            {
                frontier_phi_55_56_ladder = _2568;
                frontier_phi_55_56_ladder_1 = _2570;
                frontier_phi_55_56_ladder_2 = _2566;
                frontier_phi_55_56_ladder_3 = _2564;
                frontier_phi_55_56_ladder_4 = _2562;
                frontier_phi_55_56_ladder_5 = _2560;
            }
            _2673 = frontier_phi_55_56_ladder_5;
            _2675 = frontier_phi_55_56_ladder_4;
            _2677 = frontier_phi_55_56_ladder_3;
            _2679 = frontier_phi_55_56_ladder_2;
            _2681 = frontier_phi_55_56_ladder;
            _2683 = frontier_phi_55_56_ladder_1;
        }
        float _2688 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2472 = (_2688 * _2679) + _1927;
        _2474 = (_2688 * _2681) + _1929;
        _2476 = (_2688 * _2683) + _1931;
        _2478 = ((_2673 * 0.039999999105930328369140625) * _2688) + _2257;
        _2480 = ((_2675 * 0.039999999105930328369140625) * _2688) + _2259;
        _2482 = ((_2677 * 0.039999999105930328369140625) * _2688) + _2261;
    }
    else
    {
        _2472 = _1927;
        _2474 = _1929;
        _2476 = _1931;
        _2478 = _2257;
        _2480 = _2259;
        _2482 = _2261;
    }
    float _4347 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4358 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4369 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    uint _2502 = _234 + 6u;
    float _2510 = _699 / cbSceneParam._m0[86u].x;
    float _2511 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2525 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2510, _2511, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2527 = _2525.x;
    float _2528 = _2525.y;
    float _2529 = _2525.z;
    float _2530 = _2525.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2585 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2586 = _2585 / _632;
        float _2597 = _2586 * _684;
        float _2598 = _685 * _2586;
        float _2599 = (-0.0) - _2598;
        float _2601 = _2586 * _686;
        float _2603 = (cbSceneParam._m0[77u].w * _2599) / _2585;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2598;
        float _2611 = sqrt(((_2597 * _2597) + (_2598 * _2598)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2585)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2599 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2734 = 1.0 / cbSceneParam._m0[80u].x;
            float _2735 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2736 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            _2774 = ((abs(_2611 / _2599) * cbSceneParam._m0[80u].y) * ((((_2745 - _2746) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))))) * _2734)) - ((exp2(_2621 * _2745) - exp2(_2621 * _2746)) * _2734))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2510, _2511, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2530);
        _2623 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2527;
        _2625 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2528;
        _2627 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2529;
        _2629 = _2785 * _2530;
    }
    else
    {
        _2623 = _2527;
        _2625 = _2528;
        _2627 = _2529;
        _2629 = _2530;
    }
    float _2641 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2642 = _2641 == 3.0;
    float _2643 = log2(_2629);
    float _2650 = exp2(_2643 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2472 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _762))) + ((_2478 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2651 = exp2(_2643 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2474 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _762))) + ((_2480 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2652 = exp2(_2643 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2476 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _762))) + ((_2482 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1567)) * cbPerFrame._m0[3u].x));
    float _2661 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2661 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.y = _2661 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.z = _2661 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.w = cbInstanceData._m0[_2502].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2502].w;
}


