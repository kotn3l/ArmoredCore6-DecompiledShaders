#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1277;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3582 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _382) + _457;
    float _469 = ((((_436.x - _455) * _382) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _382) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3593 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _508 = (_469 + ((((_409.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_496.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _509 = (_470 + ((((_409.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_496.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _512 = fma(_476, _235, fma(_509, _242, _508 * _228));
    float _515 = fma(_476, _236, fma(_509, _243, _508 * _229));
    float _518 = fma(_476, _237, fma(_509, _244, _508 * _230));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _560 = (cbMtdParam._m0[19u].x + dot(vec4(_522 * _512, _522 * _515, _522 * _518, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_553 - _554) * cbMtdParam._m0[24u].z) + _554) * cbMtdParam._m0[21u].z);
    float _3604 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _563 = (-0.0) - cbMtdParam._m0[24u].y;
    float _565 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
    float _573 = _561 - ((_561 * TEXCOORD_8.x) * _566);
    float _574 = _561 - ((_561 * TEXCOORD_8.y) * _566);
    float _575 = _561 - ((_561 * TEXCOORD_8.z) * _566);
    float _582 = (_573 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _583 = (_574 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _584 = (_575 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _596 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _627 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_598 - _599) * cbMtdParam._m0[24u].w) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3625 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _636 = ((((cbMtdParam._m0[10u].x - _582) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _628) + _582;
    float _637 = ((((cbMtdParam._m0[10u].y - _583) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _628) + _583;
    float _638 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _584)) * _628) + _584;
    float _643 = (((_409.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    float _647 = ((_496.z - _643) * cbMtdParam._m0[19u].w) + _643;
    vec4 _661 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _668 = (_661.x * 2.0) + (-1.0);
    float _669 = (_661.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3636 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _678 = ((_661.z - _647) * _573) + _647;
    float _681 = ((cbMtdParam._m0[23u].y - _678) * _628) + _678;
    vec4 _700 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _706 = (_700.x * 2.0) + (-1.0);
    float _707 = (_700.y * 2.0) + (-1.0);
    float _708 = dot(vec2(_706, _707), vec2(_706, _707));
    float _3647 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _723 = ((sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) - _476) * _575) + _476;
    float _726 = (((_668 - _508) * _573) + _508) + (cbMtdParam._m0[21u].x * _508);
    float _727 = (((_669 - _509) * _574) + _509) + (cbMtdParam._m0[21u].x * _509);
    float _738 = (((_706 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _628) + _726;
    float _739 = (((_707 - _727) + (_727 * cbMtdParam._m0[22u].z)) * _628) + _727;
    float _740 = (_628 * (sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _723)) + _723;
    float _742 = cbMtdParam._m0[22u].x + _496.w;
    float _745 = fma(_740, _235, fma(_739, _242, _738 * _228));
    float _748 = fma(_740, _236, fma(_739, _243, _738 * _229));
    float _751 = fma(_740, _237, fma(_739, _244, _738 * _230));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3658 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _759 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3680 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3691 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3702 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _828 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _818);
    float _829 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _818);
    float _830 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _818);
    float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
    float _835 = _828 * _834;
    float _836 = _829 * _834;
    float _837 = _830 * _834;
    float _843 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _844 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _865 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _868 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _882 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3713 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _843, cbSceneParam._m0[86u].y * _844));
    float _906 = ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * TEXCOORD_5.w) * _902.x;
    float _907 = dot(vec3(_756, _757, _758), vec3(_835, _836, _837));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _756) - _835;
    float _915 = (_910 * _757) - _836;
    float _916 = (_910 * _758) - _837;
    float _920 = abs(dot(vec3(_835, _836, _837), vec3(_756, _757, _758)));
    float _3746 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_759);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1005 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1009 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1034 = _967 + _756;
        float _1035 = _971 + _757;
        float _1036 = _975 + _758;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_756, _757, _758), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3794 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_756, _757, _758), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3827 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_756, _757, _758), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3860 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1320 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1324 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1347 = _967 + _756;
        float _1348 = _971 + _757;
        float _1349 = _975 + _758;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_756, _757, _758), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3923 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_756, _757, _758), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3956 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_756, _757, _758), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _3989 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1277;
        _1586 = _1277;
        _1587 = _1277;
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1289)) + _1289;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1290)) + _1290;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _914 * 0.5;
    float _1654 = _915 * 0.5;
    float _1655 = _916 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1770 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1774 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1778 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1781 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1784 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1787 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1815;
        if (_1781 > 0.0)
        {
            _1815 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1815 = frontier_phi_14_12_ladder;
        }
        float _2016;
        if (_1784 > 0.0)
        {
            _2016 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2016 = frontier_phi_23_19_ladder;
        }
        float _2259;
        if (_1787 > 0.0)
        {
            _2259 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2259 = frontier_phi_35_30_ladder;
        }
        float _2261 = isnan(_2016) ? _1815 : (isnan(_1815) ? _2016 : min(_1815, _2016));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1781) + _1770;
        float _2267 = (_2262 * _1784) + _1774;
        float _2268 = (_2262 * _1787) + _1778;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2269;
        float _2273 = _2269 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 > _2273) || ((_2267 < _2271) || ((_2266 < _2271) || (_2266 > _2273))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_13_35_ladder = _2392.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2392.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2392.x * cbModelParam._m0[1u].y;
        }
        _1803 = frontier_phi_13_35_ladder_2;
        _1805 = frontier_phi_13_35_ladder_1;
        _1807 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1722);
        _1803 = _1791.x * cbModelParam._m0[1u].y;
        _1805 = _1791.y * cbModelParam._m0[1u].y;
        _1807 = _1791.z * cbModelParam._m0[1u].y;
    }
    float _1811 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1811 : min(cbModelParam._m0[25u].w, _1811));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1880 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1883 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _2021;
        if (_1877 > 0.0)
        {
            _2021 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2021 = frontier_phi_25_21_ladder;
        }
        float _2286;
        if (_1880 > 0.0)
        {
            _2286 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2286 = frontier_phi_37_32_ladder;
        }
        float _2491;
        if (_1883 > 0.0)
        {
            _2491 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2491 = frontier_phi_46_43_ladder;
        }
        float _2493 = isnan(_2286) ? _2021 : (isnan(_2021) ? _2286 : min(_2021, _2286));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1877) + _1866;
        float _2499 = (_2494 * _1880) + _1870;
        float _2500 = (_2494 * _1883) + _1874;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1812);
            frontier_phi_22_46_ladder = _2699.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2699.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2699.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_22_46_ladder_2;
        _1904 = frontier_phi_22_46_ladder_1;
        _1906 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1812);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1918 = ((((1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _922)) * _906;
    float _1919 = _1918 * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1920 = _1918 * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1921 = _1918 * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _906 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1975 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1979 = _1942 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_756, _757, _758));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_756, _757, _758));
    float _4125 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4136 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1959].x * _1965) * _2000) + ((cbLight._m0[_1969].x * _1975) * _1998);
    float _2008 = ((_1965 * cbLight._m0[_1959].y) * _2000) + ((_1975 * cbLight._m0[_1969].y) * _1998);
    float _2009 = ((_1965 * cbLight._m0[_1959].z) * _2000) + ((_1975 * cbLight._m0[_1969].z) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1942 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4147 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2053 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2230 = _1942 + 7u;
        float _2246 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4163 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2249 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2071 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2026;
        _2073 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2028;
        _2075 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2030;
    }
    uint _2078 = _1942 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _759) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1942].x + _835;
    float _2094 = cbLight._m0[_1942].y + _836;
    float _2095 = cbLight._m0[_1942].z + _837;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1942].xyz));
    float _4179 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2107 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2108 = dot(vec3(_756, _757, _758), vec3(_2100, _2101, _2102));
    float _4201 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2100, _2101, _2102));
    float _4212 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2092;
    float _2143 = (0.5 / (((_2107 * ((_2106 * _2132) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2132) + _2092) * _2106))) * _2106;
    float _4223 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2156 = _1942 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _759) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1979].x + _835;
    float _2170 = cbLight._m0[_1979].y + _836;
    float _2171 = cbLight._m0[_1979].z + _837;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1979].xyz));
    float _4234 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2183 = dot(vec3(_756, _757, _758), vec3(_2176, _2177, _2178));
    float _4245 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2176, _2177, _2178));
    float _4256 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2204 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2205 = 1.0 - _2168;
    float _2215 = (0.5 / (((_2107 * ((_2182 * _2205) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2205) + _2168) * _2182))) * _2182;
    float _4267 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2227 = (((_2204 * cbLight._m0[_2156].x) * _2217) * _1965) + (((_2131 * cbLight._m0[_2078].x) * _2145) * _1975);
    float _2228 = (((_2204 * cbLight._m0[_2156].y) * _2217) * _1965) + (((_2131 * cbLight._m0[_2078].y) * _2145) * _1975);
    float _2229 = (((_2204 * cbLight._m0[_2156].z) * _2217) * _1965) + (((_2131 * cbLight._m0[_2078].z) * _2145) * _1975);
    float _2291;
    float _2293;
    float _2295;
    if (_2015)
    {
        _2291 = _2227;
        _2293 = _2228;
        _2295 = _2229;
    }
    else
    {
        uint _2297 = _1942 + 2u;
        uint _2301 = _1942 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _759) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _835;
        float _2318 = cbLight._m0[_2297].y + _836;
        float _2319 = cbLight._m0[_2297].z + _837;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2297].xyz));
        float _4278 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2331 = dot(vec3(_756, _757, _758), vec3(_2324, _2325, _2326));
        float _4289 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4300 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_2107 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2353) + _2316) * _2330))) * _2330;
        float _4311 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2291 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2227;
        _2293 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2228;
        _2295 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2229;
    }
    float _2401;
    float _2403;
    float _2405;
    if (_2033)
    {
        _2401 = _2291;
        _2403 = _2293;
        _2405 = _2295;
    }
    else
    {
        uint _2412 = _1942 + 3u;
        uint _2416 = _1942 + 11u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _759) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _835;
        float _2433 = cbLight._m0[_2412].y + _836;
        float _2434 = cbLight._m0[_2412].z + _837;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2412].xyz));
        float _4327 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2446 = dot(vec3(_756, _757, _758), vec3(_2439, _2440, _2441));
        float _4338 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4349 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2468 = 1.0 - _2431;
        float _2478 = (0.5 / (((_2107 * ((_2445 * _2468) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2468) + _2431) * _2445))) * _2445;
        float _4360 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2401 = (((_2467 * cbLight._m0[_2416].x) * _2480) * _2481) + _2291;
        _2403 = (((_2467 * cbLight._m0[_2416].y) * _2480) * _2481) + _2293;
        _2405 = (((_2467 * cbLight._m0[_2416].z) * _2480) * _2481) + _2295;
    }
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_1940.y == 0u)
    {
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2556;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2556;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2556;
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.x;
        uint _2583 = uint((float(_2571.y) * floor(float(uint(cbSceneParam._m0[85u].y * _844) / _2572))) + floor(float(uint(cbSceneParam._m0[85u].x * _843) / _2572)));
        float _2593 = (log2(_2559 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2594 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        uint _2597 = uint(isnan(14.0) ? _2594 : (isnan(_2594) ? 14.0 : min(_2594, 14.0)));
        uvec4 _2602 = texelFetch(g_lightClusterGridBuffer, int(((_2597 << 2u) + (_2583 << 6u)) >> 2u));
        uint _2603 = _2602.x;
        uint _2604 = _2571.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2604 >> 4u) & 15u)) + 4294967295u) & _2603) == 0u) || ((_2604 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2864)
                {
                    frontier_phi_61_pred = _2848;
                    frontier_phi_61_pred_1 = _2853;
                    frontier_phi_61_pred_2 = _2852;
                    frontier_phi_61_pred_3 = _2851;
                    frontier_phi_61_pred_4 = _2850;
                    frontier_phi_61_pred_5 = _2849;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2557;
                        float _3039 = _2998.y - _2558;
                        float _3040 = _2998.z - _2559;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_862, _865, _868), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4386 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2557;
                        float _3074 = (-0.0) - _2558;
                        float _3075 = (-0.0) - _2559;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _922;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_862, _865, _868), vec3(_3080, _3081, _3082));
                        float _4402 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3115 = dot(vec3(_862, _865, _868), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4413 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4424 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4435 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3150 * _3034.x) + _2972;
                        _2905 = (_3150 * _3034.y) + _2973;
                        _2906 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_61_pred = _2904;
                    frontier_phi_61_pred_1 = _2909;
                    frontier_phi_61_pred_2 = _2908;
                    frontier_phi_61_pred_3 = _2907;
                    frontier_phi_61_pred_4 = _2906;
                    frontier_phi_61_pred_5 = _2905;
                }
                _2705 = frontier_phi_61_pred;
                _2715 = frontier_phi_61_pred_1;
                _2713 = frontier_phi_61_pred_2;
                _2711 = frontier_phi_61_pred_3;
                _2709 = frontier_phi_61_pred_4;
                _2707 = frontier_phi_61_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2705;
                    _2849 = _2707;
                    _2850 = _2709;
                    _2851 = _2711;
                    _2852 = _2713;
                    _2853 = _2715;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2721) & _2603) == 0u)
        {
            _2816 = _2704;
            _2818 = _2706;
            _2820 = _2708;
            _2822 = _2710;
            _2824 = _2712;
            _2826 = _2714;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
            float _2842 = _2841 * _2557;
            float _2843 = _2841 * _2558;
            float _2844 = _2841 * _2559;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2704;
                float _2956 = _2706;
                float _2957 = _2708;
                float _2958 = _2710;
                float _2959 = _2712;
                float _2960 = _2714;
                uint _2961 = _2721;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2971)
                    {
                        frontier_phi_67_pred = _2958;
                        frontier_phi_67_pred_1 = _2959;
                        frontier_phi_67_pred_2 = _2960;
                        frontier_phi_67_pred_3 = _2957;
                        frontier_phi_67_pred_4 = _2956;
                        frontier_phi_67_pred_5 = _2955;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        uint _3174 = _2970;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2559, _3292.z, fma(_2558, _3292.y, _3292.x * _2557)) + _3292.w;
                            _3305 = !((fma(_2559, _3273.z, fma(_2558, _3273.y, _3273.x * _2557)) + _3273.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2557;
                                float _3333 = _3200.y - _2558;
                                float _3334 = _3200.z - _2559;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4446 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_862, _865, _868))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2559, _3243.z, fma(_2558, _3243.y, _3243.x * _2557)) + _3243.w) / _3304;
                                float _3364 = (fma(_2559, _3258.z, fma(_2558, _3258.y, _3258.x * _2557)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4462 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _922;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3395 = _3341 - _2844;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4473 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3407 = dot(vec3(_862, _865, _868), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4484 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_862, _865, _868), vec3(_3339, _3340, _3341))) + _3416;
                                float _4495 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4506 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3444 * _3228.x;
                                frontier_phi_73_pred_1 = _3444 * _3228.y;
                                frontier_phi_73_pred_2 = _3370 * _3216.z;
                                frontier_phi_73_pred_3 = _3370 * _3216.y;
                                frontier_phi_73_pred_4 = _3370 * _3216.x;
                                frontier_phi_73_pred_5 = _3444 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_73_pred;
                            _3449 = frontier_phi_73_pred_1;
                            _3453 = frontier_phi_73_pred_2;
                            _3452 = frontier_phi_73_pred_3;
                            _3451 = frontier_phi_73_pred_4;
                            _3450 = frontier_phi_73_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    _2823 = frontier_phi_67_pred;
                    _2825 = frontier_phi_67_pred_1;
                    _2827 = frontier_phi_67_pred_2;
                    _2821 = frontier_phi_67_pred_3;
                    _2819 = frontier_phi_67_pred_4;
                    _2817 = frontier_phi_67_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2825;
                frontier_phi_55_56_ladder_1 = _2827;
                frontier_phi_55_56_ladder_2 = _2823;
                frontier_phi_55_56_ladder_3 = _2821;
                frontier_phi_55_56_ladder_4 = _2819;
                frontier_phi_55_56_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_55_56_ladder = _2712;
                frontier_phi_55_56_ladder_1 = _2714;
                frontier_phi_55_56_ladder_2 = _2710;
                frontier_phi_55_56_ladder_3 = _2708;
                frontier_phi_55_56_ladder_4 = _2706;
                frontier_phi_55_56_ladder_5 = _2704;
            }
            _2816 = frontier_phi_55_56_ladder_5;
            _2818 = frontier_phi_55_56_ladder_4;
            _2820 = frontier_phi_55_56_ladder_3;
            _2822 = frontier_phi_55_56_ladder_2;
            _2824 = frontier_phi_55_56_ladder;
            _2826 = frontier_phi_55_56_ladder_1;
        }
        float _2831 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2616 = (_2831 * _2822) + _2071;
        _2618 = (_2831 * _2824) + _2073;
        _2620 = (_2831 * _2826) + _2075;
        _2622 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2401;
        _2624 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2403;
        _2626 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2405;
    }
    else
    {
        _2616 = _2071;
        _2618 = _2073;
        _2620 = _2075;
        _2622 = _2401;
        _2624 = _2403;
        _2626 = _2405;
    }
    float _4522 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4533 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4544 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    uint _2646 = _247 + 6u;
    float _2654 = _843 / cbSceneParam._m0[86u].x;
    float _2655 = _844 / cbSceneParam._m0[86u].y;
    vec4 _2669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2671 = _2669.x;
    float _2672 = _2669.y;
    float _2673 = _2669.z;
    float _2674 = _2669.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _2730 = _2729 / _777;
        float _2741 = _2730 * _828;
        float _2742 = _829 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2744 = _2730 * _830;
        float _2746 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2742;
        float _2754 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2743 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2743) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2674);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2671;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2672;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2673;
        _2772 = _2928 * _2674;
    }
    else
    {
        _2766 = _2671;
        _2768 = _2672;
        _2770 = _2673;
        _2772 = _2674;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2616 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _906))) + ((_2622 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2618 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _906))) + ((_2624 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2620 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _906))) + ((_2626 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2646].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2646].w;
}


