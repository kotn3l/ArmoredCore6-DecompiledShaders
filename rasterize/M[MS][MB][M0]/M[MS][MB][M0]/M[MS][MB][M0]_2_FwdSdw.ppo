#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_241 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_241 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _317 = (_309.x * 2.0) + (-1.0);
    float _318 = (_309.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_317, _318), vec2(_317, _318));
    float _3477 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _330 = _317 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_283.x * 2.0) + (-1.0)));
    float _331 = _318 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_283.y * 2.0) + (-1.0)));
    float _336 = (((_283.z - _313) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _313;
    float _341 = cbMtdParam._m0[22u].x + _309.w;
    float _344 = fma(_325, _209 * NORMAL.x, fma(_331, _216 * TANGENT.x, (_202 * _194) * _330));
    float _347 = fma(_325, _209 * NORMAL.y, fma(_331, _216 * TANGENT.y, (_202 * _195) * _330));
    float _350 = fma(_325, _209 * NORMAL.z, fma(_331, _216 * TANGENT.z, (_202 * _196) * _330));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    float _355 = _354 * _344;
    float _356 = _354 * _347;
    float _357 = _354 * _350;
    float _3488 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _358 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3510 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3521 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3532 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _376 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_357, cbSceneParam._m0[5u].z, fma(_356, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _355));
    float _468 = fma(_357, cbSceneParam._m0[6u].z, fma(_356, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _355));
    float _471 = fma(_357, cbSceneParam._m0[7u].z, fma(_356, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _355));
    uint _485 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3543 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _443, cbSceneParam._m0[86u].y * _444));
    float _509 = ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * TEXCOORD_5.w) * _505.x;
    float _510 = dot(vec3(_355, _356, _357), vec3(_435, _436, _437));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _355) - _435;
    float _518 = (_513 * _356) - _436;
    float _519 = (_513 * _357) - _437;
    float _523 = abs(dot(vec3(_435, _436, _437), vec3(_355, _356, _357)));
    float _3576 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_358);
    float _538 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _609 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _613 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _638 = _570 + _355;
        float _639 = _574 + _356;
        float _640 = _578 + _357;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_355, _356, _357), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3624 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_355, _356, _357), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3657 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_355, _356, _357), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3690 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _920 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _924 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _928 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _951 = _570 + _355;
        float _952 = _574 + _356;
        float _953 = _578 + _357;
        float _963 = fma(_953, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951)) - _920;
        float _964 = fma(_953, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951)) - _924;
        float _965 = fma(_953, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951)) - _928;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[35u].z) + ((((((_928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1019 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_986.x + (-0.5));
        float _1021 = _1019 * (_986.y + (-0.5));
        float _1022 = _1019 * (_986.z + (-0.5));
        float _1029 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_993.x + (-0.5));
        float _1031 = _1029 * (_993.y + (-0.5));
        float _1032 = _1029 * (_993.z + (-0.5));
        float _1039 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1000.x + (-0.5));
        float _1041 = _1039 * (_1000.y + (-0.5));
        float _1042 = _1039 * (_1000.z + (-0.5));
        float _1049 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1007.x + (-0.5));
        float _1051 = _1049 * (_1007.y + (-0.5));
        float _1052 = _1049 * (_1007.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_355, _356, _357), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3753 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1083 + 1.0))) + _1088) * _1053;
        float _1098 = _1021 * 0.5;
        float _1099 = _1031 * 0.5;
        float _1100 = _1041 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_355, _356, _357), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3786 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1125 + 1.0))) + _1130) * _1054;
        float _1140 = _1022 * 0.5;
        float _1141 = _1032 * 0.5;
        float _1142 = _1042 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_355, _356, _357), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3819 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1167 + 1.0))) + _1172) * _1055;
        _1189 = _1022;
        _1190 = _1021;
        _1191 = _1020;
        _1192 = _1032;
        _1193 = _1031;
        _1194 = _1030;
        _1195 = _1042;
        _1196 = _1041;
        _1197 = _1040;
        _1198 = _1055;
        _1199 = _1054;
        _1200 = _1053;
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _881;
        _1190 = _881;
        _1191 = _881;
        _1192 = _881;
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _893)) + _893;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _894)) + _894;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _895)) + _895;
    float _1236 = fma(_1215, cbSceneParam._m0[89u].z, fma(_1214, cbSceneParam._m0[89u].y, _1213 * cbSceneParam._m0[89u].x));
    float _1239 = fma(_1215, cbSceneParam._m0[90u].z, fma(_1214, cbSceneParam._m0[90u].y, _1213 * cbSceneParam._m0[90u].x));
    float _1242 = fma(_1215, cbSceneParam._m0[91u].z, fma(_1214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1213));
    float _1257 = _517 * 0.5;
    float _1258 = _518 * 0.5;
    float _1259 = _519 * 0.5;
    float _1260 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1263 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1266 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1273 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_880, _884, _887, _890));
        float _1277 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_882, _885, _888, _891));
        float _1281 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_883, _886, _889, _892));
        float _1288 = dot(vec4(cbModelParam._m0[39u]), vec4(_1257, _1258, _1259, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1302 = dot(vec4(cbModelParam._m0[40u]), vec4(_1257, _1258, _1259, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1315 = (_1311 * cbModelParam._m0[1u].x) + (_1300 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _358);
    float _1326 = isnan(_1325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1325 : min(cbModelParam._m0[25u].z, _1325));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1389 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1392 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1420 = frontier_phi_14_12_ladder;
        }
        float _1593;
        if (_1389 > 0.0)
        {
            _1593 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1593 = frontier_phi_23_19_ladder;
        }
        float _1889;
        if (_1392 > 0.0)
        {
            _1889 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1889 = frontier_phi_35_30_ladder;
        }
        float _1891 = isnan(_1593) ? _1420 : (isnan(_1420) ? _1593 : min(_1420, _1593));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1386) + _1375;
        float _1897 = (_1892 * _1389) + _1379;
        float _1898 = (_1892 * _1392) + _1383;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1899;
        float _1903 = _1899 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 > _1903) || ((_1897 < _1901) || ((_1896 < _1901) || (_1896 > _1903))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1898, cbModelParam._m0[9u].z, fma(_1897, cbModelParam._m0[9u].y, _1896 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1898, cbModelParam._m0[10u].z, fma(_1897, cbModelParam._m0[10u].y, _1896 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1898, cbModelParam._m0[11u].z, fma(_1897, cbModelParam._m0[11u].y, _1896 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_13_35_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_13_35_ladder_2;
        _1410 = frontier_phi_13_35_ladder_1;
        _1412 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _358);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1487 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1490 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1598;
        if (_1484 > 0.0)
        {
            _1598 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1598 = frontier_phi_25_21_ladder;
        }
        float _1916;
        if (_1487 > 0.0)
        {
            _1916 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1916 = frontier_phi_37_32_ladder;
        }
        float _2243;
        if (_1490 > 0.0)
        {
            _2243 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2243 = frontier_phi_47_44_ladder;
        }
        float _2245 = isnan(_1916) ? _1598 : (isnan(_1598) ? _1916 : min(_1598, _1916));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1484) + _1473;
        float _2251 = (_2246 * _1487) + _1477;
        float _2252 = (_2246 * _1490) + _1481;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2252, cbModelParam._m0[17u].z, fma(_2251, cbModelParam._m0[17u].y, _2250 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2252, cbModelParam._m0[18u].z, fma(_2251, cbModelParam._m0[18u].y, _2250 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2252, cbModelParam._m0[19u].z, fma(_2251, cbModelParam._m0[19u].y, _2250 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_22_47_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_22_47_ladder_2;
        _1511 = frontier_phi_22_47_ladder_1;
        _1513 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1417);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1525 = ((((1.0 - _538) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_538 * _525)) * _509;
    float _1526 = _1525 * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1527 = _1525 * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1528 = _1525 * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1531 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1585 = _1572 / _1584;
    float _1586 = _1576 / _1584;
    float _1587 = _1580 / _1584;
    float _1734;
    float _1735;
    float _1736;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1614 = ((uint(_1587 > cbSceneParam._m0[59u].y) + uint(_1587 > cbSceneParam._m0[59u].x)) + uint(_1587 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1615 = _1614 + 43u;
        uint _1623 = _1614 + 44u;
        uint _1631 = _1614 + 45u;
        uint _1639 = _1614 + 46u;
        float _1650 = fma(_1584, cbSceneParam._m0[_1615].w, fma(_1580, cbSceneParam._m0[_1615].z, fma(_1576, cbSceneParam._m0[_1615].y, _1572 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1584, cbSceneParam._m0[_1623].w, fma(_1580, cbSceneParam._m0[_1623].z, fma(_1576, cbSceneParam._m0[_1623].y, _1572 * cbSceneParam._m0[_1623].x)));
        float _1662 = fma(_1584, cbSceneParam._m0[_1639].w, fma(_1580, cbSceneParam._m0[_1639].z, fma(_1576, cbSceneParam._m0[_1639].y, _1572 * cbSceneParam._m0[_1639].x)));
        float _1667 = cbSceneParam._m0[33u].z * _1662;
        float _1669 = cbSceneParam._m0[33u].w * _1662;
        float _1672 = fma(_1584, cbSceneParam._m0[_1631].w, fma(_1580, cbSceneParam._m0[_1631].z, fma(_1576, cbSceneParam._m0[_1631].y, _1572 * cbSceneParam._m0[_1631].x))) / _1662;
        float _1720 = (cbSceneParam._m0[33u].x - sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587))) * cbSceneParam._m0[33u].y;
        float _3945 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1727 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1667 + _1650) / _1662, (_1669 + _1654) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 + _1650) / _1662, (_1654 - _1667) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 - _1667) / _1662, (_1654 - _1669) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 - _1669) / _1662, (_1667 + _1654) / _1662), _1672), 0.0)).x), vec4(0.25)));
        _1734 = 1.0 - (_1727 * cbSceneParam._m0[34u].x);
        _1735 = 1.0 - (_1727 * cbSceneParam._m0[34u].y);
        _1736 = 1.0 - (_1727 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1734 = 1.0;
        _1735 = 1.0;
        _1736 = 1.0;
    }
    float _1800;
    float _1802;
    float _1804;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1788 = fma(_1584, cbSceneParam._m0[63u].w, fma(_1580, cbSceneParam._m0[63u].z, fma(_1576, cbSceneParam._m0[63u].y, _1572 * cbSceneParam._m0[63u].x)));
        float _1789 = fma(_1584, cbSceneParam._m0[60u].w, fma(_1580, cbSceneParam._m0[60u].z, fma(_1576, cbSceneParam._m0[60u].y, _1572 * cbSceneParam._m0[60u].x))) / _1788;
        float _1790 = fma(_1584, cbSceneParam._m0[61u].w, fma(_1580, cbSceneParam._m0[61u].z, fma(_1576, cbSceneParam._m0[61u].y, _1572 * cbSceneParam._m0[61u].x))) / _1788;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1789 >= cbSceneParam._m0[64u].x) && (_1790 >= cbSceneParam._m0[64u].y)) && (_1789 <= cbSceneParam._m0[64u].z)) && (_1790 <= cbSceneParam._m0[64u].w))
        {
            float _1929 = fma(_1584, cbSceneParam._m0[62u].w, fma(_1580, cbSceneParam._m0[62u].z, fma(_1576, cbSceneParam._m0[62u].y, _1572 * cbSceneParam._m0[62u].x))) / _1788;
            float _1933 = isnan(cbSceneParam._m0[41u].w) ? _1929 : (isnan(_1929) ? cbSceneParam._m0[41u].w : max(_1929, cbSceneParam._m0[41u].w));
            float _1976 = (cbSceneParam._m0[33u].x - sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587))) * cbSceneParam._m0[33u].y;
            float _3961 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
            float _1983 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1789, cbSceneParam._m0[33u].w + _1790), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1789, _1790 - cbSceneParam._m0[33u].z), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1789 - cbSceneParam._m0[33u].z, _1790 - cbSceneParam._m0[33u].w), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1789 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1790), _1933), 0.0)).x), vec4(0.25)));
            float _1987 = 1.0 - (_1983 * cbSceneParam._m0[34u].x);
            float _1988 = 1.0 - (_1983 * cbSceneParam._m0[34u].y);
            float _1989 = 1.0 - (_1983 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1989) ? _1736 : (isnan(_1736) ? _1989 : min(_1736, _1989));
            frontier_phi_34_33_ladder_1 = isnan(_1988) ? _1735 : (isnan(_1735) ? _1988 : min(_1735, _1988));
            frontier_phi_34_33_ladder_2 = isnan(_1987) ? _1734 : (isnan(_1734) ? _1987 : min(_1734, _1987));
        }
        else
        {
            frontier_phi_34_33_ladder = _1736;
            frontier_phi_34_33_ladder_1 = _1735;
            frontier_phi_34_33_ladder_2 = _1734;
        }
        _1800 = frontier_phi_34_33_ladder_2;
        _1802 = frontier_phi_34_33_ladder_1;
        _1804 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1800 = _1734;
        _1802 = _1735;
        _1804 = _1736;
    }
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _509 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1848 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1852 = _1811 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_355, _356, _357));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_355, _356, _357));
    float _3997 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _4008 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1828].x * _1834) * _1873) + (((cbLight._m0[_1838].x * _1800) * _1848) * _1871);
    float _1881 = ((_1834 * cbLight._m0[_1828].y) * _1873) + (((cbLight._m0[_1838].y * _1802) * _1848) * _1871);
    float _1882 = ((_1834 * cbLight._m0[_1828].z) * _1873) + (((cbLight._m0[_1838].z * _1804) * _1848) * _1871);
    uvec4 _1886 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1888 = _1886.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1888)
    {
        _1990 = _1880;
        _1992 = _1881;
        _1994 = _1882;
    }
    else
    {
        uint _1998 = _1811 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4019 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2017 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1880;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1881;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1882;
    }
    bool _1997 = _1886.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_1997)
    {
        _2052 = _1990;
        _2054 = _1992;
        _2056 = _1994;
    }
    else
    {
        uint _2214 = _1811 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4035 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2233 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2052 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _1990;
        _2054 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _1992;
        _2056 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _1994;
    }
    uint _2059 = _1811 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _358) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1811].x + _435;
    float _2075 = cbLight._m0[_1811].y + _436;
    float _2076 = cbLight._m0[_1811].z + _437;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1811].xyz));
    float _4051 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2088 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2089 = dot(vec3(_355, _356, _357), vec3(_2081, _2082, _2083));
    float _4073 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2081, _2082, _2083));
    float _4084 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2073;
    float _2124 = (0.5 / (((_2088 * ((_2087 * _2113) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2113) + _2073) * _2087))) * _2087;
    float _4095 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2140 = _1811 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _358) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1852].x + _435;
    float _2154 = cbLight._m0[_1852].y + _436;
    float _2155 = cbLight._m0[_1852].z + _437;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1852].xyz));
    float _4106 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2167 = dot(vec3(_355, _356, _357), vec3(_2160, _2161, _2162));
    float _4117 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2160, _2161, _2162));
    float _4128 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2088 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2189) + _2152) * _2166))) * _2166;
    float _4139 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _1834) + ((((cbLight._m0[_2059].x * _1800) * _2112) * _2126) * _1848);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _1834) + ((((cbLight._m0[_2059].y * _1802) * _2112) * _2126) * _1848);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _1834) + ((((cbLight._m0[_2059].z * _1804) * _2112) * _2126) * _1848);
    float _2269;
    float _2271;
    float _2273;
    if (_1888)
    {
        _2269 = _2211;
        _2271 = _2212;
        _2273 = _2213;
    }
    else
    {
        uint _2275 = _1811 + 2u;
        uint _2279 = _1811 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _358) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _435;
        float _2296 = cbLight._m0[_2275].y + _436;
        float _2297 = cbLight._m0[_2275].z + _437;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_2275].xyz));
        float _4150 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2309 = dot(vec3(_355, _356, _357), vec3(_2302, _2303, _2304));
        float _4161 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4172 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2331 = 1.0 - _2294;
        float _2341 = (0.5 / (((_2088 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2331) + _2294) * _2308))) * _2308;
        float _4183 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2269 = (((_2330 * cbLight._m0[_2279].x) * _2343) * _2344) + _2211;
        _2271 = (((_2330 * cbLight._m0[_2279].y) * _2343) * _2344) + _2212;
        _2273 = (((_2330 * cbLight._m0[_2279].z) * _2343) * _2344) + _2213;
    }
    float _2375;
    float _2377;
    float _2379;
    if (_1997)
    {
        _2375 = _2269;
        _2377 = _2271;
        _2379 = _2273;
    }
    else
    {
        uint _2386 = _1811 + 3u;
        uint _2390 = _1811 + 11u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _358) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _435;
        float _2407 = cbLight._m0[_2386].y + _436;
        float _2408 = cbLight._m0[_2386].z + _437;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_2386].xyz));
        float _4199 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2420 = dot(vec3(_355, _356, _357), vec3(_2413, _2414, _2415));
        float _4210 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4221 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2441 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2442 = 1.0 - _2405;
        float _2452 = (0.5 / (((_2088 * ((_2419 * _2442) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2442) + _2405) * _2419))) * _2419;
        float _4232 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2375 = (((_2441 * cbLight._m0[_2390].x) * _2454) * _2455) + _2269;
        _2377 = (((_2441 * cbLight._m0[_2390].y) * _2454) * _2455) + _2271;
        _2379 = (((_2441 * cbLight._m0[_2390].z) * _2454) * _2455) + _2273;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1809.y == 0u)
    {
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _2477)));
        float _2498 = (log2(_1587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2749)
                {
                    frontier_phi_66_pred = _2738;
                    frontier_phi_66_pred_1 = _2737;
                    frontier_phi_66_pred_2 = _2736;
                    frontier_phi_66_pred_3 = _2735;
                    frontier_phi_66_pred_4 = _2734;
                    frontier_phi_66_pred_5 = _2733;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2748;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2739 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _1585;
                        float _2924 = _2883.y - _1586;
                        float _2925 = _2883.z - _1587;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_465, _468, _471), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4258 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _1585;
                        float _2959 = (-0.0) - _1586;
                        float _2960 = (-0.0) - _1587;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2974 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _525;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2965 + _2930;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_465, _468, _471), vec3(_2965, _2966, _2967));
                        float _4274 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2999 = dot(vec3(_465, _468, _471), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4285 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2943 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2933) + _3008;
                        float _4296 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4307 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3006 * _3006) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2792 = (_2954 * _2902.x) + _2860;
                        _2793 = (_2954 * _2902.y) + _2861;
                        _2794 = (_2954 * _2902.z) + _2862;
                        _2789 = (_3034 * _2919.x) + _2857;
                        _2790 = (_3034 * _2919.y) + _2858;
                        _2791 = (_3034 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_66_pred = _2794;
                    frontier_phi_66_pred_1 = _2793;
                    frontier_phi_66_pred_2 = _2792;
                    frontier_phi_66_pred_3 = _2791;
                    frontier_phi_66_pred_4 = _2790;
                    frontier_phi_66_pred_5 = _2789;
                }
                _2599 = frontier_phi_66_pred;
                _2597 = frontier_phi_66_pred_1;
                _2595 = frontier_phi_66_pred_2;
                _2593 = frontier_phi_66_pred_3;
                _2591 = frontier_phi_66_pred_4;
                _2589 = frontier_phi_66_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2589;
                    _2734 = _2591;
                    _2735 = _2593;
                    _2736 = _2595;
                    _2737 = _2597;
                    _2738 = _2599;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2605) & _2508) == 0u)
        {
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
            float _2727 = _2726 * _1585;
            float _2728 = _2726 * _1586;
            float _2729 = _2726 * _1587;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2840 = _2588;
                float _2841 = _2590;
                float _2842 = _2592;
                float _2843 = _2594;
                float _2844 = _2596;
                float _2845 = _2598;
                uint _2846 = _2605;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2856)
                    {
                        frontier_phi_72_pred = _2845;
                        frontier_phi_72_pred_1 = _2844;
                        frontier_phi_72_pred_2 = _2843;
                        frontier_phi_72_pred_3 = _2842;
                        frontier_phi_72_pred_4 = _2841;
                        frontier_phi_72_pred_5 = _2840;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        uint _3058 = _2855;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3128;
                        vec4 _3143;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3069 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3115 = (_3069 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3069 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3069 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3069 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_1587, _3178.z, fma(_1586, _3178.y, _3178.x * _1585)) + _3178.w;
                            _3191 = !((fma(_1587, _3159.z, fma(_1586, _3159.y, _3159.x * _1585)) + _3159.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3084.x - _1585;
                                float _3219 = _3084.y - _1586;
                                float _3220 = _3084.z - _1587;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3085 * _3085));
                                float _4318 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3236 = sqrt(_3221) * _3100.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_465, _468, _471))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_1587, _3128.z, fma(_1586, _3128.y, _3128.x * _1585)) + _3128.w) / _3190;
                                float _3250 = (fma(_1587, _3143.z, fma(_1586, _3143.y, _3143.x * _1585)) + _3143.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4334 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _525;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2727;
                                float _3280 = _3226 - _2728;
                                float _3281 = _3227 - _2729;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4345 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3293 = dot(vec3(_465, _468, _471), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4356 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_465, _468, _471), vec3(_3225, _3226, _3227))) + _3302;
                                float _4367 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4378 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3256 * _3100.y;
                                frontier_phi_78_pred_1 = _3256 * _3100.x;
                                frontier_phi_78_pred_2 = _3330 * _3112.z;
                                frontier_phi_78_pred_3 = _3330 * _3112.y;
                                frontier_phi_78_pred_4 = _3330 * _3112.x;
                                frontier_phi_78_pred_5 = _3256 * _3100.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3338 = frontier_phi_78_pred;
                            _3337 = frontier_phi_78_pred_1;
                            _3336 = frontier_phi_78_pred_2;
                            _3335 = frontier_phi_78_pred_3;
                            _3334 = frontier_phi_78_pred_4;
                            _3339 = frontier_phi_78_pred_5;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            _3044 = _3339 + _3057;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3044;
                        frontier_phi_72_pred_1 = _3043;
                        frontier_phi_72_pred_2 = _3042;
                        frontier_phi_72_pred_3 = _3041;
                        frontier_phi_72_pred_4 = _3040;
                        frontier_phi_72_pred_5 = _3039;
                    }
                    _2712 = frontier_phi_72_pred;
                    _2710 = frontier_phi_72_pred_1;
                    _2708 = frontier_phi_72_pred_2;
                    _2706 = frontier_phi_72_pred_3;
                    _2704 = frontier_phi_72_pred_4;
                    _2702 = frontier_phi_72_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2702;
                        _2841 = _2704;
                        _2842 = _2706;
                        _2843 = _2708;
                        _2844 = _2710;
                        _2845 = _2712;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2712;
                frontier_phi_60_61_ladder_1 = _2710;
                frontier_phi_60_61_ladder_2 = _2706;
                frontier_phi_60_61_ladder_3 = _2704;
                frontier_phi_60_61_ladder_4 = _2702;
                frontier_phi_60_61_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_60_61_ladder = _2598;
                frontier_phi_60_61_ladder_1 = _2596;
                frontier_phi_60_61_ladder_2 = _2592;
                frontier_phi_60_61_ladder_3 = _2590;
                frontier_phi_60_61_ladder_4 = _2588;
                frontier_phi_60_61_ladder_5 = _2594;
            }
            _2701 = frontier_phi_60_61_ladder_4;
            _2703 = frontier_phi_60_61_ladder_3;
            _2705 = frontier_phi_60_61_ladder_2;
            _2707 = frontier_phi_60_61_ladder_5;
            _2709 = frontier_phi_60_61_ladder_1;
            _2711 = frontier_phi_60_61_ladder;
        }
        float _2716 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2521 = (_2716 * _2707) + _2052;
        _2523 = (_2716 * _2709) + _2054;
        _2525 = (_2716 * _2711) + _2056;
        _2527 = ((_2701 * 0.039999999105930328369140625) * _2716) + _2375;
        _2529 = ((_2703 * 0.039999999105930328369140625) * _2716) + _2377;
        _2531 = ((_2705 * 0.039999999105930328369140625) * _2716) + _2379;
    }
    else
    {
        _2521 = _2052;
        _2523 = _2054;
        _2525 = _2056;
        _2527 = _2375;
        _2529 = _2377;
        _2531 = _2379;
    }
    float _4394 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4405 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4416 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    uint _2551 = _222 + 6u;
    float _2559 = _443 / cbSceneParam._m0[86u].x;
    float _2560 = _444 / cbSceneParam._m0[86u].y;
    vec4 _2574 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, (log2((isnan(cbSceneParam._m0[77u].w) ? _376 : (isnan(_376) ? cbSceneParam._m0[77u].w : min(_376, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2576 = _2574.x;
    float _2577 = _2574.y;
    float _2578 = _2574.z;
    float _2579 = _2574.w;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_376 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_376) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _376 : min(cbSceneParam._m0[80u].w, _376));
        float _2614 = _2613 / _376;
        float _2625 = _2614 * _428;
        float _2626 = _429 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2629 = _2614 * _430;
        float _2631 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2632 = _2631 + cbSceneParam._m0[79u].w;
        float _2633 = cbSceneParam._m0[79u].w - _2626;
        float _2639 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2629 * _2629));
        float _2642 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2639;
        float _2647 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2649 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2627 - _2631) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2632 > 0.0) ? exp2(_2647 * _2632) : (2.0 - exp2(_2649 * _2632))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2642;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : max(_2632, _2633));
            float _2764 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : min(_2632, _2633));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2802 = ((abs(_2639 / _2627) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2647 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2647 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2649 * _2773) - exp2(_2649 * _2774)) * _2762))) + (_2642 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2579);
        _2651 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2576;
        _2653 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2577;
        _2655 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2578;
        _2657 = _2813 * _2579;
    }
    else
    {
        _2651 = _2576;
        _2653 = _2577;
        _2655 = _2578;
        _2657 = _2579;
    }
    float _2669 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2670 = _2669 == 3.0;
    float _2671 = log2(_2657);
    float _2678 = exp2(_2671 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2521 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _509))) + ((_2527 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1315)) * cbPerFrame._m0[3u].x));
    float _2679 = exp2(_2671 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2523 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _509))) + ((_2529 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1315)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2671 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2525 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _509))) + ((_2531 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1315)) * cbPerFrame._m0[3u].x));
    float _2689 = (_2669 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2689 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.y = _2689 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.z = _2689 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.w = cbInstanceData._m0[_2551].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2551].w;
}


