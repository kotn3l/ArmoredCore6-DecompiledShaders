#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1109;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _302 = _298.z;
    float _307 = (_298.x * 2.0) + (-1.0);
    float _309 = (_298.y * 2.0) + (-1.0);
    float _310 = dot(vec2(_307, _309), vec2(_307, _309));
    float _3418 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    float _319 = fma(_316, _221, fma(_309, _228, _307 * _214));
    float _322 = fma(_316, _222, fma(_309, _229, _307 * _215));
    float _325 = fma(_316, _223, fma(_309, _230, _307 * _216));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _367 = _365.x;
    float _368 = 1.0 - _367;
    float _375 = ((_367 - _368) * cbMtdParam._m0[24u].z) + _368;
    float _377 = (cbMtdParam._m0[19u].x + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_375 * cbMtdParam._m0[21u].z);
    float _3429 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _380 = (-0.0) - cbMtdParam._m0[24u].y;
    float _382 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
    float _390 = _378 - ((_378 * TEXCOORD_8.x) * _383);
    float _391 = _378 - ((_378 * TEXCOORD_8.y) * _383);
    float _392 = _378 - ((_378 * TEXCOORD_8.z) * _383);
    float _399 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _403 = ((isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : min(_399, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _411 = (_403 - (((_375 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _403))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3460 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _416 = ((_390 * (cbMtdParam._m0[17u].x - _278)) * _412) + _278;
    float _417 = ((_391 * (cbMtdParam._m0[17u].y - _279)) * _412) + _279;
    float _418 = ((_392 * (cbMtdParam._m0[17u].z - _280)) * _412) + _280;
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _432 = _430.x;
    float _433 = 1.0 - _432;
    float _462 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_432 - _433) * cbMtdParam._m0[24u].w) + _433) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3471 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _471 = ((((cbMtdParam._m0[10u].x - _416) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _463) + _416;
    float _472 = ((((cbMtdParam._m0[10u].y - _417) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _463) + _417;
    float _473 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _418)) * _463) + _418;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _494 = (_487.x * 2.0) + (-1.0);
    float _495 = (_487.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3482 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _505 = (((_487.z - _302) * _390) * _412) + _302;
    float _508 = ((cbMtdParam._m0[23u].y - _505) * _463) + _505;
    vec4 _527 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _533 = (_527.x * 2.0) + (-1.0);
    float _534 = (_527.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3493 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _555 = (((cbMtdParam._m0[21u].x * _307) + ((_494 - _307) * _390)) * _412) + _307;
    float _556 = (((cbMtdParam._m0[21u].x * _309) + ((_495 - _309) * _391)) * _412) + _309;
    float _557 = (((sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) - _316) * _392) * _412) + _316;
    float _568 = (((_533 - _555) + (_555 * cbMtdParam._m0[22u].z)) * _463) + _555;
    float _569 = (((_534 - _556) + (_556 * cbMtdParam._m0[22u].z)) * _463) + _556;
    float _570 = ((sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) - _557) * _463) + _557;
    float _572 = cbMtdParam._m0[22u].x + _298.w;
    float _575 = fma(_570, _221, fma(_569, _228, _568 * _214));
    float _578 = fma(_570, _222, fma(_569, _229, _568 * _215));
    float _581 = fma(_570, _223, fma(_569, _230, _568 * _216));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3504 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _589 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3526 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3537 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3548 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _697 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _700 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    uint _714 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3559 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _738 = ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * TEXCOORD_5.w) * _734.x;
    float _739 = dot(vec3(_586, _587, _588), vec3(_664, _665, _666));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _586) - _664;
    float _747 = (_742 * _587) - _665;
    float _748 = (_742 * _588) - _666;
    float _752 = abs(dot(vec3(_664, _665, _666), vec3(_586, _587, _588)));
    float _3592 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_589);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _837 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _841 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _866 = _799 + _586;
        float _867 = _803 + _587;
        float _868 = _807 + _588;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _833;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _837;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _841;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_586, _587, _588), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3640 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_586, _587, _588), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3673 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_586, _587, _588), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3706 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1152 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1156 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1179 = _799 + _586;
        float _1180 = _803 + _587;
        float _1181 = _807 + _588;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_586, _587, _588), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3769 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_586, _587, _588), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3802 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_586, _587, _588), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3835 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1109;
        _1418 = _1109;
        _1419 = _1109;
        _1420 = _1109;
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1121)) + _1121;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _746 * 0.5;
    float _1486 = _747 * 0.5;
    float _1487 = _748 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1616 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1619 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1647 = frontier_phi_14_12_ladder;
        }
        float _1850;
        if (_1616 > 0.0)
        {
            _1850 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1850 = frontier_phi_23_19_ladder;
        }
        float _2093;
        if (_1619 > 0.0)
        {
            _2093 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2093 = frontier_phi_35_30_ladder;
        }
        float _2095 = isnan(_1850) ? _1647 : (isnan(_1647) ? _1850 : min(_1647, _1850));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1613) + _1602;
        float _2101 = (_2096 * _1616) + _1606;
        float _2102 = (_2096 * _1619) + _1610;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2103;
        float _2107 = _2103 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 > _2107) || ((_2101 < _2105) || ((_2100 < _2105) || (_2100 > _2107))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2102, cbModelParam._m0[9u].z, fma(_2101, cbModelParam._m0[9u].y, _2100 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2102, cbModelParam._m0[10u].z, fma(_2101, cbModelParam._m0[10u].y, _2100 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2102, cbModelParam._m0[11u].z, fma(_2101, cbModelParam._m0[11u].y, _2100 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_13_35_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_13_35_ladder_2;
        _1637 = frontier_phi_13_35_ladder_1;
        _1639 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1554);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1698 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1702 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1706 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1709 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1712 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1715 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1855;
        if (_1709 > 0.0)
        {
            _1855 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1855 = frontier_phi_25_21_ladder;
        }
        float _2120;
        if (_1712 > 0.0)
        {
            _2120 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2120 = frontier_phi_37_32_ladder;
        }
        float _2325;
        if (_1715 > 0.0)
        {
            _2325 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2325 = frontier_phi_46_43_ladder;
        }
        float _2327 = isnan(_2120) ? _1855 : (isnan(_1855) ? _2120 : min(_1855, _2120));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1709) + _1698;
        float _2333 = (_2328 * _1712) + _1702;
        float _2334 = (_2328 * _1715) + _1706;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_22_46_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1734 = frontier_phi_22_46_ladder_2;
        _1736 = frontier_phi_22_46_ladder_1;
        _1738 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1644);
        _1734 = _1718.x * cbModelParam._m0[1u].z;
        _1736 = _1718.y * cbModelParam._m0[1u].z;
        _1738 = _1718.z * cbModelParam._m0[1u].z;
    }
    float _1750 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1751 = _1750 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1752 = _1750 * ((cbModelParam._m0[1u].w * (_1736 - _1637)) + _1637);
    float _1753 = _1750 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1751 * cbSceneParam._m0[91u].x));
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _738 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1808 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1812 = _1774 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_586, _587, _588));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_586, _587, _588));
    float _3971 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _3982 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1791].x * _1797) * _1833) + ((cbLight._m0[_1801].x * _1808) * _1831);
    float _1841 = ((_1797 * cbLight._m0[_1791].y) * _1833) + ((_1808 * cbLight._m0[_1801].y) * _1831);
    float _1842 = ((_1797 * cbLight._m0[_1791].z) * _1833) + ((_1808 * cbLight._m0[_1801].z) * _1831);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1849)
    {
        _1860 = _1840;
        _1862 = _1841;
        _1864 = _1842;
    }
    else
    {
        uint _1868 = _1774 + 6u;
        float _1884 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3993 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1887 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1860 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1840;
        _1862 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1841;
        _1864 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1842;
    }
    bool _1867 = _1847.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1867)
    {
        _1905 = _1860;
        _1907 = _1862;
        _1909 = _1864;
    }
    else
    {
        uint _2064 = _1774 + 7u;
        float _2080 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _4009 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2083 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1905 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _1860;
        _1907 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _1862;
        _1909 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _1864;
    }
    uint _1912 = _1774 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _589) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1774].x + _664;
    float _1928 = cbLight._m0[_1774].y + _665;
    float _1929 = cbLight._m0[_1774].z + _666;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1774].xyz));
    float _4025 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1941 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1942 = dot(vec3(_586, _587, _588), vec3(_1934, _1935, _1936));
    float _4047 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1934, _1935, _1936));
    float _4058 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1941 * ((_1940 * _1966) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1966) + _1926) * _1940))) * _1940;
    float _4069 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _1990 = _1774 + 9u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _589) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1812].x + _664;
    float _2004 = cbLight._m0[_1812].y + _665;
    float _2005 = cbLight._m0[_1812].z + _666;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1812].xyz));
    float _4080 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2017 = dot(vec3(_586, _587, _588), vec3(_2010, _2011, _2012));
    float _4091 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2010, _2011, _2012));
    float _4102 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2002 * _2002;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = 1.0 - _2002;
    float _2049 = (0.5 / (((_1941 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2039) + _2002) * _2016))) * _2016;
    float _4113 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    float _2061 = (((_2038 * cbLight._m0[_1990].x) * _2051) * _1797) + (((_1965 * cbLight._m0[_1912].x) * _1979) * _1808);
    float _2062 = (((_2038 * cbLight._m0[_1990].y) * _2051) * _1797) + (((_1965 * cbLight._m0[_1912].y) * _1979) * _1808);
    float _2063 = (((_2038 * cbLight._m0[_1990].z) * _2051) * _1797) + (((_1965 * cbLight._m0[_1912].z) * _1979) * _1808);
    float _2125;
    float _2127;
    float _2129;
    if (_1849)
    {
        _2125 = _2061;
        _2127 = _2062;
        _2129 = _2063;
    }
    else
    {
        uint _2131 = _1774 + 2u;
        uint _2135 = _1774 + 10u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _589) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _664;
        float _2152 = cbLight._m0[_2131].y + _665;
        float _2153 = cbLight._m0[_2131].z + _666;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2131].xyz));
        float _4124 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2165 = dot(vec3(_586, _587, _588), vec3(_2158, _2159, _2160));
        float _4135 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4146 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2187 = 1.0 - _2150;
        float _2197 = (0.5 / (((_1941 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2187) + _2150) * _2164))) * _2164;
        float _4157 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2125 = (((_2186 * cbLight._m0[_2135].x) * _2199) * _2200) + _2061;
        _2127 = (((_2186 * cbLight._m0[_2135].y) * _2199) * _2200) + _2062;
        _2129 = (((_2186 * cbLight._m0[_2135].z) * _2199) * _2200) + _2063;
    }
    float _2235;
    float _2237;
    float _2239;
    if (_1867)
    {
        _2235 = _2125;
        _2237 = _2127;
        _2239 = _2129;
    }
    else
    {
        uint _2246 = _1774 + 3u;
        uint _2250 = _1774 + 11u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _589) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _664;
        float _2267 = cbLight._m0[_2246].y + _665;
        float _2268 = cbLight._m0[_2246].z + _666;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2246].xyz));
        float _4173 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2280 = dot(vec3(_586, _587, _588), vec3(_2273, _2274, _2275));
        float _4184 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4195 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2302 = 1.0 - _2265;
        float _2312 = (0.5 / (((_1941 * ((_2279 * _2302) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2302) + _2265) * _2279))) * _2279;
        float _4206 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2235 = (((_2301 * cbLight._m0[_2250].x) * _2314) * _2315) + _2125;
        _2237 = (((_2301 * cbLight._m0[_2250].y) * _2314) * _2315) + _2127;
        _2239 = (((_2301 * cbLight._m0[_2250].z) * _2314) * _2315) + _2129;
    }
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_1772.y == 0u)
    {
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2390;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2390;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2390;
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.x;
        uint _2417 = uint((float(_2405.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2406))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2406)));
        float _2427 = (log2(_2393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        uint _2431 = uint(isnan(14.0) ? _2428 : (isnan(_2428) ? 14.0 : min(_2428, 14.0)));
        uvec4 _2436 = texelFetch(g_lightClusterGridBuffer, int(((_2431 << 2u) + (_2417 << 6u)) >> 2u));
        uint _2437 = _2436.x;
        uint _2438 = _2405.z;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((((1u << ((_2438 >> 4u) & 15u)) + 4294967295u) & _2437) == 0u) || ((_2438 & 240u) == 0u))
        {
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
        }
        else
        {
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            uint _2688 = 0u;
            uint _2697;
            bool _2698;
            for (;;)
            {
                _2697 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2688 << 2u)) >> 2u)).x;
                _2698 = _2697 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2698)
                {
                    frontier_phi_61_pred = _2682;
                    frontier_phi_61_pred_1 = _2687;
                    frontier_phi_61_pred_2 = _2686;
                    frontier_phi_61_pred_3 = _2685;
                    frontier_phi_61_pred_4 = _2684;
                    frontier_phi_61_pred_5 = _2683;
                }
                else
                {
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    uint _2812;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2697;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    for (;;)
                    {
                        uint _2816 = uint(findLSB(_2812)) + (_2688 << 5u);
                        uint _2813 = (_2812 + 4294967295u) & _2812;
                        uint _2818 = _2816 * 48u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2838 = (_2816 * 48u) + 4u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2857 = (_2816 * 48u) + 8u;
                        vec3 _2868 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x));
                        float _2872 = _2832.x - _2391;
                        float _2873 = _2832.y - _2392;
                        float _2874 = _2832.z - _2393;
                        float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                        float _2878 = inversesqrt(_2875);
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2882 = dot(vec3(_694, _697, _700), vec3(_2879, _2880, _2881));
                        float _2887 = 1.0 - (_2875 * _2832.w);
                        float _4232 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2889 = sqrt(_2875) * _2851.w;
                        float _2892 = 1.39999997615814208984375 / (_2889 + 1.39999997615814208984375);
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2882) + _2893;
                        float _2899 = _2889 * _2889;
                        float _2903 = ((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2888) / ((_2899 * 0.699999988079071044921875) + 1.0);
                        float _2907 = (-0.0) - _2391;
                        float _2908 = (-0.0) - _2392;
                        float _2909 = (-0.0) - _2393;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2924 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                        float _2925 = 1.0 - _754;
                        float _2932 = sqrt(1.0 - ((1.0 - (_2925 * _2925)) * (1.0 - (_2924 * _2924))));
                        float _2933 = _2932 * _2932;
                        float _2934 = _2933 * _2933;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2945 = dot(vec3(_694, _697, _700), vec3(_2914, _2915, _2916));
                        float _4248 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2948 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2949 = dot(vec3(_694, _697, _700), vec3(_2941 * _2935, _2941 * _2936, _2941 * _2937));
                        float _4259 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2956 = ((_2952 * _2952) * (_2934 + (-1.0))) + 1.0;
                        float _2957 = _2892 * _2933;
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2882) + _2958;
                        float _4270 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2962 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2963 = 1.0 - _2933;
                        float _2973 = (0.5 / (((_2962 * ((_2948 * _2963) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2962 * _2963) + _2933) * _2948))) * _2962;
                        float _4281 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2984 = (((_2934 * 3.1415927410125732421875) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) / ((_2956 * _2956) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125))) * _2888;
                        _2741 = (_2903 * _2851.x) + _2809;
                        _2742 = (_2903 * _2851.y) + _2810;
                        _2743 = (_2903 * _2851.z) + _2811;
                        _2738 = (_2984 * _2868.x) + _2806;
                        _2739 = (_2984 * _2868.y) + _2807;
                        _2740 = (_2984 * _2868.z) + _2808;
                        if (_2813 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2813;
                        }
                    }
                    frontier_phi_61_pred = _2738;
                    frontier_phi_61_pred_1 = _2743;
                    frontier_phi_61_pred_2 = _2742;
                    frontier_phi_61_pred_3 = _2741;
                    frontier_phi_61_pred_4 = _2740;
                    frontier_phi_61_pred_5 = _2739;
                }
                _2539 = frontier_phi_61_pred;
                _2549 = frontier_phi_61_pred_1;
                _2547 = frontier_phi_61_pred_2;
                _2545 = frontier_phi_61_pred_3;
                _2543 = frontier_phi_61_pred_4;
                _2541 = frontier_phi_61_pred_5;
                uint _2689 = _2688 + 1u;
                if (_2689 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2682 = _2539;
                    _2683 = _2541;
                    _2684 = _2543;
                    _2685 = _2545;
                    _2686 = _2547;
                    _2687 = _2549;
                    _2688 = _2689;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
        }
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.z;
        uint _2555 = (_2553 >> 8u) & 15u;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        if (((4294967295u << _2555) & _2437) == 0u)
        {
            _2650 = _2538;
            _2652 = _2540;
            _2654 = _2542;
            _2656 = _2544;
            _2658 = _2546;
            _2660 = _2548;
        }
        else
        {
            float _2675 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
            float _2676 = _2675 * _2391;
            float _2677 = _2675 * _2392;
            float _2678 = _2675 * _2393;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2555 < ((_2553 >> 12u) & 15u))
            {
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2789 = _2538;
                float _2790 = _2540;
                float _2791 = _2542;
                float _2792 = _2544;
                float _2793 = _2546;
                float _2794 = _2548;
                uint _2795 = _2555;
                uint _2804;
                bool _2805;
                for (;;)
                {
                    _2804 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                    _2805 = _2804 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2805)
                    {
                        frontier_phi_67_pred = _2792;
                        frontier_phi_67_pred_1 = _2793;
                        frontier_phi_67_pred_2 = _2794;
                        frontier_phi_67_pred_3 = _2791;
                        frontier_phi_67_pred_4 = _2790;
                        frontier_phi_67_pred_5 = _2789;
                    }
                    else
                    {
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        uint _3008 = _2804;
                        uint _3009;
                        vec4 _3034;
                        float _3035;
                        vec4 _3050;
                        vec3 _3062;
                        vec4 _3078;
                        vec4 _3094;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3019 = ((_2795 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3008));
                            _3009 = (_3008 + 4294967295u) & _3008;
                            uint _3021 = _3019 * 40u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3035 = _3034.w;
                            uint _3037 = (_3019 * 40u) + 4u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_3019 * 40u) + 8u;
                            _3062 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x));
                            uint _3065 = (_3019 * 40u) + 16u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3081 = (_3019 * 40u) + 20u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3019 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3019 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_2393, _3128.z, fma(_2392, _3128.y, _3128.x * _2391)) + _3128.w;
                            _3141 = !((fma(_2393, _3109.z, fma(_2392, _3109.y, _3109.x * _2391)) + _3109.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3034.x - _2391;
                                float _3169 = _3034.y - _2392;
                                float _3170 = _3034.z - _2393;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3035 * _3035));
                                float _4292 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3186 = sqrt(_3171) * _3050.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_694, _697, _700))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_2393, _3078.z, fma(_2392, _3078.y, _3078.x * _2391)) + _3078.w) / _3140;
                                float _3200 = (fma(_2393, _3094.z, fma(_2392, _3094.y, _3094.x * _2391)) + _3094.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4308 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _754;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2676;
                                float _3230 = _3176 - _2677;
                                float _3231 = _3177 - _2678;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2676, (-0.0) - _2677, (-0.0) - _2678));
                                float _4319 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3243 = dot(vec3(_694, _697, _700), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4330 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_694, _697, _700), vec3(_3175, _3176, _3177))) + _3252;
                                float _4341 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4352 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3280 * _3062.x;
                                frontier_phi_73_pred_1 = _3280 * _3062.y;
                                frontier_phi_73_pred_2 = _3206 * _3050.z;
                                frontier_phi_73_pred_3 = _3206 * _3050.y;
                                frontier_phi_73_pred_4 = _3206 * _3050.x;
                                frontier_phi_73_pred_5 = _3280 * _3062.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_73_pred;
                            _3285 = frontier_phi_73_pred_1;
                            _3289 = frontier_phi_73_pred_2;
                            _3288 = frontier_phi_73_pred_3;
                            _3287 = frontier_phi_73_pred_4;
                            _3286 = frontier_phi_73_pred_5;
                            _2992 = _3287 + _3005;
                            _2993 = _3288 + _3006;
                            _2994 = _3289 + _3007;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            if (_3009 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _3009;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2992;
                        frontier_phi_67_pred_1 = _2993;
                        frontier_phi_67_pred_2 = _2994;
                        frontier_phi_67_pred_3 = _2991;
                        frontier_phi_67_pred_4 = _2990;
                        frontier_phi_67_pred_5 = _2989;
                    }
                    _2657 = frontier_phi_67_pred;
                    _2659 = frontier_phi_67_pred_1;
                    _2661 = frontier_phi_67_pred_2;
                    _2655 = frontier_phi_67_pred_3;
                    _2653 = frontier_phi_67_pred_4;
                    _2651 = frontier_phi_67_pred_5;
                    uint _2796 = _2795 + 1u;
                    if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2789 = _2651;
                        _2790 = _2653;
                        _2791 = _2655;
                        _2792 = _2657;
                        _2793 = _2659;
                        _2794 = _2661;
                        _2795 = _2796;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2659;
                frontier_phi_55_56_ladder_1 = _2661;
                frontier_phi_55_56_ladder_2 = _2657;
                frontier_phi_55_56_ladder_3 = _2655;
                frontier_phi_55_56_ladder_4 = _2653;
                frontier_phi_55_56_ladder_5 = _2651;
            }
            else
            {
                frontier_phi_55_56_ladder = _2546;
                frontier_phi_55_56_ladder_1 = _2548;
                frontier_phi_55_56_ladder_2 = _2544;
                frontier_phi_55_56_ladder_3 = _2542;
                frontier_phi_55_56_ladder_4 = _2540;
                frontier_phi_55_56_ladder_5 = _2538;
            }
            _2650 = frontier_phi_55_56_ladder_5;
            _2652 = frontier_phi_55_56_ladder_4;
            _2654 = frontier_phi_55_56_ladder_3;
            _2656 = frontier_phi_55_56_ladder_2;
            _2658 = frontier_phi_55_56_ladder;
            _2660 = frontier_phi_55_56_ladder_1;
        }
        float _2665 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2450 = (_2665 * _2656) + _1905;
        _2452 = (_2665 * _2658) + _1907;
        _2454 = (_2665 * _2660) + _1909;
        _2456 = ((_2650 * 0.039999999105930328369140625) * _2665) + _2235;
        _2458 = ((_2652 * 0.039999999105930328369140625) * _2665) + _2237;
        _2460 = ((_2654 * 0.039999999105930328369140625) * _2665) + _2239;
    }
    else
    {
        _2450 = _1905;
        _2452 = _1907;
        _2454 = _1909;
        _2456 = _2235;
        _2458 = _2237;
        _2460 = _2239;
    }
    float _4368 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4379 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4390 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    uint _2480 = _233 + 6u;
    float _2488 = _672 / cbSceneParam._m0[86u].x;
    float _2489 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _2563 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _2564 = _2563 / _607;
        float _2575 = _2564 * _657;
        float _2576 = _658 * _2564;
        float _2577 = (-0.0) - _2576;
        float _2578 = _2564 * _659;
        float _2580 = (cbSceneParam._m0[77u].w * _2577) / _2563;
        float _2581 = _2580 + cbSceneParam._m0[79u].w;
        float _2582 = cbSceneParam._m0[79u].w - _2576;
        float _2588 = sqrt(((_2575 * _2575) + (_2576 * _2576)) + (_2578 * _2578));
        float _2591 = (1.0 - (cbSceneParam._m0[77u].w / _2563)) * _2588;
        float _2596 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2598 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2751;
        if (abs((_2577 - _2580) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2751 = ((((_2581 > 0.0) ? exp2(_2596 * _2581) : (2.0 - exp2(_2598 * _2581))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2591;
        }
        else
        {
            float _2711 = 1.0 / cbSceneParam._m0[80u].x;
            float _2712 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : max(_2581, _2582));
            float _2713 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : min(_2581, _2582));
            float _2722 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : min(_2712, 0.0));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            _2751 = ((abs(_2588 / _2577) * cbSceneParam._m0[80u].y) * ((((_2722 - _2723) * 2.0) - ((exp2(_2596 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0)))) - exp2(_2596 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0))))) * _2711)) - ((exp2(_2598 * _2722) - exp2(_2598 * _2723)) * _2711))) + (_2591 * cbSceneParam._m0[80u].z);
        }
        vec4 _2753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2762 = exp2((_2751 * (-1.44269502162933349609375)) * (1.0 - _2753.w));
        float _2763 = log2(_2762);
        float _2779 = log2(_2508);
        _2600 = (exp2(_2779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].x)) * _2753.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2602 = (exp2(_2779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].y)) * _2753.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2604 = (exp2(_2779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].z)) * _2753.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2606 = _2762 * _2508;
    }
    else
    {
        _2600 = _2505;
        _2602 = _2506;
        _2604 = _2507;
        _2606 = _2508;
    }
    float _2618 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2619 = _2618 == 3.0;
    float _2620 = log2(_2606);
    float _2627 = exp2(_2620 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2450 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _738))) + ((_2456 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2628 = exp2(_2620 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2452 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _738))) + ((_2458 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2629 = exp2(_2620 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2454 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _738))) + ((_2460 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2638 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2638 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.y = _2638 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.z = _2638 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.w = cbInstanceData._m0[_2480].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
}


