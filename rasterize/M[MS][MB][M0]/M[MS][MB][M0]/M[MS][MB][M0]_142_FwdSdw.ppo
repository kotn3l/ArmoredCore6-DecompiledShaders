#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1177;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3764 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _374) + _470;
    float _482 = ((((_449.x - _468) * _374) + _468) * 2.0) + (-1.0);
    float _483 = ((((_449.y - _469) * _374) + _469) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3775 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _521 = (_482 + ((((_422.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _522 = (_483 + ((((_422.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _525 = fma(_489, _226, fma(_522, _233, _521 * _219));
    float _528 = fma(_489, _227, fma(_522, _234, _521 * _220));
    float _531 = fma(_489, _228, fma(_522, _235, _521 * _221));
    float _535 = inversesqrt(dot(vec3(_525, _528, _531), vec3(_525, _528, _531)));
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _573 = (cbMtdParam._m0[19u].x + dot(vec4(_535 * _525, _535 * _528, _535 * _531, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_566 - _567) * cbMtdParam._m0[24u].z) + _567) * cbMtdParam._m0[21u].z);
    float _3786 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _581 = (_574 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _582 = (_574 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _583 = (_574 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    float _588 = (((_422.z - _479) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _479;
    float _592 = ((_509.z - _588) * cbMtdParam._m0[19u].w) + _588;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _612 = (_605.x * 2.0) + (-1.0);
    float _613 = (_605.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3797 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _622 = ((_605.z - _592) * _574) + _592;
    float _632 = ((sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) - _489) * _574) + _489;
    float _635 = (((_612 - _521) * _574) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _636 = (((_613 - _522) * _574) + _522) + (cbMtdParam._m0[21u].x * _522);
    float _641 = cbMtdParam._m0[22u].x + _509.w;
    float _644 = fma(_632, _226, fma(_636, _233, _635 * _219));
    float _647 = fma(_632, _227, fma(_636, _234, _635 * _220));
    float _650 = fma(_632, _228, fma(_636, _235, _635 * _221));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3808 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _658 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3830 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3841 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3852 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    float _743 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _744 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _765 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _768 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _782 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_782].z;
    float _3863 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    vec4 _802 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _743, cbSceneParam._m0[86u].y * _744));
    float _806 = ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_5.w) * _802.x;
    float _807 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _810 = _807 * 2.0;
    float _814 = (_810 * _655) - _735;
    float _815 = (_810 * _656) - _736;
    float _816 = (_810 * _657) - _737;
    float _820 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _3896 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _822 = sqrt(_658);
    float _835 = exp2((_822 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_822 * 3.0));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1176;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _901 = fma(_875, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867));
        float _905 = fma(_875, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867));
        float _909 = fma(_875, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867));
        float _934 = _867 + _655;
        float _935 = _871 + _656;
        float _936 = _875 + _657;
        float _946 = fma(_936, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934)) - _901;
        float _947 = fma(_936, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934)) - _905;
        float _948 = fma(_936, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934)) - _909;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_901 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_905 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[34u].z) + ((((((_909 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1004 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_970.x + (-0.5));
        float _1006 = _1004 * (_970.y + (-0.5));
        float _1007 = _1004 * (_970.z + (-0.5));
        float _1014 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_977.x + (-0.5));
        float _1016 = _1014 * (_977.y + (-0.5));
        float _1017 = _1014 * (_977.z + (-0.5));
        float _1024 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_984.x + (-0.5));
        float _1026 = _1024 * (_984.y + (-0.5));
        float _1027 = _1024 * (_984.z + (-0.5));
        float _1034 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_991.x + (-0.5));
        float _1036 = _1034 * (_991.y + (-0.5));
        float _1037 = _1034 * (_991.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1058 = (dot(vec3(_655, _656, _657), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1068 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3944 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1070 + 1.0))) + _1075) * _1038;
        float _1085 = _1006 * 0.5;
        float _1086 = _1016 * 0.5;
        float _1087 = _1026 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_655, _656, _657), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3977 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1112 + 1.0))) + _1117) * _1039;
        float _1127 = _1007 * 0.5;
        float _1128 = _1017 * 0.5;
        float _1129 = _1027 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_655, _656, _657), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _4010 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1154 + 1.0))) + _1159) * _1040;
        _1176 = _1007;
        _1178 = _1006;
        _1179 = _1005;
        _1180 = _1017;
        _1181 = _1016;
        _1182 = _1015;
        _1183 = _1027;
        _1184 = _1026;
        _1185 = _1025;
        _1186 = _1040;
        _1187 = _1039;
        _1188 = _1038;
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _1177;
        _1178 = _1177;
        _1179 = _1177;
        _1180 = _1177;
        _1181 = _1177;
        _1182 = _1177;
        _1183 = _1177;
        _1184 = _1177;
        _1185 = _1177;
        _1186 = _1177;
        _1187 = _1177;
        _1188 = _1177;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_875, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867));
        float _1220 = fma(_875, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867));
        float _1224 = fma(_875, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867));
        float _1247 = _867 + _655;
        float _1248 = _871 + _656;
        float _1249 = _875 + _657;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_655, _656, _657), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4073 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_655, _656, _657), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4106 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_655, _656, _657), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4139 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1177;
        _1486 = _1177;
        _1487 = _1177;
        _1488 = _1177;
        _1489 = _1177;
        _1490 = _1177;
        _1491 = _1177;
        _1492 = _1177;
        _1493 = _1177;
        _1494 = _1177;
        _1495 = _1177;
        _1496 = _1177;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1190)) + _1190;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1191)) + _1191;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _814 * 0.5;
    float _1554 = _815 * 0.5;
    float _1555 = _816 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1176, _1180, _1183, _1186));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_875, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_875, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_875, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_816, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814));
        float _1683 = fma(_816, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814));
        float _1686 = fma(_816, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1714 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1683 > 0.0)
        {
            _1883 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2178;
        if (_1686 > 0.0)
        {
            _2178 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2178 = frontier_phi_35_30_ladder;
        }
        float _2180 = isnan(_1883) ? _1714 : (isnan(_1714) ? _1883 : min(_1714, _1883));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1680) + _1669;
        float _2186 = (_2181 * _1683) + _1673;
        float _2187 = (_2181 * _1686) + _1677;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_13_35_ladder = _2332.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2332.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2332.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_13_35_ladder_2;
        _1704 = frontier_phi_13_35_ladder_1;
        _1706 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_814, _815, _816), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_875, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_875, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_875, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_816, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814));
        float _1778 = fma(_816, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814));
        float _1781 = fma(_816, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814));
        float _1888;
        if (_1775 > 0.0)
        {
            _1888 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2205;
        if (_1778 > 0.0)
        {
            _2205 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2205 = frontier_phi_37_32_ladder;
        }
        float _2532;
        if (_1781 > 0.0)
        {
            _2532 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2532 = frontier_phi_47_44_ladder;
        }
        float _2534 = isnan(_2205) ? _1888 : (isnan(_1888) ? _2205 : min(_1888, _2205));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1775) + _1764;
        float _2540 = (_2535 * _1778) + _1768;
        float _2541 = (_2535 * _1781) + _1772;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_22_47_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_22_47_ladder_2;
        _1802 = frontier_phi_22_47_ladder_1;
        _1804 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_814, _815, _816), _1711);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _835) * ((_822 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_835 * _822)) * _806;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    float _1862 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1875 = _1862 / _1874;
    float _1876 = _1866 / _1874;
    float _1877 = _1870 / _1874;
    float _2024;
    float _2025;
    float _2026;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1904 = ((uint(_1877 > cbSceneParam._m0[59u].y) + uint(_1877 > cbSceneParam._m0[59u].x)) + uint(_1877 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1905 = _1904 + 43u;
        uint _1913 = _1904 + 44u;
        uint _1921 = _1904 + 45u;
        uint _1929 = _1904 + 46u;
        float _1940 = fma(_1874, cbSceneParam._m0[_1905].w, fma(_1870, cbSceneParam._m0[_1905].z, fma(_1866, cbSceneParam._m0[_1905].y, _1862 * cbSceneParam._m0[_1905].x)));
        float _1944 = fma(_1874, cbSceneParam._m0[_1913].w, fma(_1870, cbSceneParam._m0[_1913].z, fma(_1866, cbSceneParam._m0[_1913].y, _1862 * cbSceneParam._m0[_1913].x)));
        float _1952 = fma(_1874, cbSceneParam._m0[_1929].w, fma(_1870, cbSceneParam._m0[_1929].z, fma(_1866, cbSceneParam._m0[_1929].y, _1862 * cbSceneParam._m0[_1929].x)));
        float _1957 = cbSceneParam._m0[33u].z * _1952;
        float _1959 = cbSceneParam._m0[33u].w * _1952;
        float _1962 = fma(_1874, cbSceneParam._m0[_1921].w, fma(_1870, cbSceneParam._m0[_1921].z, fma(_1866, cbSceneParam._m0[_1921].y, _1862 * cbSceneParam._m0[_1921].x))) / _1952;
        float _2010 = (cbSceneParam._m0[33u].x - sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877))) * cbSceneParam._m0[33u].y;
        float _4265 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2017 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 + _1940) / _1952, (_1959 + _1944) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 + _1940) / _1952, (_1944 - _1957) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 - _1957) / _1952, (_1944 - _1959) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 - _1959) / _1952, (_1957 + _1944) / _1952), _1962), 0.0)).x), vec4(0.25)));
        _2024 = 1.0 - (_2017 * cbSceneParam._m0[34u].x);
        _2025 = 1.0 - (_2017 * cbSceneParam._m0[34u].y);
        _2026 = 1.0 - (_2017 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2024 = 1.0;
        _2025 = 1.0;
        _2026 = 1.0;
    }
    float _2090;
    float _2092;
    float _2094;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2078 = fma(_1874, cbSceneParam._m0[63u].w, fma(_1870, cbSceneParam._m0[63u].z, fma(_1866, cbSceneParam._m0[63u].y, _1862 * cbSceneParam._m0[63u].x)));
        float _2079 = fma(_1874, cbSceneParam._m0[60u].w, fma(_1870, cbSceneParam._m0[60u].z, fma(_1866, cbSceneParam._m0[60u].y, _1862 * cbSceneParam._m0[60u].x))) / _2078;
        float _2080 = fma(_1874, cbSceneParam._m0[61u].w, fma(_1870, cbSceneParam._m0[61u].z, fma(_1866, cbSceneParam._m0[61u].y, _1862 * cbSceneParam._m0[61u].x))) / _2078;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2079 >= cbSceneParam._m0[64u].x) && (_2080 >= cbSceneParam._m0[64u].y)) && (_2079 <= cbSceneParam._m0[64u].z)) && (_2080 <= cbSceneParam._m0[64u].w))
        {
            float _2218 = fma(_1874, cbSceneParam._m0[62u].w, fma(_1870, cbSceneParam._m0[62u].z, fma(_1866, cbSceneParam._m0[62u].y, _1862 * cbSceneParam._m0[62u].x))) / _2078;
            float _2222 = isnan(cbSceneParam._m0[41u].w) ? _2218 : (isnan(_2218) ? cbSceneParam._m0[41u].w : max(_2218, cbSceneParam._m0[41u].w));
            float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877))) * cbSceneParam._m0[33u].y;
            float _4281 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
            float _2272 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2079, cbSceneParam._m0[33u].w + _2080), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2079, _2080 - cbSceneParam._m0[33u].z), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2079 - cbSceneParam._m0[33u].z, _2080 - cbSceneParam._m0[33u].w), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2079 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2080), _2222), 0.0)).x), vec4(0.25)));
            float _2276 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
            float _2277 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
            float _2278 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
            frontier_phi_34_33_ladder_1 = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
            frontier_phi_34_33_ladder_2 = isnan(_2276) ? _2024 : (isnan(_2024) ? _2276 : min(_2024, _2276));
        }
        else
        {
            frontier_phi_34_33_ladder = _2026;
            frontier_phi_34_33_ladder_1 = _2025;
            frontier_phi_34_33_ladder_2 = _2024;
        }
        _2090 = frontier_phi_34_33_ladder_2;
        _2092 = frontier_phi_34_33_ladder_1;
        _2094 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2090 = _2024;
        _2092 = _2025;
        _2094 = _2026;
    }
    uvec4 _2099 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2101 = _2099.x * 14u;
    uint _2102 = _2101 + 13u;
    float _2109 = _806 + (-1.0);
    float _2114 = (cbLight._m0[_2102].x * _2109) + 1.0;
    float _2115 = (cbLight._m0[_2102].y * _2109) + 1.0;
    float _2116 = (cbLight._m0[_2102].z * _2109) + 1.0;
    float _2117 = (cbLight._m0[_2102].w * _2109) + 1.0;
    uint _2118 = _2101 + 5u;
    float _2124 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2128 = _2101 + 4u;
    float _2137 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2141 = _2101 | 1u;
    float _2152 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_655, _656, _657));
    float _2155 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_655, _656, _657));
    float _4317 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _4328 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2160 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * 0.3183098733425140380859375;
    float _2162 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.3183098733425140380859375;
    float _2169 = ((cbLight._m0[_2118].x * _2124) * _2162) + (((cbLight._m0[_2128].x * _2090) * _2137) * _2160);
    float _2170 = ((_2124 * cbLight._m0[_2118].y) * _2162) + (((cbLight._m0[_2128].y * _2092) * _2137) * _2160);
    float _2171 = ((_2124 * cbLight._m0[_2118].z) * _2162) + (((cbLight._m0[_2128].z * _2094) * _2137) * _2160);
    uvec4 _2175 = floatBitsToUint(cbLight._m0[_2101 + 12u]);
    bool _2177 = _2175.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2177)
    {
        _2279 = _2169;
        _2281 = _2170;
        _2283 = _2171;
    }
    else
    {
        uint _2287 = _2101 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2101 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4339 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2306 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2169;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2170;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2171;
    }
    bool _2286 = _2175.y == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2286)
    {
        _2341 = _2279;
        _2343 = _2281;
        _2345 = _2283;
    }
    else
    {
        uint _2503 = _2101 + 7u;
        float _2519 = (dot(vec3(cbLight._m0[_2101 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2520 = _2519 * _2519;
        float _4355 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2521 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2522 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2341 = (((cbLight._m0[_2503].x * 0.3183098733425140380859375) * _2521) * _2522) + _2279;
        _2343 = (((cbLight._m0[_2503].y * 0.3183098733425140380859375) * _2521) * _2522) + _2281;
        _2345 = (((cbLight._m0[_2503].z * 0.3183098733425140380859375) * _2521) * _2522) + _2283;
    }
    uint _2348 = _2101 + 8u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _658) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2101].x + _735;
    float _2364 = cbLight._m0[_2101].y + _736;
    float _2365 = cbLight._m0[_2101].z + _737;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2101].xyz));
    float _4371 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2377 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2378 = dot(vec3(_655, _656, _657), vec3(_2370, _2371, _2372));
    float _4393 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2370, _2371, _2372));
    float _4404 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2362 * _2362;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2402 = 1.0 - _2362;
    float _2413 = (0.5 / (((_2377 * ((_2376 * _2402) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2402) + _2362) * _2376))) * _2376;
    float _4415 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    uint _2429 = _2101 + 9u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _658) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2141].x + _735;
    float _2443 = cbLight._m0[_2141].y + _736;
    float _2444 = cbLight._m0[_2141].z + _737;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2141].xyz));
    float _4426 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2456 = dot(vec3(_655, _656, _657), vec3(_2449, _2450, _2451));
    float _4437 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2460 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2449, _2450, _2451));
    float _4448 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2464 = _2441 * _2441;
    float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
    float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2478 = 1.0 - _2441;
    float _2488 = (0.5 / (((_2377 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2478) + _2441) * _2455))) * _2455;
    float _4459 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
    float _2500 = (((_2477 * cbLight._m0[_2429].x) * _2490) * _2124) + ((((cbLight._m0[_2348].x * _2090) * _2401) * _2415) * _2137);
    float _2501 = (((_2477 * cbLight._m0[_2429].y) * _2490) * _2124) + ((((cbLight._m0[_2348].y * _2092) * _2401) * _2415) * _2137);
    float _2502 = (((_2477 * cbLight._m0[_2429].z) * _2490) * _2124) + ((((cbLight._m0[_2348].z * _2094) * _2401) * _2415) * _2137);
    float _2558;
    float _2560;
    float _2562;
    if (_2177)
    {
        _2558 = _2500;
        _2560 = _2501;
        _2562 = _2502;
    }
    else
    {
        uint _2564 = _2101 + 2u;
        uint _2568 = _2101 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _658) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _735;
        float _2585 = cbLight._m0[_2564].y + _736;
        float _2586 = cbLight._m0[_2564].z + _737;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2564].xyz));
        float _4470 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2598 = dot(vec3(_655, _656, _657), vec3(_2591, _2592, _2593));
        float _4481 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4492 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2619 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2620 = 1.0 - _2583;
        float _2630 = (0.5 / (((_2377 * ((_2597 * _2620) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2620) + _2583) * _2597))) * _2597;
        float _4503 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2558 = (((_2619 * cbLight._m0[_2568].x) * _2632) * _2633) + _2500;
        _2560 = (((_2619 * cbLight._m0[_2568].y) * _2632) * _2633) + _2501;
        _2562 = (((_2619 * cbLight._m0[_2568].z) * _2632) * _2633) + _2502;
    }
    float _2664;
    float _2666;
    float _2668;
    if (_2286)
    {
        _2664 = _2558;
        _2666 = _2560;
        _2668 = _2562;
    }
    else
    {
        uint _2675 = _2101 + 3u;
        uint _2679 = _2101 + 11u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _658) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _735;
        float _2696 = cbLight._m0[_2675].y + _736;
        float _2697 = cbLight._m0[_2675].z + _737;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2675].xyz));
        float _4519 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2709 = dot(vec3(_655, _656, _657), vec3(_2702, _2703, _2704));
        float _4530 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4541 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2730 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2731 = 1.0 - _2694;
        float _2741 = (0.5 / (((_2377 * ((_2708 * _2731) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2731) + _2694) * _2708))) * _2708;
        float _4552 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2664 = (((_2730 * cbLight._m0[_2679].x) * _2743) * _2744) + _2558;
        _2666 = (((_2730 * cbLight._m0[_2679].y) * _2743) * _2744) + _2560;
        _2668 = (((_2730 * cbLight._m0[_2679].z) * _2743) * _2744) + _2562;
    }
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_2099.y == 0u)
    {
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.x;
        uint _2777 = uint((float(_2765.y) * floor(float(uint(cbSceneParam._m0[85u].y * _744) / _2766))) + floor(float(uint(cbSceneParam._m0[85u].x * _743) / _2766)));
        float _2787 = (log2(_1877 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2788 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        uint _2791 = uint(isnan(14.0) ? _2788 : (isnan(_2788) ? 14.0 : min(_2788, 14.0)));
        uvec4 _2796 = texelFetch(g_lightClusterGridBuffer, int(((_2791 << 2u) + (_2777 << 6u)) >> 2u));
        uint _2797 = _2796.x;
        uint _2798 = _2765.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2798 >> 4u) & 15u)) + 4294967295u) & _2797) == 0u) || ((_2798 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            uint _3028 = 0u;
            uint _3037;
            bool _3038;
            for (;;)
            {
                _3037 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                _3038 = _3037 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3038)
                {
                    frontier_phi_66_pred = _3027;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3037;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3028 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _1875;
                        float _3213 = _3172.y - _1876;
                        float _3214 = _3172.z - _1877;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_762, _765, _768), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4578 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _1875;
                        float _3248 = (-0.0) - _1876;
                        float _3249 = (-0.0) - _1877;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3263 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _822;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_762, _765, _768), vec3(_3254, _3255, _3256));
                        float _4594 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3288 = dot(vec3(_762, _765, _768), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4605 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3232 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3222) + _3297;
                        float _4616 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4627 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3295 * _3295) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3081 = (_3243 * _3191.x) + _3149;
                        _3082 = (_3243 * _3191.y) + _3150;
                        _3083 = (_3243 * _3191.z) + _3151;
                        _3078 = (_3323 * _3208.x) + _3146;
                        _3079 = (_3323 * _3208.y) + _3147;
                        _3080 = (_3323 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_66_pred = _3083;
                    frontier_phi_66_pred_1 = _3082;
                    frontier_phi_66_pred_2 = _3081;
                    frontier_phi_66_pred_3 = _3080;
                    frontier_phi_66_pred_4 = _3079;
                    frontier_phi_66_pred_5 = _3078;
                }
                _2888 = frontier_phi_66_pred;
                _2886 = frontier_phi_66_pred_1;
                _2884 = frontier_phi_66_pred_2;
                _2882 = frontier_phi_66_pred_3;
                _2880 = frontier_phi_66_pred_4;
                _2878 = frontier_phi_66_pred_5;
                uint _3029 = _3028 + 1u;
                if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3022 = _2878;
                    _3023 = _2880;
                    _3024 = _2882;
                    _3025 = _2884;
                    _3026 = _2886;
                    _3027 = _2888;
                    _3028 = _3029;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((4294967295u << _2894) & _2797) == 0u)
        {
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
            _3000 = _2887;
        }
        else
        {
            float _3015 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
            float _3016 = _3015 * _1875;
            float _3017 = _3015 * _1876;
            float _3018 = _3015 * _1877;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3129 = _2877;
                float _3130 = _2879;
                float _3131 = _2881;
                float _3132 = _2883;
                float _3133 = _2885;
                float _3134 = _2887;
                uint _3135 = _2894;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3145)
                    {
                        frontier_phi_72_pred = _3134;
                        frontier_phi_72_pred_1 = _3133;
                        frontier_phi_72_pred_2 = _3132;
                        frontier_phi_72_pred_3 = _3131;
                        frontier_phi_72_pred_4 = _3130;
                        frontier_phi_72_pred_5 = _3129;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        uint _3347 = _3144;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3416;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3358 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3403 = (_3358 * 40u) + 16u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3358 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3358 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3358 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_1877, _3465.z, fma(_1876, _3465.y, _3465.x * _1875)) + _3465.w;
                            _3478 = !((fma(_1877, _3446.z, fma(_1876, _3446.y, _3446.x * _1875)) + _3446.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3373.x - _1875;
                                float _3506 = _3373.y - _1876;
                                float _3507 = _3373.z - _1877;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3374 * _3374));
                                float _4638 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3523 = sqrt(_3508) * _3389.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_762, _765, _768))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_1877, _3416.z, fma(_1876, _3416.y, _3416.x * _1875)) + _3416.w) / _3477;
                                float _3537 = (fma(_1877, _3431.z, fma(_1876, _3431.y, _3431.x * _1875)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4654 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _822;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _3016;
                                float _3567 = _3513 - _3017;
                                float _3568 = _3514 - _3018;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3016, (-0.0) - _3017, (-0.0) - _3018));
                                float _4665 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3580 = dot(vec3(_762, _765, _768), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4676 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_762, _765, _768), vec3(_3512, _3513, _3514))) + _3589;
                                float _4687 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4698 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3543 * _3389.y;
                                frontier_phi_78_pred_1 = _3543 * _3389.x;
                                frontier_phi_78_pred_2 = _3617 * _3401.z;
                                frontier_phi_78_pred_3 = _3617 * _3401.y;
                                frontier_phi_78_pred_4 = _3617 * _3401.x;
                                frontier_phi_78_pred_5 = _3543 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_78_pred;
                            _3624 = frontier_phi_78_pred_1;
                            _3623 = frontier_phi_78_pred_2;
                            _3622 = frontier_phi_78_pred_3;
                            _3621 = frontier_phi_78_pred_4;
                            _3626 = frontier_phi_78_pred_5;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3333;
                        frontier_phi_72_pred_1 = _3332;
                        frontier_phi_72_pred_2 = _3331;
                        frontier_phi_72_pred_3 = _3330;
                        frontier_phi_72_pred_4 = _3329;
                        frontier_phi_72_pred_5 = _3328;
                    }
                    _3001 = frontier_phi_72_pred;
                    _2999 = frontier_phi_72_pred_1;
                    _2997 = frontier_phi_72_pred_2;
                    _2995 = frontier_phi_72_pred_3;
                    _2993 = frontier_phi_72_pred_4;
                    _2991 = frontier_phi_72_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2991;
                        _3130 = _2993;
                        _3131 = _2995;
                        _3132 = _2997;
                        _3133 = _2999;
                        _3134 = _3001;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3001;
                frontier_phi_60_61_ladder_1 = _2999;
                frontier_phi_60_61_ladder_2 = _2995;
                frontier_phi_60_61_ladder_3 = _2993;
                frontier_phi_60_61_ladder_4 = _2991;
                frontier_phi_60_61_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_60_61_ladder = _2887;
                frontier_phi_60_61_ladder_1 = _2885;
                frontier_phi_60_61_ladder_2 = _2881;
                frontier_phi_60_61_ladder_3 = _2879;
                frontier_phi_60_61_ladder_4 = _2877;
                frontier_phi_60_61_ladder_5 = _2883;
            }
            _2990 = frontier_phi_60_61_ladder_4;
            _2992 = frontier_phi_60_61_ladder_3;
            _2994 = frontier_phi_60_61_ladder_2;
            _2996 = frontier_phi_60_61_ladder_5;
            _2998 = frontier_phi_60_61_ladder_1;
            _3000 = frontier_phi_60_61_ladder;
        }
        float _3005 = isnan(1.0) ? _806 : (isnan(_806) ? 1.0 : min(_806, 1.0));
        _2810 = (_3005 * _2996) + _2341;
        _2812 = (_3005 * _2998) + _2343;
        _2814 = (_3005 * _3000) + _2345;
        _2816 = ((_2990 * 0.039999999105930328369140625) * _3005) + _2664;
        _2818 = ((_2992 * 0.039999999105930328369140625) * _3005) + _2666;
        _2820 = ((_2994 * 0.039999999105930328369140625) * _3005) + _2668;
    }
    else
    {
        _2810 = _2341;
        _2812 = _2343;
        _2814 = _2345;
        _2816 = _2664;
        _2818 = _2666;
        _2820 = _2668;
    }
    float _4714 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4725 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4736 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    uint _2840 = _238 + 6u;
    float _2848 = _743 / cbSceneParam._m0[86u].x;
    float _2849 = _744 / cbSceneParam._m0[86u].y;
    vec4 _2863 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2865 = _2863.x;
    float _2866 = _2863.y;
    float _2867 = _2863.z;
    float _2868 = _2863.w;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2903 = _2902 / _676;
        float _2914 = _2903 * _728;
        float _2915 = _729 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2918 = _2903 * _730;
        float _2920 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2921 = _2920 + cbSceneParam._m0[79u].w;
        float _2922 = cbSceneParam._m0[79u].w - _2915;
        float _2928 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2918 * _2918));
        float _2931 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2928;
        float _2936 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2938 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2916 - _2920) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2921 > 0.0) ? exp2(_2936 * _2921) : (2.0 - exp2(_2938 * _2921))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2931;
        }
        else
        {
            float _3051 = 1.0 / cbSceneParam._m0[80u].x;
            float _3052 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : max(_2921, _2922));
            float _3053 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : min(_2921, _2922));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            _3091 = ((abs(_2928 / _2916) * cbSceneParam._m0[80u].y) * ((((_3062 - _3063) * 2.0) - ((exp2(_2936 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0)))) - exp2(_2936 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))))) * _3051)) - ((exp2(_2938 * _3062) - exp2(_2938 * _3063)) * _3051))) + (_2931 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2868);
        _2940 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2865;
        _2942 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2866;
        _2944 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2867;
        _2946 = _3102 * _2868;
    }
    else
    {
        _2940 = _2865;
        _2942 = _2866;
        _2944 = _2867;
        _2946 = _2868;
    }
    float _2958 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2959 = _2958 == 3.0;
    float _2960 = log2(_2946);
    float _2967 = exp2(_2960 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2810 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _806))) + ((_2816 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2968 = exp2(_2960 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2812 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _806))) + ((_2818 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2960 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2814 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _806))) + ((_2820 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2978 = (_2958 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2978 * (_2959 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.y = _2978 * (_2959 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.z = _2978 * (_2959 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.w = cbInstanceData._m0[_2840].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2840].w;
}


