#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3482 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3493 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3504 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _392 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_382 - _392) * cbMtdParam._m0[24u].x) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3515 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _417 = (_410 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _418 = (_410 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _419 = (_410 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _279) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _280) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].x) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3526 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    float _496 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _490;
    float _499 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _491;
    float _502 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _492;
    float _509 = ((_490 - _496) * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) + _496;
    float _510 = ((_491 - _499) * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) + _499;
    float _511 = ((_492 - _502) * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) + _502;
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    float _574 = ((_546.x - _565) * _410) + _565;
    float _575 = ((_546.y - _566) * _410) + _566;
    float _576 = ((_546.z - _567) * _410) + _567;
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _279) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _280) + cbTextureTilingScale._m0[2u].w));
    float _601 = ((_588.z - _576) * _483) + _576;
    float _604 = ((((_588.x - _574) * _483) + _574) * 2.0) + (-1.0);
    float _605 = ((((_588.y - _575) * _483) + _575) * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3537 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _611 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _616 = _604 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_523.x * 2.0) + (-1.0)));
    float _617 = _605 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_523.y * 2.0) + (-1.0)));
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _637 = (((_523.z - _601) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _601;
    float _639 = cbMtdParam._m0[22u].x + _630.w;
    float _642 = fma(_611, _226 * NORMAL.x, fma(_617, _233 * TANGENT.x, (_219 * _211) * _616));
    float _645 = fma(_611, _226 * NORMAL.y, fma(_617, _233 * TANGENT.y, (_219 * _212) * _616));
    float _648 = fma(_611, _226 * NORMAL.z, fma(_617, _233 * TANGENT.z, (_219 * _213) * _616));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3548 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _656 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3570 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3581 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3592 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _763 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _766 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _780 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3603 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _804 = ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _653) - _733;
    float _813 = (_808 * _654) - _734;
    float _814 = (_808 * _655) - _735;
    float _818 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _3636 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_656);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _903 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _907 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _653;
        float _933 = _869 + _654;
        float _934 = _873 + _655;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_653, _654, _655), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3684 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_653, _654, _655), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3717 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_653, _654, _655), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3750 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1217 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1221 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1244 = _865 + _653;
        float _1245 = _869 + _654;
        float _1246 = _873 + _655;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_653, _654, _655), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3813 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_653, _654, _655), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3846 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_653, _654, _655), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3879 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1175;
        _1483 = _1175;
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1187)) + _1187;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1188)) + _1188;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1189)) + _1189;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _812 * 0.5;
    float _1551 = _813 * 0.5;
    float _1552 = _814 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1682 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1685 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1713 = frontier_phi_14_12_ladder;
        }
        float _1915;
        if (_1682 > 0.0)
        {
            _1915 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1915 = frontier_phi_23_19_ladder;
        }
        float _2158;
        if (_1685 > 0.0)
        {
            _2158 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2158 = frontier_phi_35_30_ladder;
        }
        float _2160 = isnan(_1915) ? _1713 : (isnan(_1713) ? _1915 : min(_1713, _1915));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1679) + _1668;
        float _2166 = (_2161 * _1682) + _1672;
        float _2167 = (_2161 * _1685) + _1676;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_13_35_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_13_35_ladder_2;
        _1703 = frontier_phi_13_35_ladder_1;
        _1705 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1619);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1779 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1782 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1920;
        if (_1776 > 0.0)
        {
            _1920 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1920 = frontier_phi_25_21_ladder;
        }
        float _2185;
        if (_1779 > 0.0)
        {
            _2185 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2185 = frontier_phi_37_32_ladder;
        }
        float _2390;
        if (_1782 > 0.0)
        {
            _2390 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2390 = frontier_phi_46_43_ladder;
        }
        float _2392 = isnan(_2185) ? _1920 : (isnan(_1920) ? _2185 : min(_1920, _2185));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1776) + _1765;
        float _2398 = (_2393 * _1779) + _1769;
        float _2399 = (_2393 * _1782) + _1773;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_22_46_ladder = _2598.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2598.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2598.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_22_46_ladder_2;
        _1803 = frontier_phi_22_46_ladder_1;
        _1805 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1710);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1817 = ((((1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _820)) * _804;
    float _1818 = _1817 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1819 = _1817 * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1820 = _1817 * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1849 = _804 + (-1.0);
    float _1854 = (cbLight._m0[_1842].x * _1849) + 1.0;
    float _1855 = (cbLight._m0[_1842].y * _1849) + 1.0;
    float _1856 = (cbLight._m0[_1842].z * _1849) + 1.0;
    float _1857 = (cbLight._m0[_1842].w * _1849) + 1.0;
    uint _1858 = _1841 + 5u;
    float _1864 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1868 = _1841 + 4u;
    float _1874 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1878 = _1841 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_653, _654, _655));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_653, _654, _655));
    float _4015 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4026 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1858].x * _1864) * _1899) + ((cbLight._m0[_1868].x * _1874) * _1897);
    float _1907 = ((_1864 * cbLight._m0[_1858].y) * _1899) + ((_1874 * cbLight._m0[_1868].y) * _1897);
    float _1908 = ((_1864 * cbLight._m0[_1858].z) * _1899) + ((_1874 * cbLight._m0[_1868].z) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1841 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1914)
    {
        _1925 = _1906;
        _1927 = _1907;
        _1929 = _1908;
    }
    else
    {
        uint _1933 = _1841 + 6u;
        float _1949 = (dot(vec3(cbLight._m0[_1841 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _4037 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1952 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1925 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1906;
        _1927 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1907;
        _1929 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1908;
    }
    bool _1932 = _1912.y == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1932)
    {
        _1970 = _1925;
        _1972 = _1927;
        _1974 = _1929;
    }
    else
    {
        uint _2129 = _1841 + 7u;
        float _2145 = (dot(vec3(cbLight._m0[_1841 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4053 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2148 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1970 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _1925;
        _1972 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _1927;
        _1974 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _1929;
    }
    uint _1977 = _1841 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _656) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1841].x + _733;
    float _1993 = cbLight._m0[_1841].y + _734;
    float _1994 = cbLight._m0[_1841].z + _735;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1841].xyz));
    float _4069 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2006 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2007 = dot(vec3(_653, _654, _655), vec3(_1999, _2000, _2001));
    float _4091 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_1999, _2000, _2001));
    float _4102 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2030 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2031 = 1.0 - _1991;
    float _2042 = (0.5 / (((_2006 * ((_2005 * _2031) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2031) + _1991) * _2005))) * _2005;
    float _4113 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2055 = _1841 + 9u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _656) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1878].x + _733;
    float _2069 = cbLight._m0[_1878].y + _734;
    float _2070 = cbLight._m0[_1878].z + _735;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1878].xyz));
    float _4124 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2082 = dot(vec3(_653, _654, _655), vec3(_2075, _2076, _2077));
    float _4135 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2075, _2076, _2077));
    float _4146 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2067 * _2067;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2104 = 1.0 - _2067;
    float _2114 = (0.5 / (((_2006 * ((_2081 * _2104) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2104) + _2067) * _2081))) * _2081;
    float _4157 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    float _2126 = (((_2103 * cbLight._m0[_2055].x) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].x) * _2044) * _1874);
    float _2127 = (((_2103 * cbLight._m0[_2055].y) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].y) * _2044) * _1874);
    float _2128 = (((_2103 * cbLight._m0[_2055].z) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].z) * _2044) * _1874);
    float _2190;
    float _2192;
    float _2194;
    if (_1914)
    {
        _2190 = _2126;
        _2192 = _2127;
        _2194 = _2128;
    }
    else
    {
        uint _2196 = _1841 + 2u;
        uint _2200 = _1841 + 10u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _656) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _733;
        float _2217 = cbLight._m0[_2196].y + _734;
        float _2218 = cbLight._m0[_2196].z + _735;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2196].xyz));
        float _4168 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2230 = dot(vec3(_653, _654, _655), vec3(_2223, _2224, _2225));
        float _4179 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4190 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = 1.0 - _2215;
        float _2262 = (0.5 / (((_2006 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2252) + _2215) * _2229))) * _2229;
        float _4201 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2190 = (((_2251 * cbLight._m0[_2200].x) * _2264) * _2265) + _2126;
        _2192 = (((_2251 * cbLight._m0[_2200].y) * _2264) * _2265) + _2127;
        _2194 = (((_2251 * cbLight._m0[_2200].z) * _2264) * _2265) + _2128;
    }
    float _2300;
    float _2302;
    float _2304;
    if (_1932)
    {
        _2300 = _2190;
        _2302 = _2192;
        _2304 = _2194;
    }
    else
    {
        uint _2311 = _1841 + 3u;
        uint _2315 = _1841 + 11u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _656) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _733;
        float _2332 = cbLight._m0[_2311].y + _734;
        float _2333 = cbLight._m0[_2311].z + _735;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2311].xyz));
        float _4217 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2345 = dot(vec3(_653, _654, _655), vec3(_2338, _2339, _2340));
        float _4228 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4239 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2367 = 1.0 - _2330;
        float _2377 = (0.5 / (((_2006 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2367) + _2330) * _2344))) * _2344;
        float _4250 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2300 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2380) + _2190;
        _2302 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2380) + _2192;
        _2304 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2380) + _2194;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1839.y == 0u)
    {
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2455;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2455;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2455;
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2471)));
        float _2492 = (log2(_2458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
        }
        else
        {
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            uint _2754 = 0u;
            uint _2763;
            bool _2764;
            for (;;)
            {
                _2763 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                _2764 = _2763 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2764)
                {
                    frontier_phi_61_pred = _2748;
                    frontier_phi_61_pred_1 = _2753;
                    frontier_phi_61_pred_2 = _2752;
                    frontier_phi_61_pred_3 = _2751;
                    frontier_phi_61_pred_4 = _2750;
                    frontier_phi_61_pred_5 = _2749;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2763;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2754 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _2456;
                        float _2939 = _2898.y - _2457;
                        float _2940 = _2898.z - _2458;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_760, _763, _766), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4276 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _2456;
                        float _2974 = (-0.0) - _2457;
                        float _2975 = (-0.0) - _2458;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2990 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2991 = 1.0 - _820;
                        float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                        float _2999 = _2998 * _2998;
                        float _3000 = _2999 * _2999;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3011 = dot(vec3(_760, _763, _766), vec3(_2980, _2981, _2982));
                        float _4292 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _3015 = dot(vec3(_760, _763, _766), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                        float _4303 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                        float _3023 = _2958 * _2999;
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _2948) + _3024;
                        float _4314 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3029 = 1.0 - _2999;
                        float _3039 = (0.5 / (((_3028 * ((_3014 * _3029) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2999) * _3014))) * _3028;
                        float _4325 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3050 = (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) / ((_3022 * _3022) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2807 = (_2969 * _2917.x) + _2875;
                        _2808 = (_2969 * _2917.y) + _2876;
                        _2809 = (_2969 * _2917.z) + _2877;
                        _2804 = (_3050 * _2934.x) + _2872;
                        _2805 = (_3050 * _2934.y) + _2873;
                        _2806 = (_3050 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_61_pred = _2804;
                    frontier_phi_61_pred_1 = _2809;
                    frontier_phi_61_pred_2 = _2808;
                    frontier_phi_61_pred_3 = _2807;
                    frontier_phi_61_pred_4 = _2806;
                    frontier_phi_61_pred_5 = _2805;
                }
                _2604 = frontier_phi_61_pred;
                _2614 = frontier_phi_61_pred_1;
                _2612 = frontier_phi_61_pred_2;
                _2610 = frontier_phi_61_pred_3;
                _2608 = frontier_phi_61_pred_4;
                _2606 = frontier_phi_61_pred_5;
                uint _2755 = _2754 + 1u;
                if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2748 = _2604;
                    _2749 = _2606;
                    _2750 = _2608;
                    _2751 = _2610;
                    _2752 = _2612;
                    _2753 = _2614;
                    _2754 = _2755;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
        }
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.z;
        uint _2620 = (_2618 >> 8u) & 15u;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((4294967295u << _2620) & _2502) == 0u)
        {
            _2716 = _2603;
            _2718 = _2605;
            _2720 = _2607;
            _2722 = _2609;
            _2724 = _2611;
            _2726 = _2613;
        }
        else
        {
            float _2741 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
            float _2742 = _2741 * _2456;
            float _2743 = _2741 * _2457;
            float _2744 = _2741 * _2458;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2620 < ((_2618 >> 12u) & 15u))
            {
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2855 = _2603;
                float _2856 = _2605;
                float _2857 = _2607;
                float _2858 = _2609;
                float _2859 = _2611;
                float _2860 = _2613;
                uint _2861 = _2620;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2871)
                    {
                        frontier_phi_67_pred = _2858;
                        frontier_phi_67_pred_1 = _2859;
                        frontier_phi_67_pred_2 = _2860;
                        frontier_phi_67_pred_3 = _2857;
                        frontier_phi_67_pred_4 = _2856;
                        frontier_phi_67_pred_5 = _2855;
                    }
                    else
                    {
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        uint _3074 = _2870;
                        uint _3075;
                        vec4 _3100;
                        float _3101;
                        vec4 _3116;
                        vec3 _3128;
                        vec4 _3143;
                        vec4 _3158;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3085 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3074));
                            _3075 = (_3074 + 4294967295u) & _3074;
                            uint _3087 = _3085 * 40u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3101 = _3100.w;
                            uint _3103 = (_3085 * 40u) + 4u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3118 = (_3085 * 40u) + 8u;
                            _3128 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x));
                            uint _3130 = (_3085 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3085 * 40u) + 20u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3085 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3085 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_2458, _3192.z, fma(_2457, _3192.y, _3192.x * _2456)) + _3192.w;
                            _3205 = !((fma(_2458, _3173.z, fma(_2457, _3173.y, _3173.x * _2456)) + _3173.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3100.x - _2456;
                                float _3233 = _3100.y - _2457;
                                float _3234 = _3100.z - _2458;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3101 * _3101));
                                float _4336 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3250 = sqrt(_3235) * _3116.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_760, _763, _766))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_2458, _3143.z, fma(_2457, _3143.y, _3143.x * _2456)) + _3143.w) / _3204;
                                float _3264 = (fma(_2458, _3158.z, fma(_2457, _3158.y, _3158.x * _2456)) + _3158.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4352 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _820;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2742;
                                float _3294 = _3240 - _2743;
                                float _3295 = _3241 - _2744;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2742, (-0.0) - _2743, (-0.0) - _2744));
                                float _4363 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3307 = dot(vec3(_760, _763, _766), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4374 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_760, _763, _766), vec3(_3239, _3240, _3241))) + _3316;
                                float _4385 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4396 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3344 * _3128.x;
                                frontier_phi_73_pred_1 = _3344 * _3128.y;
                                frontier_phi_73_pred_2 = _3270 * _3116.z;
                                frontier_phi_73_pred_3 = _3270 * _3116.y;
                                frontier_phi_73_pred_4 = _3270 * _3116.x;
                                frontier_phi_73_pred_5 = _3344 * _3128.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3348 = frontier_phi_73_pred;
                            _3349 = frontier_phi_73_pred_1;
                            _3353 = frontier_phi_73_pred_2;
                            _3352 = frontier_phi_73_pred_3;
                            _3351 = frontier_phi_73_pred_4;
                            _3350 = frontier_phi_73_pred_5;
                            _3058 = _3351 + _3071;
                            _3059 = _3352 + _3072;
                            _3060 = _3353 + _3073;
                            _3055 = _3348 + _3068;
                            _3056 = _3349 + _3069;
                            _3057 = _3350 + _3070;
                            if (_3075 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3075;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3058;
                        frontier_phi_67_pred_1 = _3059;
                        frontier_phi_67_pred_2 = _3060;
                        frontier_phi_67_pred_3 = _3057;
                        frontier_phi_67_pred_4 = _3056;
                        frontier_phi_67_pred_5 = _3055;
                    }
                    _2723 = frontier_phi_67_pred;
                    _2725 = frontier_phi_67_pred_1;
                    _2727 = frontier_phi_67_pred_2;
                    _2721 = frontier_phi_67_pred_3;
                    _2719 = frontier_phi_67_pred_4;
                    _2717 = frontier_phi_67_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2717;
                        _2856 = _2719;
                        _2857 = _2721;
                        _2858 = _2723;
                        _2859 = _2725;
                        _2860 = _2727;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2725;
                frontier_phi_55_56_ladder_1 = _2727;
                frontier_phi_55_56_ladder_2 = _2723;
                frontier_phi_55_56_ladder_3 = _2721;
                frontier_phi_55_56_ladder_4 = _2719;
                frontier_phi_55_56_ladder_5 = _2717;
            }
            else
            {
                frontier_phi_55_56_ladder = _2611;
                frontier_phi_55_56_ladder_1 = _2613;
                frontier_phi_55_56_ladder_2 = _2609;
                frontier_phi_55_56_ladder_3 = _2607;
                frontier_phi_55_56_ladder_4 = _2605;
                frontier_phi_55_56_ladder_5 = _2603;
            }
            _2716 = frontier_phi_55_56_ladder_5;
            _2718 = frontier_phi_55_56_ladder_4;
            _2720 = frontier_phi_55_56_ladder_3;
            _2722 = frontier_phi_55_56_ladder_2;
            _2724 = frontier_phi_55_56_ladder;
            _2726 = frontier_phi_55_56_ladder_1;
        }
        float _2731 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2515 = (_2731 * _2722) + _1970;
        _2517 = (_2731 * _2724) + _1972;
        _2519 = (_2731 * _2726) + _1974;
        _2521 = ((_2716 * 0.039999999105930328369140625) * _2731) + _2300;
        _2523 = ((_2718 * 0.039999999105930328369140625) * _2731) + _2302;
        _2525 = ((_2720 * 0.039999999105930328369140625) * _2731) + _2304;
    }
    else
    {
        _2515 = _1970;
        _2517 = _1972;
        _2519 = _1974;
        _2521 = _2300;
        _2523 = _2302;
        _2525 = _2304;
    }
    float _4412 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4423 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4434 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    uint _2545 = _260 + 6u;
    float _2553 = _741 / cbSceneParam._m0[86u].x;
    float _2554 = _742 / cbSceneParam._m0[86u].y;
    vec4 _2568 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2570 = _2568.x;
    float _2571 = _2568.y;
    float _2572 = _2568.z;
    float _2573 = _2568.w;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2628 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2629 = _2628 / _674;
        float _2640 = _2629 * _726;
        float _2641 = _727 * _2629;
        float _2642 = (-0.0) - _2641;
        float _2644 = _2629 * _728;
        float _2646 = (cbSceneParam._m0[77u].w * _2642) / _2628;
        float _2647 = _2646 + cbSceneParam._m0[79u].w;
        float _2648 = cbSceneParam._m0[79u].w - _2641;
        float _2654 = sqrt(((_2640 * _2640) + (_2641 * _2641)) + (_2644 * _2644));
        float _2657 = (1.0 - (cbSceneParam._m0[77u].w / _2628)) * _2654;
        float _2662 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2664 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2642 - _2646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2647 > 0.0) ? exp2(_2662 * _2647) : (2.0 - exp2(_2664 * _2647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2657;
        }
        else
        {
            float _2777 = 1.0 / cbSceneParam._m0[80u].x;
            float _2778 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : max(_2647, _2648));
            float _2779 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : min(_2647, _2648));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            _2817 = ((abs(_2654 / _2642) * cbSceneParam._m0[80u].y) * ((((_2788 - _2789) * 2.0) - ((exp2(_2662 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)))) - exp2(_2662 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))))) * _2777)) - ((exp2(_2664 * _2788) - exp2(_2664 * _2789)) * _2777))) + (_2657 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2573);
        _2666 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2570;
        _2668 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2571;
        _2670 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2572;
        _2672 = _2828 * _2573;
    }
    else
    {
        _2666 = _2570;
        _2668 = _2571;
        _2670 = _2572;
        _2672 = _2573;
    }
    float _2684 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2685 = _2684 == 3.0;
    float _2686 = log2(_2672);
    float _2693 = exp2(_2686 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2515 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _804))) + ((_2521 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2694 = exp2(_2686 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2517 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _804))) + ((_2523 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2695 = exp2(_2686 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2519 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _804))) + ((_2525 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2704 = (_2684 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2704 * (_2685 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.y = _2704 * (_2685 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.z = _2704 * (_2685 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.w = cbInstanceData._m0[_2545].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2545].w;
}


