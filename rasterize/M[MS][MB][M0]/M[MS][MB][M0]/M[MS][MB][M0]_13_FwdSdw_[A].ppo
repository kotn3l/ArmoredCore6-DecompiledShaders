#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _984;
float _3632;
float _3633;
float _3634;
float _3635;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _296 = _292.z;
    float _301 = (_292.x * 2.0) + (-1.0);
    float _303 = (_292.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3644 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _329 = _327.x;
    float _330 = 1.0 - _329;
    float _346 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_329 - _330) * cbMtdParam._m0[24u].z) + _330) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3655 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _354 = (_347 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _355 = (_347 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _356 = (_347 * (cbMtdParam._m0[17u].z - _274)) + _274;
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _376 = (_369.x * 2.0) + (-1.0);
    float _377 = (_369.y * 2.0) + (-1.0);
    float _378 = dot(vec2(_376, _377), vec2(_376, _377));
    float _3666 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _386 = (_347 * (_369.z - _296)) + _296;
    float _398 = (((_376 - _301) + (cbMtdParam._m0[21u].x * _301)) * _347) + _301;
    float _399 = (((_377 - _303) + (cbMtdParam._m0[21u].x * _303)) * _347) + _303;
    float _400 = (_347 * (sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) - _310)) + _310;
    float _405 = cbMtdParam._m0[22u].x + _292.w;
    float _408 = fma(_400, _213 * NORMAL.x, fma(_399, _220 * TANGENT.x, (_206 * _198) * _398));
    float _411 = fma(_400, _213 * NORMAL.y, fma(_399, _220 * TANGENT.y, (_206 * _199) * _398));
    float _414 = fma(_400, _213 * NORMAL.z, fma(_399, _220 * TANGENT.z, (_206 * _200) * _398));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    float _419 = _418 * _408;
    float _420 = _418 * _411;
    float _421 = _418 * _414;
    float _3677 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _422 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3699 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3710 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3721 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _440 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _491 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _481);
    float _492 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _481);
    float _493 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _481);
    float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
    float _498 = _491 * _497;
    float _499 = _492 * _497;
    float _500 = _493 * _497;
    vec4 _505 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _507 = _505.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _664 = sqrt(((_491 * _491) + (_492 * _492)) + (_493 * _493));
        float _670 = (cbMatDynParam._m0[5u].x * _664) + cbMatDynParam._m0[5u].y;
        float _3732 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _675 = (cbMatDynParam._m0[5u].z * _664) + cbMatDynParam._m0[5u].w;
        float _3743 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) - _671)) + _671) < ((_507 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _540 = fma(_421, cbSceneParam._m0[5u].z, fma(_420, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _419));
    float _543 = fma(_421, cbSceneParam._m0[6u].z, fma(_420, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _419));
    float _546 = fma(_421, cbSceneParam._m0[7u].z, fma(_420, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _419));
    uint _559 = _226 + 9u;
    uint _560 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3754 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    vec4 _580 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _584 = ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * TEXCOORD_5.w) * _580.x;
    float _585 = dot(vec3(_419, _420, _421), vec3(_498, _499, _500));
    float _588 = _585 * 2.0;
    float _592 = (_588 * _419) - _498;
    float _593 = (_588 * _420) - _499;
    float _594 = (_588 * _421) - _500;
    float _598 = abs(dot(vec3(_498, _499, _500), vec3(_419, _420, _421)));
    float _3787 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _600 = sqrt(_422);
    float _613 = exp2((_600 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_600 * 3.0));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _983;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _708 = fma(_653, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645));
        float _712 = fma(_653, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645));
        float _716 = fma(_653, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645));
        float _741 = _645 + _419;
        float _742 = _649 + _420;
        float _743 = _653 + _421;
        float _753 = fma(_743, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) - _708;
        float _754 = fma(_743, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) - _712;
        float _755 = fma(_743, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) - _716;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_708 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_712 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[34u].z) + ((((((_716 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _811 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_777.x + (-0.5));
        float _813 = _811 * (_777.y + (-0.5));
        float _814 = _811 * (_777.z + (-0.5));
        float _821 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_784.x + (-0.5));
        float _823 = _821 * (_784.y + (-0.5));
        float _824 = _821 * (_784.z + (-0.5));
        float _831 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_791.x + (-0.5));
        float _833 = _831 * (_791.y + (-0.5));
        float _834 = _831 * (_791.z + (-0.5));
        float _841 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_798.x + (-0.5));
        float _843 = _841 * (_798.y + (-0.5));
        float _844 = _841 * (_798.z + (-0.5));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = _812 * 0.5;
        float _849 = _822 * 0.5;
        float _850 = _832 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _865 = (dot(vec3(_419, _420, _421), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _875 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3835 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_877 + 1.0))) + _882) * _845;
        float _892 = _813 * 0.5;
        float _893 = _823 * 0.5;
        float _894 = _833 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_419, _420, _421), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3868 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_919 + 1.0))) + _924) * _846;
        float _934 = _814 * 0.5;
        float _935 = _824 * 0.5;
        float _936 = _834 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_419, _420, _421), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3901 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_961 + 1.0))) + _966) * _847;
        _983 = _814;
        _985 = _813;
        _986 = _812;
        _987 = _824;
        _988 = _823;
        _989 = _822;
        _990 = _834;
        _991 = _833;
        _992 = _832;
        _993 = _847;
        _994 = _846;
        _995 = _845;
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
    }
    else
    {
        _983 = _984;
        _985 = _984;
        _986 = _984;
        _987 = _984;
        _988 = _984;
        _989 = _984;
        _990 = _984;
        _991 = _984;
        _992 = _984;
        _993 = _984;
        _994 = _984;
        _995 = _984;
        _996 = 0.0;
        _997 = 0.0;
        _998 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_653, cbModelParam._m0[30u].z, fma(_649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _645));
        float _1030 = fma(_653, cbModelParam._m0[31u].z, fma(_649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _645));
        float _1034 = fma(_653, cbModelParam._m0[32u].z, fma(_649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _645));
        float _1057 = _645 + _419;
        float _1058 = _649 + _420;
        float _1059 = _653 + _421;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_419, _420, _421), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3964 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_419, _420, _421), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3997 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_419, _420, _421), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4030 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _984;
        _1296 = _984;
        _1297 = _984;
        _1298 = _984;
        _1299 = _984;
        _1300 = _984;
        _1301 = _984;
        _1302 = _984;
        _1303 = _984;
        _1304 = _984;
        _1305 = _984;
        _1306 = _984;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _996)) + _996;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _997)) + _997;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _998)) + _998;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _592 * 0.5;
    float _1364 = _593 * 0.5;
    float _1365 = _594 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_983, _987, _990, _993));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _988, _991, _994));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_986, _989, _992, _995));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _422);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1480 = fma(_653, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645)) + cbModelParam._m0[13u].w;
        float _1484 = fma(_653, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645)) + cbModelParam._m0[14u].w;
        float _1488 = fma(_653, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645)) + cbModelParam._m0[15u].w;
        float _1491 = fma(_594, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592));
        float _1494 = fma(_594, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592));
        float _1497 = fma(_594, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592));
        float _1525;
        if (_1491 > 0.0)
        {
            _1525 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1525 = frontier_phi_17_15_ladder;
        }
        float _1697;
        if (_1494 > 0.0)
        {
            _1697 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1697 = frontier_phi_26_22_ladder;
        }
        float _1993;
        if (_1497 > 0.0)
        {
            _1993 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1993 = frontier_phi_38_33_ladder;
        }
        float _1995 = isnan(_1697) ? _1525 : (isnan(_1525) ? _1697 : min(_1525, _1697));
        float _1996 = isnan(_1993) ? _1995 : (isnan(_1995) ? _1993 : min(_1995, _1993));
        float _2000 = (_1996 * _1491) + _1480;
        float _2001 = (_1996 * _1494) + _1484;
        float _2002 = (_1996 * _1497) + _1488;
        float _2003 = _1996 * 9.9999997473787516355514526367188e-05;
        float _2005 = (-1.0) - _2003;
        float _2007 = _2003 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2002 > _2007) || ((_2002 < _2005) || ((_2001 > _2007) || ((_2001 < _2005) || ((_2000 < _2005) || (_2000 > _2007))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2002, cbModelParam._m0[9u].z, fma(_2001, cbModelParam._m0[9u].y, _2000 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2002, cbModelParam._m0[10u].z, fma(_2001, cbModelParam._m0[10u].y, _2000 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2002, cbModelParam._m0[11u].z, fma(_2001, cbModelParam._m0[11u].y, _2000 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_16_38_ladder = _2147.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2147.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2147.x * cbModelParam._m0[1u].y;
        }
        _1513 = frontier_phi_16_38_ladder_2;
        _1515 = frontier_phi_16_38_ladder_1;
        _1517 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_592, _593, _594), _1432);
        _1513 = _1501.x * cbModelParam._m0[1u].y;
        _1515 = _1501.y * cbModelParam._m0[1u].y;
        _1517 = _1501.z * cbModelParam._m0[1u].y;
    }
    float _1521 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _422);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1521 : min(cbModelParam._m0[25u].w, _1521));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1577 = fma(_653, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645)) + cbModelParam._m0[21u].w;
        float _1581 = fma(_653, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645)) + cbModelParam._m0[22u].w;
        float _1585 = fma(_653, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645)) + cbModelParam._m0[23u].w;
        float _1588 = fma(_594, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592));
        float _1591 = fma(_594, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592));
        float _1594 = fma(_594, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592));
        float _1702;
        if (_1588 > 0.0)
        {
            _1702 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1702 = frontier_phi_28_24_ladder;
        }
        float _2020;
        if (_1591 > 0.0)
        {
            _2020 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2020 = frontier_phi_40_35_ladder;
        }
        float _2347;
        if (_1594 > 0.0)
        {
            _2347 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2347 = frontier_phi_50_47_ladder;
        }
        float _2349 = isnan(_2020) ? _1702 : (isnan(_1702) ? _2020 : min(_1702, _2020));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1588) + _1577;
        float _2355 = (_2350 * _1591) + _1581;
        float _2356 = (_2350 * _1594) + _1585;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1522);
            frontier_phi_25_50_ladder = _2474.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2474.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2474.x * cbModelParam._m0[1u].z;
        }
        _1613 = frontier_phi_25_50_ladder_2;
        _1615 = frontier_phi_25_50_ladder_1;
        _1617 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_592, _593, _594), _1522);
        _1613 = _1597.x * cbModelParam._m0[1u].z;
        _1615 = _1597.y * cbModelParam._m0[1u].z;
        _1617 = _1597.z * cbModelParam._m0[1u].z;
    }
    float _1629 = ((((1.0 - _613) * ((_600 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_613 * _600)) * _584;
    float _1630 = _1629 * ((cbModelParam._m0[1u].w * (_1613 - _1513)) + _1513);
    float _1631 = _1629 * ((cbModelParam._m0[1u].w * (_1615 - _1515)) + _1515);
    float _1632 = _1629 * ((cbModelParam._m0[1u].w * (_1617 - _1517)) + _1517);
    float _1635 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1630 * cbSceneParam._m0[91u].x));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1689 = _1676 / _1688;
    float _1690 = _1680 / _1688;
    float _1691 = _1684 / _1688;
    float _1838;
    float _1839;
    float _1840;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1718 = ((uint(_1691 > cbSceneParam._m0[59u].y) + uint(_1691 > cbSceneParam._m0[59u].x)) + uint(_1691 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1719 = _1718 + 43u;
        uint _1727 = _1718 + 44u;
        uint _1735 = _1718 + 45u;
        uint _1743 = _1718 + 46u;
        float _1754 = fma(_1688, cbSceneParam._m0[_1719].w, fma(_1684, cbSceneParam._m0[_1719].z, fma(_1680, cbSceneParam._m0[_1719].y, _1676 * cbSceneParam._m0[_1719].x)));
        float _1758 = fma(_1688, cbSceneParam._m0[_1727].w, fma(_1684, cbSceneParam._m0[_1727].z, fma(_1680, cbSceneParam._m0[_1727].y, _1676 * cbSceneParam._m0[_1727].x)));
        float _1766 = fma(_1688, cbSceneParam._m0[_1743].w, fma(_1684, cbSceneParam._m0[_1743].z, fma(_1680, cbSceneParam._m0[_1743].y, _1676 * cbSceneParam._m0[_1743].x)));
        float _1771 = cbSceneParam._m0[33u].z * _1766;
        float _1773 = cbSceneParam._m0[33u].w * _1766;
        float _1776 = fma(_1688, cbSceneParam._m0[_1735].w, fma(_1684, cbSceneParam._m0[_1735].z, fma(_1680, cbSceneParam._m0[_1735].y, _1676 * cbSceneParam._m0[_1735].x))) / _1766;
        float _1824 = (cbSceneParam._m0[33u].x - sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691))) * cbSceneParam._m0[33u].y;
        float _4156 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1831 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 + _1754) / _1766, (_1773 + _1758) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1773 + _1754) / _1766, (_1758 - _1771) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1754 - _1771) / _1766, (_1758 - _1773) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1754 - _1773) / _1766, (_1771 + _1758) / _1766), _1776), 0.0)).x), vec4(0.25)));
        _1838 = 1.0 - (_1831 * cbSceneParam._m0[34u].x);
        _1839 = 1.0 - (_1831 * cbSceneParam._m0[34u].y);
        _1840 = 1.0 - (_1831 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1838 = 1.0;
        _1839 = 1.0;
        _1840 = 1.0;
    }
    float _1904;
    float _1906;
    float _1908;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1892 = fma(_1688, cbSceneParam._m0[63u].w, fma(_1684, cbSceneParam._m0[63u].z, fma(_1680, cbSceneParam._m0[63u].y, _1676 * cbSceneParam._m0[63u].x)));
        float _1893 = fma(_1688, cbSceneParam._m0[60u].w, fma(_1684, cbSceneParam._m0[60u].z, fma(_1680, cbSceneParam._m0[60u].y, _1676 * cbSceneParam._m0[60u].x))) / _1892;
        float _1894 = fma(_1688, cbSceneParam._m0[61u].w, fma(_1684, cbSceneParam._m0[61u].z, fma(_1680, cbSceneParam._m0[61u].y, _1676 * cbSceneParam._m0[61u].x))) / _1892;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1893 >= cbSceneParam._m0[64u].x) && (_1894 >= cbSceneParam._m0[64u].y)) && (_1893 <= cbSceneParam._m0[64u].z)) && (_1894 <= cbSceneParam._m0[64u].w))
        {
            float _2033 = fma(_1688, cbSceneParam._m0[62u].w, fma(_1684, cbSceneParam._m0[62u].z, fma(_1680, cbSceneParam._m0[62u].y, _1676 * cbSceneParam._m0[62u].x))) / _1892;
            float _2037 = isnan(cbSceneParam._m0[41u].w) ? _2033 : (isnan(_2033) ? cbSceneParam._m0[41u].w : max(_2033, cbSceneParam._m0[41u].w));
            float _2080 = (cbSceneParam._m0[33u].x - sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691))) * cbSceneParam._m0[33u].y;
            float _4172 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
            float _2087 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1893, cbSceneParam._m0[33u].w + _1894), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1893, _1894 - cbSceneParam._m0[33u].z), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1893 - cbSceneParam._m0[33u].z, _1894 - cbSceneParam._m0[33u].w), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1893 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1894), _2037), 0.0)).x), vec4(0.25)));
            float _2091 = 1.0 - (_2087 * cbSceneParam._m0[34u].x);
            float _2092 = 1.0 - (_2087 * cbSceneParam._m0[34u].y);
            float _2093 = 1.0 - (_2087 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2093) ? _1840 : (isnan(_1840) ? _2093 : min(_1840, _2093));
            frontier_phi_37_36_ladder_1 = isnan(_2092) ? _1839 : (isnan(_1839) ? _2092 : min(_1839, _2092));
            frontier_phi_37_36_ladder_2 = isnan(_2091) ? _1838 : (isnan(_1838) ? _2091 : min(_1838, _2091));
        }
        else
        {
            frontier_phi_37_36_ladder = _1840;
            frontier_phi_37_36_ladder_1 = _1839;
            frontier_phi_37_36_ladder_2 = _1838;
        }
        _1904 = frontier_phi_37_36_ladder_2;
        _1906 = frontier_phi_37_36_ladder_1;
        _1908 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1904 = _1838;
        _1906 = _1839;
        _1908 = _1840;
    }
    uvec4 _1913 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1915 = _1913.x * 14u;
    uint _1916 = _1915 + 13u;
    float _1923 = _584 + (-1.0);
    float _1928 = (cbLight._m0[_1916].x * _1923) + 1.0;
    float _1929 = (cbLight._m0[_1916].y * _1923) + 1.0;
    float _1930 = (cbLight._m0[_1916].z * _1923) + 1.0;
    float _1931 = (cbLight._m0[_1916].w * _1923) + 1.0;
    uint _1932 = _1915 + 5u;
    float _1938 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1942 = _1915 + 4u;
    float _1952 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1956 = _1915 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_419, _420, _421));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_419, _420, _421));
    float _4208 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4219 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1932].x * _1938) * _1977) + (((cbLight._m0[_1942].x * _1904) * _1952) * _1975);
    float _1985 = ((_1938 * cbLight._m0[_1932].y) * _1977) + (((cbLight._m0[_1942].y * _1906) * _1952) * _1975);
    float _1986 = ((_1938 * cbLight._m0[_1932].z) * _1977) + (((cbLight._m0[_1942].z * _1908) * _1952) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1915 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_1992)
    {
        _2094 = _1984;
        _2096 = _1985;
        _2098 = _1986;
    }
    else
    {
        uint _2102 = _1915 + 6u;
        float _2118 = (dot(vec3(cbLight._m0[_1915 + 2u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4230 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2121 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2094 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1984;
        _2096 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1985;
        _2098 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1986;
    }
    bool _2101 = _1990.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2101)
    {
        _2156 = _2094;
        _2158 = _2096;
        _2160 = _2098;
    }
    else
    {
        uint _2318 = _1915 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_1915 + 3u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4246 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2337 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2156 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2094;
        _2158 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2096;
        _2160 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2098;
    }
    uint _2163 = _1915 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _422) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1915].x + _498;
    float _2179 = cbLight._m0[_1915].y + _499;
    float _2180 = cbLight._m0[_1915].z + _500;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1915].xyz));
    float _4262 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2192 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2193 = dot(vec3(_419, _420, _421), vec3(_2185, _2186, _2187));
    float _4284 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2185, _2186, _2187));
    float _4295 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2217 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2192 * ((_2191 * _2217) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2217) + _2177) * _2191))) * _2191;
    float _4306 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2244 = _1915 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _422) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_1956].x + _498;
    float _2258 = cbLight._m0[_1956].y + _499;
    float _2259 = cbLight._m0[_1956].z + _500;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1956].xyz));
    float _4317 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2271 = dot(vec3(_419, _420, _421), vec3(_2264, _2265, _2266));
    float _4328 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2264, _2265, _2266));
    float _4339 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2293 = 1.0 - _2256;
    float _2303 = (0.5 / (((_2192 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2293) + _2256) * _2270))) * _2270;
    float _4350 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2315 = (((_2292 * cbLight._m0[_2244].x) * _2305) * _1938) + ((((cbLight._m0[_2163].x * _1904) * _2216) * _2230) * _1952);
    float _2316 = (((_2292 * cbLight._m0[_2244].y) * _2305) * _1938) + ((((cbLight._m0[_2163].y * _1906) * _2216) * _2230) * _1952);
    float _2317 = (((_2292 * cbLight._m0[_2244].z) * _2305) * _1938) + ((((cbLight._m0[_2163].z * _1908) * _2216) * _2230) * _1952);
    float _2373;
    float _2375;
    float _2377;
    if (_1992)
    {
        _2373 = _2315;
        _2375 = _2316;
        _2377 = _2317;
    }
    else
    {
        uint _2379 = _1915 + 2u;
        uint _2383 = _1915 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _422) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _498;
        float _2400 = cbLight._m0[_2379].y + _499;
        float _2401 = cbLight._m0[_2379].z + _500;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2379].xyz));
        float _4361 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2413 = dot(vec3(_419, _420, _421), vec3(_2406, _2407, _2408));
        float _4372 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4383 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2435 = 1.0 - _2398;
        float _2445 = (0.5 / (((_2192 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2435) + _2398) * _2412))) * _2412;
        float _4394 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2373 = (((_2434 * cbLight._m0[_2383].x) * _2447) * _2448) + _2315;
        _2375 = (((_2434 * cbLight._m0[_2383].y) * _2447) * _2448) + _2316;
        _2377 = (((_2434 * cbLight._m0[_2383].z) * _2447) * _2448) + _2317;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2101)
    {
        _2479 = _2373;
        _2481 = _2375;
        _2483 = _2377;
    }
    else
    {
        uint _2490 = _1915 + 3u;
        uint _2494 = _1915 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _422) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _498;
        float _2511 = cbLight._m0[_2490].y + _499;
        float _2512 = cbLight._m0[_2490].z + _500;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2490].xyz));
        float _4410 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2524 = dot(vec3(_419, _420, _421), vec3(_2517, _2518, _2519));
        float _4421 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4432 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2192 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2546) + _2509) * _2523))) * _2523;
        float _4443 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2479 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2373;
        _2481 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2375;
        _2483 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2377;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1913.y == 0u)
    {
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.x;
        uint _2592 = uint((float(_2580.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _2581))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _2581)));
        float _2602 = (log2(_1691 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        uint _2606 = uint(isnan(14.0) ? _2603 : (isnan(_2603) ? 14.0 : min(_2603, 14.0)));
        uvec4 _2611 = texelFetch(g_lightClusterGridBuffer, int(((_2606 << 2u) + (_2592 << 6u)) >> 2u));
        uint _2612 = _2611.x;
        uint _2613 = _2580.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2613 >> 4u) & 15u)) + 4294967295u) & _2612) == 0u) || ((_2613 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2861)
                {
                    frontier_phi_71_pred = _2850;
                    frontier_phi_71_pred_1 = _2849;
                    frontier_phi_71_pred_2 = _2848;
                    frontier_phi_71_pred_3 = _2847;
                    frontier_phi_71_pred_4 = _2846;
                    frontier_phi_71_pred_5 = _2845;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2860;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2851 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _1689;
                        float _3057 = _3016.y - _1690;
                        float _3058 = _3016.z - _1691;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_540, _543, _546), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4469 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3076 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3066) + _3077;
                        float _3083 = _3073 * _3073;
                        float _3087 = ((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3072) / ((_3083 * 0.699999988079071044921875) + 1.0);
                        float _3091 = (-0.0) - _1689;
                        float _3092 = (-0.0) - _1690;
                        float _3093 = (-0.0) - _1691;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3107 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _600;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3098 + _3063;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_540, _543, _546), vec3(_3098, _3099, _3100));
                        float _4485 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3132 = dot(vec3(_540, _543, _546), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4496 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3076 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3066) + _3141;
                        float _4507 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4518 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3139 * _3139) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2920 = (_3087 * _3035.x) + _2993;
                        _2921 = (_3087 * _3035.y) + _2994;
                        _2922 = (_3087 * _3035.z) + _2995;
                        _2917 = (_3167 * _3052.x) + _2990;
                        _2918 = (_3167 * _3052.y) + _2991;
                        _2919 = (_3167 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_71_pred = _2922;
                    frontier_phi_71_pred_1 = _2921;
                    frontier_phi_71_pred_2 = _2920;
                    frontier_phi_71_pred_3 = _2919;
                    frontier_phi_71_pred_4 = _2918;
                    frontier_phi_71_pred_5 = _2917;
                }
                _2703 = frontier_phi_71_pred;
                _2701 = frontier_phi_71_pred_1;
                _2699 = frontier_phi_71_pred_2;
                _2697 = frontier_phi_71_pred_3;
                _2695 = frontier_phi_71_pred_4;
                _2693 = frontier_phi_71_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2693;
                    _2846 = _2695;
                    _2847 = _2697;
                    _2848 = _2699;
                    _2849 = _2701;
                    _2850 = _2703;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2709) & _2612) == 0u)
        {
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
            float _2839 = _2838 * _1689;
            float _2840 = _2838 * _1690;
            float _2841 = _2838 * _1691;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2973 = _2692;
                float _2974 = _2694;
                float _2975 = _2696;
                float _2976 = _2698;
                float _2977 = _2700;
                float _2978 = _2702;
                uint _2979 = _2709;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2989)
                    {
                        frontier_phi_82_pred = _2978;
                        frontier_phi_82_pred_1 = _2977;
                        frontier_phi_82_pred_2 = _2976;
                        frontier_phi_82_pred_3 = _2975;
                        frontier_phi_82_pred_4 = _2974;
                        frontier_phi_82_pred_5 = _2973;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3194 = _2973;
                        float _3195 = _2974;
                        float _3196 = _2975;
                        float _3197 = _2976;
                        float _3198 = _2977;
                        float _3199 = _2978;
                        uint _3200 = _2988;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3270;
                        vec4 _3286;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3211 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3257 = (_3211 * 40u) + 16u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3273 = (_3211 * 40u) + 20u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3211 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3211 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_1691, _3320.z, fma(_1690, _3320.y, _3320.x * _1689)) + _3320.w;
                            _3333 = !((fma(_1691, _3301.z, fma(_1690, _3301.y, _3301.x * _1689)) + _3301.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3333)
                            {
                                float _3360 = _3226.x - _1689;
                                float _3361 = _3226.y - _1690;
                                float _3362 = _3226.z - _1691;
                                float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                                float _3366 = inversesqrt(_3363);
                                float _3367 = _3366 * _3360;
                                float _3368 = _3366 * _3361;
                                float _3369 = _3366 * _3362;
                                float _3373 = 1.0 - (_3363 / (_3227 * _3227));
                                float _4529 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3378 = sqrt(_3363) * _3242.w;
                                float _3380 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                                float _3381 = _3380 * _3380;
                                float _3384 = ((1.0 - _3381) * dot(vec3(_3367, _3368, _3369), vec3(_540, _543, _546))) + _3381;
                                float _3387 = _3378 * _3378;
                                float _3391 = (fma(_1691, _3270.z, fma(_1690, _3270.y, _3270.x * _1689)) + _3270.w) / _3332;
                                float _3392 = (fma(_1691, _3286.z, fma(_1690, _3286.y, _3286.x * _1689)) + _3286.w) / _3332;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4545 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3398 = _3397 * (((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3374) / ((_3387 * 0.699999988079071044921875) + 1.0));
                                float _3410 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                                float _3411 = 1.0 - _600;
                                float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                                float _3419 = _3418 * _3418;
                                float _3420 = _3419 * _3419;
                                float _3421 = _3367 - _2839;
                                float _3422 = _3368 - _2840;
                                float _3423 = _3369 - _2841;
                                float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                                float _3431 = dot(vec3(_540, _543, _546), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4556 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3435 = dot(vec3(_540, _543, _546), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                                float _4567 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                                float _3443 = _3380 * _3419;
                                float _3444 = _3443 * _3443;
                                float _3450 = ((1.0 - _3444) * dot(vec3(_540, _543, _546), vec3(_3367, _3368, _3369))) + _3444;
                                float _4578 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3452 = 1.0 - _3419;
                                float _3462 = (0.5 / (((_3451 * ((_3434 * _3452) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3419) * _3434))) * _3451;
                                float _4589 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3472 = (_3397 * _3374) * (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3442 * _3442) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3398 * _3242.z;
                                frontier_phi_88_pred_1 = _3398 * _3242.y;
                                frontier_phi_88_pred_2 = _3398 * _3242.x;
                                frontier_phi_88_pred_3 = _3472 * _3254.z;
                                frontier_phi_88_pred_4 = _3472 * _3254.y;
                                frontier_phi_88_pred_5 = _3472 * _3254.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3481 = frontier_phi_88_pred;
                            _3480 = frontier_phi_88_pred_1;
                            _3479 = frontier_phi_88_pred_2;
                            _3478 = frontier_phi_88_pred_3;
                            _3477 = frontier_phi_88_pred_4;
                            _3476 = frontier_phi_88_pred_5;
                            _3184 = _3479 + _3197;
                            _3185 = _3480 + _3198;
                            _3186 = _3481 + _3199;
                            _3181 = _3476 + _3194;
                            _3182 = _3477 + _3195;
                            _3183 = _3478 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3186;
                        frontier_phi_82_pred_1 = _3185;
                        frontier_phi_82_pred_2 = _3184;
                        frontier_phi_82_pred_3 = _3183;
                        frontier_phi_82_pred_4 = _3182;
                        frontier_phi_82_pred_5 = _3181;
                    }
                    _2824 = frontier_phi_82_pred;
                    _2822 = frontier_phi_82_pred_1;
                    _2820 = frontier_phi_82_pred_2;
                    _2818 = frontier_phi_82_pred_3;
                    _2816 = frontier_phi_82_pred_4;
                    _2814 = frontier_phi_82_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2814;
                        _2974 = _2816;
                        _2975 = _2818;
                        _2976 = _2820;
                        _2977 = _2822;
                        _2978 = _2824;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2820;
                frontier_phi_63_64_ladder_1 = _2824;
                frontier_phi_63_64_ladder_2 = _2822;
                frontier_phi_63_64_ladder_3 = _2818;
                frontier_phi_63_64_ladder_4 = _2816;
                frontier_phi_63_64_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_63_64_ladder = _2698;
                frontier_phi_63_64_ladder_1 = _2702;
                frontier_phi_63_64_ladder_2 = _2700;
                frontier_phi_63_64_ladder_3 = _2696;
                frontier_phi_63_64_ladder_4 = _2694;
                frontier_phi_63_64_ladder_5 = _2692;
            }
            _2813 = frontier_phi_63_64_ladder_5;
            _2815 = frontier_phi_63_64_ladder_4;
            _2817 = frontier_phi_63_64_ladder_3;
            _2819 = frontier_phi_63_64_ladder;
            _2821 = frontier_phi_63_64_ladder_2;
            _2823 = frontier_phi_63_64_ladder_1;
        }
        float _2828 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _2625 = (_2828 * _2819) + _2156;
        _2627 = (_2828 * _2821) + _2158;
        _2629 = (_2828 * _2823) + _2160;
        _2631 = ((_2813 * 0.039999999105930328369140625) * _2828) + _2479;
        _2633 = ((_2815 * 0.039999999105930328369140625) * _2828) + _2481;
        _2635 = ((_2817 * 0.039999999105930328369140625) * _2828) + _2483;
    }
    else
    {
        _2625 = _2156;
        _2627 = _2158;
        _2629 = _2160;
        _2631 = _2479;
        _2633 = _2481;
        _2635 = _2483;
    }
    float _4605 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4616 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4627 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _2652 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2625 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _584))) + ((_2631 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2627 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _584))) + ((_2633 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2629 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _584))) + ((_2635 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    uint _2655 = _226 + 6u;
    float _2663 = _519 / cbSceneParam._m0[86u].x;
    float _2664 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _440 : (isnan(_440) ? cbSceneParam._m0[77u].w : min(_440, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_440 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_440) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _440 : min(cbSceneParam._m0[80u].w, _440));
        float _2718 = _2717 / _440;
        float _2729 = _2718 * _491;
        float _2730 = _492 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2733 = _2718 * _493;
        float _2735 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2730;
        float _2743 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2731 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2876 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2930 = ((abs(_2743 / _2731) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2753 * _2885) - exp2(_2753 * _2886)) * _2874))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2683);
        _2755 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2757 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2759 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2761 = _2941 * _2683;
    }
    else
    {
        _2755 = _2680;
        _2757 = _2681;
        _2759 = _2682;
        _2761 = _2683;
    }
    bool _2968;
    vec4 _2771;
    vec4 _2793;
    float _2795;
    float _2799;
    float _2800;
    float _2801;
    float _2802;
    bool _2812;
    for (;;)
    {
        _2771 = cbMatDynParam._m0[0u];
        float _2773 = roundEven(_2771.y);
        bool _2774 = _2773 == 3.0;
        float _2775 = log2(_2761);
        float _2782 = exp2(_2775 * cbSceneParam._m0[78u].x) * _2652;
        float _2783 = exp2(_2775 * cbSceneParam._m0[78u].y) * _2653;
        float _2784 = exp2(_2775 * cbSceneParam._m0[78u].z) * _2654;
        float _2791 = _507 + (-0.5);
        _2793 = cbMtdParam._m0[1u];
        _2795 = _2793.y * _2791;
        float _2798 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2799 = _2798 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
        _2800 = _2798 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
        _2801 = _2798 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
        _2802 = _2791 * 0.999000012874603271484375;
        _2812 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2812)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2802) < 0.5)
            {
                _2968 = true;
                break;
            }
        }
        uint _2909 = _559 + uint(_2771.w);
        if ((cbInstanceData._m0[_2909].w < 1.0) && ((cbInstanceData._m0[_2909].w + _2802) < 0.5))
        {
            _2968 = true;
            break;
        }
        if ((_2795 + 1.0) < _2793.x)
        {
            _2968 = true;
            break;
        }
        _2968 = false;
        break;
    }
    float _3172;
    if (_2968)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2799;
    SV_Target.y = _2800;
    SV_Target.z = _2801;
    SV_Target.w = _3172;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


