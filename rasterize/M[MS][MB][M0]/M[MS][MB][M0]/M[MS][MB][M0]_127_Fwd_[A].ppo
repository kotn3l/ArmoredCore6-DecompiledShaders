#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1237;
float _3595;
float _3596;
float _3597;
float _3598;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3607 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3618 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3629 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _397 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _397) * cbMtdParam._m0[24u].x) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3640 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _422 = (_415 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _423 = (_415 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _424 = (_415 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) + _434;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _415) + _528;
    float _540 = ((((_507.x - _526) * _415) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _415) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3651 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _594 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_580 - _581) * cbMtdParam._m0[24u].z) + _581) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3662 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _602 = (_595 * ((_462.x * cbMtdParam._m0[18u].x) - _441)) + _441;
    float _603 = (_595 * ((_462.y * cbMtdParam._m0[18u].y) - _442)) + _442;
    float _604 = (_595 * ((_462.z * cbMtdParam._m0[18u].z) - _443)) + _443;
    float _609 = (((_482.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3673 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _639 = (_595 * (_622.z - _609)) + _609;
    float _644 = _540 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_482.x * 2.0) + (-1.0)));
    float _645 = _541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_482.y * 2.0) + (-1.0)));
    float _657 = (((_629 - _644) + (cbMtdParam._m0[21u].x * _644)) * _595) + _644;
    float _658 = (((_630 - _645) + (cbMtdParam._m0[21u].x * _645)) * _595) + _645;
    float _659 = (_595 * (sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) - _547)) + _547;
    float _661 = cbMtdParam._m0[22u].x + _560.w;
    float _664 = fma(_659, _232 * NORMAL.x, fma(_658, _239 * TANGENT.x, (_225 * _217) * _657));
    float _667 = fma(_659, _232 * NORMAL.y, fma(_658, _239 * TANGENT.y, (_225 * _218) * _657));
    float _670 = fma(_659, _232 * NORMAL.z, fma(_658, _239 * TANGENT.z, (_225 * _219) * _657));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3684 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _678 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3706 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3717 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3728 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    vec4 _762 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _764 = _762.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _918 = sqrt(((_748 * _748) + (_749 * _749)) + (_750 * _750));
        float _924 = (cbMatDynParam._m0[5u].x * _918) + cbMatDynParam._m0[5u].y;
        float _3739 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _929 = (cbMatDynParam._m0[5u].z * _918) + cbMatDynParam._m0[5u].w;
        float _3750 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) - _925)) + _925) < ((_764 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _794 = fma(_677, cbSceneParam._m0[5u].z, fma(_676, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _675));
    float _797 = fma(_677, cbSceneParam._m0[6u].z, fma(_676, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _675));
    float _800 = fma(_677, cbSceneParam._m0[7u].z, fma(_676, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _675));
    uint _813 = _266 + 9u;
    uint _814 = _813 + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3761 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _838 = ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * TEXCOORD_5.w) * _834.x;
    float _839 = dot(vec3(_675, _676, _677), vec3(_755, _756, _757));
    float _842 = _839 * 2.0;
    float _846 = (_842 * _675) - _755;
    float _847 = (_842 * _676) - _756;
    float _848 = (_842 * _677) - _757;
    float _852 = abs(dot(vec3(_755, _756, _757), vec3(_675, _676, _677)));
    float _3794 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _854 = sqrt(_678);
    float _867 = exp2((_854 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_854 * 3.0));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_907, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899));
        float _965 = fma(_907, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899));
        float _969 = fma(_907, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899));
        float _994 = _899 + _675;
        float _995 = _903 + _676;
        float _996 = _907 + _677;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_675, _676, _677), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3842 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_675, _676, _677), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3875 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_675, _676, _677), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3908 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_907, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899));
        float _1283 = fma(_907, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899));
        float _1287 = fma(_907, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899));
        float _1310 = _899 + _675;
        float _1311 = _903 + _676;
        float _1312 = _907 + _677;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_675, _676, _677), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3971 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_675, _676, _677), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4004 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_675, _676, _677), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4037 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = _1237;
        _1559 = _1237;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _846 * 0.5;
    float _1617 = _847 * 0.5;
    float _1618 = _848 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_907, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_907, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_907, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_848, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846));
        float _1746 = fma(_848, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846));
        float _1749 = fma(_848, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1777 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1746 > 0.0)
        {
            _1977 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2220;
        if (_1749 > 0.0)
        {
            _2220 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2220 = frontier_phi_38_33_ladder;
        }
        float _2222 = isnan(_1977) ? _1777 : (isnan(_1777) ? _1977 : min(_1777, _1977));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1743) + _1732;
        float _2228 = (_2223 * _1746) + _1736;
        float _2229 = (_2223 * _1749) + _1740;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_16_38_ladder_2;
        _1767 = frontier_phi_16_38_ladder_1;
        _1769 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_846, _847, _848), _1685);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_907, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_907, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_907, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_848, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846));
        float _1841 = fma(_848, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846));
        float _1844 = fma(_848, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846));
        float _1982;
        if (_1838 > 0.0)
        {
            _1982 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2247;
        if (_1841 > 0.0)
        {
            _2247 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2247 = frontier_phi_40_35_ladder;
        }
        float _2452;
        if (_1844 > 0.0)
        {
            _2452 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2452 = frontier_phi_49_46_ladder;
        }
        float _2454 = isnan(_2247) ? _1982 : (isnan(_1982) ? _2247 : min(_1982, _2247));
        float _2455 = isnan(_2452) ? _2454 : (isnan(_2454) ? _2452 : min(_2454, _2452));
        float _2459 = (_2455 * _1838) + _1827;
        float _2460 = (_2455 * _1841) + _1831;
        float _2461 = (_2455 * _1844) + _1835;
        float _2462 = _2455 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2462;
        float _2465 = _2462 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2461 > _2465) || ((_2461 < _2463) || ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 < _2463) || (_2459 > _2465))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2461, cbModelParam._m0[17u].z, fma(_2460, cbModelParam._m0[17u].y, _2459 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2461, cbModelParam._m0[18u].z, fma(_2460, cbModelParam._m0[18u].y, _2459 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2461, cbModelParam._m0[19u].z, fma(_2460, cbModelParam._m0[19u].y, _2459 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_25_49_ladder = _2660.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2660.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_49_ladder_2;
        _1865 = frontier_phi_25_49_ladder_1;
        _1867 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_846, _847, _848), _1774);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1879 = ((((1.0 - _867) * ((_854 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_867 * _854)) * _838;
    float _1880 = _1879 * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1881 = _1879 * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1882 = _1879 * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _838 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1936 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1940 = _1903 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_675, _676, _677));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_675, _676, _677));
    float _4173 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4184 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1920].x * _1926) * _1961) + ((cbLight._m0[_1930].x * _1936) * _1959);
    float _1969 = ((_1926 * cbLight._m0[_1920].y) * _1961) + ((_1936 * cbLight._m0[_1930].y) * _1959);
    float _1970 = ((_1926 * cbLight._m0[_1920].z) * _1961) + ((_1936 * cbLight._m0[_1930].z) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1976)
    {
        _1987 = _1968;
        _1989 = _1969;
        _1991 = _1970;
    }
    else
    {
        uint _1995 = _1903 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4195 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2014 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1968;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1969;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1970;
    }
    bool _1994 = _1974.y == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_1994)
    {
        _2032 = _1987;
        _2034 = _1989;
        _2036 = _1991;
    }
    else
    {
        uint _2191 = _1903 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4211 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2210 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2032 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1987;
        _2034 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1989;
        _2036 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1991;
    }
    uint _2039 = _1903 + 8u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _678) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1903].x + _755;
    float _2055 = cbLight._m0[_1903].y + _756;
    float _2056 = cbLight._m0[_1903].z + _757;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1903].xyz));
    float _4227 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2068 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2069 = dot(vec3(_675, _676, _677), vec3(_2061, _2062, _2063));
    float _4249 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2061, _2062, _2063));
    float _4260 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2053 * _2053;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2053;
    float _2104 = (0.5 / (((_2068 * ((_2067 * _2093) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2093) + _2053) * _2067))) * _2067;
    float _4271 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    uint _2117 = _1903 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _678) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1940].x + _755;
    float _2131 = cbLight._m0[_1940].y + _756;
    float _2132 = cbLight._m0[_1940].z + _757;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1940].xyz));
    float _4282 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2144 = dot(vec3(_675, _676, _677), vec3(_2137, _2138, _2139));
    float _4293 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2137, _2138, _2139));
    float _4304 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2129;
    float _2176 = (0.5 / (((_2068 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2166) + _2129) * _2143))) * _2143;
    float _4315 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2188 = (((_2165 * cbLight._m0[_2117].x) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].x) * _2106) * _1936);
    float _2189 = (((_2165 * cbLight._m0[_2117].y) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].y) * _2106) * _1936);
    float _2190 = (((_2165 * cbLight._m0[_2117].z) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].z) * _2106) * _1936);
    float _2252;
    float _2254;
    float _2256;
    if (_1976)
    {
        _2252 = _2188;
        _2254 = _2189;
        _2256 = _2190;
    }
    else
    {
        uint _2258 = _1903 + 2u;
        uint _2262 = _1903 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _678) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _755;
        float _2279 = cbLight._m0[_2258].y + _756;
        float _2280 = cbLight._m0[_2258].z + _757;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2258].xyz));
        float _4326 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2292 = dot(vec3(_675, _676, _677), vec3(_2285, _2286, _2287));
        float _4337 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4348 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_2068 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2314) + _2277) * _2291))) * _2291;
        float _4359 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2252 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2188;
        _2254 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2189;
        _2256 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2190;
    }
    float _2362;
    float _2364;
    float _2366;
    if (_1994)
    {
        _2362 = _2252;
        _2364 = _2254;
        _2366 = _2256;
    }
    else
    {
        uint _2373 = _1903 + 3u;
        uint _2377 = _1903 + 11u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _678) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _755;
        float _2394 = cbLight._m0[_2373].y + _756;
        float _2395 = cbLight._m0[_2373].z + _757;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2373].xyz));
        float _4375 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2407 = dot(vec3(_675, _676, _677), vec3(_2400, _2401, _2402));
        float _4386 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4397 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2068 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2429) + _2392) * _2406))) * _2406;
        float _4408 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2362 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2252;
        _2364 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2254;
        _2366 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2256;
    }
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_1901.y == 0u)
    {
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2517;
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2517;
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2517;
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.x;
        uint _2544 = uint((float(_2532.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2533))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2533)));
        float _2554 = (log2(_2520 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2555 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        uint _2558 = uint(isnan(14.0) ? _2555 : (isnan(_2555) ? 14.0 : min(_2555, 14.0)));
        uvec4 _2563 = texelFetch(g_lightClusterGridBuffer, int(((_2558 << 2u) + (_2544 << 6u)) >> 2u));
        uint _2564 = _2563.x;
        uint _2565 = _2532.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2565 >> 4u) & 15u)) + 4294967295u) & _2564) == 0u) || ((_2565 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            uint _2824 = 0u;
            uint _2833;
            bool _2834;
            for (;;)
            {
                _2833 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                _2834 = _2833 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2834)
                {
                    frontier_phi_66_pred = _2818;
                    frontier_phi_66_pred_1 = _2823;
                    frontier_phi_66_pred_2 = _2822;
                    frontier_phi_66_pred_3 = _2821;
                    frontier_phi_66_pred_4 = _2820;
                    frontier_phi_66_pred_5 = _2819;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2833;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2824 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _2518;
                        float _3030 = _2989.y - _2519;
                        float _3031 = _2989.z - _2520;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_794, _797, _800), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4434 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _2518;
                        float _3065 = (-0.0) - _2519;
                        float _3066 = (-0.0) - _2520;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3081 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3082 = 1.0 - _854;
                        float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                        float _3090 = _3089 * _3089;
                        float _3091 = _3090 * _3090;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3094 = _3073 + _3038;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3102 = dot(vec3(_794, _797, _800), vec3(_3071, _3072, _3073));
                        float _4450 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3106 = dot(vec3(_794, _797, _800), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                        float _4461 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                        float _3114 = _3049 * _3090;
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3039) + _3115;
                        float _4472 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3120 = 1.0 - _3090;
                        float _3130 = (0.5 / (((_3119 * ((_3105 * _3120) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3090) * _3105))) * _3119;
                        float _4483 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3141 = (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3113 * _3113) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2893 = (_3060 * _3008.x) + _2966;
                        _2894 = (_3060 * _3008.y) + _2967;
                        _2895 = (_3060 * _3008.z) + _2968;
                        _2890 = (_3141 * _3025.x) + _2963;
                        _2891 = (_3141 * _3025.y) + _2964;
                        _2892 = (_3141 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_66_pred = _2890;
                    frontier_phi_66_pred_1 = _2895;
                    frontier_phi_66_pred_2 = _2894;
                    frontier_phi_66_pred_3 = _2893;
                    frontier_phi_66_pred_4 = _2892;
                    frontier_phi_66_pred_5 = _2891;
                }
                _2666 = frontier_phi_66_pred;
                _2676 = frontier_phi_66_pred_1;
                _2674 = frontier_phi_66_pred_2;
                _2672 = frontier_phi_66_pred_3;
                _2670 = frontier_phi_66_pred_4;
                _2668 = frontier_phi_66_pred_5;
                uint _2825 = _2824 + 1u;
                if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2818 = _2666;
                    _2819 = _2668;
                    _2820 = _2670;
                    _2821 = _2672;
                    _2822 = _2674;
                    _2823 = _2676;
                    _2824 = _2825;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((4294967295u << _2682) & _2564) == 0u)
        {
            _2786 = _2665;
            _2788 = _2667;
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
        }
        else
        {
            float _2811 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
            float _2812 = _2811 * _2518;
            float _2813 = _2811 * _2519;
            float _2814 = _2811 * _2520;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2946 = _2665;
                float _2947 = _2667;
                float _2948 = _2669;
                float _2949 = _2671;
                float _2950 = _2673;
                float _2951 = _2675;
                uint _2952 = _2682;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2962)
                    {
                        frontier_phi_77_pred = _2951;
                        frontier_phi_77_pred_1 = _2950;
                        frontier_phi_77_pred_2 = _2949;
                        frontier_phi_77_pred_3 = _2948;
                        frontier_phi_77_pred_4 = _2947;
                        frontier_phi_77_pred_5 = _2946;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2946;
                        float _3169 = _2947;
                        float _3170 = _2948;
                        float _3171 = _2949;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        uint _3174 = _2961;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2520, _3292.z, fma(_2519, _3292.y, _3292.x * _2518)) + _3292.w;
                            _3305 = !((fma(_2520, _3273.z, fma(_2519, _3273.y, _3273.x * _2518)) + _3273.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2518;
                                float _3333 = _3200.y - _2519;
                                float _3334 = _3200.z - _2520;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4494 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_794, _797, _800))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2520, _3243.z, fma(_2519, _3243.y, _3243.x * _2518)) + _3243.w) / _3304;
                                float _3364 = (fma(_2520, _3258.z, fma(_2519, _3258.y, _3258.x * _2518)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4510 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _854;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2812;
                                float _3394 = _3340 - _2813;
                                float _3395 = _3341 - _2814;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_794, _797, _800), vec3((-0.0) - _2812, (-0.0) - _2813, (-0.0) - _2814));
                                float _4521 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3407 = dot(vec3(_794, _797, _800), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4532 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_794, _797, _800), vec3(_3339, _3340, _3341))) + _3416;
                                float _4543 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4554 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3370 * _3216.y;
                                frontier_phi_83_pred_1 = _3370 * _3216.x;
                                frontier_phi_83_pred_2 = _3444 * _3228.z;
                                frontier_phi_83_pred_3 = _3444 * _3228.y;
                                frontier_phi_83_pred_4 = _3444 * _3228.x;
                                frontier_phi_83_pred_5 = _3370 * _3216.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_83_pred;
                            _3451 = frontier_phi_83_pred_1;
                            _3450 = frontier_phi_83_pred_2;
                            _3449 = frontier_phi_83_pred_3;
                            _3448 = frontier_phi_83_pred_4;
                            _3453 = frontier_phi_83_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3160;
                        frontier_phi_77_pred_1 = _3159;
                        frontier_phi_77_pred_2 = _3158;
                        frontier_phi_77_pred_3 = _3157;
                        frontier_phi_77_pred_4 = _3156;
                        frontier_phi_77_pred_5 = _3155;
                    }
                    _2797 = frontier_phi_77_pred;
                    _2795 = frontier_phi_77_pred_1;
                    _2793 = frontier_phi_77_pred_2;
                    _2791 = frontier_phi_77_pred_3;
                    _2789 = frontier_phi_77_pred_4;
                    _2787 = frontier_phi_77_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2787;
                        _2947 = _2789;
                        _2948 = _2791;
                        _2949 = _2793;
                        _2950 = _2795;
                        _2951 = _2797;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2791;
                frontier_phi_58_59_ladder_1 = _2797;
                frontier_phi_58_59_ladder_2 = _2795;
                frontier_phi_58_59_ladder_3 = _2793;
                frontier_phi_58_59_ladder_4 = _2789;
                frontier_phi_58_59_ladder_5 = _2787;
            }
            else
            {
                frontier_phi_58_59_ladder = _2669;
                frontier_phi_58_59_ladder_1 = _2675;
                frontier_phi_58_59_ladder_2 = _2673;
                frontier_phi_58_59_ladder_3 = _2671;
                frontier_phi_58_59_ladder_4 = _2667;
                frontier_phi_58_59_ladder_5 = _2665;
            }
            _2786 = frontier_phi_58_59_ladder_5;
            _2788 = frontier_phi_58_59_ladder_4;
            _2790 = frontier_phi_58_59_ladder;
            _2792 = frontier_phi_58_59_ladder_3;
            _2794 = frontier_phi_58_59_ladder_2;
            _2796 = frontier_phi_58_59_ladder_1;
        }
        float _2801 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
        _2577 = (_2801 * _2792) + _2032;
        _2579 = (_2801 * _2794) + _2034;
        _2581 = (_2801 * _2796) + _2036;
        _2583 = ((_2786 * 0.039999999105930328369140625) * _2801) + _2362;
        _2585 = ((_2788 * 0.039999999105930328369140625) * _2801) + _2364;
        _2587 = ((_2790 * 0.039999999105930328369140625) * _2801) + _2366;
    }
    else
    {
        _2577 = _2032;
        _2579 = _2034;
        _2581 = _2036;
        _2583 = _2362;
        _2585 = _2364;
        _2587 = _2366;
    }
    float _4570 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4581 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4592 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2604 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2577 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _838))) + ((_2583 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2605 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2579 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _838))) + ((_2585 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2606 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2581 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _838))) + ((_2587 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    uint _2607 = _266 + 6u;
    float _2615 = _775 / cbSceneParam._m0[86u].x;
    float _2616 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2630 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2632 = _2630.x;
    float _2633 = _2630.y;
    float _2634 = _2630.z;
    float _2635 = _2630.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2691 = _2690 / _696;
        float _2702 = _2691 * _748;
        float _2703 = _749 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2706 = _2691 * _750;
        float _2708 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2703;
        float _2716 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2903;
        if (abs((_2704 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2903 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2847 = 1.0 / cbSceneParam._m0[80u].x;
            float _2848 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2849 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            _2903 = ((abs(_2716 / _2704) * cbSceneParam._m0[80u].y) * ((((_2858 - _2859) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))))) * _2847)) - ((exp2(_2726 * _2858) - exp2(_2726 * _2859)) * _2847))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2905 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, 1.0), 0.0);
        float _2914 = exp2((_2903 * (-1.44269502162933349609375)) * (1.0 - _2905.w));
        float _2915 = log2(_2914);
        float _2931 = log2(_2635);
        _2728 = (exp2(_2931 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].x)) * _2905.x) / cbSceneParam._m0[78u].x)) + _2632;
        _2730 = (exp2(_2931 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].y)) * _2905.y) / cbSceneParam._m0[78u].y)) + _2633;
        _2732 = (exp2(_2931 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].z)) * _2905.z) / cbSceneParam._m0[78u].z)) + _2634;
        _2734 = _2914 * _2635;
    }
    else
    {
        _2728 = _2632;
        _2730 = _2633;
        _2732 = _2634;
        _2734 = _2635;
    }
    bool _2941;
    vec4 _2744;
    vec4 _2766;
    float _2768;
    float _2772;
    float _2773;
    float _2774;
    float _2775;
    bool _2785;
    for (;;)
    {
        _2744 = cbMatDynParam._m0[0u];
        float _2746 = roundEven(_2744.y);
        bool _2747 = _2746 == 3.0;
        float _2748 = log2(_2734);
        float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * _2604;
        float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * _2605;
        float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * _2606;
        float _2764 = _764 + (-0.5);
        _2766 = cbMtdParam._m0[1u];
        _2768 = _2766.y * _2764;
        float _2771 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2772 = _2771 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
        _2773 = _2771 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
        _2774 = _2771 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
        _2775 = _2764 * 0.999000012874603271484375;
        _2785 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2785)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _2775) < 0.5)
            {
                _2941 = true;
                break;
            }
        }
        uint _2882 = _813 + uint(_2744.w);
        if ((cbInstanceData._m0[_2882].w < 1.0) && ((cbInstanceData._m0[_2882].w + _2775) < 0.5))
        {
            _2941 = true;
            break;
        }
        if ((_2768 + 1.0) < _2766.x)
        {
            _2941 = true;
            break;
        }
        _2941 = false;
        break;
    }
    float _3146;
    if (_2941)
    {
        discard_state = true;
        _3146 = 0.0;
    }
    else
    {
        _3146 = cbInstanceData._m0[_2607].w;
    }
    SV_Target.x = _2772;
    SV_Target.y = _2773;
    SV_Target.z = _2774;
    SV_Target.w = _3146;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2607].w;
    discard_exit();
}


