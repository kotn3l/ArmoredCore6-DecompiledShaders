#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1041;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _348 = (_339.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_347, _348), vec2(_347, _348));
    float _3348 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_313.x * 2.0) + (-1.0)));
    float _361 = _348 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_313.y * 2.0) + (-1.0)));
    float _364 = fma(_355, _214, fma(_361, _221, _360 * _207));
    float _367 = fma(_355, _215, fma(_361, _222, _360 * _208));
    float _370 = fma(_355, _216, fma(_361, _223, _360 * _209));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _412 = _410.x;
    float _413 = 1.0 - _412;
    float _420 = ((_412 - _413) * cbMtdParam._m0[24u].z) + _413;
    float _422 = (cbMtdParam._m0[19u].x + dot(vec4(_374 * _364, _374 * _367, _374 * _370, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_420 * cbMtdParam._m0[21u].z);
    float _3359 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _438 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_420 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3370 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _443 = ((_423 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) * _439) + _272;
    float _444 = ((_423 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) * _439) + _273;
    float _445 = ((_423 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) * _439) + _274;
    float _450 = (((_313.z - _343) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _343;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _470 = (_463.x * 2.0) + (-1.0);
    float _471 = (_463.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3381 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _481 = (((_463.z - _450) * _423) * _439) + _450;
    float _496 = (((cbMtdParam._m0[21u].x * _360) + ((_470 - _360) * _423)) * _439) + _360;
    float _497 = (((cbMtdParam._m0[21u].x * _361) + ((_471 - _361) * _423)) * _439) + _361;
    float _498 = (((sqrt(1.0 - (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) - _355) * _423) * _439) + _355;
    float _503 = cbMtdParam._m0[22u].x + _339.w;
    float _506 = fma(_498, _214, fma(_497, _221, _496 * _207));
    float _509 = fma(_498, _215, fma(_497, _222, _496 * _208));
    float _512 = fma(_498, _216, fma(_497, _223, _496 * _209));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3392 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _520 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3414 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3425 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3436 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _629 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _632 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _646 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _652 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_646].x;
    float _653 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_646].y;
    float _654 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_646].z;
    float _3447 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    vec4 _666 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _670 = ((isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * TEXCOORD_5.w) * _666.x;
    float _671 = dot(vec3(_517, _518, _519), vec3(_596, _597, _598));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _517) - _596;
    float _679 = (_674 * _518) - _597;
    float _680 = (_674 * _519) - _598;
    float _684 = abs(dot(vec3(_596, _597, _598), vec3(_517, _518, _519)));
    float _3480 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_520);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _769 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _773 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _798 = _731 + _517;
        float _799 = _735 + _518;
        float _800 = _739 + _519;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_517, _518, _519), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3528 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_517, _518, _519), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3561 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_517, _518, _519), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3594 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1084 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1088 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1111 = _731 + _517;
        float _1112 = _735 + _518;
        float _1113 = _739 + _519;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_517, _518, _519), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3657 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_517, _518, _519), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3690 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_517, _518, _519), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3723 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1041;
        _1350 = _1041;
        _1351 = _1041;
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1053)) + _1053;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1054)) + _1054;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1055)) + _1055;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _678 * 0.5;
    float _1418 = _679 * 0.5;
    float _1419 = _680 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1547 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1550 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1578 = frontier_phi_14_12_ladder;
        }
        float _1780;
        if (_1547 > 0.0)
        {
            _1780 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1780 = frontier_phi_23_19_ladder;
        }
        float _2023;
        if (_1550 > 0.0)
        {
            _2023 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2023 = frontier_phi_35_30_ladder;
        }
        float _2025 = isnan(_1780) ? _1578 : (isnan(_1578) ? _1780 : min(_1578, _1780));
        float _2026 = isnan(_2023) ? _2025 : (isnan(_2025) ? _2023 : min(_2025, _2023));
        float _2030 = (_2026 * _1544) + _1533;
        float _2031 = (_2026 * _1547) + _1537;
        float _2032 = (_2026 * _1550) + _1541;
        float _2033 = _2026 * 9.9999997473787516355514526367188e-05;
        float _2035 = (-1.0) - _2033;
        float _2037 = _2033 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2032 > _2037) || ((_2032 < _2035) || ((_2031 > _2037) || ((_2031 < _2035) || ((_2030 < _2035) || (_2030 > _2037))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2156 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2032, cbModelParam._m0[9u].z, fma(_2031, cbModelParam._m0[9u].y, _2030 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2032, cbModelParam._m0[10u].z, fma(_2031, cbModelParam._m0[10u].y, _2030 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2032, cbModelParam._m0[11u].z, fma(_2031, cbModelParam._m0[11u].y, _2030 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_13_35_ladder = _2156.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2156.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2156.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_13_35_ladder_2;
        _1568 = frontier_phi_13_35_ladder_1;
        _1570 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1486);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1642 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1645 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1785;
        if (_1639 > 0.0)
        {
            _1785 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1785 = frontier_phi_25_21_ladder;
        }
        float _2050;
        if (_1642 > 0.0)
        {
            _2050 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2050 = frontier_phi_37_32_ladder;
        }
        float _2255;
        if (_1645 > 0.0)
        {
            _2255 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2255 = frontier_phi_46_43_ladder;
        }
        float _2257 = isnan(_2050) ? _1785 : (isnan(_1785) ? _2050 : min(_1785, _2050));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1639) + _1628;
        float _2263 = (_2258 * _1642) + _1632;
        float _2264 = (_2258 * _1645) + _1636;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_22_46_ladder = _2463.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2463.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2463.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_22_46_ladder_2;
        _1666 = frontier_phi_22_46_ladder_1;
        _1668 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1575);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1680 = ((((1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_699 * _686)) * _670;
    float _1681 = _1680 * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1682 = _1680 * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1683 = _1680 * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _670 + (-1.0);
    float _1717 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1718 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1721 = _1704 + 5u;
    float _1727 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1731 = _1704 + 4u;
    float _1738 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1742 = _1704 | 1u;
    float _1753 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_517, _518, _519));
    float _1756 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_517, _518, _519));
    float _3859 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _3870 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1761 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.3183098733425140380859375;
    float _1763 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.3183098733425140380859375;
    float _1770 = ((cbLight._m0[_1721].x * _1727) * _1763) + ((cbLight._m0[_1731].x * _1738) * _1761);
    float _1771 = ((_1727 * cbLight._m0[_1721].y) * _1763) + ((_1738 * cbLight._m0[_1731].y) * _1761);
    float _1772 = ((_1727 * cbLight._m0[_1721].z) * _1763) + ((_1738 * cbLight._m0[_1731].z) * _1761);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1779)
    {
        _1790 = _1770;
        _1792 = _1771;
        _1794 = _1772;
    }
    else
    {
        uint _1798 = _1704 + 6u;
        float _1814 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3881 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1817 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1790 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1770;
        _1792 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1771;
        _1794 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1772;
    }
    bool _1797 = _1777.y == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1797)
    {
        _1835 = _1790;
        _1837 = _1792;
        _1839 = _1794;
    }
    else
    {
        uint _1994 = _1704 + 7u;
        float _2010 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _3897 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2013 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1835 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1790;
        _1837 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1792;
        _1839 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1794;
    }
    uint _1842 = _1704 + 8u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _520) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1704].x + _596;
    float _1858 = cbLight._m0[_1704].y + _597;
    float _1859 = cbLight._m0[_1704].z + _598;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1704].xyz));
    float _3913 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1871 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1872 = dot(vec3(_517, _518, _519), vec3(_1864, _1865, _1866));
    float _3935 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1864, _1865, _1866));
    float _3946 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1856 * _1856;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1895 = (exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1896 = 1.0 - _1856;
    float _1907 = (0.5 / (((_1871 * ((_1870 * _1896) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1896) + _1856) * _1870))) * _1870;
    float _3957 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    uint _1920 = _1704 + 9u;
    float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _520) * 0.949999988079071044921875);
    float _1932 = _1931 * _1931;
    float _1933 = cbLight._m0[_1742].x + _596;
    float _1934 = cbLight._m0[_1742].y + _597;
    float _1935 = cbLight._m0[_1742].z + _598;
    float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
    float _1940 = _1939 * _1933;
    float _1941 = _1939 * _1934;
    float _1942 = _1939 * _1935;
    float _1943 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1742].xyz));
    float _3968 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1947 = dot(vec3(_517, _518, _519), vec3(_1940, _1941, _1942));
    float _3979 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1940, _1941, _1942));
    float _3990 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1955 = _1932 * _1932;
    float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
    float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1969 = 1.0 - _1932;
    float _1979 = (0.5 / (((_1871 * ((_1946 * _1969) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1969) + _1932) * _1946))) * _1946;
    float _4001 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1981 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
    float _1991 = (((_1968 * cbLight._m0[_1920].x) * _1981) * _1727) + (((_1895 * cbLight._m0[_1842].x) * _1909) * _1738);
    float _1992 = (((_1968 * cbLight._m0[_1920].y) * _1981) * _1727) + (((_1895 * cbLight._m0[_1842].y) * _1909) * _1738);
    float _1993 = (((_1968 * cbLight._m0[_1920].z) * _1981) * _1727) + (((_1895 * cbLight._m0[_1842].z) * _1909) * _1738);
    float _2055;
    float _2057;
    float _2059;
    if (_1779)
    {
        _2055 = _1991;
        _2057 = _1992;
        _2059 = _1993;
    }
    else
    {
        uint _2061 = _1704 + 2u;
        uint _2065 = _1704 + 10u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _520) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _596;
        float _2082 = cbLight._m0[_2061].y + _597;
        float _2083 = cbLight._m0[_2061].z + _598;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2061].xyz));
        float _4012 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2095 = dot(vec3(_517, _518, _519), vec3(_2088, _2089, _2090));
        float _4023 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _4034 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2117 = 1.0 - _2080;
        float _2127 = (0.5 / (((_1871 * ((_2094 * _2117) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2117) + _2080) * _2094))) * _2094;
        float _4045 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2130 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2055 = (((_2116 * cbLight._m0[_2065].x) * _2129) * _2130) + _1991;
        _2057 = (((_2116 * cbLight._m0[_2065].y) * _2129) * _2130) + _1992;
        _2059 = (((_2116 * cbLight._m0[_2065].z) * _2129) * _2130) + _1993;
    }
    float _2165;
    float _2167;
    float _2169;
    if (_1797)
    {
        _2165 = _2055;
        _2167 = _2057;
        _2169 = _2059;
    }
    else
    {
        uint _2176 = _1704 + 3u;
        uint _2180 = _1704 + 11u;
        float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _520) * 0.949999988079071044921875);
        float _2195 = _2194 * _2194;
        float _2196 = cbLight._m0[_2176].x + _596;
        float _2197 = cbLight._m0[_2176].y + _597;
        float _2198 = cbLight._m0[_2176].z + _598;
        float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
        float _2203 = _2202 * _2196;
        float _2204 = _2202 * _2197;
        float _2205 = _2202 * _2198;
        float _2206 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2176].xyz));
        float _4061 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2210 = dot(vec3(_517, _518, _519), vec3(_2203, _2204, _2205));
        float _4072 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2214 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2203, _2204, _2205));
        float _4083 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2218 = _2195 * _2195;
        float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
        float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2232 = 1.0 - _2195;
        float _2242 = (0.5 / (((_1871 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2232) + _2195) * _2209))) * _2209;
        float _4094 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2244 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
        float _2245 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2165 = (((_2231 * cbLight._m0[_2180].x) * _2244) * _2245) + _2055;
        _2167 = (((_2231 * cbLight._m0[_2180].y) * _2244) * _2245) + _2057;
        _2169 = (((_2231 * cbLight._m0[_2180].z) * _2244) * _2245) + _2059;
    }
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    if (_1702.y == 0u)
    {
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2320;
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2320;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2320;
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.x;
        uint _2347 = uint((float(_2335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2336))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2336)));
        float _2357 = (log2(_2323 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        uint _2361 = uint(isnan(14.0) ? _2358 : (isnan(_2358) ? 14.0 : min(_2358, 14.0)));
        uvec4 _2366 = texelFetch(g_lightClusterGridBuffer, int(((_2361 << 2u) + (_2347 << 6u)) >> 2u));
        uint _2367 = _2366.x;
        uint _2368 = _2335.z;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((((1u << ((_2368 >> 4u) & 15u)) + 4294967295u) & _2367) == 0u) || ((_2368 & 240u) == 0u))
        {
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
        }
        else
        {
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            uint _2619 = 0u;
            uint _2628;
            bool _2629;
            for (;;)
            {
                _2628 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                _2629 = _2628 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2629)
                {
                    frontier_phi_61_pred = _2613;
                    frontier_phi_61_pred_1 = _2618;
                    frontier_phi_61_pred_2 = _2617;
                    frontier_phi_61_pred_3 = _2616;
                    frontier_phi_61_pred_4 = _2615;
                    frontier_phi_61_pred_5 = _2614;
                }
                else
                {
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    uint _2743;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2628;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    for (;;)
                    {
                        uint _2747 = uint(findLSB(_2743)) + (_2619 << 5u);
                        uint _2744 = (_2743 + 4294967295u) & _2743;
                        uint _2749 = _2747 * 48u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2769 = (_2747 * 48u) + 4u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2788 = (_2747 * 48u) + 8u;
                        vec3 _2799 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x));
                        float _2803 = _2763.x - _2321;
                        float _2804 = _2763.y - _2322;
                        float _2805 = _2763.z - _2323;
                        float _2806 = dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805));
                        float _2809 = inversesqrt(_2806);
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2813 = dot(vec3(_626, _629, _632), vec3(_2810, _2811, _2812));
                        float _2818 = 1.0 - (_2806 * _2763.w);
                        float _4120 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2820 = sqrt(_2806) * _2782.w;
                        float _2823 = 1.39999997615814208984375 / (_2820 + 1.39999997615814208984375);
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2813) + _2824;
                        float _2830 = _2820 * _2820;
                        float _2834 = ((isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))) * _2819) / ((_2830 * 0.699999988079071044921875) + 1.0);
                        float _2838 = (-0.0) - _2321;
                        float _2839 = (-0.0) - _2322;
                        float _2840 = (-0.0) - _2323;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2855 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                        float _2856 = 1.0 - _686;
                        float _2863 = sqrt(1.0 - ((1.0 - (_2856 * _2856)) * (1.0 - (_2855 * _2855))));
                        float _2864 = _2863 * _2863;
                        float _2865 = _2864 * _2864;
                        float _2866 = _2845 + _2810;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
                        float _2876 = dot(vec3(_626, _629, _632), vec3(_2845, _2846, _2847));
                        float _4136 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2880 = dot(vec3(_626, _629, _632), vec3(_2872 * _2866, _2872 * _2867, _2872 * _2868));
                        float _4147 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2887 = ((_2883 * _2883) * (_2865 + (-1.0))) + 1.0;
                        float _2888 = _2823 * _2864;
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2813) + _2889;
                        float _4158 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2894 = 1.0 - _2864;
                        float _2904 = (0.5 / (((_2893 * ((_2879 * _2894) + _2864)) + 9.9999999392252902907785028219223e-09) + (((_2893 * _2894) + _2864) * _2879))) * _2893;
                        float _4169 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2915 = (((_2865 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_2887 * _2887) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125))) * _2819;
                        _2672 = (_2834 * _2782.x) + _2740;
                        _2673 = (_2834 * _2782.y) + _2741;
                        _2674 = (_2834 * _2782.z) + _2742;
                        _2669 = (_2915 * _2799.x) + _2737;
                        _2670 = (_2915 * _2799.y) + _2738;
                        _2671 = (_2915 * _2799.z) + _2739;
                        if (_2744 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2744;
                        }
                    }
                    frontier_phi_61_pred = _2669;
                    frontier_phi_61_pred_1 = _2674;
                    frontier_phi_61_pred_2 = _2673;
                    frontier_phi_61_pred_3 = _2672;
                    frontier_phi_61_pred_4 = _2671;
                    frontier_phi_61_pred_5 = _2670;
                }
                _2469 = frontier_phi_61_pred;
                _2479 = frontier_phi_61_pred_1;
                _2477 = frontier_phi_61_pred_2;
                _2475 = frontier_phi_61_pred_3;
                _2473 = frontier_phi_61_pred_4;
                _2471 = frontier_phi_61_pred_5;
                uint _2620 = _2619 + 1u;
                if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2613 = _2469;
                    _2614 = _2471;
                    _2615 = _2473;
                    _2616 = _2475;
                    _2617 = _2477;
                    _2618 = _2479;
                    _2619 = _2620;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
        }
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.z;
        uint _2485 = (_2483 >> 8u) & 15u;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((4294967295u << _2485) & _2367) == 0u)
        {
            _2581 = _2468;
            _2583 = _2470;
            _2585 = _2472;
            _2587 = _2474;
            _2589 = _2476;
            _2591 = _2478;
        }
        else
        {
            float _2606 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
            float _2607 = _2606 * _2321;
            float _2608 = _2606 * _2322;
            float _2609 = _2606 * _2323;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2485 < ((_2483 >> 12u) & 15u))
            {
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2720 = _2468;
                float _2721 = _2470;
                float _2722 = _2472;
                float _2723 = _2474;
                float _2724 = _2476;
                float _2725 = _2478;
                uint _2726 = _2485;
                uint _2735;
                bool _2736;
                for (;;)
                {
                    _2735 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                    _2736 = _2735 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2736)
                    {
                        frontier_phi_67_pred = _2723;
                        frontier_phi_67_pred_1 = _2724;
                        frontier_phi_67_pred_2 = _2725;
                        frontier_phi_67_pred_3 = _2722;
                        frontier_phi_67_pred_4 = _2721;
                        frontier_phi_67_pred_5 = _2720;
                    }
                    else
                    {
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        uint _2939 = _2735;
                        uint _2940;
                        vec4 _2965;
                        float _2966;
                        vec4 _2981;
                        vec3 _2993;
                        vec4 _3009;
                        vec4 _3024;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2950 = ((_2726 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2939));
                            _2940 = (_2939 + 4294967295u) & _2939;
                            uint _2952 = _2950 * 40u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.w;
                            uint _2968 = (_2950 * 40u) + 4u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2950 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2996 = (_2950 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3011 = (_2950 * 40u) + 20u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3026 = (_2950 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2950 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2323, _3058.z, fma(_2322, _3058.y, _3058.x * _2321)) + _3058.w;
                            _3071 = !((fma(_2323, _3039.z, fma(_2322, _3039.y, _3039.x * _2321)) + _3039.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2965.x - _2321;
                                float _3099 = _2965.y - _2322;
                                float _3100 = _2965.z - _2323;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2966 * _2966));
                                float _4180 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3116 = sqrt(_3101) * _2981.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_626, _629, _632))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2323, _3009.z, fma(_2322, _3009.y, _3009.x * _2321)) + _3009.w) / _3070;
                                float _3130 = (fma(_2323, _3024.z, fma(_2322, _3024.y, _3024.x * _2321)) + _3024.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4196 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _686;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2607;
                                float _3160 = _3106 - _2608;
                                float _3161 = _3107 - _2609;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_626, _629, _632), vec3((-0.0) - _2607, (-0.0) - _2608, (-0.0) - _2609));
                                float _4207 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3173 = dot(vec3(_626, _629, _632), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4218 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_626, _629, _632), vec3(_3105, _3106, _3107))) + _3182;
                                float _4229 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4240 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3210 * _2993.x;
                                frontier_phi_73_pred_1 = _3210 * _2993.y;
                                frontier_phi_73_pred_2 = _3136 * _2981.z;
                                frontier_phi_73_pred_3 = _3136 * _2981.y;
                                frontier_phi_73_pred_4 = _3136 * _2981.x;
                                frontier_phi_73_pred_5 = _3210 * _2993.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3214 = frontier_phi_73_pred;
                            _3215 = frontier_phi_73_pred_1;
                            _3219 = frontier_phi_73_pred_2;
                            _3218 = frontier_phi_73_pred_3;
                            _3217 = frontier_phi_73_pred_4;
                            _3216 = frontier_phi_73_pred_5;
                            _2923 = _3217 + _2936;
                            _2924 = _3218 + _2937;
                            _2925 = _3219 + _2938;
                            _2920 = _3214 + _2933;
                            _2921 = _3215 + _2934;
                            _2922 = _3216 + _2935;
                            if (_2940 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2940;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2923;
                        frontier_phi_67_pred_1 = _2924;
                        frontier_phi_67_pred_2 = _2925;
                        frontier_phi_67_pred_3 = _2922;
                        frontier_phi_67_pred_4 = _2921;
                        frontier_phi_67_pred_5 = _2920;
                    }
                    _2588 = frontier_phi_67_pred;
                    _2590 = frontier_phi_67_pred_1;
                    _2592 = frontier_phi_67_pred_2;
                    _2586 = frontier_phi_67_pred_3;
                    _2584 = frontier_phi_67_pred_4;
                    _2582 = frontier_phi_67_pred_5;
                    uint _2727 = _2726 + 1u;
                    if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2720 = _2582;
                        _2721 = _2584;
                        _2722 = _2586;
                        _2723 = _2588;
                        _2724 = _2590;
                        _2725 = _2592;
                        _2726 = _2727;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2590;
                frontier_phi_55_56_ladder_1 = _2592;
                frontier_phi_55_56_ladder_2 = _2588;
                frontier_phi_55_56_ladder_3 = _2586;
                frontier_phi_55_56_ladder_4 = _2584;
                frontier_phi_55_56_ladder_5 = _2582;
            }
            else
            {
                frontier_phi_55_56_ladder = _2476;
                frontier_phi_55_56_ladder_1 = _2478;
                frontier_phi_55_56_ladder_2 = _2474;
                frontier_phi_55_56_ladder_3 = _2472;
                frontier_phi_55_56_ladder_4 = _2470;
                frontier_phi_55_56_ladder_5 = _2468;
            }
            _2581 = frontier_phi_55_56_ladder_5;
            _2583 = frontier_phi_55_56_ladder_4;
            _2585 = frontier_phi_55_56_ladder_3;
            _2587 = frontier_phi_55_56_ladder_2;
            _2589 = frontier_phi_55_56_ladder;
            _2591 = frontier_phi_55_56_ladder_1;
        }
        float _2596 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2380 = (_2596 * _2587) + _1835;
        _2382 = (_2596 * _2589) + _1837;
        _2384 = (_2596 * _2591) + _1839;
        _2386 = ((_2581 * 0.039999999105930328369140625) * _2596) + _2165;
        _2388 = ((_2583 * 0.039999999105930328369140625) * _2596) + _2167;
        _2390 = ((_2585 * 0.039999999105930328369140625) * _2596) + _2169;
    }
    else
    {
        _2380 = _1835;
        _2382 = _1837;
        _2384 = _1839;
        _2386 = _2165;
        _2388 = _2167;
        _2390 = _2169;
    }
    float _4256 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4267 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4278 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    uint _2410 = _226 + 6u;
    float _2418 = _604 / cbSceneParam._m0[86u].x;
    float _2419 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2435 = _2433.x;
    float _2436 = _2433.y;
    float _2437 = _2433.z;
    float _2438 = _2433.w;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2493 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2494 = _2493 / _538;
        float _2505 = _2494 * _589;
        float _2506 = _590 * _2494;
        float _2507 = (-0.0) - _2506;
        float _2509 = _2494 * _591;
        float _2511 = (cbSceneParam._m0[77u].w * _2507) / _2493;
        float _2512 = _2511 + cbSceneParam._m0[79u].w;
        float _2513 = cbSceneParam._m0[79u].w - _2506;
        float _2519 = sqrt(((_2505 * _2505) + (_2506 * _2506)) + (_2509 * _2509));
        float _2522 = (1.0 - (cbSceneParam._m0[77u].w / _2493)) * _2519;
        float _2527 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2529 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2682;
        if (abs((_2507 - _2511) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2682 = ((((_2512 > 0.0) ? exp2(_2527 * _2512) : (2.0 - exp2(_2529 * _2512))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2522;
        }
        else
        {
            float _2642 = 1.0 / cbSceneParam._m0[80u].x;
            float _2643 = isnan(_2513) ? _2512 : (isnan(_2512) ? _2513 : max(_2512, _2513));
            float _2644 = isnan(_2513) ? _2512 : (isnan(_2512) ? _2513 : min(_2512, _2513));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            _2682 = ((abs(_2519 / _2507) * cbSceneParam._m0[80u].y) * ((((_2653 - _2654) * 2.0) - ((exp2(_2527 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)))) - exp2(_2527 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))))) * _2642)) - ((exp2(_2529 * _2653) - exp2(_2529 * _2654)) * _2642))) + (_2522 * cbSceneParam._m0[80u].z);
        }
        vec4 _2684 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, 1.0), 0.0);
        float _2693 = exp2((_2682 * (-1.44269502162933349609375)) * (1.0 - _2684.w));
        float _2694 = log2(_2693);
        float _2710 = log2(_2438);
        _2531 = (exp2(_2710 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].x)) * _2684.x) / cbSceneParam._m0[78u].x)) + _2435;
        _2533 = (exp2(_2710 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].y)) * _2684.y) / cbSceneParam._m0[78u].y)) + _2436;
        _2535 = (exp2(_2710 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].z)) * _2684.z) / cbSceneParam._m0[78u].z)) + _2437;
        _2537 = _2693 * _2438;
    }
    else
    {
        _2531 = _2435;
        _2533 = _2436;
        _2535 = _2437;
        _2537 = _2438;
    }
    float _2549 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2550 = _2549 == 3.0;
    float _2551 = log2(_2537);
    float _2558 = exp2(_2551 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2380 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _670))) + ((_2386 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2559 = exp2(_2551 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2382 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _670))) + ((_2388 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2560 = exp2(_2551 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2384 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _670))) + ((_2390 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2569 = (_2549 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2569 * (_2550 ? _2558 : (_2558 + (cbSceneParam._m0[72u].w * _2531)));
    SV_Target.y = _2569 * (_2550 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2533)));
    SV_Target.z = _2569 * (_2550 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2535)));
    SV_Target.w = cbInstanceData._m0[_2410].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2410].w;
}


