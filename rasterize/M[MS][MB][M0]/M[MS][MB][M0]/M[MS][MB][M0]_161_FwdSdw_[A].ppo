#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1329;
float _3970;
float _3971;
float _3972;
float _3973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3982 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3993 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _505 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _506 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _509 = fma(_477, _241, fma(_506, _248, _505 * _234));
    float _512 = fma(_477, _242, fma(_506, _249, _505 * _235));
    float _515 = fma(_477, _243, fma(_506, _250, _505 * _236));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    vec4 _548 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _550 = _548.x;
    float _551 = 1.0 - _550;
    float _555 = ((_550 - _551) * cbMtdParam._m0[24u].z) + _551;
    float _557 = (cbMtdParam._m0[19u].x + dot(vec4(_519 * _509, _519 * _512, _519 * _515, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_555 * cbMtdParam._m0[21u].z);
    float _4004 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _560 = (-0.0) - cbMtdParam._m0[24u].y;
    float _562 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
    float _570 = _558 - ((_558 * TEXCOORD_8.x) * _563);
    float _571 = _558 - ((_558 * TEXCOORD_8.y) * _563);
    float _572 = _558 - ((_558 * TEXCOORD_8.z) * _563);
    float _579 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _583 = ((isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : min(_579, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _591 = (_583 - (((_555 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _583))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4035 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _596 = ((_570 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) * _592) + _395;
    float _597 = ((_571 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) * _592) + _396;
    float _598 = ((_572 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) * _592) + _397;
    vec4 _610 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _612 = _610.x;
    float _613 = 1.0 - _612;
    float _640 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_612 - _613) * cbMtdParam._m0[24u].w) + _613) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4046 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _649 = ((((cbMtdParam._m0[10u].x - _596) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _641) + _596;
    float _650 = ((((cbMtdParam._m0[10u].y - _597) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _641) + _597;
    float _651 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _598)) * _641) + _598;
    float _655 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4057 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _687 = (((_669.z - _655) * _570) * _592) + _655;
    float _690 = ((cbMtdParam._m0[23u].y - _687) * _641) + _687;
    vec4 _709 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _4068 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _737 = (((cbMtdParam._m0[21u].x * _505) + ((_676 - _505) * _570)) * _592) + _505;
    float _738 = (((cbMtdParam._m0[21u].x * _506) + ((_677 - _506) * _571)) * _592) + _506;
    float _739 = (((sqrt(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) - _477) * _572) * _592) + _477;
    float _750 = (((_715 - _737) + (_737 * cbMtdParam._m0[22u].z)) * _641) + _737;
    float _751 = (((_716 - _738) + (_738 * cbMtdParam._m0[22u].z)) * _641) + _738;
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _739) * _641) + _739;
    float _754 = cbMtdParam._m0[22u].x + _493.w;
    float _757 = fma(_752, _241, fma(_751, _248, _750 * _234));
    float _760 = fma(_752, _242, fma(_751, _249, _750 * _235));
    float _763 = fma(_752, _243, fma(_751, _250, _750 * _236));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _4079 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _771 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4101 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4112 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4123 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1010 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1016 = (cbMatDynParam._m0[5u].x * _1010) + cbMatDynParam._m0[5u].y;
        float _4134 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1021 = (cbMatDynParam._m0[5u].z * _1010) + cbMatDynParam._m0[5u].w;
        float _4145 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) - _1017)) + _1017) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _889 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _892 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _905 = _253 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4156 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    vec4 _926 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _930 = ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * TEXCOORD_5.w) * _926.x;
    float _931 = dot(vec3(_768, _769, _770), vec3(_847, _848, _849));
    float _934 = _931 * 2.0;
    float _938 = (_934 * _768) - _847;
    float _939 = (_934 * _769) - _848;
    float _940 = (_934 * _770) - _849;
    float _944 = abs(dot(vec3(_847, _848, _849), vec3(_768, _769, _770)));
    float _4189 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _946 = sqrt(_771);
    float _959 = exp2((_946 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_946 * 3.0));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1328;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1053 = fma(_999, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991));
        float _1057 = fma(_999, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991));
        float _1061 = fma(_999, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991));
        float _1086 = _991 + _768;
        float _1087 = _995 + _769;
        float _1088 = _999 + _770;
        float _1098 = fma(_1088, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086)) - _1053;
        float _1099 = fma(_1088, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086)) - _1057;
        float _1100 = fma(_1088, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086)) - _1061;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1053 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1057 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[34u].z) + ((((((_1061 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1156 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1122.x + (-0.5));
        float _1158 = _1156 * (_1122.y + (-0.5));
        float _1159 = _1156 * (_1122.z + (-0.5));
        float _1166 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1129.x + (-0.5));
        float _1168 = _1166 * (_1129.y + (-0.5));
        float _1169 = _1166 * (_1129.z + (-0.5));
        float _1176 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1136.x + (-0.5));
        float _1178 = _1176 * (_1136.y + (-0.5));
        float _1179 = _1176 * (_1136.z + (-0.5));
        float _1186 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1143.x + (-0.5));
        float _1188 = _1186 * (_1143.y + (-0.5));
        float _1189 = _1186 * (_1143.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1210 = (dot(vec3(_768, _769, _770), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1220 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4237 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1222 + 1.0))) + _1227) * _1190;
        float _1237 = _1158 * 0.5;
        float _1238 = _1168 * 0.5;
        float _1239 = _1178 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_768, _769, _770), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4270 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1264 + 1.0))) + _1269) * _1191;
        float _1279 = _1159 * 0.5;
        float _1280 = _1169 * 0.5;
        float _1281 = _1179 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_768, _769, _770), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4303 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1306 + 1.0))) + _1311) * _1192;
        _1328 = _1159;
        _1330 = _1158;
        _1331 = _1157;
        _1332 = _1169;
        _1333 = _1168;
        _1334 = _1167;
        _1335 = _1179;
        _1336 = _1178;
        _1337 = _1177;
        _1338 = _1192;
        _1339 = _1191;
        _1340 = _1190;
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1329;
        _1330 = _1329;
        _1331 = _1329;
        _1332 = _1329;
        _1333 = _1329;
        _1334 = _1329;
        _1335 = _1329;
        _1336 = _1329;
        _1337 = _1329;
        _1338 = _1329;
        _1339 = _1329;
        _1340 = _1329;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1371 = fma(_999, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991));
        float _1375 = fma(_999, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991));
        float _1379 = fma(_999, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991));
        float _1402 = _991 + _768;
        float _1403 = _995 + _769;
        float _1404 = _999 + _770;
        float _1414 = fma(_1404, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402)) - _1371;
        float _1415 = fma(_1404, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402)) - _1375;
        float _1416 = fma(_1404, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402)) - _1379;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1371 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1375 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[35u].z) + ((((((_1379 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1470 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1437.x + (-0.5));
        float _1472 = _1470 * (_1437.y + (-0.5));
        float _1473 = _1470 * (_1437.z + (-0.5));
        float _1480 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1444.x + (-0.5));
        float _1482 = _1480 * (_1444.y + (-0.5));
        float _1483 = _1480 * (_1444.z + (-0.5));
        float _1490 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1451.x + (-0.5));
        float _1492 = _1490 * (_1451.y + (-0.5));
        float _1493 = _1490 * (_1451.z + (-0.5));
        float _1500 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1458.x + (-0.5));
        float _1502 = _1500 * (_1458.y + (-0.5));
        float _1503 = _1500 * (_1458.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_768, _769, _770), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4366 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1534 + 1.0))) + _1539) * _1504;
        float _1549 = _1472 * 0.5;
        float _1550 = _1482 * 0.5;
        float _1551 = _1492 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_768, _769, _770), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4377 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4388 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4399 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_1576 + 1.0))) + _1581) * _1505;
        float _1591 = _1473 * 0.5;
        float _1592 = _1483 * 0.5;
        float _1593 = _1493 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_768, _769, _770), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4432 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1618 + 1.0))) + _1623) * _1506;
        _1640 = _1473;
        _1641 = _1472;
        _1642 = _1471;
        _1643 = _1483;
        _1644 = _1482;
        _1645 = _1481;
        _1646 = _1493;
        _1647 = _1492;
        _1648 = _1491;
        _1649 = _1506;
        _1650 = _1505;
        _1651 = _1504;
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1329;
        _1641 = _1329;
        _1642 = _1329;
        _1643 = _1329;
        _1644 = _1329;
        _1645 = _1329;
        _1646 = _1329;
        _1647 = _1329;
        _1648 = _1329;
        _1649 = _1329;
        _1650 = _1329;
        _1651 = _1329;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1341)) + _1341;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1342)) + _1342;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1687 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1664));
    float _1708 = _938 * 0.5;
    float _1709 = _939 * 0.5;
    float _1710 = _940 * 0.5;
    float _1711 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1714 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1717 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1751;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1724 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1328, _1332, _1335, _1338));
        float _1728 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1732 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1739 = dot(vec4(cbModelParam._m0[39u]), vec4(_1708, _1709, _1710, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1762;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1753 = dot(vec4(cbModelParam._m0[40u]), vec4(_1708, _1709, _1710, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1766 = (_1762 * cbModelParam._m0[1u].x) + (_1751 * (1.0 - cbModelParam._m0[1u].x));
    float _1776 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1776 : min(cbModelParam._m0[25u].z, _1776));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_999, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_999, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_999, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_940, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938));
        float _1838 = fma(_940, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938));
        float _1841 = fma(_940, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1869 = frontier_phi_17_15_ladder;
        }
        float _2038;
        if (_1838 > 0.0)
        {
            _2038 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2038 = frontier_phi_26_22_ladder;
        }
        float _2333;
        if (_1841 > 0.0)
        {
            _2333 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2333 = frontier_phi_38_33_ladder;
        }
        float _2335 = isnan(_2038) ? _1869 : (isnan(_1869) ? _2038 : min(_1869, _2038));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1835) + _1824;
        float _2341 = (_2336 * _1838) + _1828;
        float _2342 = (_2336 * _1841) + _1832;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1777);
            frontier_phi_16_38_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_16_38_ladder_2;
        _1859 = frontier_phi_16_38_ladder_1;
        _1861 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_938, _939, _940), _1777);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_999, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_999, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_999, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_940, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938));
        float _1933 = fma(_940, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938));
        float _1936 = fma(_940, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938));
        float _2043;
        if (_1930 > 0.0)
        {
            _2043 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2043 = frontier_phi_28_24_ladder;
        }
        float _2360;
        if (_1933 > 0.0)
        {
            _2360 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2360 = frontier_phi_40_35_ladder;
        }
        float _2687;
        if (_1936 > 0.0)
        {
            _2687 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2687 = frontier_phi_50_47_ladder;
        }
        float _2689 = isnan(_2360) ? _2043 : (isnan(_2043) ? _2360 : min(_2043, _2360));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1930) + _1919;
        float _2695 = (_2690 * _1933) + _1923;
        float _2696 = (_2690 * _1936) + _1927;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_25_50_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_25_50_ladder_2;
        _1957 = frontier_phi_25_50_ladder_1;
        _1959 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_938, _939, _940), _1866);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1971 = ((((1.0 - _959) * ((_946 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_959 * _946)) * _930;
    float _1972 = _1971 * ((cbModelParam._m0[1u].w * (_1955 - _1857)) + _1857);
    float _1973 = _1971 * ((cbModelParam._m0[1u].w * (_1957 - _1859)) + _1859);
    float _1974 = _1971 * ((cbModelParam._m0[1u].w * (_1959 - _1861)) + _1861);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2030 = _2017 / _2029;
    float _2031 = _2021 / _2029;
    float _2032 = _2025 / _2029;
    float _2179;
    float _2180;
    float _2181;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2059 = ((uint(_2032 > cbSceneParam._m0[59u].y) + uint(_2032 > cbSceneParam._m0[59u].x)) + uint(_2032 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2060 = _2059 + 43u;
        uint _2068 = _2059 + 44u;
        uint _2076 = _2059 + 45u;
        uint _2084 = _2059 + 46u;
        float _2095 = fma(_2029, cbSceneParam._m0[_2060].w, fma(_2025, cbSceneParam._m0[_2060].z, fma(_2021, cbSceneParam._m0[_2060].y, _2017 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2029, cbSceneParam._m0[_2068].w, fma(_2025, cbSceneParam._m0[_2068].z, fma(_2021, cbSceneParam._m0[_2068].y, _2017 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2029, cbSceneParam._m0[_2084].w, fma(_2025, cbSceneParam._m0[_2084].z, fma(_2021, cbSceneParam._m0[_2084].y, _2017 * cbSceneParam._m0[_2084].x)));
        float _2112 = cbSceneParam._m0[33u].z * _2107;
        float _2114 = cbSceneParam._m0[33u].w * _2107;
        float _2117 = fma(_2029, cbSceneParam._m0[_2076].w, fma(_2025, cbSceneParam._m0[_2076].z, fma(_2021, cbSceneParam._m0[_2076].y, _2017 * cbSceneParam._m0[_2076].x))) / _2107;
        float _2165 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
        float _4558 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2172 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2095) / _2107, (_2114 + _2099) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2095) / _2107, (_2099 - _2112) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2112) / _2107, (_2099 - _2114) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2114) / _2107, (_2112 + _2099) / _2107), _2117), 0.0)).x), vec4(0.25)));
        _2179 = 1.0 - (_2172 * cbSceneParam._m0[34u].x);
        _2180 = 1.0 - (_2172 * cbSceneParam._m0[34u].y);
        _2181 = 1.0 - (_2172 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2179 = 1.0;
        _2180 = 1.0;
        _2181 = 1.0;
    }
    float _2245;
    float _2247;
    float _2249;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2233 = fma(_2029, cbSceneParam._m0[63u].w, fma(_2025, cbSceneParam._m0[63u].z, fma(_2021, cbSceneParam._m0[63u].y, _2017 * cbSceneParam._m0[63u].x)));
        float _2234 = fma(_2029, cbSceneParam._m0[60u].w, fma(_2025, cbSceneParam._m0[60u].z, fma(_2021, cbSceneParam._m0[60u].y, _2017 * cbSceneParam._m0[60u].x))) / _2233;
        float _2235 = fma(_2029, cbSceneParam._m0[61u].w, fma(_2025, cbSceneParam._m0[61u].z, fma(_2021, cbSceneParam._m0[61u].y, _2017 * cbSceneParam._m0[61u].x))) / _2233;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2234 >= cbSceneParam._m0[64u].x) && (_2235 >= cbSceneParam._m0[64u].y)) && (_2234 <= cbSceneParam._m0[64u].z)) && (_2235 <= cbSceneParam._m0[64u].w))
        {
            float _2373 = fma(_2029, cbSceneParam._m0[62u].w, fma(_2025, cbSceneParam._m0[62u].z, fma(_2021, cbSceneParam._m0[62u].y, _2017 * cbSceneParam._m0[62u].x))) / _2233;
            float _2377 = isnan(cbSceneParam._m0[41u].w) ? _2373 : (isnan(_2373) ? cbSceneParam._m0[41u].w : max(_2373, cbSceneParam._m0[41u].w));
            float _2420 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
            float _4574 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
            float _2427 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2234, cbSceneParam._m0[33u].w + _2235), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2234, _2235 - cbSceneParam._m0[33u].z), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].z, _2235 - cbSceneParam._m0[33u].w), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2235), _2377), 0.0)).x), vec4(0.25)));
            float _2431 = 1.0 - (_2427 * cbSceneParam._m0[34u].x);
            float _2432 = 1.0 - (_2427 * cbSceneParam._m0[34u].y);
            float _2433 = 1.0 - (_2427 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_37_36_ladder_1 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
            frontier_phi_37_36_ladder_2 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
        }
        else
        {
            frontier_phi_37_36_ladder = _2181;
            frontier_phi_37_36_ladder_1 = _2180;
            frontier_phi_37_36_ladder_2 = _2179;
        }
        _2245 = frontier_phi_37_36_ladder_2;
        _2247 = frontier_phi_37_36_ladder_1;
        _2249 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2245 = _2179;
        _2247 = _2180;
        _2249 = _2181;
    }
    uvec4 _2254 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2256 = _2254.x * 14u;
    uint _2257 = _2256 + 13u;
    float _2264 = _930 + (-1.0);
    float _2269 = (cbLight._m0[_2257].x * _2264) + 1.0;
    float _2270 = (cbLight._m0[_2257].y * _2264) + 1.0;
    float _2271 = (cbLight._m0[_2257].z * _2264) + 1.0;
    float _2272 = (cbLight._m0[_2257].w * _2264) + 1.0;
    uint _2273 = _2256 + 5u;
    float _2279 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2283 = _2256 + 4u;
    float _2292 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2296 = _2256 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_768, _769, _770));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_768, _769, _770));
    float _4610 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4621 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2273].x * _2279) * _2317) + (((cbLight._m0[_2283].x * _2245) * _2292) * _2315);
    float _2325 = ((_2279 * cbLight._m0[_2273].y) * _2317) + (((cbLight._m0[_2283].y * _2247) * _2292) * _2315);
    float _2326 = ((_2279 * cbLight._m0[_2273].z) * _2317) + (((cbLight._m0[_2283].z * _2249) * _2292) * _2315);
    uvec4 _2330 = floatBitsToUint(cbLight._m0[_2256 + 12u]);
    bool _2332 = _2330.x == 0u;
    float _2434;
    float _2436;
    float _2438;
    if (_2332)
    {
        _2434 = _2324;
        _2436 = _2325;
        _2438 = _2326;
    }
    else
    {
        uint _2442 = _2256 + 6u;
        float _2458 = (dot(vec3(cbLight._m0[_2256 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4632 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2461 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2434 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2324;
        _2436 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2325;
        _2438 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2326;
    }
    bool _2441 = _2330.y == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2441)
    {
        _2496 = _2434;
        _2498 = _2436;
        _2500 = _2438;
    }
    else
    {
        uint _2658 = _2256 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2256 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4648 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2677 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2496 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2434;
        _2498 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2436;
        _2500 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2438;
    }
    uint _2503 = _2256 + 8u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _771) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2256].x + _847;
    float _2519 = cbLight._m0[_2256].y + _848;
    float _2520 = cbLight._m0[_2256].z + _849;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2256].xyz));
    float _4664 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _4675 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _2532 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2533 = dot(vec3(_768, _769, _770), vec3(_2525, _2526, _2527));
    float _4686 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2525, _2526, _2527));
    float _4697 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2517 * _2517;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2556 = (exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2557 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2532 * ((_2531 * _2557) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2557) + _2517) * _2531))) * _2531;
    float _4708 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    uint _2584 = _2256 + 9u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _771) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2296].x + _847;
    float _2598 = cbLight._m0[_2296].y + _848;
    float _2599 = cbLight._m0[_2296].z + _849;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2296].xyz));
    float _4719 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2611 = dot(vec3(_768, _769, _770), vec3(_2604, _2605, _2606));
    float _4730 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2604, _2605, _2606));
    float _4741 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2596 * _2596;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2633 = 1.0 - _2596;
    float _2643 = (0.5 / (((_2532 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2633) + _2596) * _2610))) * _2610;
    float _4752 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    float _2655 = (((_2632 * cbLight._m0[_2584].x) * _2645) * _2279) + ((((cbLight._m0[_2503].x * _2245) * _2556) * _2570) * _2292);
    float _2656 = (((_2632 * cbLight._m0[_2584].y) * _2645) * _2279) + ((((cbLight._m0[_2503].y * _2247) * _2556) * _2570) * _2292);
    float _2657 = (((_2632 * cbLight._m0[_2584].z) * _2645) * _2279) + ((((cbLight._m0[_2503].z * _2249) * _2556) * _2570) * _2292);
    float _2713;
    float _2715;
    float _2717;
    if (_2332)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2256 + 2u;
        uint _2723 = _2256 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _771) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _847;
        float _2740 = cbLight._m0[_2719].y + _848;
        float _2741 = cbLight._m0[_2719].z + _849;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2719].xyz));
        float _4763 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2753 = dot(vec3(_768, _769, _770), vec3(_2746, _2747, _2748));
        float _4774 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4785 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2774 = (exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2775 = 1.0 - _2738;
        float _2785 = (0.5 / (((_2532 * ((_2752 * _2775) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2775) + _2738) * _2752))) * _2752;
        float _4796 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2713 = (((_2774 * cbLight._m0[_2723].x) * _2787) * _2788) + _2655;
        _2715 = (((_2774 * cbLight._m0[_2723].y) * _2787) * _2788) + _2656;
        _2717 = (((_2774 * cbLight._m0[_2723].z) * _2787) * _2788) + _2657;
    }
    float _2819;
    float _2821;
    float _2823;
    if (_2441)
    {
        _2819 = _2713;
        _2821 = _2715;
        _2823 = _2717;
    }
    else
    {
        uint _2830 = _2256 + 3u;
        uint _2834 = _2256 + 11u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _771) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _847;
        float _2851 = cbLight._m0[_2830].y + _848;
        float _2852 = cbLight._m0[_2830].z + _849;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2830].xyz));
        float _4812 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2864 = dot(vec3(_768, _769, _770), vec3(_2857, _2858, _2859));
        float _4823 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4834 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2885 = (exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2886 = 1.0 - _2849;
        float _2896 = (0.5 / (((_2532 * ((_2863 * _2886) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2886) + _2849) * _2863))) * _2863;
        float _4845 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2819 = (((_2885 * cbLight._m0[_2834].x) * _2898) * _2899) + _2713;
        _2821 = (((_2885 * cbLight._m0[_2834].y) * _2898) * _2899) + _2715;
        _2823 = (((_2885 * cbLight._m0[_2834].z) * _2898) * _2899) + _2717;
    }
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_2254.y == 0u)
    {
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.x;
        uint _2932 = uint((float(_2920.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2921))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2921)));
        float _2942 = (log2(_2032 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        uint _2946 = uint(isnan(14.0) ? _2943 : (isnan(_2943) ? 14.0 : min(_2943, 14.0)));
        uvec4 _2951 = texelFetch(g_lightClusterGridBuffer, int(((_2946 << 2u) + (_2932 << 6u)) >> 2u));
        uint _2952 = _2951.x;
        uint _2953 = _2920.z;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((((1u << ((_2953 >> 4u) & 15u)) + 4294967295u) & _2952) == 0u) || ((_2953 & 240u) == 0u))
        {
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
        }
        else
        {
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3200)
                {
                    frontier_phi_71_pred = _3189;
                    frontier_phi_71_pred_1 = _3188;
                    frontier_phi_71_pred_2 = _3187;
                    frontier_phi_71_pred_3 = _3186;
                    frontier_phi_71_pred_4 = _3185;
                    frontier_phi_71_pred_5 = _3184;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3199;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3190 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2030;
                        float _3396 = _3355.y - _2031;
                        float _3397 = _3355.z - _2032;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_886, _889, _892), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4871 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2030;
                        float _3431 = (-0.0) - _2031;
                        float _3432 = (-0.0) - _2032;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3446 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _946;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_886, _889, _892), vec3(_3437, _3438, _3439));
                        float _4887 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3471 = dot(vec3(_886, _889, _892), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4898 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3415 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3405) + _3480;
                        float _4909 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4920 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3506 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3478 * _3478) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3259 = (_3426 * _3374.x) + _3332;
                        _3260 = (_3426 * _3374.y) + _3333;
                        _3261 = (_3426 * _3374.z) + _3334;
                        _3256 = (_3506 * _3391.x) + _3329;
                        _3257 = (_3506 * _3391.y) + _3330;
                        _3258 = (_3506 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_71_pred = _3261;
                    frontier_phi_71_pred_1 = _3260;
                    frontier_phi_71_pred_2 = _3259;
                    frontier_phi_71_pred_3 = _3258;
                    frontier_phi_71_pred_4 = _3257;
                    frontier_phi_71_pred_5 = _3256;
                }
                _3043 = frontier_phi_71_pred;
                _3041 = frontier_phi_71_pred_1;
                _3039 = frontier_phi_71_pred_2;
                _3037 = frontier_phi_71_pred_3;
                _3035 = frontier_phi_71_pred_4;
                _3033 = frontier_phi_71_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3033;
                    _3185 = _3035;
                    _3186 = _3037;
                    _3187 = _3039;
                    _3188 = _3041;
                    _3189 = _3043;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
        }
        uvec4 _3046 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3047 = _3046.z;
        uint _3049 = (_3047 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3049) & _2952) == 0u)
        {
            _3152 = _3032;
            _3154 = _3034;
            _3156 = _3036;
            _3158 = _3038;
            _3160 = _3040;
            _3162 = _3042;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
            float _3178 = _3177 * _2030;
            float _3179 = _3177 * _2031;
            float _3180 = _3177 * _2032;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3049 < ((_3047 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3312 = _3032;
                float _3313 = _3034;
                float _3314 = _3036;
                float _3315 = _3038;
                float _3316 = _3040;
                float _3317 = _3042;
                uint _3318 = _3049;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3328)
                    {
                        frontier_phi_82_pred = _3317;
                        frontier_phi_82_pred_1 = _3316;
                        frontier_phi_82_pred_2 = _3315;
                        frontier_phi_82_pred_3 = _3314;
                        frontier_phi_82_pred_4 = _3313;
                        frontier_phi_82_pred_5 = _3312;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        float _3537 = _3316;
                        float _3538 = _3317;
                        uint _3539 = _3327;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3550 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3611 = (_3550 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3550 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3550 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2032, _3658.z, fma(_2031, _3658.y, _3658.x * _2030)) + _3658.w;
                            _3671 = !((fma(_2032, _3639.z, fma(_2031, _3639.y, _3639.x * _2030)) + _3639.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3565.x - _2030;
                                float _3699 = _3565.y - _2031;
                                float _3700 = _3565.z - _2032;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3566 * _3566));
                                float _4931 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3716 = sqrt(_3701) * _3581.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_886, _889, _892))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2032, _3608.z, fma(_2031, _3608.y, _3608.x * _2030)) + _3608.w) / _3670;
                                float _3730 = (fma(_2032, _3624.z, fma(_2031, _3624.y, _3624.x * _2030)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4947 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _946;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3178;
                                float _3760 = _3706 - _3179;
                                float _3761 = _3707 - _3180;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4958 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3773 = dot(vec3(_886, _889, _892), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4969 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_886, _889, _892), vec3(_3705, _3706, _3707))) + _3782;
                                float _4980 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4991 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3736 * _3581.z;
                                frontier_phi_88_pred_1 = _3736 * _3581.y;
                                frontier_phi_88_pred_2 = _3736 * _3581.x;
                                frontier_phi_88_pred_3 = _3810 * _3593.z;
                                frontier_phi_88_pred_4 = _3810 * _3593.y;
                                frontier_phi_88_pred_5 = _3810 * _3593.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_88_pred;
                            _3818 = frontier_phi_88_pred_1;
                            _3817 = frontier_phi_88_pred_2;
                            _3816 = frontier_phi_88_pred_3;
                            _3815 = frontier_phi_88_pred_4;
                            _3814 = frontier_phi_88_pred_5;
                            _3523 = _3817 + _3536;
                            _3524 = _3818 + _3537;
                            _3525 = _3819 + _3538;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            _3522 = _3816 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3525;
                        frontier_phi_82_pred_1 = _3524;
                        frontier_phi_82_pred_2 = _3523;
                        frontier_phi_82_pred_3 = _3522;
                        frontier_phi_82_pred_4 = _3521;
                        frontier_phi_82_pred_5 = _3520;
                    }
                    _3163 = frontier_phi_82_pred;
                    _3161 = frontier_phi_82_pred_1;
                    _3159 = frontier_phi_82_pred_2;
                    _3157 = frontier_phi_82_pred_3;
                    _3155 = frontier_phi_82_pred_4;
                    _3153 = frontier_phi_82_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3153;
                        _3313 = _3155;
                        _3314 = _3157;
                        _3315 = _3159;
                        _3316 = _3161;
                        _3317 = _3163;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3159;
                frontier_phi_63_64_ladder_1 = _3163;
                frontier_phi_63_64_ladder_2 = _3161;
                frontier_phi_63_64_ladder_3 = _3157;
                frontier_phi_63_64_ladder_4 = _3155;
                frontier_phi_63_64_ladder_5 = _3153;
            }
            else
            {
                frontier_phi_63_64_ladder = _3038;
                frontier_phi_63_64_ladder_1 = _3042;
                frontier_phi_63_64_ladder_2 = _3040;
                frontier_phi_63_64_ladder_3 = _3036;
                frontier_phi_63_64_ladder_4 = _3034;
                frontier_phi_63_64_ladder_5 = _3032;
            }
            _3152 = frontier_phi_63_64_ladder_5;
            _3154 = frontier_phi_63_64_ladder_4;
            _3156 = frontier_phi_63_64_ladder_3;
            _3158 = frontier_phi_63_64_ladder;
            _3160 = frontier_phi_63_64_ladder_2;
            _3162 = frontier_phi_63_64_ladder_1;
        }
        float _3167 = isnan(1.0) ? _930 : (isnan(_930) ? 1.0 : min(_930, 1.0));
        _2965 = (_3167 * _3158) + _2496;
        _2967 = (_3167 * _3160) + _2498;
        _2969 = (_3167 * _3162) + _2500;
        _2971 = ((_3152 * 0.039999999105930328369140625) * _3167) + _2819;
        _2973 = ((_3154 * 0.039999999105930328369140625) * _3167) + _2821;
        _2975 = ((_3156 * 0.039999999105930328369140625) * _3167) + _2823;
    }
    else
    {
        _2965 = _2496;
        _2967 = _2498;
        _2969 = _2500;
        _2971 = _2819;
        _2973 = _2821;
        _2975 = _2823;
    }
    float _5007 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _5018 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _5029 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2992 = ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2965 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _930))) + ((_2971 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    float _2993 = ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2967 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _930))) + ((_2973 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    float _2994 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2969 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _930))) + ((_2975 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    uint _2995 = _253 + 6u;
    float _3003 = _867 / cbSceneParam._m0[86u].x;
    float _3004 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3020 = _3018.x;
    float _3021 = _3018.y;
    float _3022 = _3018.z;
    float _3023 = _3018.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _3057 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _3058 = _3057 / _789;
        float _3069 = _3058 * _840;
        float _3070 = _841 * _3058;
        float _3071 = (-0.0) - _3070;
        float _3072 = _3058 * _842;
        float _3074 = (cbSceneParam._m0[77u].w * _3071) / _3057;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3070;
        float _3082 = sqrt(((_3069 * _3069) + (_3070 * _3070)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3057)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3071 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3215 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3269 = ((abs(_3082 / _3071) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3092 * _3224) - exp2(_3092 * _3225)) * _3213))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3023);
        _3094 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _3020;
        _3096 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3021;
        _3098 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3022;
        _3100 = _3280 * _3023;
    }
    else
    {
        _3094 = _3020;
        _3096 = _3021;
        _3098 = _3022;
        _3100 = _3023;
    }
    bool _3307;
    vec4 _3110;
    vec4 _3132;
    float _3134;
    float _3138;
    float _3139;
    float _3140;
    float _3141;
    bool _3151;
    for (;;)
    {
        _3110 = cbMatDynParam._m0[0u];
        float _3112 = roundEven(_3110.y);
        bool _3113 = _3112 == 3.0;
        float _3114 = log2(_3100);
        float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * _2992;
        float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * _2993;
        float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * _2994;
        float _3130 = _856 + (-0.5);
        _3132 = cbMtdParam._m0[1u];
        _3134 = _3132.y * _3130;
        float _3137 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3138 = _3137 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
        _3139 = _3137 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
        _3140 = _3137 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
        _3141 = _3130 * 0.999000012874603271484375;
        _3151 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3151)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3141) < 0.5)
            {
                _3307 = true;
                break;
            }
        }
        uint _3248 = _905 + uint(_3110.w);
        if ((cbInstanceData._m0[_3248].w < 1.0) && ((cbInstanceData._m0[_3248].w + _3141) < 0.5))
        {
            _3307 = true;
            break;
        }
        if ((_3134 + 1.0) < _3132.x)
        {
            _3307 = true;
            break;
        }
        _3307 = false;
        break;
    }
    float _3511;
    if (_3307)
    {
        discard_state = true;
        _3511 = 0.0;
    }
    else
    {
        _3511 = cbInstanceData._m0[_2995].w;
    }
    SV_Target.x = _3138;
    SV_Target.y = _3139;
    SV_Target.z = _3140;
    SV_Target.w = _3511;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2995].w;
    discard_exit();
}


