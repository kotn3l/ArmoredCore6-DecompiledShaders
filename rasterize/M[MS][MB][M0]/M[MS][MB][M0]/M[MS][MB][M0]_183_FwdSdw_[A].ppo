#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1320;
float _3962;
float _3963;
float _3964;
float _3965;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3974 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3985 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3996 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4007 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _431 = (_424 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _432 = (_424 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _433 = (_424 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[24u].x) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4018 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    float _510 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _504;
    float _513 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _505;
    float _516 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _506;
    float _523 = ((_504 - _510) * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) + _510;
    float _524 = ((_505 - _513) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) + _513;
    float _525 = ((_506 - _516) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) + _516;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _424) + _584;
    float _594 = ((_565.y - _585) * _424) + _585;
    float _595 = ((_565.z - _586) * _424) + _586;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _497) + _595;
    float _623 = ((((_607.x - _593) * _497) + _593) * 2.0) + (-1.0);
    float _624 = ((((_607.y - _594) * _497) + _594) * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _4029 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _630 = sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))));
    vec4 _643 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _661 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _663 = _661.x;
    float _664 = 1.0 - _663;
    float _677 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_663 - _664) * cbMtdParam._m0[24u].z) + _664) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4040 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _685 = (_678 * (cbMtdParam._m0[17u].x - _523)) + _523;
    float _686 = (_678 * (cbMtdParam._m0[17u].y - _524)) + _524;
    float _687 = (_678 * (cbMtdParam._m0[17u].z - _525)) + _525;
    float _692 = (((_542.z - _620) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _620;
    vec4 _705 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _712 = (_705.x * 2.0) + (-1.0);
    float _713 = (_705.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _4051 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _722 = (_678 * (_705.z - _692)) + _692;
    float _727 = _623 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_542.x * 2.0) + (-1.0)));
    float _728 = _624 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_542.y * 2.0) + (-1.0)));
    float _740 = (((_712 - _727) + (cbMtdParam._m0[21u].x * _727)) * _678) + _727;
    float _741 = (((_713 - _728) + (cbMtdParam._m0[21u].x * _728)) * _678) + _728;
    float _742 = (_678 * (sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) - _630)) + _630;
    float _744 = cbMtdParam._m0[22u].x + _643.w;
    float _747 = fma(_742, _240 * NORMAL.x, fma(_741, _247 * TANGENT.x, (_233 * _225) * _740));
    float _750 = fma(_742, _240 * NORMAL.y, fma(_741, _247 * TANGENT.y, (_233 * _226) * _740));
    float _753 = fma(_742, _240 * NORMAL.z, fma(_741, _247 * TANGENT.z, (_233 * _227) * _740));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _4062 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _761 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4084 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4095 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4106 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    vec4 _845 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _847 = _845.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1001 = sqrt(((_831 * _831) + (_832 * _832)) + (_833 * _833));
        float _1007 = (cbMatDynParam._m0[5u].x * _1001) + cbMatDynParam._m0[5u].y;
        float _4117 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1012 = (cbMatDynParam._m0[5u].z * _1001) + cbMatDynParam._m0[5u].w;
        float _4128 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) - _1008)) + _1008) < ((_847 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _880 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _883 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _896 = _274 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_897].z;
    float _4139 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    vec4 _917 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _921 = ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * TEXCOORD_5.w) * _917.x;
    float _922 = dot(vec3(_758, _759, _760), vec3(_838, _839, _840));
    float _925 = _922 * 2.0;
    float _929 = (_925 * _758) - _838;
    float _930 = (_925 * _759) - _839;
    float _931 = (_925 * _760) - _840;
    float _935 = abs(dot(vec3(_838, _839, _840), vec3(_758, _759, _760)));
    float _4172 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _937 = sqrt(_761);
    float _950 = exp2((_937 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_937 * 3.0));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1319;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1044 = fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982));
        float _1048 = fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982));
        float _1052 = fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982));
        float _1077 = _982 + _758;
        float _1078 = _986 + _759;
        float _1079 = _990 + _760;
        float _1089 = fma(_1079, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077)) - _1044;
        float _1090 = fma(_1079, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077)) - _1048;
        float _1091 = fma(_1079, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077)) - _1052;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1044 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1048 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[34u].z) + ((((((_1052 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1147 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1113.x + (-0.5));
        float _1149 = _1147 * (_1113.y + (-0.5));
        float _1150 = _1147 * (_1113.z + (-0.5));
        float _1157 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1120.x + (-0.5));
        float _1159 = _1157 * (_1120.y + (-0.5));
        float _1160 = _1157 * (_1120.z + (-0.5));
        float _1167 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1127.x + (-0.5));
        float _1169 = _1167 * (_1127.y + (-0.5));
        float _1170 = _1167 * (_1127.z + (-0.5));
        float _1177 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1134.x + (-0.5));
        float _1179 = _1177 * (_1134.y + (-0.5));
        float _1180 = _1177 * (_1134.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1201 = (dot(vec3(_758, _759, _760), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1211 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1213 + 1.0))) + _1218) * _1181;
        float _1228 = _1149 * 0.5;
        float _1229 = _1159 * 0.5;
        float _1230 = _1169 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_758, _759, _760), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4253 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1255 + 1.0))) + _1260) * _1182;
        float _1270 = _1150 * 0.5;
        float _1271 = _1160 * 0.5;
        float _1272 = _1170 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_758, _759, _760), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4286 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1297 + 1.0))) + _1302) * _1183;
        _1319 = _1150;
        _1321 = _1149;
        _1322 = _1148;
        _1323 = _1160;
        _1324 = _1159;
        _1325 = _1158;
        _1326 = _1170;
        _1327 = _1169;
        _1328 = _1168;
        _1329 = _1183;
        _1330 = _1182;
        _1331 = _1181;
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1320;
        _1321 = _1320;
        _1322 = _1320;
        _1323 = _1320;
        _1324 = _1320;
        _1325 = _1320;
        _1326 = _1320;
        _1327 = _1320;
        _1328 = _1320;
        _1329 = _1320;
        _1330 = _1320;
        _1331 = _1320;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982));
        float _1365 = fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982));
        float _1369 = fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982));
        float _1392 = _982 + _758;
        float _1393 = _986 + _759;
        float _1394 = _990 + _760;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_758, _759, _760), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4349 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_758, _759, _760), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4382 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_758, _759, _760), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4415 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1320;
        _1631 = _1320;
        _1632 = _1320;
        _1633 = _1320;
        _1634 = _1320;
        _1635 = _1320;
        _1636 = _1320;
        _1637 = _1320;
        _1638 = _1320;
        _1639 = _1320;
        _1640 = _1320;
        _1641 = _1320;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1332)) + _1332;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1333)) + _1333;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1334)) + _1334;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _929 * 0.5;
    float _1699 = _930 * 0.5;
    float _1700 = _931 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1319, _1323, _1326, _1329));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1829 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1832 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1860 = frontier_phi_17_15_ladder;
        }
        float _2030;
        if (_1829 > 0.0)
        {
            _2030 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2030 = frontier_phi_26_22_ladder;
        }
        float _2325;
        if (_1832 > 0.0)
        {
            _2325 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2325 = frontier_phi_38_33_ladder;
        }
        float _2327 = isnan(_2030) ? _1860 : (isnan(_1860) ? _2030 : min(_1860, _2030));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1826) + _1815;
        float _2333 = (_2328 * _1829) + _1819;
        float _2334 = (_2328 * _1832) + _1823;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_16_38_ladder_2;
        _1850 = frontier_phi_16_38_ladder_1;
        _1852 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1767);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1911 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1915 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1919 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1922 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1925 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1928 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2035;
        if (_1922 > 0.0)
        {
            _2035 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2035 = frontier_phi_28_24_ladder;
        }
        float _2352;
        if (_1925 > 0.0)
        {
            _2352 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2352 = frontier_phi_40_35_ladder;
        }
        float _2679;
        if (_1928 > 0.0)
        {
            _2679 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2679 = frontier_phi_50_47_ladder;
        }
        float _2681 = isnan(_2352) ? _2035 : (isnan(_2035) ? _2352 : min(_2035, _2352));
        float _2682 = isnan(_2679) ? _2681 : (isnan(_2681) ? _2679 : min(_2681, _2679));
        float _2686 = (_2682 * _1922) + _1911;
        float _2687 = (_2682 * _1925) + _1915;
        float _2688 = (_2682 * _1928) + _1919;
        float _2689 = _2682 * 9.9999997473787516355514526367188e-05;
        float _2690 = (-1.0) - _2689;
        float _2692 = _2689 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2688 > _2692) || ((_2688 < _2690) || ((_2687 > _2692) || ((_2687 < _2690) || ((_2686 < _2690) || (_2686 > _2692))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2688, cbModelParam._m0[17u].z, fma(_2687, cbModelParam._m0[17u].y, _2686 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2688, cbModelParam._m0[18u].z, fma(_2687, cbModelParam._m0[18u].y, _2686 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2688, cbModelParam._m0[19u].z, fma(_2687, cbModelParam._m0[19u].y, _2686 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_25_50_ladder = _2806.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2806.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2806.x * cbModelParam._m0[1u].z;
        }
        _1947 = frontier_phi_25_50_ladder_2;
        _1949 = frontier_phi_25_50_ladder_1;
        _1951 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1857);
        _1947 = _1931.x * cbModelParam._m0[1u].z;
        _1949 = _1931.y * cbModelParam._m0[1u].z;
        _1951 = _1931.z * cbModelParam._m0[1u].z;
    }
    float _1963 = ((((1.0 - _950) * ((_937 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_950 * _937)) * _921;
    float _1964 = _1963 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1965 = _1963 * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1966 = _1963 * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, _1964 * cbSceneParam._m0[91u].x));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2022 = _2009 / _2021;
    float _2023 = _2013 / _2021;
    float _2024 = _2017 / _2021;
    float _2171;
    float _2172;
    float _2173;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2051 = ((uint(_2024 > cbSceneParam._m0[59u].y) + uint(_2024 > cbSceneParam._m0[59u].x)) + uint(_2024 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2052 = _2051 + 43u;
        uint _2060 = _2051 + 44u;
        uint _2068 = _2051 + 45u;
        uint _2076 = _2051 + 46u;
        float _2087 = fma(_2021, cbSceneParam._m0[_2052].w, fma(_2017, cbSceneParam._m0[_2052].z, fma(_2013, cbSceneParam._m0[_2052].y, _2009 * cbSceneParam._m0[_2052].x)));
        float _2091 = fma(_2021, cbSceneParam._m0[_2060].w, fma(_2017, cbSceneParam._m0[_2060].z, fma(_2013, cbSceneParam._m0[_2060].y, _2009 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2021, cbSceneParam._m0[_2076].w, fma(_2017, cbSceneParam._m0[_2076].z, fma(_2013, cbSceneParam._m0[_2076].y, _2009 * cbSceneParam._m0[_2076].x)));
        float _2104 = cbSceneParam._m0[33u].z * _2099;
        float _2106 = cbSceneParam._m0[33u].w * _2099;
        float _2109 = fma(_2021, cbSceneParam._m0[_2068].w, fma(_2017, cbSceneParam._m0[_2068].z, fma(_2013, cbSceneParam._m0[_2068].y, _2009 * cbSceneParam._m0[_2068].x))) / _2099;
        float _2157 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
        float _4541 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2164 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2087) / _2099, (_2106 + _2091) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 + _2087) / _2099, (_2091 - _2104) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2104) / _2099, (_2091 - _2106) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2106) / _2099, (_2104 + _2091) / _2099), _2109), 0.0)).x), vec4(0.25)));
        _2171 = 1.0 - (_2164 * cbSceneParam._m0[34u].x);
        _2172 = 1.0 - (_2164 * cbSceneParam._m0[34u].y);
        _2173 = 1.0 - (_2164 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2171 = 1.0;
        _2172 = 1.0;
        _2173 = 1.0;
    }
    float _2237;
    float _2239;
    float _2241;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2225 = fma(_2021, cbSceneParam._m0[63u].w, fma(_2017, cbSceneParam._m0[63u].z, fma(_2013, cbSceneParam._m0[63u].y, _2009 * cbSceneParam._m0[63u].x)));
        float _2226 = fma(_2021, cbSceneParam._m0[60u].w, fma(_2017, cbSceneParam._m0[60u].z, fma(_2013, cbSceneParam._m0[60u].y, _2009 * cbSceneParam._m0[60u].x))) / _2225;
        float _2227 = fma(_2021, cbSceneParam._m0[61u].w, fma(_2017, cbSceneParam._m0[61u].z, fma(_2013, cbSceneParam._m0[61u].y, _2009 * cbSceneParam._m0[61u].x))) / _2225;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2226 >= cbSceneParam._m0[64u].x) && (_2227 >= cbSceneParam._m0[64u].y)) && (_2226 <= cbSceneParam._m0[64u].z)) && (_2227 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_2021, cbSceneParam._m0[62u].w, fma(_2017, cbSceneParam._m0[62u].z, fma(_2013, cbSceneParam._m0[62u].y, _2009 * cbSceneParam._m0[62u].x))) / _2225;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
            float _4557 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2226, cbSceneParam._m0[33u].w + _2227), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2226, _2227 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].z, _2227 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2227), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2425) ? _2173 : (isnan(_2173) ? _2425 : min(_2173, _2425));
            frontier_phi_37_36_ladder_1 = isnan(_2424) ? _2172 : (isnan(_2172) ? _2424 : min(_2172, _2424));
            frontier_phi_37_36_ladder_2 = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
        }
        else
        {
            frontier_phi_37_36_ladder = _2173;
            frontier_phi_37_36_ladder_1 = _2172;
            frontier_phi_37_36_ladder_2 = _2171;
        }
        _2237 = frontier_phi_37_36_ladder_2;
        _2239 = frontier_phi_37_36_ladder_1;
        _2241 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2237 = _2171;
        _2239 = _2172;
        _2241 = _2173;
    }
    uvec4 _2246 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2248 = _2246.x * 14u;
    uint _2249 = _2248 + 13u;
    float _2256 = _921 + (-1.0);
    float _2261 = (cbLight._m0[_2249].x * _2256) + 1.0;
    float _2262 = (cbLight._m0[_2249].y * _2256) + 1.0;
    float _2263 = (cbLight._m0[_2249].z * _2256) + 1.0;
    float _2264 = (cbLight._m0[_2249].w * _2256) + 1.0;
    uint _2265 = _2248 + 5u;
    float _2271 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2275 = _2248 + 4u;
    float _2284 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2288 = _2248 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_758, _759, _760));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_758, _759, _760));
    float _4593 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4604 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2265].x * _2271) * _2309) + (((cbLight._m0[_2275].x * _2237) * _2284) * _2307);
    float _2317 = ((_2271 * cbLight._m0[_2265].y) * _2309) + (((cbLight._m0[_2275].y * _2239) * _2284) * _2307);
    float _2318 = ((_2271 * cbLight._m0[_2265].z) * _2309) + (((cbLight._m0[_2275].z * _2241) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2248 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2324)
    {
        _2426 = _2316;
        _2428 = _2317;
        _2430 = _2318;
    }
    else
    {
        uint _2434 = _2248 + 6u;
        float _2450 = (dot(vec3(cbLight._m0[_2248 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4615 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2453 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2426 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2316;
        _2428 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2317;
        _2430 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2318;
    }
    bool _2433 = _2322.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2433)
    {
        _2488 = _2426;
        _2490 = _2428;
        _2492 = _2430;
    }
    else
    {
        uint _2650 = _2248 + 7u;
        float _2666 = (dot(vec3(cbLight._m0[_2248 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2667 = _2666 * _2666;
        float _4631 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2668 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2669 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2488 = (((cbLight._m0[_2650].x * 0.3183098733425140380859375) * _2668) * _2669) + _2426;
        _2490 = (((cbLight._m0[_2650].y * 0.3183098733425140380859375) * _2668) * _2669) + _2428;
        _2492 = (((cbLight._m0[_2650].z * 0.3183098733425140380859375) * _2668) * _2669) + _2430;
    }
    uint _2495 = _2248 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _761) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2248].x + _838;
    float _2511 = cbLight._m0[_2248].y + _839;
    float _2512 = cbLight._m0[_2248].z + _840;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2248].xyz));
    float _4647 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _4658 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2524 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2525 = dot(vec3(_758, _759, _760), vec3(_2517, _2518, _2519));
    float _4669 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2517, _2518, _2519));
    float _4680 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2549 = 1.0 - _2509;
    float _2560 = (0.5 / (((_2524 * ((_2523 * _2549) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2549) + _2509) * _2523))) * _2523;
    float _4691 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2576 = _2248 + 9u;
    float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _761) * 0.949999988079071044921875);
    float _2588 = _2587 * _2587;
    float _2589 = cbLight._m0[_2288].x + _838;
    float _2590 = cbLight._m0[_2288].y + _839;
    float _2591 = cbLight._m0[_2288].z + _840;
    float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
    float _2596 = _2595 * _2589;
    float _2597 = _2595 * _2590;
    float _2598 = _2595 * _2591;
    float _2599 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2288].xyz));
    float _4702 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2603 = dot(vec3(_758, _759, _760), vec3(_2596, _2597, _2598));
    float _4713 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2596, _2597, _2598));
    float _4724 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2588 * _2588;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2625 = 1.0 - _2588;
    float _2635 = (0.5 / (((_2524 * ((_2602 * _2625) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2625) + _2588) * _2602))) * _2602;
    float _4735 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2637 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    float _2647 = (((_2624 * cbLight._m0[_2576].x) * _2637) * _2271) + ((((cbLight._m0[_2495].x * _2237) * _2548) * _2562) * _2284);
    float _2648 = (((_2624 * cbLight._m0[_2576].y) * _2637) * _2271) + ((((cbLight._m0[_2495].y * _2239) * _2548) * _2562) * _2284);
    float _2649 = (((_2624 * cbLight._m0[_2576].z) * _2637) * _2271) + ((((cbLight._m0[_2495].z * _2241) * _2548) * _2562) * _2284);
    float _2705;
    float _2707;
    float _2709;
    if (_2324)
    {
        _2705 = _2647;
        _2707 = _2648;
        _2709 = _2649;
    }
    else
    {
        uint _2711 = _2248 + 2u;
        uint _2715 = _2248 + 10u;
        float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _761) * 0.949999988079071044921875);
        float _2730 = _2729 * _2729;
        float _2731 = cbLight._m0[_2711].x + _838;
        float _2732 = cbLight._m0[_2711].y + _839;
        float _2733 = cbLight._m0[_2711].z + _840;
        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
        float _2738 = _2737 * _2731;
        float _2739 = _2737 * _2732;
        float _2740 = _2737 * _2733;
        float _2741 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2711].xyz));
        float _4746 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2745 = dot(vec3(_758, _759, _760), vec3(_2738, _2739, _2740));
        float _4757 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2749 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_2738, _2739, _2740));
        float _4768 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2753 = _2730 * _2730;
        float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
        float _2766 = (exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2767 = 1.0 - _2730;
        float _2777 = (0.5 / (((_2524 * ((_2744 * _2767) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2767) + _2730) * _2744))) * _2744;
        float _4779 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2705 = (((_2766 * cbLight._m0[_2715].x) * _2779) * _2780) + _2647;
        _2707 = (((_2766 * cbLight._m0[_2715].y) * _2779) * _2780) + _2648;
        _2709 = (((_2766 * cbLight._m0[_2715].z) * _2779) * _2780) + _2649;
    }
    float _2811;
    float _2813;
    float _2815;
    if (_2433)
    {
        _2811 = _2705;
        _2813 = _2707;
        _2815 = _2709;
    }
    else
    {
        uint _2822 = _2248 + 3u;
        uint _2826 = _2248 + 11u;
        float _2840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2822].w)) * _761) * 0.949999988079071044921875);
        float _2841 = _2840 * _2840;
        float _2842 = cbLight._m0[_2822].x + _838;
        float _2843 = cbLight._m0[_2822].y + _839;
        float _2844 = cbLight._m0[_2822].z + _840;
        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
        float _2849 = _2848 * _2842;
        float _2850 = _2848 * _2843;
        float _2851 = _2848 * _2844;
        float _2852 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2822].xyz));
        float _4795 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2856 = dot(vec3(_758, _759, _760), vec3(_2849, _2850, _2851));
        float _4806 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2860 = dot(vec3(cbLight._m0[_2822].xyz), vec3(_2849, _2850, _2851));
        float _4817 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2864 = _2841 * _2841;
        float _2868 = ((_2859 * _2859) * (_2864 + (-1.0))) + 1.0;
        float _2877 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2878 = 1.0 - _2841;
        float _2888 = (0.5 / (((_2524 * ((_2855 * _2878) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2878) + _2841) * _2855))) * _2855;
        float _4828 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2890 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2864 / ((_2868 * _2868) * 3.141590118408203125));
        float _2891 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2811 = (((_2877 * cbLight._m0[_2826].x) * _2890) * _2891) + _2705;
        _2813 = (((_2877 * cbLight._m0[_2826].y) * _2890) * _2891) + _2707;
        _2815 = (((_2877 * cbLight._m0[_2826].z) * _2890) * _2891) + _2709;
    }
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_2246.y == 0u)
    {
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.x;
        uint _2924 = uint((float(_2912.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2913))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2913)));
        float _2934 = (log2(_2024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2935 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        uint _2938 = uint(isnan(14.0) ? _2935 : (isnan(_2935) ? 14.0 : min(_2935, 14.0)));
        uvec4 _2943 = texelFetch(g_lightClusterGridBuffer, int(((_2938 << 2u) + (_2924 << 6u)) >> 2u));
        uint _2944 = _2943.x;
        uint _2945 = _2912.z;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((((1u << ((_2945 >> 4u) & 15u)) + 4294967295u) & _2944) == 0u) || ((_2945 & 240u) == 0u))
        {
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
        }
        else
        {
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            uint _3183 = 0u;
            uint _3192;
            bool _3193;
            for (;;)
            {
                _3192 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                _3193 = _3192 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3193)
                {
                    frontier_phi_71_pred = _3182;
                    frontier_phi_71_pred_1 = _3181;
                    frontier_phi_71_pred_2 = _3180;
                    frontier_phi_71_pred_3 = _3179;
                    frontier_phi_71_pred_4 = _3178;
                    frontier_phi_71_pred_5 = _3177;
                }
                else
                {
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    uint _3328;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3192;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    for (;;)
                    {
                        uint _3332 = uint(findLSB(_3328)) + (_3183 << 5u);
                        uint _3329 = (_3328 + 4294967295u) & _3328;
                        uint _3334 = _3332 * 48u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3354 = (_3332 * 48u) + 4u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3373 = (_3332 * 48u) + 8u;
                        vec3 _3384 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x));
                        float _3388 = _3348.x - _2022;
                        float _3389 = _3348.y - _2023;
                        float _3390 = _3348.z - _2024;
                        float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                        float _3394 = inversesqrt(_3391);
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3398 = dot(vec3(_877, _880, _883), vec3(_3395, _3396, _3397));
                        float _3403 = 1.0 - (_3391 * _3348.w);
                        float _4854 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3405 = sqrt(_3391) * _3367.w;
                        float _3408 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3398) + _3409;
                        float _3415 = _3405 * _3405;
                        float _3419 = ((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3404) / ((_3415 * 0.699999988079071044921875) + 1.0);
                        float _3423 = (-0.0) - _2022;
                        float _3424 = (-0.0) - _2023;
                        float _3425 = (-0.0) - _2024;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3439 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                        float _3440 = 1.0 - _937;
                        float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                        float _3448 = _3447 * _3447;
                        float _3449 = _3448 * _3448;
                        float _3450 = _3430 + _3395;
                        float _3451 = _3431 + _3396;
                        float _3452 = _3432 + _3397;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3460 = dot(vec3(_877, _880, _883), vec3(_3430, _3431, _3432));
                        float _4870 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3464 = dot(vec3(_877, _880, _883), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                        float _4881 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                        float _3472 = _3408 * _3448;
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3398) + _3473;
                        float _4892 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3477 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3478 = 1.0 - _3448;
                        float _3488 = (0.5 / (((_3477 * ((_3463 * _3478) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3448) * _3463))) * _3477;
                        float _4903 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3499 = (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3471 * _3471) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125))) * _3404;
                        _3252 = (_3419 * _3367.x) + _3325;
                        _3253 = (_3419 * _3367.y) + _3326;
                        _3254 = (_3419 * _3367.z) + _3327;
                        _3249 = (_3499 * _3384.x) + _3322;
                        _3250 = (_3499 * _3384.y) + _3323;
                        _3251 = (_3499 * _3384.z) + _3324;
                        if (_3329 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3329;
                        }
                    }
                    frontier_phi_71_pred = _3254;
                    frontier_phi_71_pred_1 = _3253;
                    frontier_phi_71_pred_2 = _3252;
                    frontier_phi_71_pred_3 = _3251;
                    frontier_phi_71_pred_4 = _3250;
                    frontier_phi_71_pred_5 = _3249;
                }
                _3035 = frontier_phi_71_pred;
                _3033 = frontier_phi_71_pred_1;
                _3031 = frontier_phi_71_pred_2;
                _3029 = frontier_phi_71_pred_3;
                _3027 = frontier_phi_71_pred_4;
                _3025 = frontier_phi_71_pred_5;
                uint _3184 = _3183 + 1u;
                if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3177 = _3025;
                    _3178 = _3027;
                    _3179 = _3029;
                    _3180 = _3031;
                    _3181 = _3033;
                    _3182 = _3035;
                    _3183 = _3184;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
        }
        uvec4 _3038 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3039 = _3038.z;
        uint _3041 = (_3039 >> 8u) & 15u;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        if (((4294967295u << _3041) & _2944) == 0u)
        {
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
            _3153 = _3032;
            _3155 = _3034;
        }
        else
        {
            float _3170 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
            float _3171 = _3170 * _2022;
            float _3172 = _3170 * _2023;
            float _3173 = _3170 * _2024;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3041 < ((_3039 >> 12u) & 15u))
            {
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3305 = _3024;
                float _3306 = _3026;
                float _3307 = _3028;
                float _3308 = _3030;
                float _3309 = _3032;
                float _3310 = _3034;
                uint _3311 = _3041;
                uint _3320;
                bool _3321;
                for (;;)
                {
                    _3320 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3311 << 2u)) >> 2u)).x;
                    _3321 = _3320 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3321)
                    {
                        frontier_phi_82_pred = _3310;
                        frontier_phi_82_pred_1 = _3309;
                        frontier_phi_82_pred_2 = _3308;
                        frontier_phi_82_pred_3 = _3307;
                        frontier_phi_82_pred_4 = _3306;
                        frontier_phi_82_pred_5 = _3305;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        float _3530 = _3309;
                        float _3531 = _3310;
                        uint _3532 = _3320;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3616;
                        float _3662;
                        bool _3663;
                        for (;;)
                        {
                            uint _3543 = ((_3311 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3543 * 40u) + 20u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3543 * 40u) + 24u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3637 = (_3543 * 40u) + 28u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3662 = fma(_2024, _3650.z, fma(_2023, _3650.y, _3650.x * _2022)) + _3650.w;
                            _3663 = !((fma(_2024, _3631.z, fma(_2023, _3631.y, _3631.x * _2022)) + _3631.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3663)
                            {
                                float _3690 = _3558.x - _2022;
                                float _3691 = _3558.y - _2023;
                                float _3692 = _3558.z - _2024;
                                float _3693 = dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692));
                                float _3696 = inversesqrt(_3693);
                                float _3697 = _3696 * _3690;
                                float _3698 = _3696 * _3691;
                                float _3699 = _3696 * _3692;
                                float _3703 = 1.0 - (_3693 / (_3559 * _3559));
                                float _4914 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3708 = sqrt(_3693) * _3574.w;
                                float _3710 = 1.39999997615814208984375 / (_3708 + 1.39999997615814208984375);
                                float _3711 = _3710 * _3710;
                                float _3714 = ((1.0 - _3711) * dot(vec3(_3697, _3698, _3699), vec3(_877, _880, _883))) + _3711;
                                float _3717 = _3708 * _3708;
                                float _3721 = (fma(_2024, _3601.z, fma(_2023, _3601.y, _3601.x * _2022)) + _3601.w) / _3662;
                                float _3722 = (fma(_2024, _3616.z, fma(_2023, _3616.y, _3616.x * _2022)) + _3616.w) / _3662;
                                float _3726 = 1.0 - dot(vec2(_3721, _3722), vec2(_3721, _3722));
                                float _4930 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3728 = _3727 * (((isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0))) * _3704) / ((_3717 * 0.699999988079071044921875) + 1.0));
                                float _3740 = exp2(log2(1.0 / ((_3717 * 3.5) + 5.0)) * 0.25);
                                float _3741 = 1.0 - _937;
                                float _3748 = sqrt(1.0 - ((1.0 - (_3741 * _3741)) * (1.0 - (_3740 * _3740))));
                                float _3749 = _3748 * _3748;
                                float _3750 = _3749 * _3749;
                                float _3751 = _3697 - _3171;
                                float _3752 = _3698 - _3172;
                                float _3753 = _3699 - _3173;
                                float _3757 = inversesqrt(dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753)));
                                float _3761 = dot(vec3(_877, _880, _883), vec3((-0.0) - _3171, (-0.0) - _3172, (-0.0) - _3173));
                                float _4941 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3765 = dot(vec3(_877, _880, _883), vec3(_3757 * _3751, _3757 * _3752, _3757 * _3753));
                                float _4952 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3772 = ((_3768 * _3768) * (_3750 + (-1.0))) + 1.0;
                                float _3773 = _3710 * _3749;
                                float _3774 = _3773 * _3773;
                                float _3780 = ((1.0 - _3774) * dot(vec3(_877, _880, _883), vec3(_3697, _3698, _3699))) + _3774;
                                float _4963 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3782 = 1.0 - _3749;
                                float _3792 = (0.5 / (((_3781 * ((_3764 * _3782) + _3749)) + 9.9999999392252902907785028219223e-09) + (((_3781 * _3782) + _3749) * _3764))) * _3781;
                                float _4974 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3802 = (_3727 * _3704) * (((_3750 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3772 * _3772) * ((_3717 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3728 * _3574.z;
                                frontier_phi_88_pred_1 = _3728 * _3574.y;
                                frontier_phi_88_pred_2 = _3728 * _3574.x;
                                frontier_phi_88_pred_3 = _3802 * _3586.z;
                                frontier_phi_88_pred_4 = _3802 * _3586.y;
                                frontier_phi_88_pred_5 = _3802 * _3586.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3811 = frontier_phi_88_pred;
                            _3810 = frontier_phi_88_pred_1;
                            _3809 = frontier_phi_88_pred_2;
                            _3808 = frontier_phi_88_pred_3;
                            _3807 = frontier_phi_88_pred_4;
                            _3806 = frontier_phi_88_pred_5;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3518;
                        frontier_phi_82_pred_1 = _3517;
                        frontier_phi_82_pred_2 = _3516;
                        frontier_phi_82_pred_3 = _3515;
                        frontier_phi_82_pred_4 = _3514;
                        frontier_phi_82_pred_5 = _3513;
                    }
                    _3156 = frontier_phi_82_pred;
                    _3154 = frontier_phi_82_pred_1;
                    _3152 = frontier_phi_82_pred_2;
                    _3150 = frontier_phi_82_pred_3;
                    _3148 = frontier_phi_82_pred_4;
                    _3146 = frontier_phi_82_pred_5;
                    uint _3312 = _3311 + 1u;
                    if (_3312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3305 = _3146;
                        _3306 = _3148;
                        _3307 = _3150;
                        _3308 = _3152;
                        _3309 = _3154;
                        _3310 = _3156;
                        _3311 = _3312;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3152;
                frontier_phi_63_64_ladder_1 = _3156;
                frontier_phi_63_64_ladder_2 = _3154;
                frontier_phi_63_64_ladder_3 = _3150;
                frontier_phi_63_64_ladder_4 = _3148;
                frontier_phi_63_64_ladder_5 = _3146;
            }
            else
            {
                frontier_phi_63_64_ladder = _3030;
                frontier_phi_63_64_ladder_1 = _3034;
                frontier_phi_63_64_ladder_2 = _3032;
                frontier_phi_63_64_ladder_3 = _3028;
                frontier_phi_63_64_ladder_4 = _3026;
                frontier_phi_63_64_ladder_5 = _3024;
            }
            _3145 = frontier_phi_63_64_ladder_5;
            _3147 = frontier_phi_63_64_ladder_4;
            _3149 = frontier_phi_63_64_ladder_3;
            _3151 = frontier_phi_63_64_ladder;
            _3153 = frontier_phi_63_64_ladder_2;
            _3155 = frontier_phi_63_64_ladder_1;
        }
        float _3160 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        _2957 = (_3160 * _3151) + _2488;
        _2959 = (_3160 * _3153) + _2490;
        _2961 = (_3160 * _3155) + _2492;
        _2963 = ((_3145 * 0.039999999105930328369140625) * _3160) + _2811;
        _2965 = ((_3147 * 0.039999999105930328369140625) * _3160) + _2813;
        _2967 = ((_3149 * 0.039999999105930328369140625) * _3160) + _2815;
    }
    else
    {
        _2957 = _2488;
        _2959 = _2490;
        _2961 = _2492;
        _2963 = _2811;
        _2965 = _2813;
        _2967 = _2815;
    }
    float _4990 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _5001 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _5012 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2984 = ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2957 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _921))) + ((_2963 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2985 = ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2959 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _921))) + ((_2965 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2986 = ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2961 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _921))) + ((_2967 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _2987 = _274 + 6u;
    float _2995 = _858 / cbSceneParam._m0[86u].x;
    float _2996 = _859 / cbSceneParam._m0[86u].y;
    vec4 _3010 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2995, _2996, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3012 = _3010.x;
    float _3013 = _3010.y;
    float _3014 = _3010.z;
    float _3015 = _3010.w;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _3049 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _3050 = _3049 / _779;
        float _3061 = _3050 * _831;
        float _3062 = _832 * _3050;
        float _3063 = (-0.0) - _3062;
        float _3065 = _3050 * _833;
        float _3067 = (cbSceneParam._m0[77u].w * _3063) / _3049;
        float _3068 = _3067 + cbSceneParam._m0[79u].w;
        float _3069 = cbSceneParam._m0[79u].w - _3062;
        float _3075 = sqrt(((_3061 * _3061) + (_3062 * _3062)) + (_3065 * _3065));
        float _3078 = (1.0 - (cbSceneParam._m0[77u].w / _3049)) * _3075;
        float _3083 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3085 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3262;
        if (abs((_3063 - _3067) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3262 = ((((_3068 > 0.0) ? exp2(_3083 * _3068) : (2.0 - exp2(_3085 * _3068))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3078;
        }
        else
        {
            float _3206 = 1.0 / cbSceneParam._m0[80u].x;
            float _3207 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : max(_3068, _3069));
            float _3208 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : min(_3068, _3069));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            float _3218 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : min(_3208, 0.0));
            _3262 = ((abs(_3075 / _3063) * cbSceneParam._m0[80u].y) * ((((_3217 - _3218) * 2.0) - ((exp2(_3083 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0)))) - exp2(_3083 * (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))))) * _3206)) - ((exp2(_3085 * _3217) - exp2(_3085 * _3218)) * _3206))) + (_3078 * cbSceneParam._m0[80u].z);
        }
        vec4 _3264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2995, _2996, 1.0), 0.0);
        float _3273 = exp2((_3262 * (-1.44269502162933349609375)) * (1.0 - _3264.w));
        float _3274 = log2(_3273);
        float _3290 = log2(_3015);
        _3087 = (exp2(_3290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].x)) * _3264.x) / cbSceneParam._m0[78u].x)) + _3012;
        _3089 = (exp2(_3290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].y)) * _3264.y) / cbSceneParam._m0[78u].y)) + _3013;
        _3091 = (exp2(_3290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].z)) * _3264.z) / cbSceneParam._m0[78u].z)) + _3014;
        _3093 = _3273 * _3015;
    }
    else
    {
        _3087 = _3012;
        _3089 = _3013;
        _3091 = _3014;
        _3093 = _3015;
    }
    bool _3300;
    vec4 _3103;
    vec4 _3125;
    float _3127;
    float _3131;
    float _3132;
    float _3133;
    float _3134;
    bool _3144;
    for (;;)
    {
        _3103 = cbMatDynParam._m0[0u];
        float _3105 = roundEven(_3103.y);
        bool _3106 = _3105 == 3.0;
        float _3107 = log2(_3093);
        float _3114 = exp2(_3107 * cbSceneParam._m0[78u].x) * _2984;
        float _3115 = exp2(_3107 * cbSceneParam._m0[78u].y) * _2985;
        float _3116 = exp2(_3107 * cbSceneParam._m0[78u].z) * _2986;
        float _3123 = _847 + (-0.5);
        _3125 = cbMtdParam._m0[1u];
        _3127 = _3125.y * _3123;
        float _3130 = (_3105 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3131 = _3130 * (_3106 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3087)));
        _3132 = _3130 * (_3106 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3089)));
        _3133 = _3130 * (_3106 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3091)));
        _3134 = _3123 * 0.999000012874603271484375;
        _3144 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3144)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3134) < 0.5)
            {
                _3300 = true;
                break;
            }
        }
        uint _3241 = _896 + uint(_3103.w);
        if ((cbInstanceData._m0[_3241].w < 1.0) && ((cbInstanceData._m0[_3241].w + _3134) < 0.5))
        {
            _3300 = true;
            break;
        }
        if ((_3127 + 1.0) < _3125.x)
        {
            _3300 = true;
            break;
        }
        _3300 = false;
        break;
    }
    float _3504;
    if (_3300)
    {
        discard_state = true;
        _3504 = 0.0;
    }
    else
    {
        _3504 = cbInstanceData._m0[_2987].w;
    }
    SV_Target.x = _3131;
    SV_Target.y = _3132;
    SV_Target.z = _3133;
    SV_Target.w = _3504;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2987].w;
    discard_exit();
}


