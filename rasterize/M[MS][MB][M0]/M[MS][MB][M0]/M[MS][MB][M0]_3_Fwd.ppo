#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _933;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _233 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _234 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3245 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3256 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3267 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _249 = _244 + 1u;
    uint _253 = _244 + 2u;
    float _262 = sqrt(((cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x));
    float _263 = _262 * TEXCOORD.z;
    float _264 = _262 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _263) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _264) + cbTextureTilingScale._m0[13u].w));
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _305 = _300.x * cbMtdParam._m0[9u].x;
    float _306 = _300.y * cbMtdParam._m0[9u].y;
    float _307 = _300.z * cbMtdParam._m0[9u].z;
    float _311 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _277.x) * _305;
    float _314 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _277.y) * _306;
    float _317 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _277.z) * _307;
    float _324 = ((_305 - _311) * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) + _311;
    float _325 = ((_306 - _314) * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) + _314;
    float _326 = ((_307 - _317) * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) + _317;
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _263) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _264) + cbTextureTilingScale._m0[20u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _369 = _365.z;
    float _373 = (_365.x * 2.0) + (-1.0);
    float _374 = (_365.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3278 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))));
    float _385 = _373 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_339.x * 2.0) + (-1.0)));
    float _386 = _374 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_339.y * 2.0) + (-1.0)));
    float _391 = (((_339.z - _369) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _369;
    float _393 = cbMtdParam._m0[22u].x + _365.w;
    float _396 = fma(_380, _210 * NORMAL.x, fma(_386, _217 * TANGENT.x, (_203 * _195) * _385));
    float _399 = fma(_380, _210 * NORMAL.y, fma(_386, _217 * TANGENT.y, (_203 * _196) * _385));
    float _402 = fma(_380, _210 * NORMAL.z, fma(_386, _217 * TANGENT.z, (_203 * _197) * _385));
    float _406 = inversesqrt(dot(vec3(_396, _399, _402), vec3(_396, _399, _402)));
    float _407 = _406 * _396;
    float _408 = _406 * _399;
    float _409 = _406 * _402;
    float _3289 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _410 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3311 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3322 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3333 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _428 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _517 = fma(_409, cbSceneParam._m0[5u].z, fma(_408, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _407));
    float _520 = fma(_409, cbSceneParam._m0[6u].z, fma(_408, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _407));
    float _523 = fma(_409, cbSceneParam._m0[7u].z, fma(_408, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _407));
    uint _537 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _543 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_537].x;
    float _544 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_537].y;
    float _545 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_537].z;
    float _3344 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    vec4 _557 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _561 = ((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * TEXCOORD_5.w) * _557.x;
    float _562 = dot(vec3(_407, _408, _409), vec3(_487, _488, _489));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _407) - _487;
    float _570 = (_565 * _408) - _488;
    float _571 = (_565 * _409) - _489;
    float _575 = abs(dot(vec3(_487, _488, _489), vec3(_407, _408, _409)));
    float _3377 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(_410);
    float _590 = exp2((_577 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_577 * 3.0));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _932;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _657 = fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622));
        float _661 = fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622));
        float _665 = fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622));
        float _690 = _622 + _407;
        float _691 = _626 + _408;
        float _692 = _630 + _409;
        float _702 = fma(_692, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690)) - _657;
        float _703 = fma(_692, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690)) - _661;
        float _704 = fma(_692, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690)) - _665;
        float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
        float _721 = ((_708 * _702) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_657 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_708 * _703) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_661 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_708 * _704) / cbModelParam._m0[34u].z) + ((((((_665 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        float _760 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_726.x + (-0.5));
        float _762 = _760 * (_726.y + (-0.5));
        float _763 = _760 * (_726.z + (-0.5));
        float _770 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_733.x + (-0.5));
        float _772 = _770 * (_733.y + (-0.5));
        float _773 = _770 * (_733.z + (-0.5));
        float _780 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_740.x + (-0.5));
        float _782 = _780 * (_740.y + (-0.5));
        float _783 = _780 * (_740.z + (-0.5));
        float _790 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_747.x + (-0.5));
        float _792 = _790 * (_747.y + (-0.5));
        float _793 = _790 * (_747.z + (-0.5));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = _761 * 0.5;
        float _798 = _771 * 0.5;
        float _799 = _781 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _814 = (dot(vec3(_407, _408, _409), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _824 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3425 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_826 + 1.0))) + _831) * _794;
        float _841 = _762 * 0.5;
        float _842 = _772 * 0.5;
        float _843 = _782 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_407, _408, _409), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3458 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_868 + 1.0))) + _873) * _795;
        float _883 = _763 * 0.5;
        float _884 = _773 * 0.5;
        float _885 = _783 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_407, _408, _409), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3491 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_910 + 1.0))) + _915) * _796;
        _932 = _763;
        _934 = _762;
        _935 = _761;
        _936 = _773;
        _937 = _772;
        _938 = _771;
        _939 = _783;
        _940 = _782;
        _941 = _781;
        _942 = _796;
        _943 = _795;
        _944 = _794;
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
    }
    else
    {
        _932 = _933;
        _934 = _933;
        _935 = _933;
        _936 = _933;
        _937 = _933;
        _938 = _933;
        _939 = _933;
        _940 = _933;
        _941 = _933;
        _942 = _933;
        _943 = _933;
        _944 = _933;
        _945 = 0.0;
        _946 = 0.0;
        _947 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622));
        float _976 = fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622));
        float _980 = fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622));
        float _1003 = _622 + _407;
        float _1004 = _626 + _408;
        float _1005 = _630 + _409;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_407, _408, _409), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3554 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_407, _408, _409), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3587 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_407, _408, _409), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3620 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _933;
        _1242 = _933;
        _1243 = _933;
        _1244 = _933;
        _1245 = _933;
        _1246 = _933;
        _1247 = _933;
        _1248 = _933;
        _1249 = _933;
        _1250 = _933;
        _1251 = _933;
        _1252 = _933;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _945)) + _945;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _946)) + _946;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _947)) + _947;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _569 * 0.5;
    float _1310 = _570 * 0.5;
    float _1311 = _571 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_932, _936, _939, _942));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_934, _937, _940, _943));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_935, _938, _941, _944));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1441 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1444 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1472 = frontier_phi_14_12_ladder;
        }
        float _1677;
        if (_1441 > 0.0)
        {
            _1677 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1677 = frontier_phi_23_19_ladder;
        }
        float _1920;
        if (_1444 > 0.0)
        {
            _1920 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1920 = frontier_phi_35_30_ladder;
        }
        float _1922 = isnan(_1677) ? _1472 : (isnan(_1472) ? _1677 : min(_1472, _1677));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1438) + _1427;
        float _1928 = (_1923 * _1441) + _1431;
        float _1929 = (_1923 * _1444) + _1435;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_13_35_ladder = _2053.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2053.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2053.x * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_13_35_ladder_2;
        _1462 = frontier_phi_13_35_ladder_1;
        _1464 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1378);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1539 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1542 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1682;
        if (_1536 > 0.0)
        {
            _1682 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1682 = frontier_phi_25_21_ladder;
        }
        float _1947;
        if (_1539 > 0.0)
        {
            _1947 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1947 = frontier_phi_37_32_ladder;
        }
        float _2152;
        if (_1542 > 0.0)
        {
            _2152 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2152 = frontier_phi_46_43_ladder;
        }
        float _2154 = isnan(_1947) ? _1682 : (isnan(_1682) ? _1947 : min(_1682, _1947));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1536) + _1525;
        float _2160 = (_2155 * _1539) + _1529;
        float _2161 = (_2155 * _1542) + _1533;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_22_46_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_22_46_ladder_2;
        _1563 = frontier_phi_22_46_ladder_1;
        _1565 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1469);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1577 = ((((1.0 - _590) * ((_577 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_590 * _577)) * _561;
    float _1578 = _1577 * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1579 = _1577 * ((cbModelParam._m0[1u].w * (_1563 - _1462)) + _1462);
    float _1580 = _1577 * ((cbModelParam._m0[1u].w * (_1565 - _1464)) + _1464);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    uvec4 _1599 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1601 = _1599.x * 14u;
    uint _1602 = _1601 + 13u;
    float _1609 = _561 + (-1.0);
    float _1614 = (cbLight._m0[_1602].x * _1609) + 1.0;
    float _1615 = (cbLight._m0[_1602].y * _1609) + 1.0;
    float _1616 = (cbLight._m0[_1602].z * _1609) + 1.0;
    float _1617 = (cbLight._m0[_1602].w * _1609) + 1.0;
    uint _1618 = _1601 + 5u;
    float _1624 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1628 = _1601 + 4u;
    float _1635 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1639 = _1601 | 1u;
    float _1650 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_407, _408, _409));
    float _1653 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_407, _408, _409));
    float _3756 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _3767 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1658 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1660 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1667 = ((cbLight._m0[_1618].x * _1624) * _1660) + ((cbLight._m0[_1628].x * _1635) * _1658);
    float _1668 = ((_1624 * cbLight._m0[_1618].y) * _1660) + ((_1635 * cbLight._m0[_1628].y) * _1658);
    float _1669 = ((_1624 * cbLight._m0[_1618].z) * _1660) + ((_1635 * cbLight._m0[_1628].z) * _1658);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1601 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1667;
        _1689 = _1668;
        _1691 = _1669;
    }
    else
    {
        uint _1695 = _1601 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1601 + 2u].xyz), vec3(_407, _408, _409)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3778 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1714 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1667;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1891 = _1601 + 7u;
        float _1907 = (dot(vec3(cbLight._m0[_1601 + 3u].xyz), vec3(_407, _408, _409)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3794 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1910 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1732 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1687;
        _1734 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1689;
        _1736 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1691;
    }
    uint _1739 = _1601 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _410) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1601].x + _487;
    float _1755 = cbLight._m0[_1601].y + _488;
    float _1756 = cbLight._m0[_1601].z + _489;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1601].xyz));
    float _3810 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _1768 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1769 = dot(vec3(_407, _408, _409), vec3(_1761, _1762, _1763));
    float _3832 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1761, _1762, _1763));
    float _3843 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1793 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1768 * ((_1767 * _1793) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1793) + _1753) * _1767))) * _1767;
    float _3854 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1817 = _1601 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _410) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1639].x + _487;
    float _1831 = cbLight._m0[_1639].y + _488;
    float _1832 = cbLight._m0[_1639].z + _489;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1639].xyz));
    float _3865 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1844 = dot(vec3(_407, _408, _409), vec3(_1837, _1838, _1839));
    float _3876 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1837, _1838, _1839));
    float _3887 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = 1.0 - _1829;
    float _1876 = (0.5 / (((_1768 * ((_1843 * _1866) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1866) + _1829) * _1843))) * _1843;
    float _3898 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1888 = (((_1865 * cbLight._m0[_1817].x) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].x) * _1806) * _1635);
    float _1889 = (((_1865 * cbLight._m0[_1817].y) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].y) * _1806) * _1635);
    float _1890 = (((_1865 * cbLight._m0[_1817].z) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].z) * _1806) * _1635);
    float _1952;
    float _1954;
    float _1956;
    if (_1676)
    {
        _1952 = _1888;
        _1954 = _1889;
        _1956 = _1890;
    }
    else
    {
        uint _1958 = _1601 + 2u;
        uint _1962 = _1601 + 10u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _410) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _487;
        float _1979 = cbLight._m0[_1958].y + _488;
        float _1980 = cbLight._m0[_1958].z + _489;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1958].xyz));
        float _3909 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1992 = dot(vec3(_407, _408, _409), vec3(_1985, _1986, _1987));
        float _3920 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _3931 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2014 = 1.0 - _1977;
        float _2024 = (0.5 / (((_1768 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2014) + _1977) * _1991))) * _1991;
        float _3942 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2026 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2027 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1952 = (((_2013 * cbLight._m0[_1962].x) * _2026) * _2027) + _1888;
        _1954 = (((_2013 * cbLight._m0[_1962].y) * _2026) * _2027) + _1889;
        _1956 = (((_2013 * cbLight._m0[_1962].z) * _2026) * _2027) + _1890;
    }
    float _2062;
    float _2064;
    float _2066;
    if (_1694)
    {
        _2062 = _1952;
        _2064 = _1954;
        _2066 = _1956;
    }
    else
    {
        uint _2073 = _1601 + 3u;
        uint _2077 = _1601 + 11u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _410) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _487;
        float _2094 = cbLight._m0[_2073].y + _488;
        float _2095 = cbLight._m0[_2073].z + _489;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_2073].xyz));
        float _3958 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2107 = dot(vec3(_407, _408, _409), vec3(_2100, _2101, _2102));
        float _3969 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _3980 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2129 = 1.0 - _2092;
        float _2139 = (0.5 / (((_1768 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2129) + _2092) * _2106))) * _2106;
        float _3991 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _2062 = (((_2128 * cbLight._m0[_2077].x) * _2141) * _2142) + _1952;
        _2064 = (((_2128 * cbLight._m0[_2077].y) * _2141) * _2142) + _1954;
        _2066 = (((_2128 * cbLight._m0[_2077].z) * _2141) * _2142) + _1956;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1599.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2526)
                {
                    frontier_phi_61_pred = _2510;
                    frontier_phi_61_pred_1 = _2515;
                    frontier_phi_61_pred_2 = _2514;
                    frontier_phi_61_pred_3 = _2513;
                    frontier_phi_61_pred_4 = _2512;
                    frontier_phi_61_pred_5 = _2511;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2525;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2516 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2218;
                        float _2701 = _2660.y - _2219;
                        float _2702 = _2660.z - _2220;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_517, _520, _523), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _4017 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2218;
                        float _2736 = (-0.0) - _2219;
                        float _2737 = (-0.0) - _2220;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _577;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_517, _520, _523), vec3(_2742, _2743, _2744));
                        float _4033 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2777 = dot(vec3(_517, _520, _523), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4044 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4055 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4066 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2569 = (_2731 * _2679.x) + _2637;
                        _2570 = (_2731 * _2679.y) + _2638;
                        _2571 = (_2731 * _2679.z) + _2639;
                        _2566 = (_2812 * _2696.x) + _2634;
                        _2567 = (_2812 * _2696.y) + _2635;
                        _2568 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_61_pred = _2566;
                    frontier_phi_61_pred_1 = _2571;
                    frontier_phi_61_pred_2 = _2570;
                    frontier_phi_61_pred_3 = _2569;
                    frontier_phi_61_pred_4 = _2568;
                    frontier_phi_61_pred_5 = _2567;
                }
                _2366 = frontier_phi_61_pred;
                _2376 = frontier_phi_61_pred_1;
                _2374 = frontier_phi_61_pred_2;
                _2372 = frontier_phi_61_pred_3;
                _2370 = frontier_phi_61_pred_4;
                _2368 = frontier_phi_61_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2366;
                    _2511 = _2368;
                    _2512 = _2370;
                    _2513 = _2372;
                    _2514 = _2374;
                    _2515 = _2376;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2382) & _2264) == 0u)
        {
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
            _2484 = _2371;
            _2486 = _2373;
            _2488 = _2375;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2504 = _2503 * _2218;
            float _2505 = _2503 * _2219;
            float _2506 = _2503 * _2220;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2617 = _2365;
                float _2618 = _2367;
                float _2619 = _2369;
                float _2620 = _2371;
                float _2621 = _2373;
                float _2622 = _2375;
                uint _2623 = _2382;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2633)
                    {
                        frontier_phi_67_pred = _2620;
                        frontier_phi_67_pred_1 = _2621;
                        frontier_phi_67_pred_2 = _2622;
                        frontier_phi_67_pred_3 = _2619;
                        frontier_phi_67_pred_4 = _2618;
                        frontier_phi_67_pred_5 = _2617;
                    }
                    else
                    {
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        uint _2836 = _2632;
                        uint _2837;
                        vec4 _2862;
                        float _2863;
                        vec4 _2878;
                        vec3 _2890;
                        vec4 _2905;
                        vec4 _2920;
                        float _2967;
                        bool _2968;
                        for (;;)
                        {
                            uint _2847 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2836));
                            _2837 = (_2836 + 4294967295u) & _2836;
                            uint _2849 = _2847 * 40u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            _2863 = _2862.w;
                            uint _2865 = (_2847 * 40u) + 4u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2880 = (_2847 * 40u) + 8u;
                            _2890 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x));
                            uint _2892 = (_2847 * 40u) + 16u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2907 = (_2847 * 40u) + 20u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2847 * 40u) + 24u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2942 = (_2847 * 40u) + 28u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2967 = fma(_2220, _2955.z, fma(_2219, _2955.y, _2955.x * _2218)) + _2955.w;
                            _2968 = !((fma(_2220, _2936.z, fma(_2219, _2936.y, _2936.x * _2218)) + _2936.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2968)
                            {
                                float _2995 = _2862.x - _2218;
                                float _2996 = _2862.y - _2219;
                                float _2997 = _2862.z - _2220;
                                float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                                float _3001 = inversesqrt(_2998);
                                float _3002 = _3001 * _2995;
                                float _3003 = _3001 * _2996;
                                float _3004 = _3001 * _2997;
                                float _3008 = 1.0 - (_2998 / (_2863 * _2863));
                                float _4077 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3013 = sqrt(_2998) * _2878.w;
                                float _3015 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                                float _3016 = _3015 * _3015;
                                float _3019 = ((1.0 - _3016) * dot(vec3(_3002, _3003, _3004), vec3(_517, _520, _523))) + _3016;
                                float _3022 = _3013 * _3013;
                                float _3026 = (fma(_2220, _2905.z, fma(_2219, _2905.y, _2905.x * _2218)) + _2905.w) / _2967;
                                float _3027 = (fma(_2220, _2920.z, fma(_2219, _2920.y, _2920.x * _2218)) + _2920.w) / _2967;
                                float _3031 = 1.0 - dot(vec2(_3026, _3027), vec2(_3026, _3027));
                                float _4093 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3033 = _3032 * (((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3009) / ((_3022 * 0.699999988079071044921875) + 1.0));
                                float _3045 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                                float _3046 = 1.0 - _577;
                                float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                                float _3054 = _3053 * _3053;
                                float _3055 = _3054 * _3054;
                                float _3056 = _3002 - _2504;
                                float _3057 = _3003 - _2505;
                                float _3058 = _3004 - _2506;
                                float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                                float _3066 = dot(vec3(_517, _520, _523), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4104 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3070 = dot(vec3(_517, _520, _523), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                                float _4115 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                                float _3078 = _3015 * _3054;
                                float _3079 = _3078 * _3078;
                                float _3085 = ((1.0 - _3079) * dot(vec3(_517, _520, _523), vec3(_3002, _3003, _3004))) + _3079;
                                float _4126 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3087 = 1.0 - _3054;
                                float _3097 = (0.5 / (((_3086 * ((_3069 * _3087) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3054) * _3069))) * _3086;
                                float _4137 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3107 = (_3032 * _3009) * (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_3077 * _3077) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3107 * _2890.x;
                                frontier_phi_73_pred_1 = _3107 * _2890.y;
                                frontier_phi_73_pred_2 = _3033 * _2878.z;
                                frontier_phi_73_pred_3 = _3033 * _2878.y;
                                frontier_phi_73_pred_4 = _3033 * _2878.x;
                                frontier_phi_73_pred_5 = _3107 * _2890.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_73_pred;
                            _3112 = frontier_phi_73_pred_1;
                            _3116 = frontier_phi_73_pred_2;
                            _3115 = frontier_phi_73_pred_3;
                            _3114 = frontier_phi_73_pred_4;
                            _3113 = frontier_phi_73_pred_5;
                            _2820 = _3114 + _2833;
                            _2821 = _3115 + _2834;
                            _2822 = _3116 + _2835;
                            _2817 = _3111 + _2830;
                            _2818 = _3112 + _2831;
                            _2819 = _3113 + _2832;
                            if (_2837 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2837;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2820;
                        frontier_phi_67_pred_1 = _2821;
                        frontier_phi_67_pred_2 = _2822;
                        frontier_phi_67_pred_3 = _2819;
                        frontier_phi_67_pred_4 = _2818;
                        frontier_phi_67_pred_5 = _2817;
                    }
                    _2485 = frontier_phi_67_pred;
                    _2487 = frontier_phi_67_pred_1;
                    _2489 = frontier_phi_67_pred_2;
                    _2483 = frontier_phi_67_pred_3;
                    _2481 = frontier_phi_67_pred_4;
                    _2479 = frontier_phi_67_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2479;
                        _2618 = _2481;
                        _2619 = _2483;
                        _2620 = _2485;
                        _2621 = _2487;
                        _2622 = _2489;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2487;
                frontier_phi_55_56_ladder_1 = _2489;
                frontier_phi_55_56_ladder_2 = _2485;
                frontier_phi_55_56_ladder_3 = _2483;
                frontier_phi_55_56_ladder_4 = _2481;
                frontier_phi_55_56_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_55_56_ladder = _2373;
                frontier_phi_55_56_ladder_1 = _2375;
                frontier_phi_55_56_ladder_2 = _2371;
                frontier_phi_55_56_ladder_3 = _2369;
                frontier_phi_55_56_ladder_4 = _2367;
                frontier_phi_55_56_ladder_5 = _2365;
            }
            _2478 = frontier_phi_55_56_ladder_5;
            _2480 = frontier_phi_55_56_ladder_4;
            _2482 = frontier_phi_55_56_ladder_3;
            _2484 = frontier_phi_55_56_ladder_2;
            _2486 = frontier_phi_55_56_ladder;
            _2488 = frontier_phi_55_56_ladder_1;
        }
        float _2493 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2277 = (_2493 * _2484) + _1732;
        _2279 = (_2493 * _2486) + _1734;
        _2281 = (_2493 * _2488) + _1736;
        _2283 = ((_2478 * 0.039999999105930328369140625) * _2493) + _2062;
        _2285 = ((_2480 * 0.039999999105930328369140625) * _2493) + _2064;
        _2287 = ((_2482 * 0.039999999105930328369140625) * _2493) + _2066;
    }
    else
    {
        _2277 = _1732;
        _2279 = _1734;
        _2281 = _1736;
        _2283 = _2062;
        _2285 = _2064;
        _2287 = _2066;
    }
    float _4153 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4164 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4175 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    uint _2307 = _244 + 6u;
    float _2315 = _495 / cbSceneParam._m0[86u].x;
    float _2316 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _428 : (isnan(_428) ? cbSceneParam._m0[77u].w : min(_428, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_428 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_428) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _428 : min(cbSceneParam._m0[80u].w, _428));
        float _2391 = _2390 / _428;
        float _2402 = _2391 * _480;
        float _2403 = _481 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _482;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2541 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2579 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2426 * _2550) - exp2(_2426 * _2551)) * _2539))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2335);
        _2428 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2590 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    float _2446 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2447 = _2446 == 3.0;
    float _2448 = log2(_2434);
    float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2277 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _561))) + ((_2283 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2279 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _561))) + ((_2285 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2281 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _561))) + ((_2287 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2466 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2466 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2466 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2466 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = cbInstanceData._m0[_2307].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
}


