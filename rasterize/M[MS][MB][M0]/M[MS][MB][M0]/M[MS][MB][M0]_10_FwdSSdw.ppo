#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1075;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_256 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_257 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _331 = (_323.x * 2.0) + (-1.0);
    float _332 = (_323.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_331, _332), vec2(_331, _332));
    float _3408 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_297.x * 2.0) + (-1.0)));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_297.y * 2.0) + (-1.0)));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _360 = _358.x;
    float _361 = 1.0 - _360;
    float _394 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_360 - _361) * cbMtdParam._m0[24u].w) + _361) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3419 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _403 = ((((cbMtdParam._m0[10u].x - _282) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _395) + _282;
    float _404 = ((((cbMtdParam._m0[10u].y - _283) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _395) + _283;
    float _405 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _284)) * _395) + _284;
    float _410 = (((_297.z - _327) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _327;
    float _414 = ((cbMtdParam._m0[23u].y - _410) * _395) + _410;
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _448 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_225, _226, _227, 0.0));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _256) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _257) + cbTextureTilingScale._m0[18u].w));
    float _465 = _463.x;
    float _470 = fract(_463.w + cbPerFrame._m0[22u].x);
    float _472 = (1.0 - _470) * _465;
    float _477 = ((_470 + (-1.0)) + _465) * 9.0;
    float _479 = ((_465 + (-1.0)) + _470) * 9.0;
    float _480 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _481 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _495 = (_472 * ((_463.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _480 : (isnan(_480) ? 3.0 : min(_480, 3.0))) * 3.1415927410125732421875);
    float _497 = (_472 * ((_463.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _481 : (isnan(_481) ? 3.0 : min(_481, 3.0))) * 3.1415927410125732421875);
    float _501 = inversesqrt(dot(vec3(_495, _497, 1.0), vec3(_495, _497, 1.0)));
    float _517 = (((((0.5 - _438) + ((_495 * 0.5) * _501)) * _448) + _438) * 2.0) + (-1.0);
    float _518 = (((((0.5 - _439) + ((_501 * 0.5) * _497)) * _448) + _439) * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3450 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _535 = ((((cbMtdParam._m0[22u].z * _344) - _344) + _517) * _395) + _344;
    float _536 = ((((cbMtdParam._m0[22u].z * _345) - _345) + _518) * _395) + _345;
    float _537 = (_395 * (sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) - _339)) + _339;
    float _539 = cbMtdParam._m0[22u].x + _323.w;
    float _542 = fma(_537, _225, fma(_536, _231 * TANGENT.x, (_217 * _209) * _535));
    float _545 = fma(_537, _226, fma(_536, _231 * TANGENT.y, (_217 * _210) * _535));
    float _548 = fma(_537, _227, fma(_536, _231 * TANGENT.z, (_217 * _211) * _535));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3461 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _556 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3483 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3494 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3505 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _625 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _615);
    float _626 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _615);
    float _627 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _615);
    float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
    float _632 = _625 * _631;
    float _633 = _626 * _631;
    float _634 = _627 * _631;
    float _640 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _641 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _662 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _665 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _668 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _682 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _688 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_682].x;
    float _689 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_682].y;
    float _690 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_682].z;
    float _3516 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _640, cbSceneParam._m0[86u].y * _641));
    float _706 = ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * TEXCOORD_5.w) * _702.x;
    float _707 = dot(vec3(_553, _554, _555), vec3(_632, _633, _634));
    float _710 = _707 * 2.0;
    float _714 = (_710 * _553) - _632;
    float _715 = (_710 * _554) - _633;
    float _716 = (_710 * _555) - _634;
    float _720 = abs(dot(vec3(_632, _633, _634), vec3(_553, _554, _555)));
    float _3549 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _722 = sqrt(_556);
    float _734 = exp2((_722 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_722 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1074;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _804 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _808 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _832 = _766 + _553;
        float _833 = _770 + _554;
        float _834 = _774 + _555;
        float _844 = fma(_834, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832)) - _800;
        float _845 = fma(_834, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832)) - _804;
        float _846 = fma(_834, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832)) - _808;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_868.x + (-0.5));
        float _904 = _902 * (_868.y + (-0.5));
        float _905 = _902 * (_868.z + (-0.5));
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_875.x + (-0.5));
        float _914 = _912 * (_875.y + (-0.5));
        float _915 = _912 * (_875.z + (-0.5));
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_882.x + (-0.5));
        float _924 = _922 * (_882.y + (-0.5));
        float _925 = _922 * (_882.z + (-0.5));
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _956 = (dot(vec3(_553, _554, _555), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _966 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3597 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_968 + 1.0))) + _973) * _936;
        float _983 = _904 * 0.5;
        float _984 = _914 * 0.5;
        float _985 = _924 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_553, _554, _555), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3630 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1010 + 1.0))) + _1015) * _937;
        float _1025 = _905 * 0.5;
        float _1026 = _915 * 0.5;
        float _1027 = _925 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_553, _554, _555), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3663 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1052 + 1.0))) + _1057) * _938;
        _1074 = _905;
        _1076 = _904;
        _1077 = _903;
        _1078 = _915;
        _1079 = _914;
        _1080 = _913;
        _1081 = _925;
        _1082 = _924;
        _1083 = _923;
        _1084 = _938;
        _1085 = _937;
        _1086 = _936;
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _1075;
        _1076 = _1075;
        _1077 = _1075;
        _1078 = _1075;
        _1079 = _1075;
        _1080 = _1075;
        _1081 = _1075;
        _1082 = _1075;
        _1083 = _1075;
        _1084 = _1075;
        _1085 = _1075;
        _1086 = _1075;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1118 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1122 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1145 = _766 + _553;
        float _1146 = _770 + _554;
        float _1147 = _774 + _555;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_553, _554, _555), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3726 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_553, _554, _555), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3759 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_553, _554, _555), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3792 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1075;
        _1384 = _1075;
        _1385 = _1075;
        _1386 = _1075;
        _1387 = _1075;
        _1388 = _1075;
        _1389 = _1075;
        _1390 = _1075;
        _1391 = _1075;
        _1392 = _1075;
        _1393 = _1075;
        _1394 = _1075;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1088)) + _1088;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1089)) + _1089;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _714 * 0.5;
    float _1452 = _715 * 0.5;
    float _1453 = _716 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1074, _1078, _1081, _1084));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_716, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714));
        float _1583 = fma(_716, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714));
        float _1586 = fma(_716, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1614 = frontier_phi_14_12_ladder;
        }
        float _1838;
        if (_1583 > 0.0)
        {
            _1838 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1838 = frontier_phi_23_19_ladder;
        }
        float _2084;
        if (_1586 > 0.0)
        {
            _2084 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2084 = frontier_phi_35_30_ladder;
        }
        float _2086 = isnan(_1838) ? _1614 : (isnan(_1614) ? _1838 : min(_1614, _1838));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1580) + _1569;
        float _2092 = (_2087 * _1583) + _1573;
        float _2093 = (_2087 * _1586) + _1577;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_13_35_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_13_35_ladder_2;
        _1604 = frontier_phi_13_35_ladder_1;
        _1606 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_714, _715, _716), _1520);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_716, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714));
        float _1679 = fma(_716, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714));
        float _1682 = fma(_716, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714));
        float _1843;
        if (_1676 > 0.0)
        {
            _1843 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1843 = frontier_phi_25_21_ladder;
        }
        float _2111;
        if (_1679 > 0.0)
        {
            _2111 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2111 = frontier_phi_37_32_ladder;
        }
        float _2316;
        if (_1682 > 0.0)
        {
            _2316 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2316 = frontier_phi_46_43_ladder;
        }
        float _2318 = isnan(_2111) ? _1843 : (isnan(_1843) ? _2111 : min(_1843, _2111));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1676) + _1665;
        float _2324 = (_2319 * _1679) + _1669;
        float _2325 = (_2319 * _1682) + _1673;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_22_46_ladder = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_22_46_ladder_2;
        _1703 = frontier_phi_22_46_ladder_1;
        _1705 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_714, _715, _716), _1611);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _734) * ((_722 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _722)) * _706;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1602)) + _1602);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_640, _641));
    float _1739 = _1737.w;
    float _1751 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1752 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _706 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1796 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1800 = _1759 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_553, _554, _555));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_553, _554, _555));
    float _3928 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3939 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1776].x * _1782) * _1821) + (((cbLight._m0[_1786].x * _1751) * _1796) * _1819);
    float _1829 = ((_1782 * cbLight._m0[_1776].y) * _1821) + (((cbLight._m0[_1786].y * _1752) * _1796) * _1819);
    float _1830 = ((_1782 * cbLight._m0[_1776].z) * _1821) + (((cbLight._m0[_1786].z * _1753) * _1796) * _1819);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1837)
    {
        _1848 = _1828;
        _1850 = _1829;
        _1852 = _1830;
    }
    else
    {
        uint _1856 = _1759 + 6u;
        float _1872 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _3950 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1875 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1848 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1828;
        _1850 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1829;
        _1852 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1830;
    }
    bool _1855 = _1835.y == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1855)
    {
        _1893 = _1848;
        _1895 = _1850;
        _1897 = _1852;
    }
    else
    {
        uint _2055 = _1759 + 7u;
        float _2071 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _3966 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2074 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1893 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1848;
        _1895 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1850;
        _1897 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1852;
    }
    uint _1900 = _1759 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _556) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1759].x + _632;
    float _1916 = cbLight._m0[_1759].y + _633;
    float _1917 = cbLight._m0[_1759].z + _634;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1759].xyz));
    float _3982 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _1929 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1930 = dot(vec3(_553, _554, _555), vec3(_1922, _1923, _1924));
    float _4004 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1922, _1923, _1924));
    float _4015 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1929 * ((_1928 * _1954) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1954) + _1914) * _1928))) * _1928;
    float _4026 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1981 = _1759 + 9u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _556) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1800].x + _632;
    float _1995 = cbLight._m0[_1800].y + _633;
    float _1996 = cbLight._m0[_1800].z + _634;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1800].xyz));
    float _4037 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _2008 = dot(vec3(_553, _554, _555), vec3(_2001, _2002, _2003));
    float _4048 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2001, _2002, _2003));
    float _4059 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1993 * _1993;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = 1.0 - _1993;
    float _2040 = (0.5 / (((_1929 * ((_2007 * _2030) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2030) + _1993) * _2007))) * _2007;
    float _4070 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    float _2052 = (((_2029 * cbLight._m0[_1981].x) * _2042) * _1782) + ((((cbLight._m0[_1900].x * _1751) * _1953) * _1967) * _1796);
    float _2053 = (((_2029 * cbLight._m0[_1981].y) * _2042) * _1782) + ((((cbLight._m0[_1900].y * _1752) * _1953) * _1967) * _1796);
    float _2054 = (((_2029 * cbLight._m0[_1981].z) * _2042) * _1782) + ((((cbLight._m0[_1900].z * _1753) * _1953) * _1967) * _1796);
    float _2116;
    float _2118;
    float _2120;
    if (_1837)
    {
        _2116 = _2052;
        _2118 = _2053;
        _2120 = _2054;
    }
    else
    {
        uint _2122 = _1759 + 2u;
        uint _2126 = _1759 + 10u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _556) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _632;
        float _2143 = cbLight._m0[_2122].y + _633;
        float _2144 = cbLight._m0[_2122].z + _634;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2122].xyz));
        float _4081 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2156 = dot(vec3(_553, _554, _555), vec3(_2149, _2150, _2151));
        float _4092 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4103 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2178 = 1.0 - _2141;
        float _2188 = (0.5 / (((_1929 * ((_2155 * _2178) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2178) + _2141) * _2155))) * _2155;
        float _4114 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2116 = (((_2177 * cbLight._m0[_2126].x) * _2190) * _2191) + _2052;
        _2118 = (((_2177 * cbLight._m0[_2126].y) * _2190) * _2191) + _2053;
        _2120 = (((_2177 * cbLight._m0[_2126].z) * _2190) * _2191) + _2054;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1855)
    {
        _2226 = _2116;
        _2228 = _2118;
        _2230 = _2120;
    }
    else
    {
        uint _2237 = _1759 + 3u;
        uint _2241 = _1759 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _556) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _632;
        float _2258 = cbLight._m0[_2237].y + _633;
        float _2259 = cbLight._m0[_2237].z + _634;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2237].xyz));
        float _4130 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2271 = dot(vec3(_553, _554, _555), vec3(_2264, _2265, _2266));
        float _4141 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4152 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = 1.0 - _2256;
        float _2303 = (0.5 / (((_1929 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2293) + _2256) * _2270))) * _2270;
        float _4163 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2226 = (((_2292 * cbLight._m0[_2241].x) * _2305) * _2306) + _2116;
        _2228 = (((_2292 * cbLight._m0[_2241].y) * _2305) * _2306) + _2118;
        _2230 = (((_2292 * cbLight._m0[_2241].z) * _2305) * _2306) + _2120;
    }
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_1757.y == 0u)
    {
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2381;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2381;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2381;
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.x;
        uint _2408 = uint((float(_2396.y) * floor(float(uint(cbSceneParam._m0[85u].y * _641) / _2397))) + floor(float(uint(cbSceneParam._m0[85u].x * _640) / _2397)));
        float _2418 = (log2(_2384 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2419 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        uint _2422 = uint(isnan(14.0) ? _2419 : (isnan(_2419) ? 14.0 : min(_2419, 14.0)));
        uvec4 _2427 = texelFetch(g_lightClusterGridBuffer, int(((_2422 << 2u) + (_2408 << 6u)) >> 2u));
        uint _2428 = _2427.x;
        uint _2429 = _2396.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2429 >> 4u) & 15u)) + 4294967295u) & _2428) == 0u) || ((_2429 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2690)
                {
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                else
                {
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    uint _2804;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2689;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2808 = uint(findLSB(_2804)) + (_2680 << 5u);
                        uint _2805 = (_2804 + 4294967295u) & _2804;
                        uint _2810 = _2808 * 48u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2830 = (_2808 * 48u) + 4u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2849 = (_2808 * 48u) + 8u;
                        vec3 _2860 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x));
                        float _2864 = _2824.x - _2382;
                        float _2865 = _2824.y - _2383;
                        float _2866 = _2824.z - _2384;
                        float _2867 = dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866));
                        float _2870 = inversesqrt(_2867);
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2874 = dot(vec3(_662, _665, _668), vec3(_2871, _2872, _2873));
                        float _2879 = 1.0 - (_2867 * _2824.w);
                        float _4189 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2881 = sqrt(_2867) * _2843.w;
                        float _2884 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2874) + _2885;
                        float _2891 = _2881 * _2881;
                        float _2895 = ((isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * _2880) / ((_2891 * 0.699999988079071044921875) + 1.0);
                        float _2899 = (-0.0) - _2382;
                        float _2900 = (-0.0) - _2383;
                        float _2901 = (-0.0) - _2384;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2891 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _722;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_662, _665, _668), vec3(_2906, _2907, _2908));
                        float _4205 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2941 = dot(vec3(_662, _665, _668), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4216 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2884 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2874) + _2950;
                        float _4227 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4238 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2975 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_2948 * _2948) * ((_2891 * 2.1991131305694580078125) + 3.141590118408203125))) * _2880;
                        _2733 = (_2895 * _2843.x) + _2801;
                        _2734 = (_2895 * _2843.y) + _2802;
                        _2735 = (_2895 * _2843.z) + _2803;
                        _2730 = (_2975 * _2860.x) + _2798;
                        _2731 = (_2975 * _2860.y) + _2799;
                        _2732 = (_2975 * _2860.z) + _2800;
                        if (_2805 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2805;
                        }
                    }
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                _2530 = frontier_phi_61_pred;
                _2540 = frontier_phi_61_pred_1;
                _2538 = frontier_phi_61_pred_2;
                _2536 = frontier_phi_61_pred_3;
                _2534 = frontier_phi_61_pred_4;
                _2532 = frontier_phi_61_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2530;
                    _2675 = _2532;
                    _2676 = _2534;
                    _2677 = _2536;
                    _2678 = _2538;
                    _2679 = _2540;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2546) & _2428) == 0u)
        {
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
            float _2668 = _2667 * _2382;
            float _2669 = _2667 * _2383;
            float _2670 = _2667 * _2384;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2781 = _2529;
                float _2782 = _2531;
                float _2783 = _2533;
                float _2784 = _2535;
                float _2785 = _2537;
                float _2786 = _2539;
                uint _2787 = _2546;
                uint _2796;
                bool _2797;
                for (;;)
                {
                    _2796 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                    _2797 = _2796 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2797)
                    {
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2993 = _2781;
                        float _2994 = _2782;
                        float _2995 = _2783;
                        float _2996 = _2784;
                        float _2997 = _2785;
                        float _2998 = _2786;
                        uint _2999 = _2796;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3069;
                        vec4 _3084;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3010 = ((_2787 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3056 = (_3010 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3010 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3010 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3010 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2384, _3118.z, fma(_2383, _3118.y, _3118.x * _2382)) + _3118.w;
                            _3131 = !((fma(_2384, _3099.z, fma(_2383, _3099.y, _3099.x * _2382)) + _3099.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3025.x - _2382;
                                float _3159 = _3025.y - _2383;
                                float _3160 = _3025.z - _2384;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3026 * _3026));
                                float _4249 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3176 = sqrt(_3161) * _3041.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_662, _665, _668))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2384, _3069.z, fma(_2383, _3069.y, _3069.x * _2382)) + _3069.w) / _3130;
                                float _3190 = (fma(_2384, _3084.z, fma(_2383, _3084.y, _3084.x * _2382)) + _3084.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4265 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _722;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2668;
                                float _3220 = _3166 - _2669;
                                float _3221 = _3167 - _2670;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_662, _665, _668), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4276 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3233 = dot(vec3(_662, _665, _668), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4287 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_662, _665, _668), vec3(_3165, _3166, _3167))) + _3242;
                                float _4298 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4309 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3270 * _3053.x;
                                frontier_phi_73_pred_1 = _3270 * _3053.y;
                                frontier_phi_73_pred_2 = _3196 * _3041.z;
                                frontier_phi_73_pred_3 = _3196 * _3041.y;
                                frontier_phi_73_pred_4 = _3196 * _3041.x;
                                frontier_phi_73_pred_5 = _3270 * _3053.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3274 = frontier_phi_73_pred;
                            _3275 = frontier_phi_73_pred_1;
                            _3279 = frontier_phi_73_pred_2;
                            _3278 = frontier_phi_73_pred_3;
                            _3277 = frontier_phi_73_pred_4;
                            _3276 = frontier_phi_73_pred_5;
                            _2983 = _3277 + _2996;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2980 = _3274 + _2993;
                            _2981 = _3275 + _2994;
                            _2982 = _3276 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2983;
                        frontier_phi_67_pred_1 = _2984;
                        frontier_phi_67_pred_2 = _2985;
                        frontier_phi_67_pred_3 = _2982;
                        frontier_phi_67_pred_4 = _2981;
                        frontier_phi_67_pred_5 = _2980;
                    }
                    _2649 = frontier_phi_67_pred;
                    _2651 = frontier_phi_67_pred_1;
                    _2653 = frontier_phi_67_pred_2;
                    _2647 = frontier_phi_67_pred_3;
                    _2645 = frontier_phi_67_pred_4;
                    _2643 = frontier_phi_67_pred_5;
                    uint _2788 = _2787 + 1u;
                    if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2781 = _2643;
                        _2782 = _2645;
                        _2783 = _2647;
                        _2784 = _2649;
                        _2785 = _2651;
                        _2786 = _2653;
                        _2787 = _2788;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_55_56_ladder = _2537;
                frontier_phi_55_56_ladder_1 = _2539;
                frontier_phi_55_56_ladder_2 = _2535;
                frontier_phi_55_56_ladder_3 = _2533;
                frontier_phi_55_56_ladder_4 = _2531;
                frontier_phi_55_56_ladder_5 = _2529;
            }
            _2642 = frontier_phi_55_56_ladder_5;
            _2644 = frontier_phi_55_56_ladder_4;
            _2646 = frontier_phi_55_56_ladder_3;
            _2648 = frontier_phi_55_56_ladder_2;
            _2650 = frontier_phi_55_56_ladder;
            _2652 = frontier_phi_55_56_ladder_1;
        }
        float _2657 = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
        _2441 = (_2657 * _2648) + _1893;
        _2443 = (_2657 * _2650) + _1895;
        _2445 = (_2657 * _2652) + _1897;
        _2447 = ((_2642 * 0.039999999105930328369140625) * _2657) + _2226;
        _2449 = ((_2644 * 0.039999999105930328369140625) * _2657) + _2228;
        _2451 = ((_2646 * 0.039999999105930328369140625) * _2657) + _2230;
    }
    else
    {
        _2441 = _1893;
        _2443 = _1895;
        _2445 = _1897;
        _2447 = _2226;
        _2449 = _2228;
        _2451 = _2230;
    }
    float _4325 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4336 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4347 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    uint _2471 = _237 + 6u;
    float _2479 = _640 / cbSceneParam._m0[86u].x;
    float _2480 = _641 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2555 = _2554 / _574;
        float _2566 = _2555 * _625;
        float _2567 = _626 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2570 = _2555 * _627;
        float _2572 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2573 = _2572 + cbSceneParam._m0[79u].w;
        float _2574 = cbSceneParam._m0[79u].w - _2567;
        float _2580 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2570 * _2570));
        float _2583 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2580;
        float _2588 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2590 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2568 - _2572) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2573 > 0.0) ? exp2(_2588 * _2573) : (2.0 - exp2(_2590 * _2573))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2583;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : max(_2573, _2574));
            float _2705 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : min(_2573, _2574));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2743 = ((abs(_2580 / _2568) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2588 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2588 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2590 * _2714) - exp2(_2590 * _2715)) * _2703))) + (_2583 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2499);
        _2592 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2594 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2596 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2598 = _2754 * _2499;
    }
    else
    {
        _2592 = _2496;
        _2594 = _2497;
        _2596 = _2498;
        _2598 = _2499;
    }
    float _2610 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2611 = _2610 == 3.0;
    float _2612 = log2(_2598);
    float _2619 = exp2(_2612 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2441 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _706))) + ((_2447 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2620 = exp2(_2612 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2443 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _706))) + ((_2449 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2621 = exp2(_2612 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2445 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _706))) + ((_2451 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2630 = (_2610 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2630 * (_2611 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.y = _2630 * (_2611 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.z = _2630 * (_2611 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.w = cbInstanceData._m0[_2471].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2471].w;
}


