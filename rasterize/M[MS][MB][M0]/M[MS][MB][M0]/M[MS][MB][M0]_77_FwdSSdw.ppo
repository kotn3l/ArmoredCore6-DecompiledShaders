#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1182;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3513 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _417 = _415.x;
    float _418 = _415.y;
    float _419 = _415.z;
    float _428 = ((_398.z - _419) * _376) + _419;
    float _431 = ((((_398.x - _417) * _376) + _417) * 2.0) + (-1.0);
    float _433 = ((((_398.y - _418) * _376) + _418) * 2.0) + (-1.0);
    float _434 = dot(vec2(_431, _433), vec2(_431, _433));
    float _3524 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))));
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _467 = (((_455.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _431;
    float _468 = (((_455.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _433;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _482 = _480.x;
    float _483 = 1.0 - _482;
    float _511 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_482 - _483) * cbMtdParam._m0[24u].w) + _483) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3535 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _520 = ((((cbMtdParam._m0[10u].x - _383) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _512) + _383;
    float _521 = ((((cbMtdParam._m0[10u].y - _384) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _512) + _384;
    float _522 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _385)) * _512) + _385;
    float _526 = (cbMtdParam._m0[19u].w * (_455.z - _428)) + _428;
    float _530 = ((cbMtdParam._m0[23u].y - _526) * _512) + _526;
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _558 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_229, _230, _231, 0.0));
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _260) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _261) + cbTextureTilingScale._m0[18u].w));
    float _575 = _573.x;
    float _580 = fract(_573.w + cbPerFrame._m0[22u].x);
    float _582 = (1.0 - _580) * _575;
    float _587 = ((_580 + (-1.0)) + _575) * 9.0;
    float _589 = ((_575 + (-1.0)) + _580) * 9.0;
    float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _591 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _605 = (_582 * ((_573.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _590 : (isnan(_590) ? 3.0 : min(_590, 3.0))) * 3.1415927410125732421875);
    float _607 = (_582 * ((_573.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _591 : (isnan(_591) ? 3.0 : min(_591, 3.0))) * 3.1415927410125732421875);
    float _611 = inversesqrt(dot(vec3(_605, _607, 1.0), vec3(_605, _607, 1.0)));
    float _627 = (((((0.5 - _551) + ((_605 * 0.5) * _611)) * _558) + _551) * 2.0) + (-1.0);
    float _628 = (((((0.5 - _552) + ((_611 * 0.5) * _607)) * _558) + _552) * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3566 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _645 = ((((cbMtdParam._m0[22u].z * _467) - _467) + _627) * _512) + _467;
    float _646 = ((((cbMtdParam._m0[22u].z * _468) - _468) + _628) * _512) + _468;
    float _647 = (_512 * (sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) - _439)) + _439;
    float _649 = cbMtdParam._m0[22u].x + _455.w;
    float _652 = fma(_647, _229, fma(_646, _235 * TANGENT.x, (_221 * _213) * _645));
    float _655 = fma(_647, _230, fma(_646, _235 * TANGENT.y, (_221 * _214) * _645));
    float _658 = fma(_647, _231, fma(_646, _235 * TANGENT.z, (_221 * _215) * _645));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3577 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _666 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3599 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3610 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3621 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    float _750 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _751 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _772 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _775 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _789 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _795 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_789].x;
    float _796 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_789].y;
    float _797 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_789].z;
    float _3632 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    vec4 _809 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _750, cbSceneParam._m0[86u].y * _751));
    float _813 = ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * TEXCOORD_5.w) * _809.x;
    float _814 = dot(vec3(_663, _664, _665), vec3(_742, _743, _744));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _663) - _742;
    float _822 = (_817 * _664) - _743;
    float _823 = (_817 * _665) - _744;
    float _827 = abs(dot(vec3(_742, _743, _744), vec3(_663, _664, _665)));
    float _3665 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_666);
    float _841 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _911 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _915 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _939 = _873 + _663;
        float _940 = _877 + _664;
        float _941 = _881 + _665;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _907;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _911;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _915;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_663, _664, _665), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3713 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_663, _664, _665), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3746 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_663, _664, _665), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3779 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1225 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1229 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1252 = _873 + _663;
        float _1253 = _877 + _664;
        float _1254 = _881 + _665;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_663, _664, _665), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3842 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_663, _664, _665), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3875 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_663, _664, _665), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3908 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1182;
        _1491 = _1182;
        _1492 = _1182;
        _1493 = _1182;
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1194)) + _1194;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1195)) + _1195;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _821 * 0.5;
    float _1559 = _822 * 0.5;
    float _1560 = _823 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1601;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1612;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1603 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1616 = (_1612 * cbModelParam._m0[1u].x) + (_1601 * (1.0 - cbModelParam._m0[1u].x));
    float _1626 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1626 : min(cbModelParam._m0[25u].z, _1626));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1676 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1680 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1684 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1687 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1690 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1693 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1721;
        if (_1687 > 0.0)
        {
            _1721 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1721 = frontier_phi_14_12_ladder;
        }
        float _1943;
        if (_1690 > 0.0)
        {
            _1943 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1943 = frontier_phi_23_19_ladder;
        }
        float _2189;
        if (_1693 > 0.0)
        {
            _2189 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2189 = frontier_phi_35_30_ladder;
        }
        float _2191 = isnan(_1943) ? _1721 : (isnan(_1721) ? _1943 : min(_1721, _1943));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1687) + _1676;
        float _2197 = (_2192 * _1690) + _1680;
        float _2198 = (_2192 * _1693) + _1684;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1627);
            frontier_phi_13_35_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1709 = frontier_phi_13_35_ladder_2;
        _1711 = frontier_phi_13_35_ladder_1;
        _1713 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1627);
        _1709 = _1697.x * cbModelParam._m0[1u].y;
        _1711 = _1697.y * cbModelParam._m0[1u].y;
        _1713 = _1697.z * cbModelParam._m0[1u].y;
    }
    float _1717 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1717 : min(cbModelParam._m0[25u].w, _1717));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1786 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1789 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1948;
        if (_1783 > 0.0)
        {
            _1948 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1948 = frontier_phi_25_21_ladder;
        }
        float _2216;
        if (_1786 > 0.0)
        {
            _2216 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2216 = frontier_phi_37_32_ladder;
        }
        float _2421;
        if (_1789 > 0.0)
        {
            _2421 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2421 = frontier_phi_46_43_ladder;
        }
        float _2423 = isnan(_2216) ? _1948 : (isnan(_1948) ? _2216 : min(_1948, _2216));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1783) + _1772;
        float _2429 = (_2424 * _1786) + _1776;
        float _2430 = (_2424 * _1789) + _1780;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1718);
            frontier_phi_22_46_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_22_46_ladder_2;
        _1810 = frontier_phi_22_46_ladder_1;
        _1812 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1718);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1824 = ((((1.0 - _841) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_841 * _829)) * _813;
    float _1825 = _1824 * ((cbModelParam._m0[1u].w * (_1808 - _1709)) + _1709);
    float _1826 = _1824 * ((cbModelParam._m0[1u].w * (_1810 - _1711)) + _1711);
    float _1827 = _1824 * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1830 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    vec4 _1844 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_750, _751));
    float _1846 = _1844.w;
    float _1858 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1846);
    float _1859 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1846);
    float _1860 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1846);
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1874 = _813 + (-1.0);
    float _1879 = (cbLight._m0[_1867].x * _1874) + 1.0;
    float _1880 = (cbLight._m0[_1867].y * _1874) + 1.0;
    float _1881 = (cbLight._m0[_1867].z * _1874) + 1.0;
    float _1882 = (cbLight._m0[_1867].w * _1874) + 1.0;
    uint _1883 = _1866 + 5u;
    float _1889 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1893 = _1866 + 4u;
    float _1902 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1906 = _1866 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_663, _664, _665));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_663, _664, _665));
    float _4044 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4055 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1883].x * _1889) * _1927) + (((cbLight._m0[_1893].x * _1858) * _1902) * _1925);
    float _1935 = ((_1889 * cbLight._m0[_1883].y) * _1927) + (((cbLight._m0[_1893].y * _1859) * _1902) * _1925);
    float _1936 = ((_1889 * cbLight._m0[_1883].z) * _1927) + (((cbLight._m0[_1893].z * _1860) * _1902) * _1925);
    uvec4 _1940 = floatBitsToUint(cbLight._m0[_1866 + 12u]);
    bool _1942 = _1940.x == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1942)
    {
        _1953 = _1934;
        _1955 = _1935;
        _1957 = _1936;
    }
    else
    {
        uint _1961 = _1866 + 6u;
        float _1977 = (dot(vec3(cbLight._m0[_1866 + 2u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _4066 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1980 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _1953 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1934;
        _1955 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1935;
        _1957 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1936;
    }
    bool _1960 = _1940.y == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1960)
    {
        _1998 = _1953;
        _2000 = _1955;
        _2002 = _1957;
    }
    else
    {
        uint _2160 = _1866 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1866 + 3u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4082 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2179 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _1998 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1953;
        _2000 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1955;
        _2002 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1957;
    }
    uint _2005 = _1866 + 8u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _666) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1866].x + _742;
    float _2021 = cbLight._m0[_1866].y + _743;
    float _2022 = cbLight._m0[_1866].z + _744;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1866].xyz));
    float _4098 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2034 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2035 = dot(vec3(_663, _664, _665), vec3(_2027, _2028, _2029));
    float _4120 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2027, _2028, _2029));
    float _4131 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2019 * _2019;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2019;
    float _2070 = (0.5 / (((_2034 * ((_2033 * _2059) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2059) + _2019) * _2033))) * _2033;
    float _4142 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    uint _2086 = _1866 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _666) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1906].x + _742;
    float _2100 = cbLight._m0[_1906].y + _743;
    float _2101 = cbLight._m0[_1906].z + _744;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1906].xyz));
    float _4153 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2113 = dot(vec3(_663, _664, _665), vec3(_2106, _2107, _2108));
    float _4164 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2106, _2107, _2108));
    float _4175 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2098;
    float _2145 = (0.5 / (((_2034 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2135) + _2098) * _2112))) * _2112;
    float _4186 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2157 = (((_2134 * cbLight._m0[_2086].x) * _2147) * _1889) + ((((cbLight._m0[_2005].x * _1858) * _2058) * _2072) * _1902);
    float _2158 = (((_2134 * cbLight._m0[_2086].y) * _2147) * _1889) + ((((cbLight._m0[_2005].y * _1859) * _2058) * _2072) * _1902);
    float _2159 = (((_2134 * cbLight._m0[_2086].z) * _2147) * _1889) + ((((cbLight._m0[_2005].z * _1860) * _2058) * _2072) * _1902);
    float _2221;
    float _2223;
    float _2225;
    if (_1942)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1866 + 2u;
        uint _2231 = _1866 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _666) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _742;
        float _2248 = cbLight._m0[_2227].y + _743;
        float _2249 = cbLight._m0[_2227].z + _744;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2227].xyz));
        float _4197 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2261 = dot(vec3(_663, _664, _665), vec3(_2254, _2255, _2256));
        float _4208 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4219 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_2034 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2283) + _2246) * _2260))) * _2260;
        float _4230 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2221 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2157;
        _2223 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2158;
        _2225 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2159;
    }
    float _2331;
    float _2333;
    float _2335;
    if (_1960)
    {
        _2331 = _2221;
        _2333 = _2223;
        _2335 = _2225;
    }
    else
    {
        uint _2342 = _1866 + 3u;
        uint _2346 = _1866 + 11u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _666) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _742;
        float _2363 = cbLight._m0[_2342].y + _743;
        float _2364 = cbLight._m0[_2342].z + _744;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2342].xyz));
        float _4246 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2376 = dot(vec3(_663, _664, _665), vec3(_2369, _2370, _2371));
        float _4257 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4268 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2398 = 1.0 - _2361;
        float _2408 = (0.5 / (((_2034 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2398) + _2361) * _2375))) * _2375;
        float _4279 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2331 = (((_2397 * cbLight._m0[_2346].x) * _2410) * _2411) + _2221;
        _2333 = (((_2397 * cbLight._m0[_2346].y) * _2410) * _2411) + _2223;
        _2335 = (((_2397 * cbLight._m0[_2346].z) * _2410) * _2411) + _2225;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1864.y == 0u)
    {
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2486;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2486;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2486;
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _751) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _750) / _2502)));
        float _2523 = (log2(_2489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2795)
                {
                    frontier_phi_61_pred = _2779;
                    frontier_phi_61_pred_1 = _2784;
                    frontier_phi_61_pred_2 = _2783;
                    frontier_phi_61_pred_3 = _2782;
                    frontier_phi_61_pred_4 = _2781;
                    frontier_phi_61_pred_5 = _2780;
                }
                else
                {
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    uint _2909;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2794;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    for (;;)
                    {
                        uint _2913 = uint(findLSB(_2909)) + (_2785 << 5u);
                        uint _2910 = (_2909 + 4294967295u) & _2909;
                        uint _2915 = _2913 * 48u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2935 = (_2913 * 48u) + 4u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2954 = (_2913 * 48u) + 8u;
                        vec3 _2965 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x));
                        float _2969 = _2929.x - _2487;
                        float _2970 = _2929.y - _2488;
                        float _2971 = _2929.z - _2489;
                        float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                        float _2975 = inversesqrt(_2972);
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2979 = dot(vec3(_769, _772, _775), vec3(_2976, _2977, _2978));
                        float _2984 = 1.0 - (_2972 * _2929.w);
                        float _4305 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2986 = sqrt(_2972) * _2948.w;
                        float _2989 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2979) + _2990;
                        float _2996 = _2986 * _2986;
                        float _3000 = ((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2985) / ((_2996 * 0.699999988079071044921875) + 1.0);
                        float _3004 = (-0.0) - _2487;
                        float _3005 = (-0.0) - _2488;
                        float _3006 = (-0.0) - _2489;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3021 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _829;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_769, _772, _775), vec3(_3011, _3012, _3013));
                        float _4321 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3046 = dot(vec3(_769, _772, _775), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4332 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2989 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2979) + _3055;
                        float _4343 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4354 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3080 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3053 * _3053) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2985;
                        _2838 = (_3000 * _2948.x) + _2906;
                        _2839 = (_3000 * _2948.y) + _2907;
                        _2840 = (_3000 * _2948.z) + _2908;
                        _2835 = (_3080 * _2965.x) + _2903;
                        _2836 = (_3080 * _2965.y) + _2904;
                        _2837 = (_3080 * _2965.z) + _2905;
                        if (_2910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2910;
                        }
                    }
                    frontier_phi_61_pred = _2835;
                    frontier_phi_61_pred_1 = _2840;
                    frontier_phi_61_pred_2 = _2839;
                    frontier_phi_61_pred_3 = _2838;
                    frontier_phi_61_pred_4 = _2837;
                    frontier_phi_61_pred_5 = _2836;
                }
                _2635 = frontier_phi_61_pred;
                _2645 = frontier_phi_61_pred_1;
                _2643 = frontier_phi_61_pred_2;
                _2641 = frontier_phi_61_pred_3;
                _2639 = frontier_phi_61_pred_4;
                _2637 = frontier_phi_61_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2635;
                    _2780 = _2637;
                    _2781 = _2639;
                    _2782 = _2641;
                    _2783 = _2643;
                    _2784 = _2645;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2651) & _2533) == 0u)
        {
            _2747 = _2634;
            _2749 = _2636;
            _2751 = _2638;
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
            float _2773 = _2772 * _2487;
            float _2774 = _2772 * _2488;
            float _2775 = _2772 * _2489;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2886 = _2634;
                float _2887 = _2636;
                float _2888 = _2638;
                float _2889 = _2640;
                float _2890 = _2642;
                float _2891 = _2644;
                uint _2892 = _2651;
                uint _2901;
                bool _2902;
                for (;;)
                {
                    _2901 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                    _2902 = _2901 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2902)
                    {
                        frontier_phi_67_pred = _2889;
                        frontier_phi_67_pred_1 = _2890;
                        frontier_phi_67_pred_2 = _2891;
                        frontier_phi_67_pred_3 = _2888;
                        frontier_phi_67_pred_4 = _2887;
                        frontier_phi_67_pred_5 = _2886;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3098 = _2886;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        uint _3104 = _2901;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        vec3 _3158;
                        vec4 _3173;
                        vec4 _3189;
                        float _3235;
                        bool _3236;
                        for (;;)
                        {
                            uint _3115 = ((_2892 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3115 * 40u) + 8u;
                            _3158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x));
                            uint _3160 = (_3115 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3115 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3115 * 40u) + 24u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3210 = (_3115 * 40u) + 28u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3235 = fma(_2489, _3223.z, fma(_2488, _3223.y, _3223.x * _2487)) + _3223.w;
                            _3236 = !((fma(_2489, _3204.z, fma(_2488, _3204.y, _3204.x * _2487)) + _3204.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3236)
                            {
                                float _3263 = _3130.x - _2487;
                                float _3264 = _3130.y - _2488;
                                float _3265 = _3130.z - _2489;
                                float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                                float _3269 = inversesqrt(_3266);
                                float _3270 = _3269 * _3263;
                                float _3271 = _3269 * _3264;
                                float _3272 = _3269 * _3265;
                                float _3276 = 1.0 - (_3266 / (_3131 * _3131));
                                float _4365 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3281 = sqrt(_3266) * _3146.w;
                                float _3283 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                                float _3284 = _3283 * _3283;
                                float _3287 = ((1.0 - _3284) * dot(vec3(_3270, _3271, _3272), vec3(_769, _772, _775))) + _3284;
                                float _3290 = _3281 * _3281;
                                float _3294 = (fma(_2489, _3173.z, fma(_2488, _3173.y, _3173.x * _2487)) + _3173.w) / _3235;
                                float _3295 = (fma(_2489, _3189.z, fma(_2488, _3189.y, _3189.x * _2487)) + _3189.w) / _3235;
                                float _3299 = 1.0 - dot(vec2(_3294, _3295), vec2(_3294, _3295));
                                float _4381 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3301 = _3300 * (((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3277) / ((_3290 * 0.699999988079071044921875) + 1.0));
                                float _3313 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                                float _3314 = 1.0 - _829;
                                float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                                float _3322 = _3321 * _3321;
                                float _3323 = _3322 * _3322;
                                float _3324 = _3270 - _2773;
                                float _3325 = _3271 - _2774;
                                float _3326 = _3272 - _2775;
                                float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                                float _3334 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4392 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3338 = dot(vec3(_769, _772, _775), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                                float _4403 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                                float _3346 = _3283 * _3322;
                                float _3347 = _3346 * _3346;
                                float _3353 = ((1.0 - _3347) * dot(vec3(_769, _772, _775), vec3(_3270, _3271, _3272))) + _3347;
                                float _4414 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3355 = 1.0 - _3322;
                                float _3365 = (0.5 / (((_3354 * ((_3337 * _3355) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3322) * _3337))) * _3354;
                                float _4425 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3375 = (_3300 * _3277) * (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3345 * _3345) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3375 * _3158.x;
                                frontier_phi_73_pred_1 = _3375 * _3158.y;
                                frontier_phi_73_pred_2 = _3301 * _3146.z;
                                frontier_phi_73_pred_3 = _3301 * _3146.y;
                                frontier_phi_73_pred_4 = _3301 * _3146.x;
                                frontier_phi_73_pred_5 = _3375 * _3158.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3379 = frontier_phi_73_pred;
                            _3380 = frontier_phi_73_pred_1;
                            _3384 = frontier_phi_73_pred_2;
                            _3383 = frontier_phi_73_pred_3;
                            _3382 = frontier_phi_73_pred_4;
                            _3381 = frontier_phi_73_pred_5;
                            _3088 = _3382 + _3101;
                            _3089 = _3383 + _3102;
                            _3090 = _3384 + _3103;
                            _3085 = _3379 + _3098;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3088;
                        frontier_phi_67_pred_1 = _3089;
                        frontier_phi_67_pred_2 = _3090;
                        frontier_phi_67_pred_3 = _3087;
                        frontier_phi_67_pred_4 = _3086;
                        frontier_phi_67_pred_5 = _3085;
                    }
                    _2754 = frontier_phi_67_pred;
                    _2756 = frontier_phi_67_pred_1;
                    _2758 = frontier_phi_67_pred_2;
                    _2752 = frontier_phi_67_pred_3;
                    _2750 = frontier_phi_67_pred_4;
                    _2748 = frontier_phi_67_pred_5;
                    uint _2893 = _2892 + 1u;
                    if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2886 = _2748;
                        _2887 = _2750;
                        _2888 = _2752;
                        _2889 = _2754;
                        _2890 = _2756;
                        _2891 = _2758;
                        _2892 = _2893;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2756;
                frontier_phi_55_56_ladder_1 = _2758;
                frontier_phi_55_56_ladder_2 = _2754;
                frontier_phi_55_56_ladder_3 = _2752;
                frontier_phi_55_56_ladder_4 = _2750;
                frontier_phi_55_56_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_55_56_ladder = _2642;
                frontier_phi_55_56_ladder_1 = _2644;
                frontier_phi_55_56_ladder_2 = _2640;
                frontier_phi_55_56_ladder_3 = _2638;
                frontier_phi_55_56_ladder_4 = _2636;
                frontier_phi_55_56_ladder_5 = _2634;
            }
            _2747 = frontier_phi_55_56_ladder_5;
            _2749 = frontier_phi_55_56_ladder_4;
            _2751 = frontier_phi_55_56_ladder_3;
            _2753 = frontier_phi_55_56_ladder_2;
            _2755 = frontier_phi_55_56_ladder;
            _2757 = frontier_phi_55_56_ladder_1;
        }
        float _2762 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2546 = (_2762 * _2753) + _1998;
        _2548 = (_2762 * _2755) + _2000;
        _2550 = (_2762 * _2757) + _2002;
        _2552 = ((_2747 * 0.039999999105930328369140625) * _2762) + _2331;
        _2554 = ((_2749 * 0.039999999105930328369140625) * _2762) + _2333;
        _2556 = ((_2751 * 0.039999999105930328369140625) * _2762) + _2335;
    }
    else
    {
        _2546 = _1998;
        _2548 = _2000;
        _2550 = _2002;
        _2552 = _2331;
        _2554 = _2333;
        _2556 = _2335;
    }
    float _4441 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4452 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4463 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    uint _2576 = _241 + 6u;
    float _2584 = _750 / cbSceneParam._m0[86u].x;
    float _2585 = _751 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2660 = _2659 / _684;
        float _2671 = _2660 * _735;
        float _2672 = _736 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2675 = _2660 * _737;
        float _2677 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2678 = _2677 + cbSceneParam._m0[79u].w;
        float _2679 = cbSceneParam._m0[79u].w - _2672;
        float _2685 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2675 * _2675));
        float _2688 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2685;
        float _2693 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2695 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2848;
        if (abs((_2673 - _2677) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2848 = ((((_2678 > 0.0) ? exp2(_2693 * _2678) : (2.0 - exp2(_2695 * _2678))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2688;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : max(_2678, _2679));
            float _2810 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : min(_2678, _2679));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2848 = ((abs(_2685 / _2673) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2693 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2693 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2695 * _2819) - exp2(_2695 * _2820)) * _2808))) + (_2688 * cbSceneParam._m0[80u].z);
        }
        vec4 _2850 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2859 = exp2((_2848 * (-1.44269502162933349609375)) * (1.0 - _2850.w));
        float _2860 = log2(_2859);
        float _2876 = log2(_2604);
        _2697 = (exp2(_2876 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].x)) * _2850.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2699 = (exp2(_2876 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].y)) * _2850.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2701 = (exp2(_2876 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].z)) * _2850.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2703 = _2859 * _2604;
    }
    else
    {
        _2697 = _2601;
        _2699 = _2602;
        _2701 = _2603;
        _2703 = _2604;
    }
    float _2715 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2716 = _2715 == 3.0;
    float _2717 = log2(_2703);
    float _2724 = exp2(_2717 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2546 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _813))) + ((_2552 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2725 = exp2(_2717 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2548 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _813))) + ((_2554 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2717 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2550 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _813))) + ((_2556 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2735 = (_2715 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2735 * (_2716 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.y = _2735 * (_2716 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.z = _2735 * (_2716 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.w = cbInstanceData._m0[_2576].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2576].w;
}


