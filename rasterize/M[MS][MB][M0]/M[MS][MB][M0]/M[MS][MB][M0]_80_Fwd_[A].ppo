#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1320;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3692 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3703 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3714 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3725 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _441;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _422) + _509;
    float _521 = ((((_488.x - _507) * _422) + _507) * 2.0) + (-1.0);
    float _522 = ((((_488.y - _508) * _422) + _508) * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3736 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _562 = (_521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_463.x * 2.0) + (-1.0)))) + (((_550.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _563 = (_522 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_463.y * 2.0) + (-1.0)))) + (((_550.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _577 = _575.x;
    float _578 = 1.0 - _577;
    float _604 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_577 - _578) * cbMtdParam._m0[24u].w) + _578) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3747 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _613 = ((((cbMtdParam._m0[10u].x - _448) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _605) + _448;
    float _614 = ((((cbMtdParam._m0[10u].y - _449) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _605) + _449;
    float _615 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _450)) * _605) + _450;
    float _620 = (((_463.z - _518) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _518;
    float _624 = ((_550.z - _620) * cbMtdParam._m0[19u].w) + _620;
    float _628 = ((cbMtdParam._m0[23u].y - _624) * _605) + _624;
    vec4 _647 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _656 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_242, _243, _244, 0.0));
    vec4 _671 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _292) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _293) + cbTextureTilingScale._m0[18u].w));
    float _673 = _671.x;
    float _678 = fract(_671.w + cbPerFrame._m0[22u].x);
    float _680 = (1.0 - _678) * _673;
    float _685 = ((_678 + (-1.0)) + _673) * 9.0;
    float _687 = ((_673 + (-1.0)) + _678) * 9.0;
    float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _689 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _703 = (_680 * ((_671.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _688 : (isnan(_688) ? 3.0 : min(_688, 3.0))) * 3.1415927410125732421875);
    float _705 = (_680 * ((_671.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _689 : (isnan(_689) ? 3.0 : min(_689, 3.0))) * 3.1415927410125732421875);
    float _709 = inversesqrt(dot(vec3(_703, _705, 1.0), vec3(_703, _705, 1.0)));
    float _725 = (((((0.5 - _649) + ((_703 * 0.5) * _709)) * _656) + _649) * 2.0) + (-1.0);
    float _726 = (((((0.5 - _650) + ((_709 * 0.5) * _705)) * _656) + _650) * 2.0) + (-1.0);
    float _727 = dot(vec2(_725, _726), vec2(_725, _726));
    float _3778 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _743 = ((((cbMtdParam._m0[22u].z * _562) - _562) + _725) * _605) + _562;
    float _744 = ((((cbMtdParam._m0[22u].z * _563) - _563) + _726) * _605) + _563;
    float _745 = (_605 * (sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _528)) + _528;
    float _747 = cbMtdParam._m0[22u].x + _550.w;
    float _750 = fma(_745, _242, fma(_744, _248 * TANGENT.x, (_234 * _226) * _743));
    float _753 = fma(_745, _243, fma(_744, _248 * TANGENT.y, (_234 * _227) * _743));
    float _756 = fma(_745, _244, fma(_744, _248 * TANGENT.z, (_234 * _228) * _743));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3789 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _764 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3811 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3822 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3833 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    vec4 _847 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _849 = _847.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1002 = sqrt(((_833 * _833) + (_834 * _834)) + (_835 * _835));
        float _1008 = (cbMatDynParam._m0[5u].x * _1002) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1013 = (cbMatDynParam._m0[5u].z * _1002) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _1009)) + _1009) < ((_849 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _860 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _861 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _879 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _882 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _885 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _898 = _273 + 9u;
    uint _899 = _898 + uint(cbMatDynParam._m0[0u].w);
    float _905 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_899].x;
    float _906 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_899].y;
    float _907 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_899].z;
    float _3866 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    vec4 _919 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _860, cbSceneParam._m0[86u].y * _861));
    float _923 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _919.x;
    float _924 = dot(vec3(_761, _762, _763), vec3(_840, _841, _842));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _761) - _840;
    float _932 = (_927 * _762) - _841;
    float _933 = (_927 * _763) - _842;
    float _937 = abs(dot(vec3(_840, _841, _842), vec3(_761, _762, _763)));
    float _3899 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_764);
    float _951 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1319;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1049 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1053 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1077 = _983 + _761;
        float _1078 = _987 + _762;
        float _1079 = _991 + _763;
        float _1089 = fma(_1079, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077)) - _1045;
        float _1090 = fma(_1079, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077)) - _1049;
        float _1091 = fma(_1079, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077)) - _1053;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1147 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1113.x + (-0.5));
        float _1149 = _1147 * (_1113.y + (-0.5));
        float _1150 = _1147 * (_1113.z + (-0.5));
        float _1157 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1120.x + (-0.5));
        float _1159 = _1157 * (_1120.y + (-0.5));
        float _1160 = _1157 * (_1120.z + (-0.5));
        float _1167 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1127.x + (-0.5));
        float _1169 = _1167 * (_1127.y + (-0.5));
        float _1170 = _1167 * (_1127.z + (-0.5));
        float _1177 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1134.x + (-0.5));
        float _1179 = _1177 * (_1134.y + (-0.5));
        float _1180 = _1177 * (_1134.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1201 = (dot(vec3(_761, _762, _763), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1211 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3947 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1213 + 1.0))) + _1218) * _1181;
        float _1228 = _1149 * 0.5;
        float _1229 = _1159 * 0.5;
        float _1230 = _1169 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_761, _762, _763), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3980 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1255 + 1.0))) + _1260) * _1182;
        float _1270 = _1150 * 0.5;
        float _1271 = _1160 * 0.5;
        float _1272 = _1170 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_761, _762, _763), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4013 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1297 + 1.0))) + _1302) * _1183;
        _1319 = _1150;
        _1321 = _1149;
        _1322 = _1148;
        _1323 = _1160;
        _1324 = _1159;
        _1325 = _1158;
        _1326 = _1170;
        _1327 = _1169;
        _1328 = _1168;
        _1329 = _1183;
        _1330 = _1182;
        _1331 = _1181;
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1320;
        _1321 = _1320;
        _1322 = _1320;
        _1323 = _1320;
        _1324 = _1320;
        _1325 = _1320;
        _1326 = _1320;
        _1327 = _1320;
        _1328 = _1320;
        _1329 = _1320;
        _1330 = _1320;
        _1331 = _1320;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1366 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1370 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1393 = _983 + _761;
        float _1394 = _987 + _762;
        float _1395 = _991 + _763;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_761, _762, _763), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4076 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_761, _762, _763), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4109 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_761, _762, _763), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4142 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1320;
        _1632 = _1320;
        _1633 = _1320;
        _1634 = _1320;
        _1635 = _1320;
        _1636 = _1320;
        _1637 = _1320;
        _1638 = _1320;
        _1639 = _1320;
        _1640 = _1320;
        _1641 = _1320;
        _1642 = _1320;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1332)) + _1332;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1333)) + _1333;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1334)) + _1334;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _931 * 0.5;
    float _1700 = _932 * 0.5;
    float _1701 = _933 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1319, _1323, _1326, _1329));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1831 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1834 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1862 = frontier_phi_17_15_ladder;
        }
        float _2063;
        if (_1831 > 0.0)
        {
            _2063 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2063 = frontier_phi_26_22_ladder;
        }
        float _2306;
        if (_1834 > 0.0)
        {
            _2306 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2306 = frontier_phi_38_33_ladder;
        }
        float _2308 = isnan(_2063) ? _1862 : (isnan(_1862) ? _2063 : min(_1862, _2063));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1828) + _1817;
        float _2314 = (_2309 * _1831) + _1821;
        float _2315 = (_2309 * _1834) + _1825;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_16_38_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_16_38_ladder_2;
        _1852 = frontier_phi_16_38_ladder_1;
        _1854 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1768);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1927 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1930 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2068;
        if (_1924 > 0.0)
        {
            _2068 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2068 = frontier_phi_28_24_ladder;
        }
        float _2333;
        if (_1927 > 0.0)
        {
            _2333 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2333 = frontier_phi_40_35_ladder;
        }
        float _2538;
        if (_1930 > 0.0)
        {
            _2538 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2538 = frontier_phi_49_46_ladder;
        }
        float _2540 = isnan(_2333) ? _2068 : (isnan(_2068) ? _2333 : min(_2068, _2333));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1924) + _1913;
        float _2546 = (_2541 * _1927) + _1917;
        float _2547 = (_2541 * _1930) + _1921;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_25_49_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_25_49_ladder_2;
        _1951 = frontier_phi_25_49_ladder_1;
        _1953 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1859);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1965 = ((((1.0 - _951) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_951 * _939)) * _923;
    float _1966 = _1965 * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1967 = _1965 * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1968 = _1965 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _923 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2022 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2026 = _1989 | 1u;
    float _2037 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_761, _762, _763));
    float _2040 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_761, _762, _763));
    float _4278 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _4289 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2047 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2054 = ((cbLight._m0[_2006].x * _2012) * _2047) + ((cbLight._m0[_2016].x * _2022) * _2045);
    float _2055 = ((_2012 * cbLight._m0[_2006].y) * _2047) + ((_2022 * cbLight._m0[_2016].y) * _2045);
    float _2056 = ((_2012 * cbLight._m0[_2006].z) * _2047) + ((_2022 * cbLight._m0[_2016].z) * _2045);
    uvec4 _2060 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2062 = _2060.x == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2062)
    {
        _2073 = _2054;
        _2075 = _2055;
        _2077 = _2056;
    }
    else
    {
        uint _2081 = _1989 + 6u;
        float _2097 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4300 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2100 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2073 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _2054;
        _2075 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _2055;
        _2077 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _2056;
    }
    bool _2080 = _2060.y == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2080)
    {
        _2118 = _2073;
        _2120 = _2075;
        _2122 = _2077;
    }
    else
    {
        uint _2277 = _1989 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4316 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2296 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2118 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2073;
        _2120 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2075;
        _2122 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2077;
    }
    uint _2125 = _1989 + 8u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _764) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1989].x + _840;
    float _2141 = cbLight._m0[_1989].y + _841;
    float _2142 = cbLight._m0[_1989].z + _842;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_1989].xyz));
    float _4332 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2154 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2155 = dot(vec3(_761, _762, _763), vec3(_2147, _2148, _2149));
    float _4354 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2147, _2148, _2149));
    float _4365 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2139 * _2139;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2178 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2179 = 1.0 - _2139;
    float _2190 = (0.5 / (((_2154 * ((_2153 * _2179) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2179) + _2139) * _2153))) * _2153;
    float _4376 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    uint _2203 = _1989 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _764) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2026].x + _840;
    float _2217 = cbLight._m0[_2026].y + _841;
    float _2218 = cbLight._m0[_2026].z + _842;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2026].xyz));
    float _4387 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2230 = dot(vec3(_761, _762, _763), vec3(_2223, _2224, _2225));
    float _4398 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2223, _2224, _2225));
    float _4409 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2252 = 1.0 - _2215;
    float _2262 = (0.5 / (((_2154 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2252) + _2215) * _2229))) * _2229;
    float _4420 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2274 = (((_2251 * cbLight._m0[_2203].x) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].x) * _2192) * _2022);
    float _2275 = (((_2251 * cbLight._m0[_2203].y) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].y) * _2192) * _2022);
    float _2276 = (((_2251 * cbLight._m0[_2203].z) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].z) * _2192) * _2022);
    float _2338;
    float _2340;
    float _2342;
    if (_2062)
    {
        _2338 = _2274;
        _2340 = _2275;
        _2342 = _2276;
    }
    else
    {
        uint _2344 = _1989 + 2u;
        uint _2348 = _1989 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _764) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _840;
        float _2365 = cbLight._m0[_2344].y + _841;
        float _2366 = cbLight._m0[_2344].z + _842;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2344].xyz));
        float _4431 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2378 = dot(vec3(_761, _762, _763), vec3(_2371, _2372, _2373));
        float _4442 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4453 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2400 = 1.0 - _2363;
        float _2410 = (0.5 / (((_2154 * ((_2377 * _2400) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2400) + _2363) * _2377))) * _2377;
        float _4464 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2338 = (((_2399 * cbLight._m0[_2348].x) * _2412) * _2413) + _2274;
        _2340 = (((_2399 * cbLight._m0[_2348].y) * _2412) * _2413) + _2275;
        _2342 = (((_2399 * cbLight._m0[_2348].z) * _2412) * _2413) + _2276;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2080)
    {
        _2448 = _2338;
        _2450 = _2340;
        _2452 = _2342;
    }
    else
    {
        uint _2459 = _1989 + 3u;
        uint _2463 = _1989 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _764) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _840;
        float _2480 = cbLight._m0[_2459].y + _841;
        float _2481 = cbLight._m0[_2459].z + _842;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2459].xyz));
        float _4480 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2493 = dot(vec3(_761, _762, _763), vec3(_2486, _2487, _2488));
        float _4491 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4502 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2515 = 1.0 - _2478;
        float _2525 = (0.5 / (((_2154 * ((_2492 * _2515) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2515) + _2478) * _2492))) * _2492;
        float _4513 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2448 = (((_2514 * cbLight._m0[_2463].x) * _2527) * _2528) + _2338;
        _2450 = (((_2514 * cbLight._m0[_2463].y) * _2527) * _2528) + _2340;
        _2452 = (((_2514 * cbLight._m0[_2463].z) * _2527) * _2528) + _2342;
    }
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_1987.y == 0u)
    {
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2603;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2603;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2603;
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.x;
        uint _2630 = uint((float(_2618.y) * floor(float(uint(cbSceneParam._m0[85u].y * _861) / _2619))) + floor(float(uint(cbSceneParam._m0[85u].x * _860) / _2619)));
        float _2640 = (log2(_2606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        uint _2644 = uint(isnan(14.0) ? _2641 : (isnan(_2641) ? 14.0 : min(_2641, 14.0)));
        uvec4 _2649 = texelFetch(g_lightClusterGridBuffer, int(((_2644 << 2u) + (_2630 << 6u)) >> 2u));
        uint _2650 = _2649.x;
        uint _2651 = _2618.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2651 >> 4u) & 15u)) + 4294967295u) & _2650) == 0u) || ((_2651 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            uint _2910 = 0u;
            uint _2919;
            bool _2920;
            for (;;)
            {
                _2919 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                _2920 = _2919 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2920)
                {
                    frontier_phi_66_pred = _2904;
                    frontier_phi_66_pred_1 = _2909;
                    frontier_phi_66_pred_2 = _2908;
                    frontier_phi_66_pred_3 = _2907;
                    frontier_phi_66_pred_4 = _2906;
                    frontier_phi_66_pred_5 = _2905;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2919;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2910 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _2604;
                        float _3116 = _3075.y - _2605;
                        float _3117 = _3075.z - _2606;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_879, _882, _885), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4539 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _2604;
                        float _3151 = (-0.0) - _2605;
                        float _3152 = (-0.0) - _2606;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3167 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3168 = 1.0 - _939;
                        float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                        float _3176 = _3175 * _3175;
                        float _3177 = _3176 * _3176;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3188 = dot(vec3(_879, _882, _885), vec3(_3157, _3158, _3159));
                        float _4555 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3192 = dot(vec3(_879, _882, _885), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                        float _4566 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                        float _3200 = _3135 * _3176;
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3125) + _3201;
                        float _4577 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3206 = 1.0 - _3176;
                        float _3216 = (0.5 / (((_3205 * ((_3191 * _3206) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3176) * _3191))) * _3205;
                        float _4588 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3226 = (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3199 * _3199) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2979 = (_3146 * _3094.x) + _3052;
                        _2980 = (_3146 * _3094.y) + _3053;
                        _2981 = (_3146 * _3094.z) + _3054;
                        _2976 = (_3226 * _3111.x) + _3049;
                        _2977 = (_3226 * _3111.y) + _3050;
                        _2978 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_66_pred = _2976;
                    frontier_phi_66_pred_1 = _2981;
                    frontier_phi_66_pred_2 = _2980;
                    frontier_phi_66_pred_3 = _2979;
                    frontier_phi_66_pred_4 = _2978;
                    frontier_phi_66_pred_5 = _2977;
                }
                _2752 = frontier_phi_66_pred;
                _2762 = frontier_phi_66_pred_1;
                _2760 = frontier_phi_66_pred_2;
                _2758 = frontier_phi_66_pred_3;
                _2756 = frontier_phi_66_pred_4;
                _2754 = frontier_phi_66_pred_5;
                uint _2911 = _2910 + 1u;
                if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2904 = _2752;
                    _2905 = _2754;
                    _2906 = _2756;
                    _2907 = _2758;
                    _2908 = _2760;
                    _2909 = _2762;
                    _2910 = _2911;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((4294967295u << _2768) & _2650) == 0u)
        {
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
        }
        else
        {
            float _2897 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
            float _2898 = _2897 * _2604;
            float _2899 = _2897 * _2605;
            float _2900 = _2897 * _2606;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _3032 = _2751;
                float _3033 = _2753;
                float _3034 = _2755;
                float _3035 = _2757;
                float _3036 = _2759;
                float _3037 = _2761;
                uint _3038 = _2768;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3048)
                    {
                        frontier_phi_77_pred = _3037;
                        frontier_phi_77_pred_1 = _3036;
                        frontier_phi_77_pred_2 = _3035;
                        frontier_phi_77_pred_3 = _3034;
                        frontier_phi_77_pred_4 = _3033;
                        frontier_phi_77_pred_5 = _3032;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        uint _3259 = _3047;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2606, _3377.z, fma(_2605, _3377.y, _3377.x * _2604)) + _3377.w;
                            _3390 = !((fma(_2606, _3358.z, fma(_2605, _3358.y, _3358.x * _2604)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _2604;
                                float _3418 = _3285.y - _2605;
                                float _3419 = _3285.z - _2606;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4599 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_879, _882, _885))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2606, _3328.z, fma(_2605, _3328.y, _3328.x * _2604)) + _3328.w) / _3389;
                                float _3449 = (fma(_2606, _3343.z, fma(_2605, _3343.y, _3343.x * _2604)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4615 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _939;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2898;
                                float _3479 = _3425 - _2899;
                                float _3480 = _3426 - _2900;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_879, _882, _885), vec3((-0.0) - _2898, (-0.0) - _2899, (-0.0) - _2900));
                                float _4626 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3492 = dot(vec3(_879, _882, _885), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4637 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_879, _882, _885), vec3(_3424, _3425, _3426))) + _3501;
                                float _4648 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4659 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3301.y;
                                frontier_phi_83_pred_1 = _3455 * _3301.x;
                                frontier_phi_83_pred_2 = _3529 * _3313.z;
                                frontier_phi_83_pred_3 = _3529 * _3313.y;
                                frontier_phi_83_pred_4 = _3529 * _3313.x;
                                frontier_phi_83_pred_5 = _3455 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3245;
                        frontier_phi_77_pred_1 = _3244;
                        frontier_phi_77_pred_2 = _3243;
                        frontier_phi_77_pred_3 = _3242;
                        frontier_phi_77_pred_4 = _3241;
                        frontier_phi_77_pred_5 = _3240;
                    }
                    _2883 = frontier_phi_77_pred;
                    _2881 = frontier_phi_77_pred_1;
                    _2879 = frontier_phi_77_pred_2;
                    _2877 = frontier_phi_77_pred_3;
                    _2875 = frontier_phi_77_pred_4;
                    _2873 = frontier_phi_77_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2873;
                        _3033 = _2875;
                        _3034 = _2877;
                        _3035 = _2879;
                        _3036 = _2881;
                        _3037 = _2883;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2877;
                frontier_phi_58_59_ladder_1 = _2883;
                frontier_phi_58_59_ladder_2 = _2881;
                frontier_phi_58_59_ladder_3 = _2879;
                frontier_phi_58_59_ladder_4 = _2875;
                frontier_phi_58_59_ladder_5 = _2873;
            }
            else
            {
                frontier_phi_58_59_ladder = _2755;
                frontier_phi_58_59_ladder_1 = _2761;
                frontier_phi_58_59_ladder_2 = _2759;
                frontier_phi_58_59_ladder_3 = _2757;
                frontier_phi_58_59_ladder_4 = _2753;
                frontier_phi_58_59_ladder_5 = _2751;
            }
            _2872 = frontier_phi_58_59_ladder_5;
            _2874 = frontier_phi_58_59_ladder_4;
            _2876 = frontier_phi_58_59_ladder;
            _2878 = frontier_phi_58_59_ladder_3;
            _2880 = frontier_phi_58_59_ladder_2;
            _2882 = frontier_phi_58_59_ladder_1;
        }
        float _2887 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2663 = (_2887 * _2878) + _2118;
        _2665 = (_2887 * _2880) + _2120;
        _2667 = (_2887 * _2882) + _2122;
        _2669 = ((_2872 * 0.039999999105930328369140625) * _2887) + _2448;
        _2671 = ((_2874 * 0.039999999105930328369140625) * _2887) + _2450;
        _2673 = ((_2876 * 0.039999999105930328369140625) * _2887) + _2452;
    }
    else
    {
        _2663 = _2118;
        _2665 = _2120;
        _2667 = _2122;
        _2669 = _2448;
        _2671 = _2450;
        _2673 = _2452;
    }
    float _4675 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4686 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4697 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2690 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2663 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _923))) + ((_2669 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2691 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2665 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _923))) + ((_2671 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2692 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2667 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _923))) + ((_2673 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    uint _2693 = _273 + 6u;
    float _2701 = _860 / cbSceneParam._m0[86u].x;
    float _2702 = _861 / cbSceneParam._m0[86u].y;
    vec4 _2716 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2718 = _2716.x;
    float _2719 = _2716.y;
    float _2720 = _2716.z;
    float _2721 = _2716.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2777 = _2776 / _782;
        float _2788 = _2777 * _833;
        float _2789 = _834 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2792 = _2777 * _835;
        float _2794 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2789;
        float _2802 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2989;
        if (abs((_2790 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2989 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2933 = 1.0 / cbSceneParam._m0[80u].x;
            float _2934 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2935 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            _2989 = ((abs(_2802 / _2790) * cbSceneParam._m0[80u].y) * ((((_2944 - _2945) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))))) * _2933)) - ((exp2(_2812 * _2944) - exp2(_2812 * _2945)) * _2933))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2991 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, 1.0), 0.0);
        float _3000 = exp2((_2989 * (-1.44269502162933349609375)) * (1.0 - _2991.w));
        float _3001 = log2(_3000);
        float _3017 = log2(_2721);
        _2814 = (exp2(_3017 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].x)) * _2991.x) / cbSceneParam._m0[78u].x)) + _2718;
        _2816 = (exp2(_3017 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].y)) * _2991.y) / cbSceneParam._m0[78u].y)) + _2719;
        _2818 = (exp2(_3017 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].z)) * _2991.z) / cbSceneParam._m0[78u].z)) + _2720;
        _2820 = _3000 * _2721;
    }
    else
    {
        _2814 = _2718;
        _2816 = _2719;
        _2818 = _2720;
        _2820 = _2721;
    }
    bool _3027;
    vec4 _2830;
    vec4 _2852;
    float _2854;
    float _2858;
    float _2859;
    float _2860;
    float _2861;
    bool _2871;
    for (;;)
    {
        _2830 = cbMatDynParam._m0[0u];
        float _2832 = roundEven(_2830.y);
        bool _2833 = _2832 == 3.0;
        float _2834 = log2(_2820);
        float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * _2690;
        float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * _2691;
        float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * _2692;
        float _2850 = _849 + (-0.5);
        _2852 = cbMtdParam._m0[1u];
        _2854 = _2852.y * _2850;
        float _2857 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2858 = _2857 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
        _2859 = _2857 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
        _2860 = _2857 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
        _2861 = _2850 * 0.999000012874603271484375;
        _2871 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2871)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2861) < 0.5)
            {
                _3027 = true;
                break;
            }
        }
        uint _2968 = _898 + uint(_2830.w);
        if ((cbInstanceData._m0[_2968].w < 1.0) && ((cbInstanceData._m0[_2968].w + _2861) < 0.5))
        {
            _3027 = true;
            break;
        }
        if ((_2854 + 1.0) < _2852.x)
        {
            _3027 = true;
            break;
        }
        _3027 = false;
        break;
    }
    float _3231;
    if (_3027)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2693].w;
    }
    SV_Target.x = _2858;
    SV_Target.y = _2859;
    SV_Target.z = _2860;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2693].w;
    discard_exit();
}


