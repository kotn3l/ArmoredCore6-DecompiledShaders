#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1153;
float _3516;
float _3517;
float _3518;
float _3519;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3528 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    float _323 = fma(_320, _225, fma(_313, _232, _311 * _218));
    float _326 = fma(_320, _226, fma(_313, _233, _311 * _219));
    float _329 = fma(_320, _227, fma(_313, _234, _311 * _220));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _371 = _369.x;
    float _372 = 1.0 - _371;
    float _379 = ((_371 - _372) * cbMtdParam._m0[24u].z) + _372;
    float _381 = (cbMtdParam._m0[19u].x + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_379 * cbMtdParam._m0[21u].z);
    float _3539 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _384 = (-0.0) - cbMtdParam._m0[24u].y;
    float _386 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _394 = _382 - ((_382 * TEXCOORD_8.x) * _387);
    float _395 = _382 - ((_382 * TEXCOORD_8.y) * _387);
    float _396 = _382 - ((_382 * TEXCOORD_8.z) * _387);
    float _403 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _407 = ((isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : min(_403, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _415 = (_407 - (((_379 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _407))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3570 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _420 = ((_394 * (cbMtdParam._m0[17u].x - _282)) * _416) + _282;
    float _421 = ((_395 * (cbMtdParam._m0[17u].y - _283)) * _416) + _283;
    float _422 = ((_396 * (cbMtdParam._m0[17u].z - _284)) * _416) + _284;
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _436 = _434.x;
    float _437 = 1.0 - _436;
    float _466 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_436 - _437) * cbMtdParam._m0[24u].w) + _437) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3581 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _475 = ((((cbMtdParam._m0[10u].x - _420) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _467) + _420;
    float _476 = ((((cbMtdParam._m0[10u].y - _421) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _467) + _421;
    float _477 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _422)) * _467) + _422;
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _498 = (_491.x * 2.0) + (-1.0);
    float _499 = (_491.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3592 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _509 = (((_491.z - _306) * _394) * _416) + _306;
    float _512 = ((cbMtdParam._m0[23u].y - _509) * _467) + _509;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _537 = (_531.x * 2.0) + (-1.0);
    float _538 = (_531.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3603 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _559 = (((cbMtdParam._m0[21u].x * _311) + ((_498 - _311) * _394)) * _416) + _311;
    float _560 = (((cbMtdParam._m0[21u].x * _313) + ((_499 - _313) * _395)) * _416) + _313;
    float _561 = (((sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _320) * _396) * _416) + _320;
    float _572 = (((_537 - _559) + (_559 * cbMtdParam._m0[22u].z)) * _467) + _559;
    float _573 = (((_538 - _560) + (_560 * cbMtdParam._m0[22u].z)) * _467) + _560;
    float _574 = ((sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) - _561) * _467) + _561;
    float _576 = cbMtdParam._m0[22u].x + _302.w;
    float _579 = fma(_574, _225, fma(_573, _232, _572 * _218));
    float _582 = fma(_574, _226, fma(_573, _233, _572 * _219));
    float _585 = fma(_574, _227, fma(_573, _234, _572 * _220));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3614 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _593 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3636 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3647 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3658 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    vec4 _675 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _677 = _675.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _834 = sqrt(((_661 * _661) + (_662 * _662)) + (_663 * _663));
        float _840 = (cbMatDynParam._m0[5u].x * _834) + cbMatDynParam._m0[5u].y;
        float _3669 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _845 = (cbMatDynParam._m0[5u].z * _834) + cbMatDynParam._m0[5u].w;
        float _3680 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) - _841)) + _841) < ((_677 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _713 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _716 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _729 = _237 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3691 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _754 = ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * TEXCOORD_5.w) * _750.x;
    float _755 = dot(vec3(_590, _591, _592), vec3(_668, _669, _670));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _590) - _668;
    float _763 = (_758 * _591) - _669;
    float _764 = (_758 * _592) - _670;
    float _768 = abs(dot(vec3(_668, _669, _670), vec3(_590, _591, _592)));
    float _3724 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_593);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _881 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _885 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _910 = _815 + _590;
        float _911 = _819 + _591;
        float _912 = _823 + _592;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_590, _591, _592), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3772 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_590, _591, _592), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3805 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_590, _591, _592), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3838 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1199 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1203 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1226 = _815 + _590;
        float _1227 = _819 + _591;
        float _1228 = _823 + _592;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_590, _591, _592), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3901 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_590, _591, _592), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3934 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_590, _591, _592), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3967 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = _1153;
        _1475 = _1153;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1165)) + _1165;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1166)) + _1166;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _762 * 0.5;
    float _1533 = _763 * 0.5;
    float _1534 = _764 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1575;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1586;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1577 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1590 = (_1586 * cbModelParam._m0[1u].x) + (_1575 * (1.0 - cbModelParam._m0[1u].x));
    float _1600 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1600 : min(cbModelParam._m0[25u].z, _1600));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1649 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1653 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1657 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1660 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1663 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1666 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1694;
        if (_1660 > 0.0)
        {
            _1694 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1694 = frontier_phi_17_15_ladder;
        }
        float _1897;
        if (_1663 > 0.0)
        {
            _1897 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1897 = frontier_phi_26_22_ladder;
        }
        float _2140;
        if (_1666 > 0.0)
        {
            _2140 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2140 = frontier_phi_38_33_ladder;
        }
        float _2142 = isnan(_1897) ? _1694 : (isnan(_1694) ? _1897 : min(_1694, _1897));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1660) + _1649;
        float _2148 = (_2143 * _1663) + _1653;
        float _2149 = (_2143 * _1666) + _1657;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1601);
            frontier_phi_16_38_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1682 = frontier_phi_16_38_ladder_2;
        _1684 = frontier_phi_16_38_ladder_1;
        _1686 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1601);
        _1682 = _1670.x * cbModelParam._m0[1u].y;
        _1684 = _1670.y * cbModelParam._m0[1u].y;
        _1686 = _1670.z * cbModelParam._m0[1u].y;
    }
    float _1690 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1690 : min(cbModelParam._m0[25u].w, _1690));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1759 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1762 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1902;
        if (_1756 > 0.0)
        {
            _1902 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2167;
        if (_1759 > 0.0)
        {
            _2167 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2167 = frontier_phi_40_35_ladder;
        }
        float _2372;
        if (_1762 > 0.0)
        {
            _2372 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2372 = frontier_phi_49_46_ladder;
        }
        float _2374 = isnan(_2167) ? _1902 : (isnan(_1902) ? _2167 : min(_1902, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1756) + _1745;
        float _2380 = (_2375 * _1759) + _1749;
        float _2381 = (_2375 * _1762) + _1753;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1691);
            frontier_phi_25_49_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_25_49_ladder_2;
        _1783 = frontier_phi_25_49_ladder_1;
        _1785 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1691);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1797 = ((((1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_783 * _770)) * _754;
    float _1798 = _1797 * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1799 = _1797 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1800 = _1797 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _754 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1855 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1859 = _1821 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_590, _591, _592));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_590, _591, _592));
    float _4103 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _4114 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1838].x * _1844) * _1880) + ((cbLight._m0[_1848].x * _1855) * _1878);
    float _1888 = ((_1844 * cbLight._m0[_1838].y) * _1880) + ((_1855 * cbLight._m0[_1848].y) * _1878);
    float _1889 = ((_1844 * cbLight._m0[_1838].z) * _1880) + ((_1855 * cbLight._m0[_1848].z) * _1878);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1887;
        _1909 = _1888;
        _1911 = _1889;
    }
    else
    {
        uint _1915 = _1821 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4125 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1934 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1887;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2111 = _1821 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4141 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2130 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1952 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1907;
        _1954 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1909;
        _1956 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1911;
    }
    uint _1959 = _1821 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _593) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1821].x + _668;
    float _1975 = cbLight._m0[_1821].y + _669;
    float _1976 = cbLight._m0[_1821].z + _670;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1821].xyz));
    float _4157 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1988 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _1989 = dot(vec3(_590, _591, _592), vec3(_1981, _1982, _1983));
    float _4179 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1981, _1982, _1983));
    float _4190 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = 1.0 - _1973;
    float _2024 = (0.5 / (((_1988 * ((_1987 * _2013) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2013) + _1973) * _1987))) * _1987;
    float _4201 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2037 = _1821 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _593) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1859].x + _668;
    float _2051 = cbLight._m0[_1859].y + _669;
    float _2052 = cbLight._m0[_1859].z + _670;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1859].xyz));
    float _4212 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2064 = dot(vec3(_590, _591, _592), vec3(_2057, _2058, _2059));
    float _4223 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2057, _2058, _2059));
    float _4234 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1988 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2086) + _2049) * _2063))) * _2063;
    float _4245 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1844) + (((_2012 * cbLight._m0[_1959].x) * _2026) * _1855);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1844) + (((_2012 * cbLight._m0[_1959].y) * _2026) * _1855);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1844) + (((_2012 * cbLight._m0[_1959].z) * _2026) * _1855);
    float _2172;
    float _2174;
    float _2176;
    if (_1896)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1821 + 2u;
        uint _2182 = _1821 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _593) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _668;
        float _2199 = cbLight._m0[_2178].y + _669;
        float _2200 = cbLight._m0[_2178].z + _670;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2178].xyz));
        float _4256 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2212 = dot(vec3(_590, _591, _592), vec3(_2205, _2206, _2207));
        float _4267 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4278 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1988 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2234) + _2197) * _2211))) * _2211;
        float _4289 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1914)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1821 + 3u;
        uint _2297 = _1821 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _593) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _668;
        float _2314 = cbLight._m0[_2293].y + _669;
        float _2315 = cbLight._m0[_2293].z + _670;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2293].xyz));
        float _4305 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2327 = dot(vec3(_590, _591, _592), vec3(_2320, _2321, _2322));
        float _4316 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4327 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1988 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2349) + _2312) * _2326))) * _2326;
        float _4338 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1819.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            uint _2743 = 0u;
            uint _2752;
            bool _2753;
            for (;;)
            {
                _2752 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                _2753 = _2752 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2753)
                {
                    frontier_phi_66_pred = _2737;
                    frontier_phi_66_pred_1 = _2742;
                    frontier_phi_66_pred_2 = _2741;
                    frontier_phi_66_pred_3 = _2740;
                    frontier_phi_66_pred_4 = _2739;
                    frontier_phi_66_pred_5 = _2738;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2752;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2743 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        float _2948 = _2908.x - _2438;
                        float _2949 = _2908.y - _2439;
                        float _2950 = _2908.z - _2440;
                        float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                        float _2954 = inversesqrt(_2951);
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2958 = dot(vec3(_710, _713, _716), vec3(_2955, _2956, _2957));
                        float _2963 = 1.0 - (_2951 * _2908.w);
                        float _4364 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _2965 = sqrt(_2951) * _2927.w;
                        float _2968 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2958) + _2969;
                        float _2975 = _2965 * _2965;
                        float _2979 = ((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2964) / ((_2975 * 0.699999988079071044921875) + 1.0);
                        float _2983 = (-0.0) - _2438;
                        float _2984 = (-0.0) - _2439;
                        float _2985 = (-0.0) - _2440;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _3000 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _770;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_710, _713, _716), vec3(_2990, _2991, _2992));
                        float _4380 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3025 = dot(vec3(_710, _713, _716), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4391 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2968 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2958) + _3034;
                        float _4402 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4413 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3032 * _3032) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125))) * _2964;
                        _2812 = (_2979 * _2927.x) + _2885;
                        _2813 = (_2979 * _2927.y) + _2886;
                        _2814 = (_2979 * _2927.z) + _2887;
                        _2809 = (_3060 * _2944.x) + _2882;
                        _2810 = (_3060 * _2944.y) + _2883;
                        _2811 = (_3060 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2814;
                    frontier_phi_66_pred_2 = _2813;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                _2586 = frontier_phi_66_pred;
                _2596 = frontier_phi_66_pred_1;
                _2594 = frontier_phi_66_pred_2;
                _2592 = frontier_phi_66_pred_3;
                _2590 = frontier_phi_66_pred_4;
                _2588 = frontier_phi_66_pred_5;
                uint _2744 = _2743 + 1u;
                if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2737 = _2586;
                    _2738 = _2588;
                    _2739 = _2590;
                    _2740 = _2592;
                    _2741 = _2594;
                    _2742 = _2596;
                    _2743 = _2744;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
            _2713 = _2593;
            _2715 = _2595;
        }
        else
        {
            float _2730 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2731 = _2730 * _2438;
            float _2732 = _2730 * _2439;
            float _2733 = _2730 * _2440;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2865 = _2585;
                float _2866 = _2587;
                float _2867 = _2589;
                float _2868 = _2591;
                float _2869 = _2593;
                float _2870 = _2595;
                uint _2871 = _2602;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2881)
                    {
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    else
                    {
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        uint _3093 = _2880;
                        uint _3094;
                        vec4 _3119;
                        float _3120;
                        vec4 _3135;
                        vec3 _3147;
                        vec4 _3163;
                        vec4 _3179;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3104 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3093));
                            _3094 = (_3093 + 4294967295u) & _3093;
                            uint _3106 = _3104 * 40u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3120 = _3119.w;
                            uint _3122 = (_3104 * 40u) + 4u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3104 * 40u) + 8u;
                            _3147 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x));
                            uint _3150 = (_3104 * 40u) + 16u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3104 * 40u) + 20u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3104 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3104 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2440, _3213.z, fma(_2439, _3213.y, _3213.x * _2438)) + _3213.w;
                            _3226 = !((fma(_2440, _3194.z, fma(_2439, _3194.y, _3194.x * _2438)) + _3194.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3119.x - _2438;
                                float _3254 = _3119.y - _2439;
                                float _3255 = _3119.z - _2440;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3120 * _3120));
                                float _4424 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3271 = sqrt(_3256) * _3135.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_710, _713, _716))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2440, _3163.z, fma(_2439, _3163.y, _3163.x * _2438)) + _3163.w) / _3225;
                                float _3285 = (fma(_2440, _3179.z, fma(_2439, _3179.y, _3179.x * _2438)) + _3179.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4440 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _770;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2731;
                                float _3315 = _3261 - _2732;
                                float _3316 = _3262 - _2733;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2731, (-0.0) - _2732, (-0.0) - _2733));
                                float _4451 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3328 = dot(vec3(_710, _713, _716), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4462 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_710, _713, _716), vec3(_3260, _3261, _3262))) + _3337;
                                float _4473 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4484 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3291 * _3135.y;
                                frontier_phi_83_pred_1 = _3291 * _3135.x;
                                frontier_phi_83_pred_2 = _3365 * _3147.z;
                                frontier_phi_83_pred_3 = _3365 * _3147.y;
                                frontier_phi_83_pred_4 = _3365 * _3147.x;
                                frontier_phi_83_pred_5 = _3291 * _3135.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_83_pred;
                            _3372 = frontier_phi_83_pred_1;
                            _3371 = frontier_phi_83_pred_2;
                            _3370 = frontier_phi_83_pred_3;
                            _3369 = frontier_phi_83_pred_4;
                            _3374 = frontier_phi_83_pred_5;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            _3079 = _3374 + _3092;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            if (_3094 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3094;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3079;
                        frontier_phi_77_pred_1 = _3078;
                        frontier_phi_77_pred_2 = _3077;
                        frontier_phi_77_pred_3 = _3076;
                        frontier_phi_77_pred_4 = _3075;
                        frontier_phi_77_pred_5 = _3074;
                    }
                    _2716 = frontier_phi_77_pred;
                    _2714 = frontier_phi_77_pred_1;
                    _2712 = frontier_phi_77_pred_2;
                    _2710 = frontier_phi_77_pred_3;
                    _2708 = frontier_phi_77_pred_4;
                    _2706 = frontier_phi_77_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2706;
                        _2866 = _2708;
                        _2867 = _2710;
                        _2868 = _2712;
                        _2869 = _2714;
                        _2870 = _2716;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2710;
                frontier_phi_58_59_ladder_1 = _2716;
                frontier_phi_58_59_ladder_2 = _2714;
                frontier_phi_58_59_ladder_3 = _2712;
                frontier_phi_58_59_ladder_4 = _2708;
                frontier_phi_58_59_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_58_59_ladder = _2589;
                frontier_phi_58_59_ladder_1 = _2595;
                frontier_phi_58_59_ladder_2 = _2593;
                frontier_phi_58_59_ladder_3 = _2591;
                frontier_phi_58_59_ladder_4 = _2587;
                frontier_phi_58_59_ladder_5 = _2585;
            }
            _2705 = frontier_phi_58_59_ladder_5;
            _2707 = frontier_phi_58_59_ladder_4;
            _2709 = frontier_phi_58_59_ladder;
            _2711 = frontier_phi_58_59_ladder_3;
            _2713 = frontier_phi_58_59_ladder_2;
            _2715 = frontier_phi_58_59_ladder_1;
        }
        float _2720 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2497 = (_2720 * _2711) + _1952;
        _2499 = (_2720 * _2713) + _1954;
        _2501 = (_2720 * _2715) + _1956;
        _2503 = ((_2705 * 0.039999999105930328369140625) * _2720) + _2282;
        _2505 = ((_2707 * 0.039999999105930328369140625) * _2720) + _2284;
        _2507 = ((_2709 * 0.039999999105930328369140625) * _2720) + _2286;
    }
    else
    {
        _2497 = _1952;
        _2499 = _1954;
        _2501 = _1956;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    float _4500 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4511 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4522 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2524 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2497 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _754))) + ((_2503 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2499 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _754))) + ((_2505 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2501 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _754))) + ((_2507 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    uint _2527 = _237 + 6u;
    float _2535 = _689 / cbSceneParam._m0[86u].x;
    float _2536 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2611 = _2610 / _611;
        float _2622 = _2611 * _661;
        float _2623 = _662 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2625 = _2611 * _663;
        float _2627 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2623;
        float _2635 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2822;
        if (abs((_2624 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2822 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2766 = 1.0 / cbSceneParam._m0[80u].x;
            float _2767 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2768 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            _2822 = ((abs(_2635 / _2624) * cbSceneParam._m0[80u].y) * ((((_2777 - _2778) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))))) * _2766)) - ((exp2(_2645 * _2777) - exp2(_2645 * _2778)) * _2766))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2824 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2833 = exp2((_2822 * (-1.44269502162933349609375)) * (1.0 - _2824.w));
        float _2834 = log2(_2833);
        float _2850 = log2(_2555);
        _2647 = (exp2(_2850 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].x)) * _2824.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2649 = (exp2(_2850 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].y)) * _2824.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2651 = (exp2(_2850 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].z)) * _2824.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2653 = _2833 * _2555;
    }
    else
    {
        _2647 = _2552;
        _2649 = _2553;
        _2651 = _2554;
        _2653 = _2555;
    }
    bool _2860;
    vec4 _2663;
    vec4 _2685;
    float _2687;
    float _2691;
    float _2692;
    float _2693;
    float _2694;
    bool _2704;
    for (;;)
    {
        _2663 = cbMatDynParam._m0[0u];
        float _2665 = roundEven(_2663.y);
        bool _2666 = _2665 == 3.0;
        float _2667 = log2(_2653);
        float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * _2524;
        float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * _2525;
        float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * _2526;
        float _2683 = _677 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        float _2690 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2691 = _2690 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
        _2692 = _2690 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = _2690 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
        _2694 = _2683 * 0.999000012874603271484375;
        _2704 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2704)
        {
            if ((cbInstanceData._m0[_237 + 7u].x + _2694) < 0.5)
            {
                _2860 = true;
                break;
            }
        }
        uint _2801 = _729 + uint(_2663.w);
        if ((cbInstanceData._m0[_2801].w < 1.0) && ((cbInstanceData._m0[_2801].w + _2694) < 0.5))
        {
            _2860 = true;
            break;
        }
        if ((_2687 + 1.0) < _2685.x)
        {
            _2860 = true;
            break;
        }
        _2860 = false;
        break;
    }
    float _3065;
    if (_2860)
    {
        discard_state = true;
        _3065 = 0.0;
    }
    else
    {
        _3065 = cbInstanceData._m0[_2527].w;
    }
    SV_Target.x = _2691;
    SV_Target.y = _2692;
    SV_Target.z = _2693;
    SV_Target.w = _3065;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
    discard_exit();
}


