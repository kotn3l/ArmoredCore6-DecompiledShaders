#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1338;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _377 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _377) * cbMtdParam._m0[24u].x) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3926 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _402 = (_395 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _403 = (_395 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _404 = (_395 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].x) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3937 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _395) + _536;
    float _546 = ((_517.y - _537) * _395) + _537;
    float _547 = ((_517.z - _538) * _395) + _538;
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _468) + _547;
    float _575 = ((((_559.x - _545) * _468) + _545) * 2.0) + (-1.0);
    float _576 = ((((_559.y - _546) * _468) + _546) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3948 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _622 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _625 = ((isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : min(_622, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _634 = (_625 - ((((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3969 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _642 = (_635 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _643 = (_635 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _644 = (_635 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _656 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_658 - _659) * cbMtdParam._m0[24u].w) + _659) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3980 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _642) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _642;
    float _696 = ((((cbMtdParam._m0[10u].y - _643) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _643;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _644)) * _687) + _644;
    float _702 = (((_494.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    vec4 _716 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _723 = (_716.x * 2.0) + (-1.0);
    float _724 = (_716.y * 2.0) + (-1.0);
    float _725 = dot(vec2(_723, _724), vec2(_723, _724));
    float _3991 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _733 = (_635 * (_716.z - _702)) + _702;
    float _736 = ((cbMtdParam._m0[23u].y - _733) * _687) + _733;
    vec4 _755 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _761 = (_755.x * 2.0) + (-1.0);
    float _762 = (_755.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _4002 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _773 = _575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)));
    float _774 = _576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)));
    float _786 = (((_723 - _773) + (cbMtdParam._m0[21u].x * _773)) * _635) + _773;
    float _787 = (((_724 - _774) + (cbMtdParam._m0[21u].x * _774)) * _635) + _774;
    float _788 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) - _582)) + _582;
    float _799 = (((_761 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _687) + _786;
    float _800 = (((_762 - _787) + (_787 * cbMtdParam._m0[22u].z)) * _687) + _787;
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) - _788) * _687) + _788;
    float _803 = cbMtdParam._m0[22u].x + _595.w;
    float _806 = fma(_801, _246 * NORMAL.x, fma(_800, _253 * TANGENT.x, (_239 * _231) * _799));
    float _809 = fma(_801, _246 * NORMAL.y, fma(_800, _253 * TANGENT.y, (_239 * _232) * _799));
    float _812 = fma(_801, _246 * NORMAL.z, fma(_800, _253 * TANGENT.z, (_239 * _233) * _799));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    float _817 = _816 * _806;
    float _818 = _816 * _809;
    float _819 = _816 * _812;
    float _4013 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _820 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4035 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4046 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4057 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _838 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _817));
    float _926 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _817));
    float _929 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _817));
    uint _943 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _949 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_943].x;
    float _950 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_943].y;
    float _951 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_943].z;
    float _4068 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _967 = ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_817, _818, _819), vec3(_896, _897, _898));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _817) - _896;
    float _976 = (_971 * _818) - _897;
    float _977 = (_971 * _819) - _898;
    float _981 = abs(dot(vec3(_896, _897, _898), vec3(_817, _818, _819)));
    float _4101 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_820);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1337;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1062 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1066 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1070 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1095 = _1028 + _817;
        float _1096 = _1032 + _818;
        float _1097 = _1036 + _819;
        float _1107 = fma(_1097, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095)) - _1062;
        float _1108 = fma(_1097, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095)) - _1066;
        float _1109 = fma(_1097, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095)) - _1070;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1062 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1066 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[34u].z) + ((((((_1070 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1165 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1131.x + (-0.5));
        float _1167 = _1165 * (_1131.y + (-0.5));
        float _1168 = _1165 * (_1131.z + (-0.5));
        float _1175 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1138.x + (-0.5));
        float _1177 = _1175 * (_1138.y + (-0.5));
        float _1178 = _1175 * (_1138.z + (-0.5));
        float _1185 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1145.x + (-0.5));
        float _1187 = _1185 * (_1145.y + (-0.5));
        float _1188 = _1185 * (_1145.z + (-0.5));
        float _1195 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1152.x + (-0.5));
        float _1197 = _1195 * (_1152.y + (-0.5));
        float _1198 = _1195 * (_1152.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1219 = (dot(vec3(_817, _818, _819), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1229 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4149 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1231 + 1.0))) + _1236) * _1199;
        float _1246 = _1167 * 0.5;
        float _1247 = _1177 * 0.5;
        float _1248 = _1187 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_817, _818, _819), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4182 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1273 + 1.0))) + _1278) * _1200;
        float _1288 = _1168 * 0.5;
        float _1289 = _1178 * 0.5;
        float _1290 = _1188 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_817, _818, _819), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4215 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1315 + 1.0))) + _1320) * _1201;
        _1337 = _1168;
        _1339 = _1167;
        _1340 = _1166;
        _1341 = _1178;
        _1342 = _1177;
        _1343 = _1176;
        _1344 = _1188;
        _1345 = _1187;
        _1346 = _1186;
        _1347 = _1201;
        _1348 = _1200;
        _1349 = _1199;
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1338;
        _1339 = _1338;
        _1340 = _1338;
        _1341 = _1338;
        _1342 = _1338;
        _1343 = _1338;
        _1344 = _1338;
        _1345 = _1338;
        _1346 = _1338;
        _1347 = _1338;
        _1348 = _1338;
        _1349 = _1338;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1380 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1384 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1407 = _1028 + _817;
        float _1408 = _1032 + _818;
        float _1409 = _1036 + _819;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_817, _818, _819), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4278 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_817, _818, _819), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4311 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_817, _818, _819), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4344 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1338;
        _1646 = _1338;
        _1647 = _1338;
        _1648 = _1338;
        _1649 = _1338;
        _1650 = _1338;
        _1651 = _1338;
        _1652 = _1338;
        _1653 = _1338;
        _1654 = _1338;
        _1655 = _1338;
        _1656 = _1338;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1350)) + _1350;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1351)) + _1351;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1352)) + _1352;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _975 * 0.5;
    float _1714 = _976 * 0.5;
    float _1715 = _977 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1337, _1341, _1344, _1347));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1844 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1847 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1875 = frontier_phi_14_12_ladder;
        }
        float _2045;
        if (_1844 > 0.0)
        {
            _2045 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2045 = frontier_phi_23_19_ladder;
        }
        float _2340;
        if (_1847 > 0.0)
        {
            _2340 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2340 = frontier_phi_35_30_ladder;
        }
        float _2342 = isnan(_2045) ? _1875 : (isnan(_1875) ? _2045 : min(_1875, _2045));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1841) + _1830;
        float _2348 = (_2343 * _1844) + _1834;
        float _2349 = (_2343 * _1847) + _1838;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_13_35_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_13_35_ladder_2;
        _1865 = frontier_phi_13_35_ladder_1;
        _1867 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1782);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1940 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1943 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2050;
        if (_1937 > 0.0)
        {
            _2050 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2050 = frontier_phi_25_21_ladder;
        }
        float _2367;
        if (_1940 > 0.0)
        {
            _2367 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2367 = frontier_phi_37_32_ladder;
        }
        float _2694;
        if (_1943 > 0.0)
        {
            _2694 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2694 = frontier_phi_47_44_ladder;
        }
        float _2696 = isnan(_2367) ? _2050 : (isnan(_2050) ? _2367 : min(_2050, _2367));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _1937) + _1926;
        float _2702 = (_2697 * _1940) + _1930;
        float _2703 = (_2697 * _1943) + _1934;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_22_47_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_47_ladder_2;
        _1964 = frontier_phi_22_47_ladder_1;
        _1966 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1872);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1978 = ((((1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_996 * _983)) * _967;
    float _1979 = _1978 * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1980 = _1978 * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1981 = _1978 * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2037 = _2024 / _2036;
    float _2038 = _2028 / _2036;
    float _2039 = _2032 / _2036;
    float _2186;
    float _2187;
    float _2188;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2066 = ((uint(_2039 > cbSceneParam._m0[59u].y) + uint(_2039 > cbSceneParam._m0[59u].x)) + uint(_2039 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2067 = _2066 + 43u;
        uint _2075 = _2066 + 44u;
        uint _2083 = _2066 + 45u;
        uint _2091 = _2066 + 46u;
        float _2102 = fma(_2036, cbSceneParam._m0[_2067].w, fma(_2032, cbSceneParam._m0[_2067].z, fma(_2028, cbSceneParam._m0[_2067].y, _2024 * cbSceneParam._m0[_2067].x)));
        float _2106 = fma(_2036, cbSceneParam._m0[_2075].w, fma(_2032, cbSceneParam._m0[_2075].z, fma(_2028, cbSceneParam._m0[_2075].y, _2024 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2036, cbSceneParam._m0[_2091].w, fma(_2032, cbSceneParam._m0[_2091].z, fma(_2028, cbSceneParam._m0[_2091].y, _2024 * cbSceneParam._m0[_2091].x)));
        float _2119 = cbSceneParam._m0[33u].z * _2114;
        float _2121 = cbSceneParam._m0[33u].w * _2114;
        float _2124 = fma(_2036, cbSceneParam._m0[_2083].w, fma(_2032, cbSceneParam._m0[_2083].z, fma(_2028, cbSceneParam._m0[_2083].y, _2024 * cbSceneParam._m0[_2083].x))) / _2114;
        float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
        float _4470 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2179 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2102) / _2114, (_2121 + _2106) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2102) / _2114, (_2106 - _2119) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2119) / _2114, (_2106 - _2121) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2121) / _2114, (_2119 + _2106) / _2114), _2124), 0.0)).x), vec4(0.25)));
        _2186 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
        _2187 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
        _2188 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2186 = 1.0;
        _2187 = 1.0;
        _2188 = 1.0;
    }
    float _2252;
    float _2254;
    float _2256;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2240 = fma(_2036, cbSceneParam._m0[63u].w, fma(_2032, cbSceneParam._m0[63u].z, fma(_2028, cbSceneParam._m0[63u].y, _2024 * cbSceneParam._m0[63u].x)));
        float _2241 = fma(_2036, cbSceneParam._m0[60u].w, fma(_2032, cbSceneParam._m0[60u].z, fma(_2028, cbSceneParam._m0[60u].y, _2024 * cbSceneParam._m0[60u].x))) / _2240;
        float _2242 = fma(_2036, cbSceneParam._m0[61u].w, fma(_2032, cbSceneParam._m0[61u].z, fma(_2028, cbSceneParam._m0[61u].y, _2024 * cbSceneParam._m0[61u].x))) / _2240;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2241 >= cbSceneParam._m0[64u].x) && (_2242 >= cbSceneParam._m0[64u].y)) && (_2241 <= cbSceneParam._m0[64u].z)) && (_2242 <= cbSceneParam._m0[64u].w))
        {
            float _2380 = fma(_2036, cbSceneParam._m0[62u].w, fma(_2032, cbSceneParam._m0[62u].z, fma(_2028, cbSceneParam._m0[62u].y, _2024 * cbSceneParam._m0[62u].x))) / _2240;
            float _2384 = isnan(cbSceneParam._m0[41u].w) ? _2380 : (isnan(_2380) ? cbSceneParam._m0[41u].w : max(_2380, cbSceneParam._m0[41u].w));
            float _2427 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
            float _4486 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
            float _2434 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2241, cbSceneParam._m0[33u].w + _2242), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2241, _2242 - cbSceneParam._m0[33u].z), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].z, _2242 - cbSceneParam._m0[33u].w), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2242), _2384), 0.0)).x), vec4(0.25)));
            float _2438 = 1.0 - (_2434 * cbSceneParam._m0[34u].x);
            float _2439 = 1.0 - (_2434 * cbSceneParam._m0[34u].y);
            float _2440 = 1.0 - (_2434 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_34_33_ladder_1 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_34_33_ladder_2 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
        }
        else
        {
            frontier_phi_34_33_ladder = _2188;
            frontier_phi_34_33_ladder_1 = _2187;
            frontier_phi_34_33_ladder_2 = _2186;
        }
        _2252 = frontier_phi_34_33_ladder_2;
        _2254 = frontier_phi_34_33_ladder_1;
        _2256 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2252 = _2186;
        _2254 = _2187;
        _2256 = _2188;
    }
    uvec4 _2261 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2263 = _2261.x * 14u;
    uint _2264 = _2263 + 13u;
    float _2271 = _967 + (-1.0);
    float _2276 = (cbLight._m0[_2264].x * _2271) + 1.0;
    float _2277 = (cbLight._m0[_2264].y * _2271) + 1.0;
    float _2278 = (cbLight._m0[_2264].z * _2271) + 1.0;
    float _2279 = (cbLight._m0[_2264].w * _2271) + 1.0;
    uint _2280 = _2263 + 5u;
    float _2286 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2290 = _2263 + 4u;
    float _2299 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2303 = _2263 | 1u;
    float _2314 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_817, _818, _819));
    float _2317 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_817, _818, _819));
    float _4522 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _4533 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2324 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2331 = ((cbLight._m0[_2280].x * _2286) * _2324) + (((cbLight._m0[_2290].x * _2252) * _2299) * _2322);
    float _2332 = ((_2286 * cbLight._m0[_2280].y) * _2324) + (((cbLight._m0[_2290].y * _2254) * _2299) * _2322);
    float _2333 = ((_2286 * cbLight._m0[_2280].z) * _2324) + (((cbLight._m0[_2290].z * _2256) * _2299) * _2322);
    uvec4 _2337 = floatBitsToUint(cbLight._m0[_2263 + 12u]);
    bool _2339 = _2337.x == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2339)
    {
        _2441 = _2331;
        _2443 = _2332;
        _2445 = _2333;
    }
    else
    {
        uint _2449 = _2263 + 6u;
        float _2465 = (dot(vec3(cbLight._m0[_2263 + 2u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4544 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2468 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2441 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2331;
        _2443 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2332;
        _2445 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2333;
    }
    bool _2448 = _2337.y == 0u;
    float _2503;
    float _2505;
    float _2507;
    if (_2448)
    {
        _2503 = _2441;
        _2505 = _2443;
        _2507 = _2445;
    }
    else
    {
        uint _2665 = _2263 + 7u;
        float _2681 = (dot(vec3(cbLight._m0[_2263 + 3u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2682 = _2681 * _2681;
        float _4560 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2683 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2684 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2503 = (((cbLight._m0[_2665].x * 0.3183098733425140380859375) * _2683) * _2684) + _2441;
        _2505 = (((cbLight._m0[_2665].y * 0.3183098733425140380859375) * _2683) * _2684) + _2443;
        _2507 = (((cbLight._m0[_2665].z * 0.3183098733425140380859375) * _2683) * _2684) + _2445;
    }
    uint _2510 = _2263 + 8u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _820) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2263].x + _896;
    float _2526 = cbLight._m0[_2263].y + _897;
    float _2527 = cbLight._m0[_2263].z + _898;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2263].xyz));
    float _4576 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2539 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2540 = dot(vec3(_817, _818, _819), vec3(_2532, _2533, _2534));
    float _4598 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2532, _2533, _2534));
    float _4609 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2524 * _2524;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2564 = 1.0 - _2524;
    float _2575 = (0.5 / (((_2539 * ((_2538 * _2564) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2564) + _2524) * _2538))) * _2538;
    float _4620 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2577 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    uint _2591 = _2263 + 9u;
    float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _820) * 0.949999988079071044921875);
    float _2603 = _2602 * _2602;
    float _2604 = cbLight._m0[_2303].x + _896;
    float _2605 = cbLight._m0[_2303].y + _897;
    float _2606 = cbLight._m0[_2303].z + _898;
    float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
    float _2611 = _2610 * _2604;
    float _2612 = _2610 * _2605;
    float _2613 = _2610 * _2606;
    float _2614 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2303].xyz));
    float _4631 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2618 = dot(vec3(_817, _818, _819), vec3(_2611, _2612, _2613));
    float _4642 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2611, _2612, _2613));
    float _4653 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2603 * _2603;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2639 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2640 = 1.0 - _2603;
    float _2650 = (0.5 / (((_2539 * ((_2617 * _2640) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2640) + _2603) * _2617))) * _2617;
    float _4664 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2652 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    float _2662 = (((_2639 * cbLight._m0[_2591].x) * _2652) * _2286) + ((((cbLight._m0[_2510].x * _2252) * _2563) * _2577) * _2299);
    float _2663 = (((_2639 * cbLight._m0[_2591].y) * _2652) * _2286) + ((((cbLight._m0[_2510].y * _2254) * _2563) * _2577) * _2299);
    float _2664 = (((_2639 * cbLight._m0[_2591].z) * _2652) * _2286) + ((((cbLight._m0[_2510].z * _2256) * _2563) * _2577) * _2299);
    float _2720;
    float _2722;
    float _2724;
    if (_2339)
    {
        _2720 = _2662;
        _2722 = _2663;
        _2724 = _2664;
    }
    else
    {
        uint _2726 = _2263 + 2u;
        uint _2730 = _2263 + 10u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _820) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _896;
        float _2747 = cbLight._m0[_2726].y + _897;
        float _2748 = cbLight._m0[_2726].z + _898;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2726].xyz));
        float _4675 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2760 = dot(vec3(_817, _818, _819), vec3(_2753, _2754, _2755));
        float _4686 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4697 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2781 = (exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2782 = 1.0 - _2745;
        float _2792 = (0.5 / (((_2539 * ((_2759 * _2782) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2782) + _2745) * _2759))) * _2759;
        float _4708 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2720 = (((_2781 * cbLight._m0[_2730].x) * _2794) * _2795) + _2662;
        _2722 = (((_2781 * cbLight._m0[_2730].y) * _2794) * _2795) + _2663;
        _2724 = (((_2781 * cbLight._m0[_2730].z) * _2794) * _2795) + _2664;
    }
    float _2826;
    float _2828;
    float _2830;
    if (_2448)
    {
        _2826 = _2720;
        _2828 = _2722;
        _2830 = _2724;
    }
    else
    {
        uint _2837 = _2263 + 3u;
        uint _2841 = _2263 + 11u;
        float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2837].w)) * _820) * 0.949999988079071044921875);
        float _2856 = _2855 * _2855;
        float _2857 = cbLight._m0[_2837].x + _896;
        float _2858 = cbLight._m0[_2837].y + _897;
        float _2859 = cbLight._m0[_2837].z + _898;
        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
        float _2864 = _2863 * _2857;
        float _2865 = _2863 * _2858;
        float _2866 = _2863 * _2859;
        float _2867 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2837].xyz));
        float _4724 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2871 = dot(vec3(_817, _818, _819), vec3(_2864, _2865, _2866));
        float _4735 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2875 = dot(vec3(cbLight._m0[_2837].xyz), vec3(_2864, _2865, _2866));
        float _4746 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2879 = _2856 * _2856;
        float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
        float _2892 = (exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2893 = 1.0 - _2856;
        float _2903 = (0.5 / (((_2539 * ((_2870 * _2893) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2893) + _2856) * _2870))) * _2870;
        float _4757 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2826 = (((_2892 * cbLight._m0[_2841].x) * _2905) * _2906) + _2720;
        _2828 = (((_2892 * cbLight._m0[_2841].y) * _2905) * _2906) + _2722;
        _2830 = (((_2892 * cbLight._m0[_2841].z) * _2905) * _2906) + _2724;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2261.y == 0u)
    {
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.x;
        uint _2939 = uint((float(_2927.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2928))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2928)));
        float _2949 = (log2(_2039 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2950 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        uint _2953 = uint(isnan(14.0) ? _2950 : (isnan(_2950) ? 14.0 : min(_2950, 14.0)));
        uvec4 _2958 = texelFetch(g_lightClusterGridBuffer, int(((_2953 << 2u) + (_2939 << 6u)) >> 2u));
        uint _2959 = _2958.x;
        uint _2960 = _2927.z;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((((1u << ((_2960 >> 4u) & 15u)) + 4294967295u) & _2959) == 0u) || ((_2960 & 240u) == 0u))
        {
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
        }
        else
        {
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3200)
                {
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3199;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3190 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2037;
                        float _3375 = _3334.y - _2038;
                        float _3376 = _3334.z - _2039;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_923, _926, _929), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4783 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2037;
                        float _3410 = (-0.0) - _2038;
                        float _3411 = (-0.0) - _2039;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _983;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_923, _926, _929), vec3(_3416, _3417, _3418));
                        float _4799 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3450 = dot(vec3(_923, _926, _929), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4810 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4821 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4832 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3243 = (_3405 * _3353.x) + _3311;
                        _3244 = (_3405 * _3353.y) + _3312;
                        _3245 = (_3405 * _3353.z) + _3313;
                        _3240 = (_3485 * _3370.x) + _3308;
                        _3241 = (_3485 * _3370.y) + _3309;
                        _3242 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_66_pred = _3245;
                    frontier_phi_66_pred_1 = _3244;
                    frontier_phi_66_pred_2 = _3243;
                    frontier_phi_66_pred_3 = _3242;
                    frontier_phi_66_pred_4 = _3241;
                    frontier_phi_66_pred_5 = _3240;
                }
                _3050 = frontier_phi_66_pred;
                _3048 = frontier_phi_66_pred_1;
                _3046 = frontier_phi_66_pred_2;
                _3044 = frontier_phi_66_pred_3;
                _3042 = frontier_phi_66_pred_4;
                _3040 = frontier_phi_66_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3040;
                    _3185 = _3042;
                    _3186 = _3044;
                    _3187 = _3046;
                    _3188 = _3048;
                    _3189 = _3050;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
        }
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.z;
        uint _3056 = (_3054 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3056) & _2959) == 0u)
        {
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
            _3162 = _3049;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
            float _3178 = _3177 * _2037;
            float _3179 = _3177 * _2038;
            float _3180 = _3177 * _2039;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3056 < ((_3054 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3291 = _3039;
                float _3292 = _3041;
                float _3293 = _3043;
                float _3294 = _3045;
                float _3295 = _3047;
                float _3296 = _3049;
                uint _3297 = _3056;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3307)
                    {
                        frontier_phi_72_pred = _3296;
                        frontier_phi_72_pred_1 = _3295;
                        frontier_phi_72_pred_2 = _3294;
                        frontier_phi_72_pred_3 = _3293;
                        frontier_phi_72_pred_4 = _3292;
                        frontier_phi_72_pred_5 = _3291;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        uint _3509 = _3306;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_2039, _3627.z, fma(_2038, _3627.y, _3627.x * _2037)) + _3627.w;
                            _3640 = !((fma(_2039, _3608.z, fma(_2038, _3608.y, _3608.x * _2037)) + _3608.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _2037;
                                float _3668 = _3535.y - _2038;
                                float _3669 = _3535.z - _2039;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4843 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_923, _926, _929))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_2039, _3578.z, fma(_2038, _3578.y, _3578.x * _2037)) + _3578.w) / _3639;
                                float _3699 = (fma(_2039, _3593.z, fma(_2038, _3593.y, _3593.x * _2037)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4859 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _983;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3178;
                                float _3729 = _3675 - _3179;
                                float _3730 = _3676 - _3180;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_923, _926, _929), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4870 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3742 = dot(vec3(_923, _926, _929), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4881 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_923, _926, _929), vec3(_3674, _3675, _3676))) + _3751;
                                float _4892 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4903 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3705 * _3551.y;
                                frontier_phi_78_pred_1 = _3705 * _3551.x;
                                frontier_phi_78_pred_2 = _3779 * _3563.z;
                                frontier_phi_78_pred_3 = _3779 * _3563.y;
                                frontier_phi_78_pred_4 = _3779 * _3563.x;
                                frontier_phi_78_pred_5 = _3705 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3787 = frontier_phi_78_pred;
                            _3786 = frontier_phi_78_pred_1;
                            _3785 = frontier_phi_78_pred_2;
                            _3784 = frontier_phi_78_pred_3;
                            _3783 = frontier_phi_78_pred_4;
                            _3788 = frontier_phi_78_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3495;
                        frontier_phi_72_pred_1 = _3494;
                        frontier_phi_72_pred_2 = _3493;
                        frontier_phi_72_pred_3 = _3492;
                        frontier_phi_72_pred_4 = _3491;
                        frontier_phi_72_pred_5 = _3490;
                    }
                    _3163 = frontier_phi_72_pred;
                    _3161 = frontier_phi_72_pred_1;
                    _3159 = frontier_phi_72_pred_2;
                    _3157 = frontier_phi_72_pred_3;
                    _3155 = frontier_phi_72_pred_4;
                    _3153 = frontier_phi_72_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3153;
                        _3292 = _3155;
                        _3293 = _3157;
                        _3294 = _3159;
                        _3295 = _3161;
                        _3296 = _3163;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3161;
                frontier_phi_60_61_ladder_2 = _3157;
                frontier_phi_60_61_ladder_3 = _3155;
                frontier_phi_60_61_ladder_4 = _3153;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_60_61_ladder = _3049;
                frontier_phi_60_61_ladder_1 = _3047;
                frontier_phi_60_61_ladder_2 = _3043;
                frontier_phi_60_61_ladder_3 = _3041;
                frontier_phi_60_61_ladder_4 = _3039;
                frontier_phi_60_61_ladder_5 = _3045;
            }
            _3152 = frontier_phi_60_61_ladder_4;
            _3154 = frontier_phi_60_61_ladder_3;
            _3156 = frontier_phi_60_61_ladder_2;
            _3158 = frontier_phi_60_61_ladder_5;
            _3160 = frontier_phi_60_61_ladder_1;
            _3162 = frontier_phi_60_61_ladder;
        }
        float _3167 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2972 = (_3167 * _3158) + _2503;
        _2974 = (_3167 * _3160) + _2505;
        _2976 = (_3167 * _3162) + _2507;
        _2978 = ((_3152 * 0.039999999105930328369140625) * _3167) + _2826;
        _2980 = ((_3154 * 0.039999999105930328369140625) * _3167) + _2828;
        _2982 = ((_3156 * 0.039999999105930328369140625) * _3167) + _2830;
    }
    else
    {
        _2972 = _2503;
        _2974 = _2505;
        _2976 = _2507;
        _2978 = _2826;
        _2980 = _2828;
        _2982 = _2830;
    }
    float _4919 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4930 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4941 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    uint _3002 = _259 + 6u;
    float _3010 = _904 / cbSceneParam._m0[86u].x;
    float _3011 = _905 / cbSceneParam._m0[86u].y;
    vec4 _3025 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, (log2((isnan(cbSceneParam._m0[77u].w) ? _838 : (isnan(_838) ? cbSceneParam._m0[77u].w : min(_838, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3027 = _3025.x;
    float _3028 = _3025.y;
    float _3029 = _3025.z;
    float _3030 = _3025.w;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_838 > cbSceneParam._m0[78u].w)
    {
        float _3064 = isnan(_838) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _838 : min(cbSceneParam._m0[80u].w, _838));
        float _3065 = _3064 / _838;
        float _3076 = _3065 * _889;
        float _3077 = _890 * _3065;
        float _3078 = (-0.0) - _3077;
        float _3080 = _3065 * _891;
        float _3082 = (cbSceneParam._m0[77u].w * _3078) / _3064;
        float _3083 = _3082 + cbSceneParam._m0[79u].w;
        float _3084 = cbSceneParam._m0[79u].w - _3077;
        float _3090 = sqrt(((_3076 * _3076) + (_3077 * _3077)) + (_3080 * _3080));
        float _3093 = (1.0 - (cbSceneParam._m0[77u].w / _3064)) * _3090;
        float _3098 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3100 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3253;
        if (abs((_3078 - _3082) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3253 = ((((_3083 > 0.0) ? exp2(_3098 * _3083) : (2.0 - exp2(_3100 * _3083))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3093;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : max(_3083, _3084));
            float _3215 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : min(_3083, _3084));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3253 = ((abs(_3090 / _3078) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3098 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3098 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3100 * _3224) - exp2(_3100 * _3225)) * _3213))) + (_3093 * cbSceneParam._m0[80u].z);
        }
        vec4 _3255 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, 1.0), 0.0);
        float _3264 = exp2((_3253 * (-1.44269502162933349609375)) * (1.0 - _3255.w));
        float _3265 = log2(_3264);
        float _3281 = log2(_3030);
        _3102 = (exp2(_3281 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].x)) * _3255.x) / cbSceneParam._m0[78u].x)) + _3027;
        _3104 = (exp2(_3281 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].y)) * _3255.y) / cbSceneParam._m0[78u].y)) + _3028;
        _3106 = (exp2(_3281 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].z)) * _3255.z) / cbSceneParam._m0[78u].z)) + _3029;
        _3108 = _3264 * _3030;
    }
    else
    {
        _3102 = _3027;
        _3104 = _3028;
        _3106 = _3029;
        _3108 = _3030;
    }
    float _3120 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3121 = _3120 == 3.0;
    float _3122 = log2(_3108);
    float _3129 = exp2(_3122 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2972 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _967))) + ((_2978 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _3130 = exp2(_3122 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2974 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _967))) + ((_2980 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _3131 = exp2(_3122 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2976 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _967))) + ((_2982 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _3140 = (_3120 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3140 * (_3121 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.y = _3140 * (_3121 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.z = _3140 * (_3121 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.w = cbInstanceData._m0[_3002].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3002].w;
}


