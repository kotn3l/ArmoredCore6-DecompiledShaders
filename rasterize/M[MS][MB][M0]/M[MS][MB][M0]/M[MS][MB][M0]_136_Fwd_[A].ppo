#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1372;
float _3730;
float _3731;
float _3732;
float _3733;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3742 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3753 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3764 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3775 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _428) + _541;
    float _553 = ((((_520.x - _539) * _428) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _428) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3786 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _603 = _601.x;
    float _604 = 1.0 - _603;
    float _610 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _613 = ((isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : min(_610, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _622 = (_613 - ((((((_603 - _604) * cbMtdParam._m0[24u].z) + _604) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _613))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3807 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _630 = (_623 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) + _454;
    float _631 = (_623 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) + _455;
    float _632 = (_623 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) + _456;
    vec4 _644 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3818 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _630;
    float _682 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _631;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _673) + _632;
    float _688 = (((_495.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    float _692 = ((_576.z - _688) * cbMtdParam._m0[19u].w) + _688;
    vec4 _706 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3829 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (_623 * (_706.z - _692)) + _692;
    float _726 = ((cbMtdParam._m0[23u].y - _723) * _673) + _723;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3840 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _767 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)))) + (((_576.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _768 = (_554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)))) + (((_576.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (((_713 - _767) + (cbMtdParam._m0[21u].x * _767)) * _623) + _767;
    float _781 = (((_714 - _768) + (cbMtdParam._m0[21u].x * _768)) * _623) + _768;
    float _782 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) - _560)) + _560;
    float _793 = (((_751 - _780) + (_780 * cbMtdParam._m0[22u].z)) * _673) + _780;
    float _794 = (((_752 - _781) + (_781 * cbMtdParam._m0[22u].z)) * _673) + _781;
    float _795 = ((sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _782) * _673) + _782;
    float _797 = cbMtdParam._m0[22u].x + _576.w;
    float _800 = fma(_795, _247 * NORMAL.x, fma(_794, _254 * TANGENT.x, (_240 * _232) * _793));
    float _803 = fma(_795, _247 * NORMAL.y, fma(_794, _254 * TANGENT.y, (_240 * _233) * _793));
    float _806 = fma(_795, _247 * NORMAL.z, fma(_794, _254 * TANGENT.z, (_240 * _234) * _793));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _3851 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _814 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3873 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3884 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3895 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    vec4 _897 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _899 = _897.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1053 = sqrt(((_883 * _883) + (_884 * _884)) + (_885 * _885));
        float _1059 = (cbMatDynParam._m0[5u].x * _1053) + cbMatDynParam._m0[5u].y;
        float _3906 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1064 = (cbMatDynParam._m0[5u].z * _1053) + cbMatDynParam._m0[5u].w;
        float _3917 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) - _1060)) + _1060) < ((_899 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _929 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _932 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _935 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _948 = _279 + 9u;
    uint _949 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_949].z;
    float _3928 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _973 = ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * TEXCOORD_5.w) * _969.x;
    float _974 = dot(vec3(_811, _812, _813), vec3(_890, _891, _892));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _811) - _890;
    float _982 = (_977 * _812) - _891;
    float _983 = (_977 * _813) - _892;
    float _987 = abs(dot(vec3(_890, _891, _892), vec3(_811, _812, _813)));
    float _3961 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_814);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1096 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1100 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1104 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1129 = _1034 + _811;
        float _1130 = _1038 + _812;
        float _1131 = _1042 + _813;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1096;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1100;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1104;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1096 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1100 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1104 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_811, _812, _813), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4009 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_811, _812, _813), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4042 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_811, _812, _813), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4075 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1418 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1422 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1445 = _1034 + _811;
        float _1446 = _1038 + _812;
        float _1447 = _1042 + _813;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_811, _812, _813), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4138 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_811, _812, _813), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4171 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_811, _812, _813), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4204 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = _1372;
        _1694 = _1372;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1385)) + _1385;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1386)) + _1386;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _981 * 0.5;
    float _1752 = _982 * 0.5;
    float _1753 = _983 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1881 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1884 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1912 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1881 > 0.0)
        {
            _2112 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2355;
        if (_1884 > 0.0)
        {
            _2355 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2355 = frontier_phi_38_33_ladder;
        }
        float _2357 = isnan(_2112) ? _1912 : (isnan(_1912) ? _2112 : min(_1912, _2112));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1878) + _1867;
        float _2363 = (_2358 * _1881) + _1871;
        float _2364 = (_2358 * _1884) + _1875;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_16_38_ladder_2;
        _1902 = frontier_phi_16_38_ladder_1;
        _1904 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1976 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1979 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2117;
        if (_1973 > 0.0)
        {
            _2117 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2382;
        if (_1976 > 0.0)
        {
            _2382 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2382 = frontier_phi_40_35_ladder;
        }
        float _2587;
        if (_1979 > 0.0)
        {
            _2587 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2587 = frontier_phi_49_46_ladder;
        }
        float _2589 = isnan(_2382) ? _2117 : (isnan(_2117) ? _2382 : min(_2117, _2382));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1973) + _1962;
        float _2595 = (_2590 * _1976) + _1966;
        float _2596 = (_2590 * _1979) + _1970;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_25_49_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_25_49_ladder_2;
        _2000 = frontier_phi_25_49_ladder_1;
        _2002 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1909);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2014 = ((((1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1002 * _989)) * _973;
    float _2015 = _2014 * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2016 = _2014 * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2017 = _2014 * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _973 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2071 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2075 = _2038 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_811, _812, _813));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_811, _812, _813));
    float _4340 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4351 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2055].x * _2061) * _2096) + ((cbLight._m0[_2065].x * _2071) * _2094);
    float _2104 = ((_2061 * cbLight._m0[_2055].y) * _2096) + ((_2071 * cbLight._m0[_2065].y) * _2094);
    float _2105 = ((_2061 * cbLight._m0[_2055].z) * _2096) + ((_2071 * cbLight._m0[_2065].z) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2111)
    {
        _2122 = _2103;
        _2124 = _2104;
        _2126 = _2105;
    }
    else
    {
        uint _2130 = _2038 + 6u;
        float _2146 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2147 = _2146 * _2146;
        float _4362 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2148 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2149 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2122 = (((cbLight._m0[_2130].x * 0.3183098733425140380859375) * _2148) * _2149) + _2103;
        _2124 = (((cbLight._m0[_2130].y * 0.3183098733425140380859375) * _2148) * _2149) + _2104;
        _2126 = (((cbLight._m0[_2130].z * 0.3183098733425140380859375) * _2148) * _2149) + _2105;
    }
    bool _2129 = _2109.y == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2129)
    {
        _2167 = _2122;
        _2169 = _2124;
        _2171 = _2126;
    }
    else
    {
        uint _2326 = _2038 + 7u;
        float _2342 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4378 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2345 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2167 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2122;
        _2169 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2124;
        _2171 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2126;
    }
    uint _2174 = _2038 + 8u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _814) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_2038].x + _890;
    float _2190 = cbLight._m0[_2038].y + _891;
    float _2191 = cbLight._m0[_2038].z + _892;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2038].xyz));
    float _4394 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2203 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2204 = dot(vec3(_811, _812, _813), vec3(_2196, _2197, _2198));
    float _4416 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2196, _2197, _2198));
    float _4427 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2188 * _2188;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2203 * ((_2202 * _2228) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2228) + _2188) * _2202))) * _2202;
    float _4438 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    uint _2252 = _2038 + 9u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _814) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2075].x + _890;
    float _2266 = cbLight._m0[_2075].y + _891;
    float _2267 = cbLight._m0[_2075].z + _892;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2075].xyz));
    float _4449 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2279 = dot(vec3(_811, _812, _813), vec3(_2272, _2273, _2274));
    float _4460 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2272, _2273, _2274));
    float _4471 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2264 * _2264;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2301 = 1.0 - _2264;
    float _2311 = (0.5 / (((_2203 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2301) + _2264) * _2278))) * _2278;
    float _4482 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    float _2323 = (((_2300 * cbLight._m0[_2252].x) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].x) * _2241) * _2071);
    float _2324 = (((_2300 * cbLight._m0[_2252].y) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].y) * _2241) * _2071);
    float _2325 = (((_2300 * cbLight._m0[_2252].z) * _2313) * _2061) + (((_2227 * cbLight._m0[_2174].z) * _2241) * _2071);
    float _2387;
    float _2389;
    float _2391;
    if (_2111)
    {
        _2387 = _2323;
        _2389 = _2324;
        _2391 = _2325;
    }
    else
    {
        uint _2393 = _2038 + 2u;
        uint _2397 = _2038 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _814) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _890;
        float _2414 = cbLight._m0[_2393].y + _891;
        float _2415 = cbLight._m0[_2393].z + _892;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2393].xyz));
        float _4493 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2427 = dot(vec3(_811, _812, _813), vec3(_2420, _2421, _2422));
        float _4504 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4515 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2449 = 1.0 - _2412;
        float _2459 = (0.5 / (((_2203 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2449) + _2412) * _2426))) * _2426;
        float _4526 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2387 = (((_2448 * cbLight._m0[_2397].x) * _2461) * _2462) + _2323;
        _2389 = (((_2448 * cbLight._m0[_2397].y) * _2461) * _2462) + _2324;
        _2391 = (((_2448 * cbLight._m0[_2397].z) * _2461) * _2462) + _2325;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2129)
    {
        _2497 = _2387;
        _2499 = _2389;
        _2501 = _2391;
    }
    else
    {
        uint _2508 = _2038 + 3u;
        uint _2512 = _2038 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _814) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _890;
        float _2529 = cbLight._m0[_2508].y + _891;
        float _2530 = cbLight._m0[_2508].z + _892;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2508].xyz));
        float _4542 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2542 = dot(vec3(_811, _812, _813), vec3(_2535, _2536, _2537));
        float _4553 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4564 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2564 = 1.0 - _2527;
        float _2574 = (0.5 / (((_2203 * ((_2541 * _2564) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2564) + _2527) * _2541))) * _2541;
        float _4575 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2497 = (((_2563 * cbLight._m0[_2512].x) * _2576) * _2577) + _2387;
        _2499 = (((_2563 * cbLight._m0[_2512].y) * _2576) * _2577) + _2389;
        _2501 = (((_2563 * cbLight._m0[_2512].z) * _2576) * _2577) + _2391;
    }
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_2036.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2969)
                {
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                else
                {
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    uint _3104;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2968;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    for (;;)
                    {
                        uint _3108 = uint(findLSB(_3104)) + (_2959 << 5u);
                        uint _3105 = (_3104 + 4294967295u) & _3104;
                        uint _3110 = _3108 * 48u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3130 = (_3108 * 48u) + 4u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3149 = (_3108 * 48u) + 8u;
                        vec3 _3160 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x));
                        float _3164 = _3124.x - _2653;
                        float _3165 = _3124.y - _2654;
                        float _3166 = _3124.z - _2655;
                        float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                        float _3170 = inversesqrt(_3167);
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3174 = dot(vec3(_929, _932, _935), vec3(_3171, _3172, _3173));
                        float _3179 = 1.0 - (_3167 * _3124.w);
                        float _4601 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3181 = sqrt(_3167) * _3143.w;
                        float _3184 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3174) + _3185;
                        float _3191 = _3181 * _3181;
                        float _3195 = ((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3180) / ((_3191 * 0.699999988079071044921875) + 1.0);
                        float _3199 = (-0.0) - _2653;
                        float _3200 = (-0.0) - _2654;
                        float _3201 = (-0.0) - _2655;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3216 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                        float _3217 = 1.0 - _989;
                        float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                        float _3225 = _3224 * _3224;
                        float _3226 = _3225 * _3225;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3237 = dot(vec3(_929, _932, _935), vec3(_3206, _3207, _3208));
                        float _4617 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3241 = dot(vec3(_929, _932, _935), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                        float _4628 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                        float _3249 = _3184 * _3225;
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3174) + _3250;
                        float _4639 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3255 = 1.0 - _3225;
                        float _3265 = (0.5 / (((_3254 * ((_3240 * _3255) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3225) * _3240))) * _3254;
                        float _4650 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3276 = (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3248 * _3248) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125))) * _3180;
                        _3028 = (_3195 * _3143.x) + _3101;
                        _3029 = (_3195 * _3143.y) + _3102;
                        _3030 = (_3195 * _3143.z) + _3103;
                        _3025 = (_3276 * _3160.x) + _3098;
                        _3026 = (_3276 * _3160.y) + _3099;
                        _3027 = (_3276 * _3160.z) + _3100;
                        if (_3105 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3105;
                        }
                    }
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                _2801 = frontier_phi_66_pred;
                _2811 = frontier_phi_66_pred_1;
                _2809 = frontier_phi_66_pred_2;
                _2807 = frontier_phi_66_pred_3;
                _2805 = frontier_phi_66_pred_4;
                _2803 = frontier_phi_66_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2801;
                    _2954 = _2803;
                    _2955 = _2805;
                    _2956 = _2807;
                    _2957 = _2809;
                    _2958 = _2811;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2817) & _2699) == 0u)
        {
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
            _2929 = _2808;
            _2931 = _2810;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2947 = _2946 * _2653;
            float _2948 = _2946 * _2654;
            float _2949 = _2946 * _2655;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3081 = _2800;
                float _3082 = _2802;
                float _3083 = _2804;
                float _3084 = _2806;
                float _3085 = _2808;
                float _3086 = _2810;
                uint _3087 = _2817;
                uint _3096;
                bool _3097;
                for (;;)
                {
                    _3096 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                    _3097 = _3096 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3097)
                    {
                        frontier_phi_77_pred = _3086;
                        frontier_phi_77_pred_1 = _3085;
                        frontier_phi_77_pred_2 = _3084;
                        frontier_phi_77_pred_3 = _3083;
                        frontier_phi_77_pred_4 = _3082;
                        frontier_phi_77_pred_5 = _3081;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        uint _3309 = _3096;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3087 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2655, _3427.z, fma(_2654, _3427.y, _3427.x * _2653)) + _3427.w;
                            _3440 = !((fma(_2655, _3408.z, fma(_2654, _3408.y, _3408.x * _2653)) + _3408.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _2653;
                                float _3468 = _3335.y - _2654;
                                float _3469 = _3335.z - _2655;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4661 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_929, _932, _935))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2655, _3378.z, fma(_2654, _3378.y, _3378.x * _2653)) + _3378.w) / _3439;
                                float _3499 = (fma(_2655, _3393.z, fma(_2654, _3393.y, _3393.x * _2653)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4677 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _989;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2947;
                                float _3529 = _3475 - _2948;
                                float _3530 = _3476 - _2949;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_929, _932, _935), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4688 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3542 = dot(vec3(_929, _932, _935), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4699 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_929, _932, _935), vec3(_3474, _3475, _3476))) + _3551;
                                float _4710 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4721 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3505 * _3351.y;
                                frontier_phi_83_pred_1 = _3505 * _3351.x;
                                frontier_phi_83_pred_2 = _3579 * _3363.z;
                                frontier_phi_83_pred_3 = _3579 * _3363.y;
                                frontier_phi_83_pred_4 = _3579 * _3363.x;
                                frontier_phi_83_pred_5 = _3505 * _3351.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_83_pred;
                            _3586 = frontier_phi_83_pred_1;
                            _3585 = frontier_phi_83_pred_2;
                            _3584 = frontier_phi_83_pred_3;
                            _3583 = frontier_phi_83_pred_4;
                            _3588 = frontier_phi_83_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3295;
                        frontier_phi_77_pred_1 = _3294;
                        frontier_phi_77_pred_2 = _3293;
                        frontier_phi_77_pred_3 = _3292;
                        frontier_phi_77_pred_4 = _3291;
                        frontier_phi_77_pred_5 = _3290;
                    }
                    _2932 = frontier_phi_77_pred;
                    _2930 = frontier_phi_77_pred_1;
                    _2928 = frontier_phi_77_pred_2;
                    _2926 = frontier_phi_77_pred_3;
                    _2924 = frontier_phi_77_pred_4;
                    _2922 = frontier_phi_77_pred_5;
                    uint _3088 = _3087 + 1u;
                    if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3081 = _2922;
                        _3082 = _2924;
                        _3083 = _2926;
                        _3084 = _2928;
                        _3085 = _2930;
                        _3086 = _2932;
                        _3087 = _3088;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            else
            {
                frontier_phi_58_59_ladder = _2804;
                frontier_phi_58_59_ladder_1 = _2810;
                frontier_phi_58_59_ladder_2 = _2808;
                frontier_phi_58_59_ladder_3 = _2806;
                frontier_phi_58_59_ladder_4 = _2802;
                frontier_phi_58_59_ladder_5 = _2800;
            }
            _2921 = frontier_phi_58_59_ladder_5;
            _2923 = frontier_phi_58_59_ladder_4;
            _2925 = frontier_phi_58_59_ladder;
            _2927 = frontier_phi_58_59_ladder_3;
            _2929 = frontier_phi_58_59_ladder_2;
            _2931 = frontier_phi_58_59_ladder_1;
        }
        float _2936 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2712 = (_2936 * _2927) + _2167;
        _2714 = (_2936 * _2929) + _2169;
        _2716 = (_2936 * _2931) + _2171;
        _2718 = ((_2921 * 0.039999999105930328369140625) * _2936) + _2497;
        _2720 = ((_2923 * 0.039999999105930328369140625) * _2936) + _2499;
        _2722 = ((_2925 * 0.039999999105930328369140625) * _2936) + _2501;
    }
    else
    {
        _2712 = _2167;
        _2714 = _2169;
        _2716 = _2171;
        _2718 = _2497;
        _2720 = _2499;
        _2722 = _2501;
    }
    float _4737 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4748 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4759 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2739 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2712 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _973))) + ((_2718 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2714 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _973))) + ((_2720 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2741 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2716 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973))) + ((_2722 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _2742 = _279 + 6u;
    float _2750 = _910 / cbSceneParam._m0[86u].x;
    float _2751 = _911 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2826 = _2825 / _832;
        float _2837 = _2826 * _883;
        float _2838 = _884 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2841 = _2826 * _885;
        float _2843 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2844 = _2843 + cbSceneParam._m0[79u].w;
        float _2845 = cbSceneParam._m0[79u].w - _2838;
        float _2851 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2841 * _2841));
        float _2854 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2851;
        float _2859 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2861 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3038;
        if (abs((_2839 - _2843) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3038 = ((((_2844 > 0.0) ? exp2(_2859 * _2844) : (2.0 - exp2(_2861 * _2844))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2854;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : max(_2844, _2845));
            float _2984 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : min(_2844, _2845));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3038 = ((abs(_2851 / _2839) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2859 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2859 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2861 * _2993) - exp2(_2861 * _2994)) * _2982))) + (_2854 * cbSceneParam._m0[80u].z);
        }
        vec4 _3040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3049 = exp2((_3038 * (-1.44269502162933349609375)) * (1.0 - _3040.w));
        float _3050 = log2(_3049);
        float _3066 = log2(_2770);
        _2863 = (exp2(_3066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].x)) * _3040.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2865 = (exp2(_3066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].y)) * _3040.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2867 = (exp2(_3066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].z)) * _3040.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2869 = _3049 * _2770;
    }
    else
    {
        _2863 = _2767;
        _2865 = _2768;
        _2867 = _2769;
        _2869 = _2770;
    }
    bool _3076;
    vec4 _2879;
    vec4 _2901;
    float _2903;
    float _2907;
    float _2908;
    float _2909;
    float _2910;
    bool _2920;
    for (;;)
    {
        _2879 = cbMatDynParam._m0[0u];
        float _2881 = roundEven(_2879.y);
        bool _2882 = _2881 == 3.0;
        float _2883 = log2(_2869);
        float _2890 = exp2(_2883 * cbSceneParam._m0[78u].x) * _2739;
        float _2891 = exp2(_2883 * cbSceneParam._m0[78u].y) * _2740;
        float _2892 = exp2(_2883 * cbSceneParam._m0[78u].z) * _2741;
        float _2899 = _899 + (-0.5);
        _2901 = cbMtdParam._m0[1u];
        _2903 = _2901.y * _2899;
        float _2906 = (_2881 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2907 = _2906 * (_2882 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2863)));
        _2908 = _2906 * (_2882 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2865)));
        _2909 = _2906 * (_2882 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2867)));
        _2910 = _2899 * 0.999000012874603271484375;
        _2920 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2920)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2910) < 0.5)
            {
                _3076 = true;
                break;
            }
        }
        uint _3017 = _948 + uint(_2879.w);
        if ((cbInstanceData._m0[_3017].w < 1.0) && ((cbInstanceData._m0[_3017].w + _2910) < 0.5))
        {
            _3076 = true;
            break;
        }
        if ((_2903 + 1.0) < _2901.x)
        {
            _3076 = true;
            break;
        }
        _3076 = false;
        break;
    }
    float _3281;
    if (_3076)
    {
        discard_state = true;
        _3281 = 0.0;
    }
    else
    {
        _3281 = cbInstanceData._m0[_2742].w;
    }
    SV_Target.x = _2907;
    SV_Target.y = _2908;
    SV_Target.z = _2909;
    SV_Target.w = _3281;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2742].w;
    discard_exit();
}


