#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1358;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3687 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3698 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3709 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3720 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _431 = (_424 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _432 = (_424 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _433 = (_424 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _443;
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _424) + _518;
    float _530 = ((((_497.x - _516) * _424) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _424) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3731 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _569 = (_530 + ((((_470.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_557.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _570 = (_531 + ((((_470.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_557.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _573 = fma(_537, _244, fma(_570, _251, _569 * _237));
    float _576 = fma(_537, _245, fma(_570, _252, _569 * _238));
    float _579 = fma(_537, _246, fma(_570, _253, _569 * _239));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    vec4 _612 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _614 = _612.x;
    float _615 = 1.0 - _614;
    float _619 = ((_614 - _615) * cbMtdParam._m0[24u].z) + _615;
    float _621 = (cbMtdParam._m0[19u].x + dot(vec4(_583 * _573, _583 * _576, _583 * _579, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_619 * cbMtdParam._m0[21u].z);
    float _3742 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _624 = (-0.0) - cbMtdParam._m0[24u].y;
    float _626 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
    float _634 = _622 - ((_622 * TEXCOORD_8.x) * _627);
    float _635 = _622 - ((_622 * TEXCOORD_8.y) * _627);
    float _636 = _622 - ((_622 * TEXCOORD_8.z) * _627);
    float _643 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _647 = ((isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : min(_643, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _655 = (_647 - (((_619 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _647))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3773 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _660 = ((_634 * (cbMtdParam._m0[17u].x - _450)) * _656) + _450;
    float _661 = ((_635 * (cbMtdParam._m0[17u].y - _451)) * _656) + _451;
    float _662 = ((_636 * (cbMtdParam._m0[17u].z - _452)) * _656) + _452;
    vec4 _674 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _676 = _674.x;
    float _677 = 1.0 - _676;
    float _702 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_676 - _677) * cbMtdParam._m0[24u].w) + _677) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3784 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _711 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _703) + _660;
    float _712 = ((((cbMtdParam._m0[10u].y - _661) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _703) + _661;
    float _713 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _662)) * _703) + _662;
    float _718 = (((_470.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    float _722 = ((_557.z - _718) * cbMtdParam._m0[19u].w) + _718;
    vec4 _736 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _743 = (_736.x * 2.0) + (-1.0);
    float _744 = (_736.y * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3795 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _754 = (((_736.z - _722) * _634) * _656) + _722;
    float _757 = ((cbMtdParam._m0[23u].y - _754) * _703) + _754;
    vec4 _776 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _782 = (_776.x * 2.0) + (-1.0);
    float _783 = (_776.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3806 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _804 = (((cbMtdParam._m0[21u].x * _569) + ((_743 - _569) * _634)) * _656) + _569;
    float _805 = (((cbMtdParam._m0[21u].x * _570) + ((_744 - _570) * _635)) * _656) + _570;
    float _806 = (((sqrt(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) - _537) * _636) * _656) + _537;
    float _817 = (((_782 - _804) + (_804 * cbMtdParam._m0[22u].z)) * _703) + _804;
    float _818 = (((_783 - _805) + (_805 * cbMtdParam._m0[22u].z)) * _703) + _805;
    float _819 = ((sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) - _806) * _703) + _806;
    float _823 = cbMtdParam._m0[22u].x + _557.w;
    float _826 = fma(_819, _244, fma(_818, _251, _817 * _237));
    float _829 = fma(_819, _245, fma(_818, _252, _817 * _238));
    float _832 = fma(_819, _246, fma(_818, _253, _817 * _239));
    float _836 = inversesqrt(dot(vec3(_826, _829, _832), vec3(_826, _829, _832)));
    float _837 = _836 * _826;
    float _838 = _836 * _829;
    float _839 = _836 * _832;
    float _3817 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _840 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _3839 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3850 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3861 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _858 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _909 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _899);
    float _910 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _899);
    float _911 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _899);
    float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
    float _916 = _909 * _915;
    float _917 = _910 * _915;
    float _918 = _911 * _915;
    float _924 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _925 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _943 = fma(_839, cbSceneParam._m0[5u].z, fma(_838, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _837));
    float _946 = fma(_839, cbSceneParam._m0[6u].z, fma(_838, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _837));
    float _949 = fma(_839, cbSceneParam._m0[7u].z, fma(_838, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _837));
    uint _963 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _969 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_963].x;
    float _970 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_963].y;
    float _971 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_963].z;
    float _3872 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    vec4 _983 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _924, cbSceneParam._m0[86u].y * _925));
    float _987 = ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * TEXCOORD_5.w) * _983.x;
    float _988 = dot(vec3(_837, _838, _839), vec3(_916, _917, _918));
    float _991 = _988 * 2.0;
    float _995 = (_991 * _837) - _916;
    float _996 = (_991 * _838) - _917;
    float _997 = (_991 * _839) - _918;
    float _1001 = abs(dot(vec3(_916, _917, _918), vec3(_837, _838, _839)));
    float _3905 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1003 = sqrt(_840);
    float _1016 = exp2((_1003 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1003 * 3.0));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1056, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048));
        float _1086 = fma(_1056, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048));
        float _1090 = fma(_1056, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048));
        float _1115 = _1048 + _837;
        float _1116 = _1052 + _838;
        float _1117 = _1056 + _839;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1082;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1086;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1090;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_837, _838, _839), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3953 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_837, _838, _839), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3986 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_837, _838, _839), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4019 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1056, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048));
        float _1401 = fma(_1056, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048));
        float _1405 = fma(_1056, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048));
        float _1428 = _1048 + _837;
        float _1429 = _1052 + _838;
        float _1430 = _1056 + _839;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_837, _838, _839), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4082 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_837, _838, _839), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4115 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_837, _838, _839), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4148 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1358;
        _1667 = _1358;
        _1668 = _1358;
        _1669 = _1358;
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = _1358;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _995 * 0.5;
    float _1735 = _996 * 0.5;
    float _1736 = _997 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1056, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1056, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1056, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_997, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995));
        float _1865 = fma(_997, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995));
        float _1868 = fma(_997, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1896 = frontier_phi_14_12_ladder;
        }
        float _2118;
        if (_1865 > 0.0)
        {
            _2118 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2118 = frontier_phi_23_19_ladder;
        }
        float _2364;
        if (_1868 > 0.0)
        {
            _2364 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2364 = frontier_phi_35_30_ladder;
        }
        float _2366 = isnan(_2118) ? _1896 : (isnan(_1896) ? _2118 : min(_1896, _2118));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1862) + _1851;
        float _2372 = (_2367 * _1865) + _1855;
        float _2373 = (_2367 * _1868) + _1859;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_13_35_ladder_2;
        _1886 = frontier_phi_13_35_ladder_1;
        _1888 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_995, _996, _997), _1803);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1056, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1056, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1056, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_997, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995));
        float _1961 = fma(_997, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995));
        float _1964 = fma(_997, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995));
        float _2123;
        if (_1958 > 0.0)
        {
            _2123 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2123 = frontier_phi_25_21_ladder;
        }
        float _2391;
        if (_1961 > 0.0)
        {
            _2391 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2391 = frontier_phi_37_32_ladder;
        }
        float _2596;
        if (_1964 > 0.0)
        {
            _2596 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2596 = frontier_phi_46_43_ladder;
        }
        float _2598 = isnan(_2391) ? _2123 : (isnan(_2123) ? _2391 : min(_2123, _2391));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1958) + _1947;
        float _2604 = (_2599 * _1961) + _1951;
        float _2605 = (_2599 * _1964) + _1955;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_22_46_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_22_46_ladder_2;
        _1985 = frontier_phi_22_46_ladder_1;
        _1987 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_995, _996, _997), _1893);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _1999 = ((((1.0 - _1016) * ((_1003 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1016 * _1003)) * _987;
    float _2000 = _1999 * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2001 = _1999 * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2002 = _1999 * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    vec4 _2019 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_924, _925));
    float _2021 = _2019.w;
    float _2033 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2021);
    float _2034 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2021);
    float _2035 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2021);
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _987 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2077 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2081 = _2041 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_837, _838, _839));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_837, _838, _839));
    float _4284 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4295 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2058].x * _2064) * _2102) + (((cbLight._m0[_2068].x * _2033) * _2077) * _2100);
    float _2110 = ((_2064 * cbLight._m0[_2058].y) * _2102) + (((cbLight._m0[_2068].y * _2034) * _2077) * _2100);
    float _2111 = ((_2064 * cbLight._m0[_2058].z) * _2102) + (((cbLight._m0[_2068].z * _2035) * _2077) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2117)
    {
        _2128 = _2109;
        _2130 = _2110;
        _2132 = _2111;
    }
    else
    {
        uint _2136 = _2041 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4306 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2155 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2109;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2110;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2111;
    }
    bool _2135 = _2115.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2135)
    {
        _2173 = _2128;
        _2175 = _2130;
        _2177 = _2132;
    }
    else
    {
        uint _2335 = _2041 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4322 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2354 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2173 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2128;
        _2175 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2130;
        _2177 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2132;
    }
    uint _2180 = _2041 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _840) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2041].x + _916;
    float _2196 = cbLight._m0[_2041].y + _917;
    float _2197 = cbLight._m0[_2041].z + _918;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2041].xyz));
    float _4338 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _4349 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2209 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2210 = dot(vec3(_837, _838, _839), vec3(_2202, _2203, _2204));
    float _4360 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2202, _2203, _2204));
    float _4371 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2234 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2209 * ((_2208 * _2234) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2234) + _2194) * _2208))) * _2208;
    float _4382 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2261 = _2041 + 9u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _840) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2081].x + _916;
    float _2275 = cbLight._m0[_2081].y + _917;
    float _2276 = cbLight._m0[_2081].z + _918;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2081].xyz));
    float _4393 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2288 = dot(vec3(_837, _838, _839), vec3(_2281, _2282, _2283));
    float _4404 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2281, _2282, _2283));
    float _4415 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2273 * _2273;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2310 = 1.0 - _2273;
    float _2320 = (0.5 / (((_2209 * ((_2287 * _2310) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2310) + _2273) * _2287))) * _2287;
    float _4426 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    float _2332 = (((_2309 * cbLight._m0[_2261].x) * _2322) * _2064) + ((((cbLight._m0[_2180].x * _2033) * _2233) * _2247) * _2077);
    float _2333 = (((_2309 * cbLight._m0[_2261].y) * _2322) * _2064) + ((((cbLight._m0[_2180].y * _2034) * _2233) * _2247) * _2077);
    float _2334 = (((_2309 * cbLight._m0[_2261].z) * _2322) * _2064) + ((((cbLight._m0[_2180].z * _2035) * _2233) * _2247) * _2077);
    float _2396;
    float _2398;
    float _2400;
    if (_2117)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2041 + 2u;
        uint _2406 = _2041 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _840) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _916;
        float _2423 = cbLight._m0[_2402].y + _917;
        float _2424 = cbLight._m0[_2402].z + _918;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2402].xyz));
        float _4437 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2436 = dot(vec3(_837, _838, _839), vec3(_2429, _2430, _2431));
        float _4448 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4459 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2457 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2458 = 1.0 - _2421;
        float _2468 = (0.5 / (((_2209 * ((_2435 * _2458) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2458) + _2421) * _2435))) * _2435;
        float _4470 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2396 = (((_2457 * cbLight._m0[_2406].x) * _2470) * _2471) + _2332;
        _2398 = (((_2457 * cbLight._m0[_2406].y) * _2470) * _2471) + _2333;
        _2400 = (((_2457 * cbLight._m0[_2406].z) * _2470) * _2471) + _2334;
    }
    float _2506;
    float _2508;
    float _2510;
    if (_2135)
    {
        _2506 = _2396;
        _2508 = _2398;
        _2510 = _2400;
    }
    else
    {
        uint _2517 = _2041 + 3u;
        uint _2521 = _2041 + 11u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _840) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _916;
        float _2538 = cbLight._m0[_2517].y + _917;
        float _2539 = cbLight._m0[_2517].z + _918;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2517].xyz));
        float _4486 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2551 = dot(vec3(_837, _838, _839), vec3(_2544, _2545, _2546));
        float _4497 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4508 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2572 = (exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2573 = 1.0 - _2536;
        float _2583 = (0.5 / (((_2209 * ((_2550 * _2573) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2573) + _2536) * _2550))) * _2550;
        float _4519 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2506 = (((_2572 * cbLight._m0[_2521].x) * _2585) * _2586) + _2396;
        _2508 = (((_2572 * cbLight._m0[_2521].y) * _2585) * _2586) + _2398;
        _2510 = (((_2572 * cbLight._m0[_2521].z) * _2585) * _2586) + _2400;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2039.y == 0u)
    {
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2661;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2661;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2661;
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _925) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _924) / _2677)));
        float _2698 = (log2(_2664 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2969)
                {
                    frontier_phi_61_pred = _2953;
                    frontier_phi_61_pred_1 = _2958;
                    frontier_phi_61_pred_2 = _2957;
                    frontier_phi_61_pred_3 = _2956;
                    frontier_phi_61_pred_4 = _2955;
                    frontier_phi_61_pred_5 = _2954;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2968;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2959 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2662;
                        float _3144 = _3103.y - _2663;
                        float _3145 = _3103.z - _2664;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_943, _946, _949), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4545 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2662;
                        float _3179 = (-0.0) - _2663;
                        float _3180 = (-0.0) - _2664;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _1003;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_943, _946, _949), vec3(_3185, _3186, _3187));
                        float _4561 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3220 = dot(vec3(_943, _946, _949), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4572 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4583 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4594 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3012 = (_3174 * _3122.x) + _3080;
                        _3013 = (_3174 * _3122.y) + _3081;
                        _3014 = (_3174 * _3122.z) + _3082;
                        _3009 = (_3255 * _3139.x) + _3077;
                        _3010 = (_3255 * _3139.y) + _3078;
                        _3011 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_61_pred = _3009;
                    frontier_phi_61_pred_1 = _3014;
                    frontier_phi_61_pred_2 = _3013;
                    frontier_phi_61_pred_3 = _3012;
                    frontier_phi_61_pred_4 = _3011;
                    frontier_phi_61_pred_5 = _3010;
                }
                _2810 = frontier_phi_61_pred;
                _2820 = frontier_phi_61_pred_1;
                _2818 = frontier_phi_61_pred_2;
                _2816 = frontier_phi_61_pred_3;
                _2814 = frontier_phi_61_pred_4;
                _2812 = frontier_phi_61_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2810;
                    _2954 = _2812;
                    _2955 = _2814;
                    _2956 = _2816;
                    _2957 = _2818;
                    _2958 = _2820;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2826) & _2708) == 0u)
        {
            _2921 = _2809;
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
            _2929 = _2817;
            _2931 = _2819;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
            float _2947 = _2946 * _2662;
            float _2948 = _2946 * _2663;
            float _2949 = _2946 * _2664;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3060 = _2809;
                float _3061 = _2811;
                float _3062 = _2813;
                float _3063 = _2815;
                float _3064 = _2817;
                float _3065 = _2819;
                uint _3066 = _2826;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3076)
                    {
                        frontier_phi_67_pred = _3063;
                        frontier_phi_67_pred_1 = _3064;
                        frontier_phi_67_pred_2 = _3065;
                        frontier_phi_67_pred_3 = _3062;
                        frontier_phi_67_pred_4 = _3061;
                        frontier_phi_67_pred_5 = _3060;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        uint _3279 = _3075;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3363;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3290 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3290 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3290 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3290 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2664, _3397.z, fma(_2663, _3397.y, _3397.x * _2662)) + _3397.w;
                            _3410 = !((fma(_2664, _3378.z, fma(_2663, _3378.y, _3378.x * _2662)) + _3378.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3305.x - _2662;
                                float _3438 = _3305.y - _2663;
                                float _3439 = _3305.z - _2664;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3306 * _3306));
                                float _4605 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3455 = sqrt(_3440) * _3321.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_943, _946, _949))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2664, _3348.z, fma(_2663, _3348.y, _3348.x * _2662)) + _3348.w) / _3409;
                                float _3469 = (fma(_2664, _3363.z, fma(_2663, _3363.y, _3363.x * _2662)) + _3363.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4621 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _1003;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2947;
                                float _3499 = _3445 - _2948;
                                float _3500 = _3446 - _2949;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_943, _946, _949), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4632 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3512 = dot(vec3(_943, _946, _949), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4643 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_943, _946, _949), vec3(_3444, _3445, _3446))) + _3521;
                                float _4654 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4665 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3549 * _3333.x;
                                frontier_phi_73_pred_1 = _3549 * _3333.y;
                                frontier_phi_73_pred_2 = _3475 * _3321.z;
                                frontier_phi_73_pred_3 = _3475 * _3321.y;
                                frontier_phi_73_pred_4 = _3475 * _3321.x;
                                frontier_phi_73_pred_5 = _3549 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3553 = frontier_phi_73_pred;
                            _3554 = frontier_phi_73_pred_1;
                            _3558 = frontier_phi_73_pred_2;
                            _3557 = frontier_phi_73_pred_3;
                            _3556 = frontier_phi_73_pred_4;
                            _3555 = frontier_phi_73_pred_5;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3263;
                        frontier_phi_67_pred_1 = _3264;
                        frontier_phi_67_pred_2 = _3265;
                        frontier_phi_67_pred_3 = _3262;
                        frontier_phi_67_pred_4 = _3261;
                        frontier_phi_67_pred_5 = _3260;
                    }
                    _2928 = frontier_phi_67_pred;
                    _2930 = frontier_phi_67_pred_1;
                    _2932 = frontier_phi_67_pred_2;
                    _2926 = frontier_phi_67_pred_3;
                    _2924 = frontier_phi_67_pred_4;
                    _2922 = frontier_phi_67_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2922;
                        _3061 = _2924;
                        _3062 = _2926;
                        _3063 = _2928;
                        _3064 = _2930;
                        _3065 = _2932;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2930;
                frontier_phi_55_56_ladder_1 = _2932;
                frontier_phi_55_56_ladder_2 = _2928;
                frontier_phi_55_56_ladder_3 = _2926;
                frontier_phi_55_56_ladder_4 = _2924;
                frontier_phi_55_56_ladder_5 = _2922;
            }
            else
            {
                frontier_phi_55_56_ladder = _2817;
                frontier_phi_55_56_ladder_1 = _2819;
                frontier_phi_55_56_ladder_2 = _2815;
                frontier_phi_55_56_ladder_3 = _2813;
                frontier_phi_55_56_ladder_4 = _2811;
                frontier_phi_55_56_ladder_5 = _2809;
            }
            _2921 = frontier_phi_55_56_ladder_5;
            _2923 = frontier_phi_55_56_ladder_4;
            _2925 = frontier_phi_55_56_ladder_3;
            _2927 = frontier_phi_55_56_ladder_2;
            _2929 = frontier_phi_55_56_ladder;
            _2931 = frontier_phi_55_56_ladder_1;
        }
        float _2936 = isnan(1.0) ? _987 : (isnan(_987) ? 1.0 : min(_987, 1.0));
        _2721 = (_2936 * _2927) + _2173;
        _2723 = (_2936 * _2929) + _2175;
        _2725 = (_2936 * _2931) + _2177;
        _2727 = ((_2921 * 0.039999999105930328369140625) * _2936) + _2506;
        _2729 = ((_2923 * 0.039999999105930328369140625) * _2936) + _2508;
        _2731 = ((_2925 * 0.039999999105930328369140625) * _2936) + _2510;
    }
    else
    {
        _2721 = _2173;
        _2723 = _2175;
        _2725 = _2177;
        _2727 = _2506;
        _2729 = _2508;
        _2731 = _2510;
    }
    float _4681 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4692 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4703 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    uint _2751 = _275 + 6u;
    float _2759 = _924 / cbSceneParam._m0[86u].x;
    float _2760 = _925 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _858 : (isnan(_858) ? cbSceneParam._m0[77u].w : min(_858, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_858 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_858) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _858 : min(cbSceneParam._m0[80u].w, _858));
        float _2835 = _2834 / _858;
        float _2846 = _2835 * _909;
        float _2847 = _910 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2849 = _2835 * _911;
        float _2851 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2847;
        float _2859 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3022;
        if (abs((_2848 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3022 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2984 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3022 = ((abs(_2859 / _2848) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2869 * _2993) - exp2(_2869 * _2994)) * _2982))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3024 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3033 = exp2((_3022 * (-1.44269502162933349609375)) * (1.0 - _3024.w));
        float _3034 = log2(_3033);
        float _3050 = log2(_2779);
        _2871 = (exp2(_3050 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].x)) * _3024.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2873 = (exp2(_3050 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].y)) * _3024.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2875 = (exp2(_3050 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].z)) * _3024.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2877 = _3033 * _2779;
    }
    else
    {
        _2871 = _2776;
        _2873 = _2777;
        _2875 = _2778;
        _2877 = _2779;
    }
    float _2889 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2890 = _2889 == 3.0;
    float _2891 = log2(_2877);
    float _2898 = exp2(_2891 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2721 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _987))) + ((_2727 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2899 = exp2(_2891 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2723 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _987))) + ((_2729 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2900 = exp2(_2891 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2725 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _987))) + ((_2731 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2909 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2909 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.y = _2909 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.z = _2909 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.w = cbInstanceData._m0[_2751].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
}


