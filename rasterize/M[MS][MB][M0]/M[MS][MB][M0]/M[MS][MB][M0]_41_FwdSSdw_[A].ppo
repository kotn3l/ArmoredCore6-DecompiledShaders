#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1127;
float _3513;
float _3514;
float _3515;
float _3516;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3525 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _364 = _362.x;
    float _365 = 1.0 - _364;
    float _374 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _377 = ((isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : min(_374, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _386 = (_377 - ((((((_364 - _365) * cbMtdParam._m0[24u].z) + _365) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _377))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3546 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _394 = (_387 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) + _286;
    float _395 = (_387 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) + _287;
    float _396 = (_387 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) + _288;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _411 = _409.x;
    float _412 = 1.0 - _411;
    float _441 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_411 - _412) * cbMtdParam._m0[24u].w) + _412) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3557 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _450 = ((((cbMtdParam._m0[10u].x - _394) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _442) + _394;
    float _451 = ((((cbMtdParam._m0[10u].y - _395) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _442) + _395;
    float _452 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _396)) * _442) + _396;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _473 = (_466.x * 2.0) + (-1.0);
    float _474 = (_466.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3568 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _483 = (_387 * (_466.z - _331)) + _331;
    float _486 = ((cbMtdParam._m0[23u].y - _483) * _442) + _483;
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _514 = (_508.x * 2.0) + (-1.0);
    float _515 = (_508.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3579 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _533 = (((_473 - _336) + (cbMtdParam._m0[21u].x * _336)) * _387) + _336;
    float _534 = (((_474 - _338) + (cbMtdParam._m0[21u].x * _338)) * _387) + _338;
    float _535 = (_387 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _345)) + _345;
    float _546 = (((_514 - _533) + (_533 * cbMtdParam._m0[22u].z)) * _442) + _533;
    float _547 = (((_515 - _534) + (_534 * cbMtdParam._m0[22u].z)) * _442) + _534;
    float _548 = ((sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) - _535) * _442) + _535;
    float _550 = cbMtdParam._m0[22u].x + _327.w;
    float _553 = fma(_548, _228 * NORMAL.x, fma(_547, _235 * TANGENT.x, (_221 * _213) * _546));
    float _556 = fma(_548, _228 * NORMAL.y, fma(_547, _235 * TANGENT.y, (_221 * _214) * _546));
    float _559 = fma(_548, _228 * NORMAL.z, fma(_547, _235 * TANGENT.z, (_221 * _215) * _546));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3590 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _567 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3612 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3623 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3634 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    vec4 _649 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _651 = _649.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _808 = sqrt(((_635 * _635) + (_636 * _636)) + (_637 * _637));
        float _814 = (cbMatDynParam._m0[5u].x * _808) + cbMatDynParam._m0[5u].y;
        float _3645 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _819 = (cbMatDynParam._m0[5u].z * _808) + cbMatDynParam._m0[5u].w;
        float _3656 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) - _815)) + _815) < ((_651 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _663 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _664 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _684 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _687 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _690 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _703 = _241 + 9u;
    uint _704 = _703 + uint(cbMatDynParam._m0[0u].w);
    float _710 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_704].x;
    float _711 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_704].y;
    float _712 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_704].z;
    float _3667 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _724 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _663, cbSceneParam._m0[86u].y * _664));
    float _728 = ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * TEXCOORD_5.w) * _724.x;
    float _729 = dot(vec3(_564, _565, _566), vec3(_642, _643, _644));
    float _732 = _729 * 2.0;
    float _736 = (_732 * _564) - _642;
    float _737 = (_732 * _565) - _643;
    float _738 = (_732 * _566) - _644;
    float _742 = abs(dot(vec3(_642, _643, _644), vec3(_564, _565, _566)));
    float _3700 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _744 = sqrt(_567);
    float _757 = exp2((_744 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_797, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789));
        float _855 = fma(_797, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789));
        float _859 = fma(_797, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789));
        float _884 = _789 + _564;
        float _885 = _793 + _565;
        float _886 = _797 + _566;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _851;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _855;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _859;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_564, _565, _566), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3748 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_564, _565, _566), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3781 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_564, _565, _566), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3814 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_797, cbModelParam._m0[30u].z, fma(_793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789));
        float _1173 = fma(_797, cbModelParam._m0[31u].z, fma(_793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789));
        float _1177 = fma(_797, cbModelParam._m0[32u].z, fma(_793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789));
        float _1200 = _789 + _564;
        float _1201 = _793 + _565;
        float _1202 = _797 + _566;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_564, _565, _566), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3877 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_564, _565, _566), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3910 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_564, _565, _566), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3943 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1127;
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = _1127;
        _1448 = _1127;
        _1449 = _1127;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1139)) + _1139;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1140)) + _1140;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1141)) + _1141;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _736 * 0.5;
    float _1507 = _737 * 0.5;
    float _1508 = _738 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_797, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_797, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_797, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_738, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736));
        float _1636 = fma(_738, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736));
        float _1639 = fma(_738, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1667 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1636 > 0.0)
        {
            _1890 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2136;
        if (_1639 > 0.0)
        {
            _2136 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2136 = frontier_phi_38_33_ladder;
        }
        float _2138 = isnan(_1890) ? _1667 : (isnan(_1667) ? _1890 : min(_1667, _1890));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1633) + _1622;
        float _2144 = (_2139 * _1636) + _1626;
        float _2145 = (_2139 * _1639) + _1630;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_16_38_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_16_38_ladder_2;
        _1657 = frontier_phi_16_38_ladder_1;
        _1659 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_736, _737, _738), _1575);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_797, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_797, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_797, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_738, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736));
        float _1731 = fma(_738, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736));
        float _1734 = fma(_738, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736));
        float _1895;
        if (_1728 > 0.0)
        {
            _1895 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2163;
        if (_1731 > 0.0)
        {
            _2163 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2163 = frontier_phi_40_35_ladder;
        }
        float _2368;
        if (_1734 > 0.0)
        {
            _2368 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2368 = frontier_phi_49_46_ladder;
        }
        float _2370 = isnan(_2163) ? _1895 : (isnan(_1895) ? _2163 : min(_1895, _2163));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1728) + _1717;
        float _2376 = (_2371 * _1731) + _1721;
        float _2377 = (_2371 * _1734) + _1725;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_25_49_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_25_49_ladder_2;
        _1755 = frontier_phi_25_49_ladder_1;
        _1757 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_736, _737, _738), _1664);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _757) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_757 * _744)) * _728;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1655)) + _1655);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1657)) + _1657);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1659)) + _1659);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    vec4 _1789 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_663, _664));
    float _1791 = _1789.w;
    float _1803 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1791);
    float _1804 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1791);
    float _1805 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1791);
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _728 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1848 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1852 = _1811 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_564, _565, _566));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_564, _565, _566));
    float _4079 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _4090 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1828].x * _1834) * _1873) + (((cbLight._m0[_1838].x * _1803) * _1848) * _1871);
    float _1881 = ((_1834 * cbLight._m0[_1828].y) * _1873) + (((cbLight._m0[_1838].y * _1804) * _1848) * _1871);
    float _1882 = ((_1834 * cbLight._m0[_1828].z) * _1873) + (((cbLight._m0[_1838].z * _1805) * _1848) * _1871);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1880;
        _1902 = _1881;
        _1904 = _1882;
    }
    else
    {
        uint _1908 = _1811 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _4101 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1927 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1880;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2107 = _1811 + 7u;
        float _2123 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4117 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2126 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1945 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _1900;
        _1947 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _1902;
        _1949 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _1904;
    }
    uint _1952 = _1811 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _567) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1811].x + _642;
    float _1968 = cbLight._m0[_1811].y + _643;
    float _1969 = cbLight._m0[_1811].z + _644;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1811].xyz));
    float _4133 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _1981 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _1982 = dot(vec3(_564, _565, _566), vec3(_1974, _1975, _1976));
    float _4155 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1974, _1975, _1976));
    float _4166 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1981 * ((_1980 * _2006) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2006) + _1966) * _1980))) * _1980;
    float _4177 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2033 = _1811 + 9u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _567) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1852].x + _642;
    float _2047 = cbLight._m0[_1852].y + _643;
    float _2048 = cbLight._m0[_1852].z + _644;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1852].xyz));
    float _4188 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2060 = dot(vec3(_564, _565, _566), vec3(_2053, _2054, _2055));
    float _4199 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2053, _2054, _2055));
    float _4210 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2045 * _2045;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2045;
    float _2092 = (0.5 / (((_1981 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2082) + _2045) * _2059))) * _2059;
    float _4221 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    float _2104 = (((_2081 * cbLight._m0[_2033].x) * _2094) * _1834) + ((((cbLight._m0[_1952].x * _1803) * _2005) * _2019) * _1848);
    float _2105 = (((_2081 * cbLight._m0[_2033].y) * _2094) * _1834) + ((((cbLight._m0[_1952].y * _1804) * _2005) * _2019) * _1848);
    float _2106 = (((_2081 * cbLight._m0[_2033].z) * _2094) * _1834) + ((((cbLight._m0[_1952].z * _1805) * _2005) * _2019) * _1848);
    float _2168;
    float _2170;
    float _2172;
    if (_1889)
    {
        _2168 = _2104;
        _2170 = _2105;
        _2172 = _2106;
    }
    else
    {
        uint _2174 = _1811 + 2u;
        uint _2178 = _1811 + 10u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _567) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _642;
        float _2195 = cbLight._m0[_2174].y + _643;
        float _2196 = cbLight._m0[_2174].z + _644;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2174].xyz));
        float _4232 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2208 = dot(vec3(_564, _565, _566), vec3(_2201, _2202, _2203));
        float _4243 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4254 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2230 = 1.0 - _2193;
        float _2240 = (0.5 / (((_1981 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2230) + _2193) * _2207))) * _2207;
        float _4265 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2168 = (((_2229 * cbLight._m0[_2178].x) * _2242) * _2243) + _2104;
        _2170 = (((_2229 * cbLight._m0[_2178].y) * _2242) * _2243) + _2105;
        _2172 = (((_2229 * cbLight._m0[_2178].z) * _2242) * _2243) + _2106;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1907)
    {
        _2278 = _2168;
        _2280 = _2170;
        _2282 = _2172;
    }
    else
    {
        uint _2289 = _1811 + 3u;
        uint _2293 = _1811 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _567) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _642;
        float _2310 = cbLight._m0[_2289].y + _643;
        float _2311 = cbLight._m0[_2289].z + _644;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2289].xyz));
        float _4281 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2323 = dot(vec3(_564, _565, _566), vec3(_2316, _2317, _2318));
        float _4292 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4303 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_1981 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2345) + _2308) * _2322))) * _2322;
        float _4314 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2278 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2168;
        _2280 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2170;
        _2282 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2172;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1809.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _664) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _663) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2750)
                {
                    frontier_phi_66_pred = _2734;
                    frontier_phi_66_pred_1 = _2739;
                    frontier_phi_66_pred_2 = _2738;
                    frontier_phi_66_pred_3 = _2737;
                    frontier_phi_66_pred_4 = _2736;
                    frontier_phi_66_pred_5 = _2735;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2749;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2740 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2434;
                        float _2946 = _2905.y - _2435;
                        float _2947 = _2905.z - _2436;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_684, _687, _690), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4340 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2976 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2980 = (-0.0) - _2434;
                        float _2981 = (-0.0) - _2435;
                        float _2982 = (-0.0) - _2436;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2997 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2998 = 1.0 - _744;
                        float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                        float _3006 = _3005 * _3005;
                        float _3007 = _3006 * _3006;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(_684, _687, _690), vec3(_2987, _2988, _2989));
                        float _4356 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3022 = dot(vec3(_684, _687, _690), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4367 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                        float _3030 = _2965 * _3006;
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _2955) + _3031;
                        float _4378 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3036 = 1.0 - _3006;
                        float _3046 = (0.5 / (((_3035 * ((_3021 * _3036) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3006) * _3021))) * _3035;
                        float _4389 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3057 = (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3029 * _3029) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2809 = (_2976 * _2924.x) + _2882;
                        _2810 = (_2976 * _2924.y) + _2883;
                        _2811 = (_2976 * _2924.z) + _2884;
                        _2806 = (_3057 * _2941.x) + _2879;
                        _2807 = (_3057 * _2941.y) + _2880;
                        _2808 = (_3057 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_66_pred = _2806;
                    frontier_phi_66_pred_1 = _2811;
                    frontier_phi_66_pred_2 = _2810;
                    frontier_phi_66_pred_3 = _2809;
                    frontier_phi_66_pred_4 = _2808;
                    frontier_phi_66_pred_5 = _2807;
                }
                _2582 = frontier_phi_66_pred;
                _2592 = frontier_phi_66_pred_1;
                _2590 = frontier_phi_66_pred_2;
                _2588 = frontier_phi_66_pred_3;
                _2586 = frontier_phi_66_pred_4;
                _2584 = frontier_phi_66_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2582;
                    _2735 = _2584;
                    _2736 = _2586;
                    _2737 = _2588;
                    _2738 = _2590;
                    _2739 = _2592;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2598) & _2480) == 0u)
        {
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2728 = _2727 * _2434;
            float _2729 = _2727 * _2435;
            float _2730 = _2727 * _2436;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2862 = _2581;
                float _2863 = _2583;
                float _2864 = _2585;
                float _2865 = _2587;
                float _2866 = _2589;
                float _2867 = _2591;
                uint _2868 = _2598;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2878)
                    {
                        frontier_phi_77_pred = _2867;
                        frontier_phi_77_pred_1 = _2866;
                        frontier_phi_77_pred_2 = _2865;
                        frontier_phi_77_pred_3 = _2864;
                        frontier_phi_77_pred_4 = _2863;
                        frontier_phi_77_pred_5 = _2862;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        uint _3090 = _2877;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3160;
                        vec4 _3176;
                        float _3222;
                        bool _3223;
                        for (;;)
                        {
                            uint _3101 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3147 = (_3101 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3101 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3101 * 40u) + 24u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3197 = (_3101 * 40u) + 28u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3222 = fma(_2436, _3210.z, fma(_2435, _3210.y, _3210.x * _2434)) + _3210.w;
                            _3223 = !((fma(_2436, _3191.z, fma(_2435, _3191.y, _3191.x * _2434)) + _3191.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3223)
                            {
                                float _3250 = _3116.x - _2434;
                                float _3251 = _3116.y - _2435;
                                float _3252 = _3116.z - _2436;
                                float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                                float _3256 = inversesqrt(_3253);
                                float _3257 = _3256 * _3250;
                                float _3258 = _3256 * _3251;
                                float _3259 = _3256 * _3252;
                                float _3263 = 1.0 - (_3253 / (_3117 * _3117));
                                float _4400 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3268 = sqrt(_3253) * _3132.w;
                                float _3270 = 1.39999997615814208984375 / (_3268 + 1.39999997615814208984375);
                                float _3271 = _3270 * _3270;
                                float _3274 = ((1.0 - _3271) * dot(vec3(_3257, _3258, _3259), vec3(_684, _687, _690))) + _3271;
                                float _3277 = _3268 * _3268;
                                float _3281 = (fma(_2436, _3160.z, fma(_2435, _3160.y, _3160.x * _2434)) + _3160.w) / _3222;
                                float _3282 = (fma(_2436, _3176.z, fma(_2435, _3176.y, _3176.x * _2434)) + _3176.w) / _3222;
                                float _3286 = 1.0 - dot(vec2(_3281, _3282), vec2(_3281, _3282));
                                float _4416 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3288 = _3287 * (((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3264) / ((_3277 * 0.699999988079071044921875) + 1.0));
                                float _3300 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                                float _3301 = 1.0 - _744;
                                float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                                float _3309 = _3308 * _3308;
                                float _3310 = _3309 * _3309;
                                float _3311 = _3257 - _2728;
                                float _3312 = _3258 - _2729;
                                float _3313 = _3259 - _2730;
                                float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                                float _3321 = dot(vec3(_684, _687, _690), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4427 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3325 = dot(vec3(_684, _687, _690), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                                float _4438 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                                float _3333 = _3270 * _3309;
                                float _3334 = _3333 * _3333;
                                float _3340 = ((1.0 - _3334) * dot(vec3(_684, _687, _690), vec3(_3257, _3258, _3259))) + _3334;
                                float _4449 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3342 = 1.0 - _3309;
                                float _3352 = (0.5 / (((_3341 * ((_3324 * _3342) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3309) * _3324))) * _3341;
                                float _4460 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3362 = (_3287 * _3264) * (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3332 * _3332) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3288 * _3132.y;
                                frontier_phi_83_pred_1 = _3288 * _3132.x;
                                frontier_phi_83_pred_2 = _3362 * _3144.z;
                                frontier_phi_83_pred_3 = _3362 * _3144.y;
                                frontier_phi_83_pred_4 = _3362 * _3144.x;
                                frontier_phi_83_pred_5 = _3288 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3370 = frontier_phi_83_pred;
                            _3369 = frontier_phi_83_pred_1;
                            _3368 = frontier_phi_83_pred_2;
                            _3367 = frontier_phi_83_pred_3;
                            _3366 = frontier_phi_83_pred_4;
                            _3371 = frontier_phi_83_pred_5;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            _3071 = _3366 + _3084;
                            _3072 = _3367 + _3085;
                            _3073 = _3368 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3076;
                        frontier_phi_77_pred_1 = _3075;
                        frontier_phi_77_pred_2 = _3074;
                        frontier_phi_77_pred_3 = _3073;
                        frontier_phi_77_pred_4 = _3072;
                        frontier_phi_77_pred_5 = _3071;
                    }
                    _2713 = frontier_phi_77_pred;
                    _2711 = frontier_phi_77_pred_1;
                    _2709 = frontier_phi_77_pred_2;
                    _2707 = frontier_phi_77_pred_3;
                    _2705 = frontier_phi_77_pred_4;
                    _2703 = frontier_phi_77_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2703;
                        _2863 = _2705;
                        _2864 = _2707;
                        _2865 = _2709;
                        _2866 = _2711;
                        _2867 = _2713;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2707;
                frontier_phi_58_59_ladder_1 = _2713;
                frontier_phi_58_59_ladder_2 = _2711;
                frontier_phi_58_59_ladder_3 = _2709;
                frontier_phi_58_59_ladder_4 = _2705;
                frontier_phi_58_59_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_58_59_ladder = _2585;
                frontier_phi_58_59_ladder_1 = _2591;
                frontier_phi_58_59_ladder_2 = _2589;
                frontier_phi_58_59_ladder_3 = _2587;
                frontier_phi_58_59_ladder_4 = _2583;
                frontier_phi_58_59_ladder_5 = _2581;
            }
            _2702 = frontier_phi_58_59_ladder_5;
            _2704 = frontier_phi_58_59_ladder_4;
            _2706 = frontier_phi_58_59_ladder;
            _2708 = frontier_phi_58_59_ladder_3;
            _2710 = frontier_phi_58_59_ladder_2;
            _2712 = frontier_phi_58_59_ladder_1;
        }
        float _2717 = isnan(1.0) ? _728 : (isnan(_728) ? 1.0 : min(_728, 1.0));
        _2493 = (_2717 * _2708) + _1945;
        _2495 = (_2717 * _2710) + _1947;
        _2497 = (_2717 * _2712) + _1949;
        _2499 = ((_2702 * 0.039999999105930328369140625) * _2717) + _2278;
        _2501 = ((_2704 * 0.039999999105930328369140625) * _2717) + _2280;
        _2503 = ((_2706 * 0.039999999105930328369140625) * _2717) + _2282;
    }
    else
    {
        _2493 = _1945;
        _2495 = _1947;
        _2497 = _1949;
        _2499 = _2278;
        _2501 = _2280;
        _2503 = _2282;
    }
    float _4476 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4487 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4498 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2520 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2493 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _728))) + ((_2499 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2495 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _728))) + ((_2501 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    float _2522 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2497 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _728))) + ((_2503 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    uint _2523 = _241 + 6u;
    float _2531 = _663 / cbSceneParam._m0[86u].x;
    float _2532 = _664 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2607 = _2606 / _585;
        float _2618 = _2607 * _635;
        float _2619 = _636 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2622 = _2607 * _637;
        float _2624 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2625 = _2624 + cbSceneParam._m0[79u].w;
        float _2626 = cbSceneParam._m0[79u].w - _2619;
        float _2632 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2622 * _2622));
        float _2635 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2632;
        float _2640 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2642 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2819;
        if (abs((_2620 - _2624) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2819 = ((((_2625 > 0.0) ? exp2(_2640 * _2625) : (2.0 - exp2(_2642 * _2625))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2635;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : max(_2625, _2626));
            float _2765 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : min(_2625, _2626));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2819 = ((abs(_2632 / _2620) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2640 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2640 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2642 * _2774) - exp2(_2642 * _2775)) * _2763))) + (_2635 * cbSceneParam._m0[80u].z);
        }
        vec4 _2821 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2830 = exp2((_2819 * (-1.44269502162933349609375)) * (1.0 - _2821.w));
        float _2831 = log2(_2830);
        float _2847 = log2(_2551);
        _2644 = (exp2(_2847 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].x)) * _2821.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2646 = (exp2(_2847 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].y)) * _2821.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2648 = (exp2(_2847 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].z)) * _2821.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2650 = _2830 * _2551;
    }
    else
    {
        _2644 = _2548;
        _2646 = _2549;
        _2648 = _2550;
        _2650 = _2551;
    }
    bool _2857;
    vec4 _2660;
    vec4 _2682;
    float _2684;
    float _2688;
    float _2689;
    float _2690;
    float _2691;
    bool _2701;
    for (;;)
    {
        _2660 = cbMatDynParam._m0[0u];
        float _2662 = roundEven(_2660.y);
        bool _2663 = _2662 == 3.0;
        float _2664 = log2(_2650);
        float _2671 = exp2(_2664 * cbSceneParam._m0[78u].x) * _2520;
        float _2672 = exp2(_2664 * cbSceneParam._m0[78u].y) * _2521;
        float _2673 = exp2(_2664 * cbSceneParam._m0[78u].z) * _2522;
        float _2680 = _651 + (-0.5);
        _2682 = cbMtdParam._m0[1u];
        _2684 = _2682.y * _2680;
        float _2687 = (_2662 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2688 = _2687 * (_2663 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2644)));
        _2689 = _2687 * (_2663 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2646)));
        _2690 = _2687 * (_2663 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2648)));
        _2691 = _2680 * 0.999000012874603271484375;
        _2701 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2701)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2691) < 0.5)
            {
                _2857 = true;
                break;
            }
        }
        uint _2798 = _703 + uint(_2660.w);
        if ((cbInstanceData._m0[_2798].w < 1.0) && ((cbInstanceData._m0[_2798].w + _2691) < 0.5))
        {
            _2857 = true;
            break;
        }
        if ((_2684 + 1.0) < _2682.x)
        {
            _2857 = true;
            break;
        }
        _2857 = false;
        break;
    }
    float _3062;
    if (_2857)
    {
        discard_state = true;
        _3062 = 0.0;
    }
    else
    {
        _3062 = cbInstanceData._m0[_2523].w;
    }
    SV_Target.x = _2688;
    SV_Target.y = _2689;
    SV_Target.z = _2690;
    SV_Target.w = _3062;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2523].w;
    discard_exit();
}


