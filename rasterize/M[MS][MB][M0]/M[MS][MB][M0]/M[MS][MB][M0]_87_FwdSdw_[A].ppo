#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1236;
float _3879;
float _3880;
float _3881;
float _3882;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3891 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3902 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3913 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _399 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _399) * cbMtdParam._m0[24u].x) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3924 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _424 = (_417 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _425 = (_417 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _426 = (_417 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _430 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _424;
    float _433 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _425;
    float _436 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _426;
    float _443 = ((_424 - _430) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _430;
    float _444 = ((_425 - _433) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _433;
    float _445 = ((_426 - _436) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) + _436;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _417) + _509;
    float _521 = ((((_488.x - _507) * _417) + _507) * 2.0) + (-1.0);
    float _522 = ((((_488.y - _508) * _417) + _508) * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3935 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _569 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _571 = _569.x;
    float _572 = 1.0 - _571;
    float _585 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_571 - _572) * cbMtdParam._m0[24u].z) + _572) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3946 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _593 = (_586 * (cbMtdParam._m0[17u].x - _443)) + _443;
    float _594 = (_586 * (cbMtdParam._m0[17u].y - _444)) + _444;
    float _595 = (_586 * (cbMtdParam._m0[17u].z - _445)) + _445;
    float _600 = (((_463.z - _518) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _518;
    float _604 = ((_544.z - _600) * cbMtdParam._m0[19u].w) + _600;
    vec4 _617 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _624 = (_617.x * 2.0) + (-1.0);
    float _625 = (_617.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3957 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _634 = (_586 * (_617.z - _604)) + _604;
    float _643 = (_521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_463.x * 2.0) + (-1.0)))) + (((_544.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _644 = (_522 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_463.y * 2.0) + (-1.0)))) + (((_544.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _656 = (((_624 - _643) + (cbMtdParam._m0[21u].x * _643)) * _586) + _643;
    float _657 = (((_625 - _644) + (cbMtdParam._m0[21u].x * _644)) * _586) + _644;
    float _658 = (_586 * (sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _528)) + _528;
    float _660 = cbMtdParam._m0[22u].x + _544.w;
    float _663 = fma(_658, _234 * NORMAL.x, fma(_657, _241 * TANGENT.x, (_227 * _219) * _656));
    float _666 = fma(_658, _234 * NORMAL.y, fma(_657, _241 * TANGENT.y, (_227 * _220) * _656));
    float _669 = fma(_658, _234 * NORMAL.z, fma(_657, _241 * TANGENT.z, (_227 * _221) * _656));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3968 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _677 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3990 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4001 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4012 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    vec4 _761 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _763 = _761.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _917 = sqrt(((_747 * _747) + (_748 * _748)) + (_749 * _749));
        float _923 = (cbMatDynParam._m0[5u].x * _917) + cbMatDynParam._m0[5u].y;
        float _4023 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _928 = (cbMatDynParam._m0[5u].z * _917) + cbMatDynParam._m0[5u].w;
        float _4034 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) - _924)) + _924) < ((_763 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _796 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _799 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _812 = _268 + 9u;
    uint _813 = _812 + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_813].z;
    float _4045 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _837 = ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_674, _675, _676), vec3(_754, _755, _756));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _674) - _754;
    float _846 = (_841 * _675) - _755;
    float _847 = (_841 * _676) - _756;
    float _851 = abs(dot(vec3(_754, _755, _756), vec3(_674, _675, _676)));
    float _4078 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_677);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _964 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _968 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _993 = _898 + _674;
        float _994 = _902 + _675;
        float _995 = _906 + _676;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_674, _675, _676), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _4126 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_674, _675, _676), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _4159 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_674, _675, _676), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4192 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1282 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1286 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1309 = _898 + _674;
        float _1310 = _902 + _675;
        float _1311 = _906 + _676;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_674, _675, _676), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4255 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_674, _675, _676), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4288 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_674, _675, _676), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4321 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = _1236;
        _1557 = _1236;
        _1558 = _1236;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _845 * 0.5;
    float _1616 = _846 * 0.5;
    float _1617 = _847 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1746 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1749 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1777 = frontier_phi_17_15_ladder;
        }
        float _1947;
        if (_1746 > 0.0)
        {
            _1947 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1947 = frontier_phi_26_22_ladder;
        }
        float _2242;
        if (_1749 > 0.0)
        {
            _2242 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2242 = frontier_phi_38_33_ladder;
        }
        float _2244 = isnan(_1947) ? _1777 : (isnan(_1777) ? _1947 : min(_1777, _1947));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1743) + _1732;
        float _2250 = (_2245 * _1746) + _1736;
        float _2251 = (_2245 * _1749) + _1740;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2252;
        float _2256 = _2252 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 > _2256) || ((_2250 < _2254) || ((_2249 < _2254) || (_2249 > _2256))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2251, cbModelParam._m0[9u].z, fma(_2250, cbModelParam._m0[9u].y, _2249 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2251, cbModelParam._m0[10u].z, fma(_2250, cbModelParam._m0[10u].y, _2249 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2251, cbModelParam._m0[11u].z, fma(_2250, cbModelParam._m0[11u].y, _2249 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_16_38_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_16_38_ladder_2;
        _1767 = frontier_phi_16_38_ladder_1;
        _1769 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1684);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1828 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1832 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1836 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1839 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1842 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1845 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1952;
        if (_1839 > 0.0)
        {
            _1952 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1952 = frontier_phi_28_24_ladder;
        }
        float _2269;
        if (_1842 > 0.0)
        {
            _2269 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2269 = frontier_phi_40_35_ladder;
        }
        float _2596;
        if (_1845 > 0.0)
        {
            _2596 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2596 = frontier_phi_50_47_ladder;
        }
        float _2598 = isnan(_2269) ? _1952 : (isnan(_1952) ? _2269 : min(_1952, _2269));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1839) + _1828;
        float _2604 = (_2599 * _1842) + _1832;
        float _2605 = (_2599 * _1845) + _1836;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_25_50_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1864 = frontier_phi_25_50_ladder_2;
        _1866 = frontier_phi_25_50_ladder_1;
        _1868 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1774);
        _1864 = _1848.x * cbModelParam._m0[1u].z;
        _1866 = _1848.y * cbModelParam._m0[1u].z;
        _1868 = _1848.z * cbModelParam._m0[1u].z;
    }
    float _1880 = ((((1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_866 * _853)) * _837;
    float _1881 = _1880 * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1882 = _1880 * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1883 = _1880 * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1881 * cbSceneParam._m0[91u].x));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1939 = _1926 / _1938;
    float _1940 = _1930 / _1938;
    float _1941 = _1934 / _1938;
    float _2088;
    float _2089;
    float _2090;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1968 = ((uint(_1941 > cbSceneParam._m0[59u].y) + uint(_1941 > cbSceneParam._m0[59u].x)) + uint(_1941 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1969 = _1968 + 43u;
        uint _1977 = _1968 + 44u;
        uint _1985 = _1968 + 45u;
        uint _1993 = _1968 + 46u;
        float _2004 = fma(_1938, cbSceneParam._m0[_1969].w, fma(_1934, cbSceneParam._m0[_1969].z, fma(_1930, cbSceneParam._m0[_1969].y, _1926 * cbSceneParam._m0[_1969].x)));
        float _2008 = fma(_1938, cbSceneParam._m0[_1977].w, fma(_1934, cbSceneParam._m0[_1977].z, fma(_1930, cbSceneParam._m0[_1977].y, _1926 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1938, cbSceneParam._m0[_1993].w, fma(_1934, cbSceneParam._m0[_1993].z, fma(_1930, cbSceneParam._m0[_1993].y, _1926 * cbSceneParam._m0[_1993].x)));
        float _2021 = cbSceneParam._m0[33u].z * _2016;
        float _2023 = cbSceneParam._m0[33u].w * _2016;
        float _2026 = fma(_1938, cbSceneParam._m0[_1985].w, fma(_1934, cbSceneParam._m0[_1985].z, fma(_1930, cbSceneParam._m0[_1985].y, _1926 * cbSceneParam._m0[_1985].x))) / _2016;
        float _2074 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
        float _4447 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2081 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2021 + _2004) / _2016, (_2023 + _2008) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2004) / _2016, (_2008 - _2021) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2021) / _2016, (_2008 - _2023) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2023) / _2016, (_2021 + _2008) / _2016), _2026), 0.0)).x), vec4(0.25)));
        _2088 = 1.0 - (_2081 * cbSceneParam._m0[34u].x);
        _2089 = 1.0 - (_2081 * cbSceneParam._m0[34u].y);
        _2090 = 1.0 - (_2081 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2088 = 1.0;
        _2089 = 1.0;
        _2090 = 1.0;
    }
    float _2154;
    float _2156;
    float _2158;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2142 = fma(_1938, cbSceneParam._m0[63u].w, fma(_1934, cbSceneParam._m0[63u].z, fma(_1930, cbSceneParam._m0[63u].y, _1926 * cbSceneParam._m0[63u].x)));
        float _2143 = fma(_1938, cbSceneParam._m0[60u].w, fma(_1934, cbSceneParam._m0[60u].z, fma(_1930, cbSceneParam._m0[60u].y, _1926 * cbSceneParam._m0[60u].x))) / _2142;
        float _2144 = fma(_1938, cbSceneParam._m0[61u].w, fma(_1934, cbSceneParam._m0[61u].z, fma(_1930, cbSceneParam._m0[61u].y, _1926 * cbSceneParam._m0[61u].x))) / _2142;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2143 >= cbSceneParam._m0[64u].x) && (_2144 >= cbSceneParam._m0[64u].y)) && (_2143 <= cbSceneParam._m0[64u].z)) && (_2144 <= cbSceneParam._m0[64u].w))
        {
            float _2282 = fma(_1938, cbSceneParam._m0[62u].w, fma(_1934, cbSceneParam._m0[62u].z, fma(_1930, cbSceneParam._m0[62u].y, _1926 * cbSceneParam._m0[62u].x))) / _2142;
            float _2286 = isnan(cbSceneParam._m0[41u].w) ? _2282 : (isnan(_2282) ? cbSceneParam._m0[41u].w : max(_2282, cbSceneParam._m0[41u].w));
            float _2329 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
            float _4463 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
            float _2336 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2143, cbSceneParam._m0[33u].w + _2144), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2143, _2144 - cbSceneParam._m0[33u].z), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].z, _2144 - cbSceneParam._m0[33u].w), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2144), _2286), 0.0)).x), vec4(0.25)));
            float _2340 = 1.0 - (_2336 * cbSceneParam._m0[34u].x);
            float _2341 = 1.0 - (_2336 * cbSceneParam._m0[34u].y);
            float _2342 = 1.0 - (_2336 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
            frontier_phi_37_36_ladder_1 = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
            frontier_phi_37_36_ladder_2 = isnan(_2340) ? _2088 : (isnan(_2088) ? _2340 : min(_2088, _2340));
        }
        else
        {
            frontier_phi_37_36_ladder = _2090;
            frontier_phi_37_36_ladder_1 = _2089;
            frontier_phi_37_36_ladder_2 = _2088;
        }
        _2154 = frontier_phi_37_36_ladder_2;
        _2156 = frontier_phi_37_36_ladder_1;
        _2158 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2154 = _2088;
        _2156 = _2089;
        _2158 = _2090;
    }
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _837 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2201 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2205 = _2165 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_674, _675, _676));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_674, _675, _676));
    float _4499 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4510 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2182].x * _2188) * _2226) + (((cbLight._m0[_2192].x * _2154) * _2201) * _2224);
    float _2234 = ((_2188 * cbLight._m0[_2182].y) * _2226) + (((cbLight._m0[_2192].y * _2156) * _2201) * _2224);
    float _2235 = ((_2188 * cbLight._m0[_2182].z) * _2226) + (((cbLight._m0[_2192].z * _2158) * _2201) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2241)
    {
        _2343 = _2233;
        _2345 = _2234;
        _2347 = _2235;
    }
    else
    {
        uint _2351 = _2165 + 6u;
        float _2367 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4521 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2370 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2343 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2233;
        _2345 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2234;
        _2347 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2235;
    }
    bool _2350 = _2239.y == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2350)
    {
        _2405 = _2343;
        _2407 = _2345;
        _2409 = _2347;
    }
    else
    {
        uint _2567 = _2165 + 7u;
        float _2583 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2584 = _2583 * _2583;
        float _4537 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2585 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2586 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2405 = (((cbLight._m0[_2567].x * 0.3183098733425140380859375) * _2585) * _2586) + _2343;
        _2407 = (((cbLight._m0[_2567].y * 0.3183098733425140380859375) * _2585) * _2586) + _2345;
        _2409 = (((cbLight._m0[_2567].z * 0.3183098733425140380859375) * _2585) * _2586) + _2347;
    }
    uint _2412 = _2165 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _677) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2165].x + _754;
    float _2428 = cbLight._m0[_2165].y + _755;
    float _2429 = cbLight._m0[_2165].z + _756;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2165].xyz));
    float _4553 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2441 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2442 = dot(vec3(_674, _675, _676), vec3(_2434, _2435, _2436));
    float _4575 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2434, _2435, _2436));
    float _4586 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2426 * _2426;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2466 = 1.0 - _2426;
    float _2477 = (0.5 / (((_2441 * ((_2440 * _2466) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2466) + _2426) * _2440))) * _2440;
    float _4597 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    uint _2493 = _2165 + 9u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _677) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2205].x + _754;
    float _2507 = cbLight._m0[_2205].y + _755;
    float _2508 = cbLight._m0[_2205].z + _756;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2205].xyz));
    float _4608 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2520 = dot(vec3(_674, _675, _676), vec3(_2513, _2514, _2515));
    float _4619 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2513, _2514, _2515));
    float _4630 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2505 * _2505;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2505;
    float _2552 = (0.5 / (((_2441 * ((_2519 * _2542) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2542) + _2505) * _2519))) * _2519;
    float _4641 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2554 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    float _2564 = (((_2541 * cbLight._m0[_2493].x) * _2554) * _2188) + ((((cbLight._m0[_2412].x * _2154) * _2465) * _2479) * _2201);
    float _2565 = (((_2541 * cbLight._m0[_2493].y) * _2554) * _2188) + ((((cbLight._m0[_2412].y * _2156) * _2465) * _2479) * _2201);
    float _2566 = (((_2541 * cbLight._m0[_2493].z) * _2554) * _2188) + ((((cbLight._m0[_2412].z * _2158) * _2465) * _2479) * _2201);
    float _2622;
    float _2624;
    float _2626;
    if (_2241)
    {
        _2622 = _2564;
        _2624 = _2565;
        _2626 = _2566;
    }
    else
    {
        uint _2628 = _2165 + 2u;
        uint _2632 = _2165 + 10u;
        float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _677) * 0.949999988079071044921875);
        float _2647 = _2646 * _2646;
        float _2648 = cbLight._m0[_2628].x + _754;
        float _2649 = cbLight._m0[_2628].y + _755;
        float _2650 = cbLight._m0[_2628].z + _756;
        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
        float _2655 = _2654 * _2648;
        float _2656 = _2654 * _2649;
        float _2657 = _2654 * _2650;
        float _2658 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2628].xyz));
        float _4652 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2662 = dot(vec3(_674, _675, _676), vec3(_2655, _2656, _2657));
        float _4663 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2666 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2655, _2656, _2657));
        float _4674 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2670 = _2647 * _2647;
        float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
        float _2683 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2684 = 1.0 - _2647;
        float _2694 = (0.5 / (((_2441 * ((_2661 * _2684) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2684) + _2647) * _2661))) * _2661;
        float _4685 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2622 = (((_2683 * cbLight._m0[_2632].x) * _2696) * _2697) + _2564;
        _2624 = (((_2683 * cbLight._m0[_2632].y) * _2696) * _2697) + _2565;
        _2626 = (((_2683 * cbLight._m0[_2632].z) * _2696) * _2697) + _2566;
    }
    float _2728;
    float _2730;
    float _2732;
    if (_2350)
    {
        _2728 = _2622;
        _2730 = _2624;
        _2732 = _2626;
    }
    else
    {
        uint _2739 = _2165 + 3u;
        uint _2743 = _2165 + 11u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _677) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _754;
        float _2760 = cbLight._m0[_2739].y + _755;
        float _2761 = cbLight._m0[_2739].z + _756;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2739].xyz));
        float _4701 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2773 = dot(vec3(_674, _675, _676), vec3(_2766, _2767, _2768));
        float _4712 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4723 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2794 = (exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2795 = 1.0 - _2758;
        float _2805 = (0.5 / (((_2441 * ((_2772 * _2795) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2795) + _2758) * _2772))) * _2772;
        float _4734 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2728 = (((_2794 * cbLight._m0[_2743].x) * _2807) * _2808) + _2622;
        _2730 = (((_2794 * cbLight._m0[_2743].y) * _2807) * _2808) + _2624;
        _2732 = (((_2794 * cbLight._m0[_2743].z) * _2807) * _2808) + _2626;
    }
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_2163.y == 0u)
    {
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.x;
        uint _2841 = uint((float(_2829.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2830))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2830)));
        float _2851 = (log2(_1941 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2852 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        uint _2855 = uint(isnan(14.0) ? _2852 : (isnan(_2852) ? 14.0 : min(_2852, 14.0)));
        uvec4 _2860 = texelFetch(g_lightClusterGridBuffer, int(((_2855 << 2u) + (_2841 << 6u)) >> 2u));
        uint _2861 = _2860.x;
        uint _2862 = _2829.z;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((((1u << ((_2862 >> 4u) & 15u)) + 4294967295u) & _2861) == 0u) || ((_2862 & 240u) == 0u))
        {
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
        }
        else
        {
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            uint _3100 = 0u;
            uint _3109;
            bool _3110;
            for (;;)
            {
                _3109 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                _3110 = _3109 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3110)
                {
                    frontier_phi_71_pred = _3099;
                    frontier_phi_71_pred_1 = _3098;
                    frontier_phi_71_pred_2 = _3097;
                    frontier_phi_71_pred_3 = _3096;
                    frontier_phi_71_pred_4 = _3095;
                    frontier_phi_71_pred_5 = _3094;
                }
                else
                {
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    uint _3245;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3109;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3249 = uint(findLSB(_3245)) + (_3100 << 5u);
                        uint _3246 = (_3245 + 4294967295u) & _3245;
                        uint _3251 = _3249 * 48u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3271 = (_3249 * 48u) + 4u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3290 = (_3249 * 48u) + 8u;
                        vec3 _3301 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x));
                        float _3305 = _3265.x - _1939;
                        float _3306 = _3265.y - _1940;
                        float _3307 = _3265.z - _1941;
                        float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                        float _3311 = inversesqrt(_3308);
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3315 = dot(vec3(_793, _796, _799), vec3(_3312, _3313, _3314));
                        float _3320 = 1.0 - (_3308 * _3265.w);
                        float _4760 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3322 = sqrt(_3308) * _3284.w;
                        float _3325 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3315) + _3326;
                        float _3332 = _3322 * _3322;
                        float _3336 = ((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3321) / ((_3332 * 0.699999988079071044921875) + 1.0);
                        float _3340 = (-0.0) - _1939;
                        float _3341 = (-0.0) - _1940;
                        float _3342 = (-0.0) - _1941;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3356 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _853;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3347 + _3312;
                        float _3368 = _3348 + _3313;
                        float _3369 = _3349 + _3314;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_793, _796, _799), vec3(_3347, _3348, _3349));
                        float _4776 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3381 = dot(vec3(_793, _796, _799), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4787 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3325 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3315) + _3390;
                        float _4798 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4809 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3388 * _3388) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125))) * _3321;
                        _3169 = (_3336 * _3284.x) + _3242;
                        _3170 = (_3336 * _3284.y) + _3243;
                        _3171 = (_3336 * _3284.z) + _3244;
                        _3166 = (_3416 * _3301.x) + _3239;
                        _3167 = (_3416 * _3301.y) + _3240;
                        _3168 = (_3416 * _3301.z) + _3241;
                        if (_3246 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3246;
                        }
                    }
                    frontier_phi_71_pred = _3171;
                    frontier_phi_71_pred_1 = _3170;
                    frontier_phi_71_pred_2 = _3169;
                    frontier_phi_71_pred_3 = _3168;
                    frontier_phi_71_pred_4 = _3167;
                    frontier_phi_71_pred_5 = _3166;
                }
                _2952 = frontier_phi_71_pred;
                _2950 = frontier_phi_71_pred_1;
                _2948 = frontier_phi_71_pred_2;
                _2946 = frontier_phi_71_pred_3;
                _2944 = frontier_phi_71_pred_4;
                _2942 = frontier_phi_71_pred_5;
                uint _3101 = _3100 + 1u;
                if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3094 = _2942;
                    _3095 = _2944;
                    _3096 = _2946;
                    _3097 = _2948;
                    _3098 = _2950;
                    _3099 = _2952;
                    _3100 = _3101;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
        }
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.z;
        uint _2958 = (_2956 >> 8u) & 15u;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((4294967295u << _2958) & _2861) == 0u)
        {
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
        }
        else
        {
            float _3087 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
            float _3088 = _3087 * _1939;
            float _3089 = _3087 * _1940;
            float _3090 = _3087 * _1941;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2958 < ((_2956 >> 12u) & 15u))
            {
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3222 = _2941;
                float _3223 = _2943;
                float _3224 = _2945;
                float _3225 = _2947;
                float _3226 = _2949;
                float _3227 = _2951;
                uint _3228 = _2958;
                uint _3237;
                bool _3238;
                for (;;)
                {
                    _3237 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                    _3238 = _3237 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3238)
                    {
                        frontier_phi_82_pred = _3227;
                        frontier_phi_82_pred_1 = _3226;
                        frontier_phi_82_pred_2 = _3225;
                        frontier_phi_82_pred_3 = _3224;
                        frontier_phi_82_pred_4 = _3223;
                        frontier_phi_82_pred_5 = _3222;
                    }
                    else
                    {
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3443 = _3222;
                        float _3444 = _3223;
                        float _3445 = _3224;
                        float _3446 = _3225;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        uint _3449 = _3237;
                        uint _3450;
                        vec4 _3475;
                        float _3476;
                        vec4 _3491;
                        vec3 _3503;
                        vec4 _3518;
                        vec4 _3533;
                        float _3579;
                        bool _3580;
                        for (;;)
                        {
                            uint _3460 = ((_3228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3449));
                            _3450 = (_3449 + 4294967295u) & _3449;
                            uint _3462 = _3460 * 40u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3476 = _3475.w;
                            uint _3478 = (_3460 * 40u) + 4u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3460 * 40u) + 8u;
                            _3503 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x));
                            uint _3505 = (_3460 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3460 * 40u) + 20u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3460 * 40u) + 24u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3554 = (_3460 * 40u) + 28u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3579 = fma(_1941, _3567.z, fma(_1940, _3567.y, _3567.x * _1939)) + _3567.w;
                            _3580 = !((fma(_1941, _3548.z, fma(_1940, _3548.y, _3548.x * _1939)) + _3548.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3580)
                            {
                                float _3607 = _3475.x - _1939;
                                float _3608 = _3475.y - _1940;
                                float _3609 = _3475.z - _1941;
                                float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                                float _3613 = inversesqrt(_3610);
                                float _3614 = _3613 * _3607;
                                float _3615 = _3613 * _3608;
                                float _3616 = _3613 * _3609;
                                float _3620 = 1.0 - (_3610 / (_3476 * _3476));
                                float _4820 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3625 = sqrt(_3610) * _3491.w;
                                float _3627 = 1.39999997615814208984375 / (_3625 + 1.39999997615814208984375);
                                float _3628 = _3627 * _3627;
                                float _3631 = ((1.0 - _3628) * dot(vec3(_3614, _3615, _3616), vec3(_793, _796, _799))) + _3628;
                                float _3634 = _3625 * _3625;
                                float _3638 = (fma(_1941, _3518.z, fma(_1940, _3518.y, _3518.x * _1939)) + _3518.w) / _3579;
                                float _3639 = (fma(_1941, _3533.z, fma(_1940, _3533.y, _3533.x * _1939)) + _3533.w) / _3579;
                                float _3643 = 1.0 - dot(vec2(_3638, _3639), vec2(_3638, _3639));
                                float _4836 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3645 = _3644 * (((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3621) / ((_3634 * 0.699999988079071044921875) + 1.0));
                                float _3657 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                                float _3658 = 1.0 - _853;
                                float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                                float _3666 = _3665 * _3665;
                                float _3667 = _3666 * _3666;
                                float _3668 = _3614 - _3088;
                                float _3669 = _3615 - _3089;
                                float _3670 = _3616 - _3090;
                                float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                                float _3678 = dot(vec3(_793, _796, _799), vec3((-0.0) - _3088, (-0.0) - _3089, (-0.0) - _3090));
                                float _4847 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3682 = dot(vec3(_793, _796, _799), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                                float _4858 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                                float _3690 = _3627 * _3666;
                                float _3691 = _3690 * _3690;
                                float _3697 = ((1.0 - _3691) * dot(vec3(_793, _796, _799), vec3(_3614, _3615, _3616))) + _3691;
                                float _4869 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3699 = 1.0 - _3666;
                                float _3709 = (0.5 / (((_3698 * ((_3681 * _3699) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3666) * _3681))) * _3698;
                                float _4880 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3719 = (_3644 * _3621) * (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3689 * _3689) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3645 * _3491.z;
                                frontier_phi_88_pred_1 = _3645 * _3491.y;
                                frontier_phi_88_pred_2 = _3645 * _3491.x;
                                frontier_phi_88_pred_3 = _3719 * _3503.z;
                                frontier_phi_88_pred_4 = _3719 * _3503.y;
                                frontier_phi_88_pred_5 = _3719 * _3503.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3728 = frontier_phi_88_pred;
                            _3727 = frontier_phi_88_pred_1;
                            _3726 = frontier_phi_88_pred_2;
                            _3725 = frontier_phi_88_pred_3;
                            _3724 = frontier_phi_88_pred_4;
                            _3723 = frontier_phi_88_pred_5;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            if (_3450 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3450;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3435;
                        frontier_phi_82_pred_1 = _3434;
                        frontier_phi_82_pred_2 = _3433;
                        frontier_phi_82_pred_3 = _3432;
                        frontier_phi_82_pred_4 = _3431;
                        frontier_phi_82_pred_5 = _3430;
                    }
                    _3073 = frontier_phi_82_pred;
                    _3071 = frontier_phi_82_pred_1;
                    _3069 = frontier_phi_82_pred_2;
                    _3067 = frontier_phi_82_pred_3;
                    _3065 = frontier_phi_82_pred_4;
                    _3063 = frontier_phi_82_pred_5;
                    uint _3229 = _3228 + 1u;
                    if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3222 = _3063;
                        _3223 = _3065;
                        _3224 = _3067;
                        _3225 = _3069;
                        _3226 = _3071;
                        _3227 = _3073;
                        _3228 = _3229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3069;
                frontier_phi_63_64_ladder_1 = _3073;
                frontier_phi_63_64_ladder_2 = _3071;
                frontier_phi_63_64_ladder_3 = _3067;
                frontier_phi_63_64_ladder_4 = _3065;
                frontier_phi_63_64_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_63_64_ladder = _2947;
                frontier_phi_63_64_ladder_1 = _2951;
                frontier_phi_63_64_ladder_2 = _2949;
                frontier_phi_63_64_ladder_3 = _2945;
                frontier_phi_63_64_ladder_4 = _2943;
                frontier_phi_63_64_ladder_5 = _2941;
            }
            _3062 = frontier_phi_63_64_ladder_5;
            _3064 = frontier_phi_63_64_ladder_4;
            _3066 = frontier_phi_63_64_ladder_3;
            _3068 = frontier_phi_63_64_ladder;
            _3070 = frontier_phi_63_64_ladder_2;
            _3072 = frontier_phi_63_64_ladder_1;
        }
        float _3077 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2874 = (_3077 * _3068) + _2405;
        _2876 = (_3077 * _3070) + _2407;
        _2878 = (_3077 * _3072) + _2409;
        _2880 = ((_3062 * 0.039999999105930328369140625) * _3077) + _2728;
        _2882 = ((_3064 * 0.039999999105930328369140625) * _3077) + _2730;
        _2884 = ((_3066 * 0.039999999105930328369140625) * _3077) + _2732;
    }
    else
    {
        _2874 = _2405;
        _2876 = _2407;
        _2878 = _2409;
        _2880 = _2728;
        _2882 = _2730;
        _2884 = _2732;
    }
    float _4896 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4907 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4918 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2901 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2874 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _837))) + ((_2880 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1673)) * cbPerFrame._m0[3u].x);
    float _2902 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2876 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _837))) + ((_2882 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1673)) * cbPerFrame._m0[3u].x);
    float _2903 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2878 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _837))) + ((_2884 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1673)) * cbPerFrame._m0[3u].x);
    uint _2904 = _268 + 6u;
    float _2912 = _774 / cbSceneParam._m0[86u].x;
    float _2913 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2929 = _2927.x;
    float _2930 = _2927.y;
    float _2931 = _2927.z;
    float _2932 = _2927.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2966 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2967 = _2966 / _695;
        float _2978 = _2967 * _747;
        float _2979 = _748 * _2967;
        float _2980 = (-0.0) - _2979;
        float _2982 = _2967 * _749;
        float _2984 = (cbSceneParam._m0[77u].w * _2980) / _2966;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2979;
        float _2992 = sqrt(((_2978 * _2978) + (_2979 * _2979)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2966)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_2980 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3123 = 1.0 / cbSceneParam._m0[80u].x;
            float _3124 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3125 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            _3179 = ((abs(_2992 / _2980) * cbSceneParam._m0[80u].y) * ((((_3134 - _3135) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))))) * _3123)) - ((exp2(_3002 * _3134) - exp2(_3002 * _3135)) * _3123))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2932);
        _3004 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2929;
        _3006 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2930;
        _3008 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2931;
        _3010 = _3190 * _2932;
    }
    else
    {
        _3004 = _2929;
        _3006 = _2930;
        _3008 = _2931;
        _3010 = _2932;
    }
    bool _3217;
    vec4 _3020;
    vec4 _3042;
    float _3044;
    float _3048;
    float _3049;
    float _3050;
    float _3051;
    bool _3061;
    for (;;)
    {
        _3020 = cbMatDynParam._m0[0u];
        float _3022 = roundEven(_3020.y);
        bool _3023 = _3022 == 3.0;
        float _3024 = log2(_3010);
        float _3031 = exp2(_3024 * cbSceneParam._m0[78u].x) * _2901;
        float _3032 = exp2(_3024 * cbSceneParam._m0[78u].y) * _2902;
        float _3033 = exp2(_3024 * cbSceneParam._m0[78u].z) * _2903;
        float _3040 = _763 + (-0.5);
        _3042 = cbMtdParam._m0[1u];
        _3044 = _3042.y * _3040;
        float _3047 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3048 = _3047 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
        _3049 = _3047 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
        _3050 = _3047 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
        _3051 = _3040 * 0.999000012874603271484375;
        _3061 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3061)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _3051) < 0.5)
            {
                _3217 = true;
                break;
            }
        }
        uint _3158 = _812 + uint(_3020.w);
        if ((cbInstanceData._m0[_3158].w < 1.0) && ((cbInstanceData._m0[_3158].w + _3051) < 0.5))
        {
            _3217 = true;
            break;
        }
        if ((_3044 + 1.0) < _3042.x)
        {
            _3217 = true;
            break;
        }
        _3217 = false;
        break;
    }
    float _3421;
    if (_3217)
    {
        discard_state = true;
        _3421 = 0.0;
    }
    else
    {
        _3421 = cbInstanceData._m0[_2904].w;
    }
    SV_Target.x = _3048;
    SV_Target.y = _3049;
    SV_Target.z = _3050;
    SV_Target.w = _3421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2904].w;
    discard_exit();
}


