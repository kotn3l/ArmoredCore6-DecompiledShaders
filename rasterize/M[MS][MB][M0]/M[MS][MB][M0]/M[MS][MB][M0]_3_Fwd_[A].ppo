#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _978;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _238 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3356 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3367 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3378 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _253 = _248 + 1u;
    uint _257 = _248 + 2u;
    float _266 = sqrt(((cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x));
    float _267 = _266 * TEXCOORD.z;
    float _268 = _266 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _267) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _268) + cbTextureTilingScale._m0[13u].w));
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _309 = _304.x * cbMtdParam._m0[9u].x;
    float _310 = _304.y * cbMtdParam._m0[9u].y;
    float _311 = _304.z * cbMtdParam._m0[9u].z;
    float _315 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _281.x) * _309;
    float _318 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _281.y) * _310;
    float _321 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _281.z) * _311;
    float _328 = ((_309 - _315) * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) + _315;
    float _329 = ((_310 - _318) * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) + _318;
    float _330 = ((_311 - _321) * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) + _321;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _267) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _268) + cbTextureTilingScale._m0[20u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _373 = _369.z;
    float _377 = (_369.x * 2.0) + (-1.0);
    float _378 = (_369.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3389 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    float _389 = _377 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_343.x * 2.0) + (-1.0)));
    float _390 = _378 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_343.y * 2.0) + (-1.0)));
    float _395 = (((_343.z - _373) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _373;
    float _397 = cbMtdParam._m0[22u].x + _369.w;
    float _400 = fma(_384, _214 * NORMAL.x, fma(_390, _221 * TANGENT.x, (_207 * _199) * _389));
    float _403 = fma(_384, _214 * NORMAL.y, fma(_390, _221 * TANGENT.y, (_207 * _200) * _389));
    float _406 = fma(_384, _214 * NORMAL.z, fma(_390, _221 * TANGENT.z, (_207 * _201) * _389));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3400 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _414 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3422 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3433 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3444 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _474);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _474);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _474);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    vec4 _498 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _500 = _498.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _657 = sqrt(((_484 * _484) + (_485 * _485)) + (_486 * _486));
        float _663 = (cbMatDynParam._m0[5u].x * _657) + cbMatDynParam._m0[5u].y;
        float _3455 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _668 = (cbMatDynParam._m0[5u].z * _657) + cbMatDynParam._m0[5u].w;
        float _3466 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) - _664)) + _664) < ((_500 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _512 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _513 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _533 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _536 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _539 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _552 = _248 + 9u;
    uint _553 = _552 + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3477 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    vec4 _573 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _512, cbSceneParam._m0[86u].y * _513));
    float _577 = ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * TEXCOORD_5.w) * _573.x;
    float _578 = dot(vec3(_411, _412, _413), vec3(_491, _492, _493));
    float _581 = _578 * 2.0;
    float _585 = (_581 * _411) - _491;
    float _586 = (_581 * _412) - _492;
    float _587 = (_581 * _413) - _493;
    float _591 = abs(dot(vec3(_491, _492, _493), vec3(_411, _412, _413)));
    float _3510 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _593 = sqrt(_414);
    float _606 = exp2((_593 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_593 * 3.0));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _977;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _702 = fma(_646, cbModelParam._m0[26u].z, fma(_642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638));
        float _706 = fma(_646, cbModelParam._m0[27u].z, fma(_642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638));
        float _710 = fma(_646, cbModelParam._m0[28u].z, fma(_642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638));
        float _735 = _638 + _411;
        float _736 = _642 + _412;
        float _737 = _646 + _413;
        float _747 = fma(_737, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735)) - _702;
        float _748 = fma(_737, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735)) - _706;
        float _749 = fma(_737, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735)) - _710;
        float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
        float _766 = ((_753 * _747) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_702 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_753 * _748) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_706 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_753 * _749) / cbModelParam._m0[34u].z) + ((((((_710 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        float _805 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_771.x + (-0.5));
        float _807 = _805 * (_771.y + (-0.5));
        float _808 = _805 * (_771.z + (-0.5));
        float _815 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_778.x + (-0.5));
        float _817 = _815 * (_778.y + (-0.5));
        float _818 = _815 * (_778.z + (-0.5));
        float _825 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_785.x + (-0.5));
        float _827 = _825 * (_785.y + (-0.5));
        float _828 = _825 * (_785.z + (-0.5));
        float _835 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_792.x + (-0.5));
        float _837 = _835 * (_792.y + (-0.5));
        float _838 = _835 * (_792.z + (-0.5));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = _806 * 0.5;
        float _843 = _816 * 0.5;
        float _844 = _826 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _859 = (dot(vec3(_411, _412, _413), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _869 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3558 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_871 + 1.0))) + _876) * _839;
        float _886 = _807 * 0.5;
        float _887 = _817 * 0.5;
        float _888 = _827 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_411, _412, _413), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3591 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_913 + 1.0))) + _918) * _840;
        float _928 = _808 * 0.5;
        float _929 = _818 * 0.5;
        float _930 = _828 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_411, _412, _413), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3624 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_955 + 1.0))) + _960) * _841;
        _977 = _808;
        _979 = _807;
        _980 = _806;
        _981 = _818;
        _982 = _817;
        _983 = _816;
        _984 = _828;
        _985 = _827;
        _986 = _826;
        _987 = _841;
        _988 = _840;
        _989 = _839;
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
    }
    else
    {
        _977 = _978;
        _979 = _978;
        _980 = _978;
        _981 = _978;
        _982 = _978;
        _983 = _978;
        _984 = _978;
        _985 = _978;
        _986 = _978;
        _987 = _978;
        _988 = _978;
        _989 = _978;
        _990 = 0.0;
        _991 = 0.0;
        _992 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_646, cbModelParam._m0[30u].z, fma(_642, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _638));
        float _1024 = fma(_646, cbModelParam._m0[31u].z, fma(_642, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _638));
        float _1028 = fma(_646, cbModelParam._m0[32u].z, fma(_642, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _638));
        float _1051 = _638 + _411;
        float _1052 = _642 + _412;
        float _1053 = _646 + _413;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_411, _412, _413), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3687 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_411, _412, _413), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3720 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_411, _412, _413), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3753 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _978;
        _1290 = _978;
        _1291 = _978;
        _1292 = _978;
        _1293 = _978;
        _1294 = _978;
        _1295 = _978;
        _1296 = _978;
        _1297 = _978;
        _1298 = _978;
        _1299 = _978;
        _1300 = _978;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _990)) + _990;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _991)) + _991;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _992)) + _992;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _585 * 0.5;
    float _1358 = _586 * 0.5;
    float _1359 = _587 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_977, _981, _984, _987));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _982, _985, _988));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_980, _983, _986, _989));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_646, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_646, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_646, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_587, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585));
        float _1489 = fma(_587, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585));
        float _1492 = fma(_587, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1520 = frontier_phi_17_15_ladder;
        }
        float _1725;
        if (_1489 > 0.0)
        {
            _1725 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1725 = frontier_phi_26_22_ladder;
        }
        float _1968;
        if (_1492 > 0.0)
        {
            _1968 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1968 = frontier_phi_38_33_ladder;
        }
        float _1970 = isnan(_1725) ? _1520 : (isnan(_1520) ? _1725 : min(_1520, _1725));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1486) + _1475;
        float _1976 = (_1971 * _1489) + _1479;
        float _1977 = (_1971 * _1492) + _1483;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_16_38_ladder = _2101.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2101.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_16_38_ladder_2;
        _1510 = frontier_phi_16_38_ladder_1;
        _1512 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_585, _586, _587), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1573 = fma(_646, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638)) + cbModelParam._m0[21u].w;
        float _1577 = fma(_646, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638)) + cbModelParam._m0[22u].w;
        float _1581 = fma(_646, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638)) + cbModelParam._m0[23u].w;
        float _1584 = fma(_587, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585));
        float _1587 = fma(_587, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585));
        float _1590 = fma(_587, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585));
        float _1730;
        if (_1584 > 0.0)
        {
            _1730 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1730 = frontier_phi_28_24_ladder;
        }
        float _1995;
        if (_1587 > 0.0)
        {
            _1995 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1995 = frontier_phi_40_35_ladder;
        }
        float _2200;
        if (_1590 > 0.0)
        {
            _2200 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2200 = frontier_phi_49_46_ladder;
        }
        float _2202 = isnan(_1995) ? _1730 : (isnan(_1730) ? _1995 : min(_1730, _1995));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1584) + _1573;
        float _2208 = (_2203 * _1587) + _1577;
        float _2209 = (_2203 * _1590) + _1581;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_25_49_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1609 = frontier_phi_25_49_ladder_2;
        _1611 = frontier_phi_25_49_ladder_1;
        _1613 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_585, _586, _587), _1517);
        _1609 = _1593.x * cbModelParam._m0[1u].z;
        _1611 = _1593.y * cbModelParam._m0[1u].z;
        _1613 = _1593.z * cbModelParam._m0[1u].z;
    }
    float _1625 = ((((1.0 - _606) * ((_593 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_606 * _593)) * _577;
    float _1626 = _1625 * ((cbModelParam._m0[1u].w * (_1609 - _1508)) + _1508);
    float _1627 = _1625 * ((cbModelParam._m0[1u].w * (_1611 - _1510)) + _1510);
    float _1628 = _1625 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1626 * cbSceneParam._m0[91u].x));
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _577 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1683 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1687 = _1649 | 1u;
    float _1698 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_411, _412, _413));
    float _1701 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_411, _412, _413));
    float _3889 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _3900 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1706 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1708 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1715 = ((cbLight._m0[_1666].x * _1672) * _1708) + ((cbLight._m0[_1676].x * _1683) * _1706);
    float _1716 = ((_1672 * cbLight._m0[_1666].y) * _1708) + ((_1683 * cbLight._m0[_1676].y) * _1706);
    float _1717 = ((_1672 * cbLight._m0[_1666].z) * _1708) + ((_1683 * cbLight._m0[_1676].z) * _1706);
    uvec4 _1722 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1724 = _1722.x == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1724)
    {
        _1735 = _1715;
        _1737 = _1716;
        _1739 = _1717;
    }
    else
    {
        uint _1743 = _1649 + 6u;
        float _1759 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3911 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1762 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1735 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1715;
        _1737 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1716;
        _1739 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1717;
    }
    bool _1742 = _1722.y == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1742)
    {
        _1780 = _1735;
        _1782 = _1737;
        _1784 = _1739;
    }
    else
    {
        uint _1939 = _1649 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3927 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1958 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1780 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1735;
        _1782 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1737;
        _1784 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1739;
    }
    uint _1787 = _1649 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _414) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1649].x + _491;
    float _1803 = cbLight._m0[_1649].y + _492;
    float _1804 = cbLight._m0[_1649].z + _493;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1649].xyz));
    float _3943 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _1816 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1817 = dot(vec3(_411, _412, _413), vec3(_1809, _1810, _1811));
    float _3965 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1809, _1810, _1811));
    float _3976 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1816 * ((_1815 * _1841) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1841) + _1801) * _1815))) * _1815;
    float _3987 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1865 = _1649 + 9u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _414) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1687].x + _491;
    float _1879 = cbLight._m0[_1687].y + _492;
    float _1880 = cbLight._m0[_1687].z + _493;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1687].xyz));
    float _3998 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1892 = dot(vec3(_411, _412, _413), vec3(_1885, _1886, _1887));
    float _4009 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1885, _1886, _1887));
    float _4020 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1877 * _1877;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1877;
    float _1924 = (0.5 / (((_1816 * ((_1891 * _1914) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1914) + _1877) * _1891))) * _1891;
    float _4031 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    float _1936 = (((_1913 * cbLight._m0[_1865].x) * _1926) * _1672) + (((_1840 * cbLight._m0[_1787].x) * _1854) * _1683);
    float _1937 = (((_1913 * cbLight._m0[_1865].y) * _1926) * _1672) + (((_1840 * cbLight._m0[_1787].y) * _1854) * _1683);
    float _1938 = (((_1913 * cbLight._m0[_1865].z) * _1926) * _1672) + (((_1840 * cbLight._m0[_1787].z) * _1854) * _1683);
    float _2000;
    float _2002;
    float _2004;
    if (_1724)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1649 + 2u;
        uint _2010 = _1649 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _414) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _491;
        float _2027 = cbLight._m0[_2006].y + _492;
        float _2028 = cbLight._m0[_2006].z + _493;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2006].xyz));
        float _4042 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2040 = dot(vec3(_411, _412, _413), vec3(_2033, _2034, _2035));
        float _4053 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _4064 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2062 = 1.0 - _2025;
        float _2072 = (0.5 / (((_1816 * ((_2039 * _2062) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2062) + _2025) * _2039))) * _2039;
        float _4075 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2000 = (((_2061 * cbLight._m0[_2010].x) * _2074) * _2075) + _1936;
        _2002 = (((_2061 * cbLight._m0[_2010].y) * _2074) * _2075) + _1937;
        _2004 = (((_2061 * cbLight._m0[_2010].z) * _2074) * _2075) + _1938;
    }
    float _2110;
    float _2112;
    float _2114;
    if (_1742)
    {
        _2110 = _2000;
        _2112 = _2002;
        _2114 = _2004;
    }
    else
    {
        uint _2121 = _1649 + 3u;
        uint _2125 = _1649 + 11u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _414) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _491;
        float _2142 = cbLight._m0[_2121].y + _492;
        float _2143 = cbLight._m0[_2121].z + _493;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2121].xyz));
        float _4091 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2155 = dot(vec3(_411, _412, _413), vec3(_2148, _2149, _2150));
        float _4102 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4113 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1816 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2177) + _2140) * _2154))) * _2154;
        float _4124 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2110 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2000;
        _2112 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2002;
        _2114 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2004;
    }
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_1647.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _513) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _512) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            uint _2572 = 0u;
            uint _2581;
            bool _2582;
            for (;;)
            {
                _2581 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                _2582 = _2581 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2582)
                {
                    frontier_phi_66_pred = _2566;
                    frontier_phi_66_pred_1 = _2571;
                    frontier_phi_66_pred_2 = _2570;
                    frontier_phi_66_pred_3 = _2569;
                    frontier_phi_66_pred_4 = _2568;
                    frontier_phi_66_pred_5 = _2567;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2581;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2572 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _2266;
                        float _2778 = _2737.y - _2267;
                        float _2779 = _2737.z - _2268;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2787 = dot(vec3(_533, _536, _539), vec3(_2784, _2785, _2786));
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _4150 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2787) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _2266;
                        float _2813 = (-0.0) - _2267;
                        float _2814 = (-0.0) - _2268;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2829 = exp2(log2(1.0 / ((_2804 * 3.5) + 5.0)) * 0.25);
                        float _2830 = 1.0 - _593;
                        float _2837 = sqrt(1.0 - ((1.0 - (_2830 * _2830)) * (1.0 - (_2829 * _2829))));
                        float _2838 = _2837 * _2837;
                        float _2839 = _2838 * _2838;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
                        float _2850 = dot(vec3(_533, _536, _539), vec3(_2819, _2820, _2821));
                        float _4166 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2854 = dot(vec3(_533, _536, _539), vec3(_2846 * _2840, _2846 * _2841, _2846 * _2842));
                        float _4177 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2861 = ((_2857 * _2857) * (_2839 + (-1.0))) + 1.0;
                        float _2862 = _2797 * _2838;
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2787) + _2863;
                        float _4188 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2868 = 1.0 - _2838;
                        float _2878 = (0.5 / (((_2867 * ((_2853 * _2868) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2867 * _2868) + _2838) * _2853))) * _2867;
                        float _4199 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2889 = (((_2839 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_2861 * _2861) * ((_2804 * 2.1991131305694580078125) + 3.141590118408203125))) * _2793;
                        _2641 = (_2808 * _2756.x) + _2714;
                        _2642 = (_2808 * _2756.y) + _2715;
                        _2643 = (_2808 * _2756.z) + _2716;
                        _2638 = (_2889 * _2773.x) + _2711;
                        _2639 = (_2889 * _2773.y) + _2712;
                        _2640 = (_2889 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_66_pred = _2638;
                    frontier_phi_66_pred_1 = _2643;
                    frontier_phi_66_pred_2 = _2642;
                    frontier_phi_66_pred_3 = _2641;
                    frontier_phi_66_pred_4 = _2640;
                    frontier_phi_66_pred_5 = _2639;
                }
                _2414 = frontier_phi_66_pred;
                _2424 = frontier_phi_66_pred_1;
                _2422 = frontier_phi_66_pred_2;
                _2420 = frontier_phi_66_pred_3;
                _2418 = frontier_phi_66_pred_4;
                _2416 = frontier_phi_66_pred_5;
                uint _2573 = _2572 + 1u;
                if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2566 = _2414;
                    _2567 = _2416;
                    _2568 = _2418;
                    _2569 = _2420;
                    _2570 = _2422;
                    _2571 = _2424;
                    _2572 = _2573;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((4294967295u << _2430) & _2312) == 0u)
        {
            _2534 = _2413;
            _2536 = _2415;
            _2538 = _2417;
            _2540 = _2419;
            _2542 = _2421;
            _2544 = _2423;
        }
        else
        {
            float _2559 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2560 = _2559 * _2266;
            float _2561 = _2559 * _2267;
            float _2562 = _2559 * _2268;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2694 = _2413;
                float _2695 = _2415;
                float _2696 = _2417;
                float _2697 = _2419;
                float _2698 = _2421;
                float _2699 = _2423;
                uint _2700 = _2430;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2710)
                    {
                        frontier_phi_77_pred = _2699;
                        frontier_phi_77_pred_1 = _2698;
                        frontier_phi_77_pred_2 = _2697;
                        frontier_phi_77_pred_3 = _2696;
                        frontier_phi_77_pred_4 = _2695;
                        frontier_phi_77_pred_5 = _2694;
                    }
                    else
                    {
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        uint _2922 = _2709;
                        uint _2923;
                        vec4 _2948;
                        float _2949;
                        vec4 _2964;
                        vec3 _2976;
                        vec4 _2991;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2933 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2922));
                            _2923 = (_2922 + 4294967295u) & _2922;
                            uint _2935 = _2933 * 40u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2949 = _2948.w;
                            uint _2951 = (_2933 * 40u) + 4u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2966 = (_2933 * 40u) + 8u;
                            _2976 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x));
                            uint _2978 = (_2933 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2993 = (_2933 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2933 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2933 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2268, _3041.z, fma(_2267, _3041.y, _3041.x * _2266)) + _3041.w;
                            _3054 = !((fma(_2268, _3022.z, fma(_2267, _3022.y, _3022.x * _2266)) + _3022.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2948.x - _2266;
                                float _3082 = _2948.y - _2267;
                                float _3083 = _2948.z - _2268;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2949 * _2949));
                                float _4210 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3099 = sqrt(_3084) * _2964.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_533, _536, _539))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2268, _2991.z, fma(_2267, _2991.y, _2991.x * _2266)) + _2991.w) / _3053;
                                float _3113 = (fma(_2268, _3006.z, fma(_2267, _3006.y, _3006.x * _2266)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4226 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _593;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2560;
                                float _3143 = _3089 - _2561;
                                float _3144 = _3090 - _2562;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_533, _536, _539), vec3((-0.0) - _2560, (-0.0) - _2561, (-0.0) - _2562));
                                float _4237 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3156 = dot(vec3(_533, _536, _539), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4248 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_533, _536, _539), vec3(_3088, _3089, _3090))) + _3165;
                                float _4259 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4270 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3119 * _2964.y;
                                frontier_phi_83_pred_1 = _3119 * _2964.x;
                                frontier_phi_83_pred_2 = _3193 * _2976.z;
                                frontier_phi_83_pred_3 = _3193 * _2976.y;
                                frontier_phi_83_pred_4 = _3193 * _2976.x;
                                frontier_phi_83_pred_5 = _3119 * _2964.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_83_pred;
                            _3200 = frontier_phi_83_pred_1;
                            _3199 = frontier_phi_83_pred_2;
                            _3198 = frontier_phi_83_pred_3;
                            _3197 = frontier_phi_83_pred_4;
                            _3202 = frontier_phi_83_pred_5;
                            _2906 = _3200 + _2919;
                            _2907 = _3201 + _2920;
                            _2908 = _3202 + _2921;
                            _2903 = _3197 + _2916;
                            _2904 = _3198 + _2917;
                            _2905 = _3199 + _2918;
                            if (_2923 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2923;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2908;
                        frontier_phi_77_pred_1 = _2907;
                        frontier_phi_77_pred_2 = _2906;
                        frontier_phi_77_pred_3 = _2905;
                        frontier_phi_77_pred_4 = _2904;
                        frontier_phi_77_pred_5 = _2903;
                    }
                    _2545 = frontier_phi_77_pred;
                    _2543 = frontier_phi_77_pred_1;
                    _2541 = frontier_phi_77_pred_2;
                    _2539 = frontier_phi_77_pred_3;
                    _2537 = frontier_phi_77_pred_4;
                    _2535 = frontier_phi_77_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2535;
                        _2695 = _2537;
                        _2696 = _2539;
                        _2697 = _2541;
                        _2698 = _2543;
                        _2699 = _2545;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2539;
                frontier_phi_58_59_ladder_1 = _2545;
                frontier_phi_58_59_ladder_2 = _2543;
                frontier_phi_58_59_ladder_3 = _2541;
                frontier_phi_58_59_ladder_4 = _2537;
                frontier_phi_58_59_ladder_5 = _2535;
            }
            else
            {
                frontier_phi_58_59_ladder = _2417;
                frontier_phi_58_59_ladder_1 = _2423;
                frontier_phi_58_59_ladder_2 = _2421;
                frontier_phi_58_59_ladder_3 = _2419;
                frontier_phi_58_59_ladder_4 = _2415;
                frontier_phi_58_59_ladder_5 = _2413;
            }
            _2534 = frontier_phi_58_59_ladder_5;
            _2536 = frontier_phi_58_59_ladder_4;
            _2538 = frontier_phi_58_59_ladder;
            _2540 = frontier_phi_58_59_ladder_3;
            _2542 = frontier_phi_58_59_ladder_2;
            _2544 = frontier_phi_58_59_ladder_1;
        }
        float _2549 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
        _2325 = (_2549 * _2540) + _1780;
        _2327 = (_2549 * _2542) + _1782;
        _2329 = (_2549 * _2544) + _1784;
        _2331 = ((_2534 * 0.039999999105930328369140625) * _2549) + _2110;
        _2333 = ((_2536 * 0.039999999105930328369140625) * _2549) + _2112;
        _2335 = ((_2538 * 0.039999999105930328369140625) * _2549) + _2114;
    }
    else
    {
        _2325 = _1780;
        _2327 = _1782;
        _2329 = _1784;
        _2331 = _2110;
        _2333 = _2112;
        _2335 = _2114;
    }
    float _4286 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4297 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4308 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _2352 = ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2325 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _577))) + ((_2331 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2327 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _577))) + ((_2333 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2354 = ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2329 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _577))) + ((_2335 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    uint _2355 = _248 + 6u;
    float _2363 = _512 / cbSceneParam._m0[86u].x;
    float _2364 = _513 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2439 = _2438 / _432;
        float _2450 = _2439 * _484;
        float _2451 = _485 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2454 = _2439 * _486;
        float _2456 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2451;
        float _2464 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2474 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2651;
        if (abs((_2452 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2651 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2474 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2595 = 1.0 / cbSceneParam._m0[80u].x;
            float _2596 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2597 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            _2651 = ((abs(_2464 / _2452) * cbSceneParam._m0[80u].y) * ((((_2606 - _2607) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))))) * _2595)) - ((exp2(_2474 * _2606) - exp2(_2474 * _2607)) * _2595))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2653 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2662 = exp2((_2651 * (-1.44269502162933349609375)) * (1.0 - _2653.w));
        float _2663 = log2(_2662);
        float _2679 = log2(_2383);
        _2476 = (exp2(_2679 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].x)) * _2653.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2478 = (exp2(_2679 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].y)) * _2653.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2480 = (exp2(_2679 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].z)) * _2653.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2482 = _2662 * _2383;
    }
    else
    {
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
        _2482 = _2383;
    }
    bool _2689;
    vec4 _2492;
    vec4 _2514;
    float _2516;
    float _2520;
    float _2521;
    float _2522;
    float _2523;
    bool _2533;
    for (;;)
    {
        _2492 = cbMatDynParam._m0[0u];
        float _2494 = roundEven(_2492.y);
        bool _2495 = _2494 == 3.0;
        float _2496 = log2(_2482);
        float _2503 = exp2(_2496 * cbSceneParam._m0[78u].x) * _2352;
        float _2504 = exp2(_2496 * cbSceneParam._m0[78u].y) * _2353;
        float _2505 = exp2(_2496 * cbSceneParam._m0[78u].z) * _2354;
        float _2512 = _500 + (-0.5);
        _2514 = cbMtdParam._m0[1u];
        _2516 = _2514.y * _2512;
        float _2519 = (_2494 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2520 = _2519 * (_2495 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2476)));
        _2521 = _2519 * (_2495 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2478)));
        _2522 = _2519 * (_2495 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2480)));
        _2523 = _2512 * 0.999000012874603271484375;
        _2533 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2533)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2523) < 0.5)
            {
                _2689 = true;
                break;
            }
        }
        uint _2630 = _552 + uint(_2492.w);
        if ((cbInstanceData._m0[_2630].w < 1.0) && ((cbInstanceData._m0[_2630].w + _2523) < 0.5))
        {
            _2689 = true;
            break;
        }
        if ((_2516 + 1.0) < _2514.x)
        {
            _2689 = true;
            break;
        }
        _2689 = false;
        break;
    }
    float _2894;
    if (_2689)
    {
        discard_state = true;
        _2894 = 0.0;
    }
    else
    {
        _2894 = cbInstanceData._m0[_2355].w;
    }
    SV_Target.x = _2520;
    SV_Target.y = _2521;
    SV_Target.z = _2522;
    SV_Target.w = _2894;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
    discard_exit();
}


