#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _3657;
float _3658;
float _3659;
float _3660;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3669 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _390) + _484;
    float _496 = ((((_463.x - _482) * _390) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _390) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3680 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _543 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _546 = ((isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : min(_543, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _555 = (_546 - ((((((_536 - _537) * cbMtdParam._m0[24u].z) + _537) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _546))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3701 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _563 = (_556 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _564 = (_556 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _565 = (_556 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _579 = _577.x;
    float _580 = 1.0 - _579;
    float _607 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_579 - _580) * cbMtdParam._m0[24u].w) + _580) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3712 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _616 = ((((cbMtdParam._m0[10u].x - _563) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _608) + _563;
    float _617 = ((((cbMtdParam._m0[10u].y - _564) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _608) + _564;
    float _618 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _565)) * _608) + _565;
    float _623 = (((_438.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    vec4 _637 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3723 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _654 = (_556 * (_637.z - _623)) + _623;
    float _657 = ((cbMtdParam._m0[23u].y - _654) * _608) + _654;
    vec4 _676 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _682 = (_676.x * 2.0) + (-1.0);
    float _683 = (_676.y * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3734 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _694 = _496 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_438.x * 2.0) + (-1.0)));
    float _695 = _497 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_438.y * 2.0) + (-1.0)));
    float _707 = (((_644 - _694) + (cbMtdParam._m0[21u].x * _694)) * _556) + _694;
    float _708 = (((_645 - _695) + (cbMtdParam._m0[21u].x * _695)) * _556) + _695;
    float _709 = (_556 * (sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) - _503)) + _503;
    float _720 = (((_682 - _707) + (_707 * cbMtdParam._m0[22u].z)) * _608) + _707;
    float _721 = (((_683 - _708) + (_708 * cbMtdParam._m0[22u].z)) * _608) + _708;
    float _722 = ((sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) - _709) * _608) + _709;
    float _724 = cbMtdParam._m0[22u].x + _516.w;
    float _727 = fma(_722, _242 * NORMAL.x, fma(_721, _249 * TANGENT.x, (_235 * _227) * _720));
    float _730 = fma(_722, _242 * NORMAL.y, fma(_721, _249 * TANGENT.y, (_235 * _228) * _720));
    float _733 = fma(_722, _242 * NORMAL.z, fma(_721, _249 * TANGENT.z, (_235 * _229) * _720));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    float _738 = _737 * _727;
    float _739 = _737 * _730;
    float _740 = _737 * _733;
    float _3745 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _741 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3767 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3778 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3789 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _980 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _986 = (cbMatDynParam._m0[5u].x * _980) + cbMatDynParam._m0[5u].y;
        float _3800 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _991 = (cbMatDynParam._m0[5u].z * _980) + cbMatDynParam._m0[5u].w;
        float _3811 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) - _987)) + _987) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_740, cbSceneParam._m0[5u].z, fma(_739, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _738));
    float _859 = fma(_740, cbSceneParam._m0[6u].z, fma(_739, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _738));
    float _862 = fma(_740, cbSceneParam._m0[7u].z, fma(_739, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _738));
    uint _875 = _255 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3822 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _900 = ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * TEXCOORD_5.w) * _896.x;
    float _901 = dot(vec3(_738, _739, _740), vec3(_817, _818, _819));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _738) - _817;
    float _909 = (_904 * _739) - _818;
    float _910 = (_904 * _740) - _819;
    float _914 = abs(dot(vec3(_817, _818, _819), vec3(_738, _739, _740)));
    float _3855 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_741);
    float _929 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1027 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1031 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1056 = _961 + _738;
        float _1057 = _965 + _739;
        float _1058 = _969 + _740;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_738, _739, _740), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3903 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_738, _739, _740), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3936 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_738, _739, _740), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3969 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1345 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1349 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1372 = _961 + _738;
        float _1373 = _965 + _739;
        float _1374 = _969 + _740;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_738, _739, _740), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4032 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_738, _739, _740), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4065 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_738, _739, _740), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4098 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1311)) + _1311;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1312)) + _1312;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _908 * 0.5;
    float _1679 = _909 * 0.5;
    float _1680 = _910 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1794 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1798 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1802 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1805 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1808 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1811 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1839;
        if (_1805 > 0.0)
        {
            _1839 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1839 = frontier_phi_17_15_ladder;
        }
        float _2039;
        if (_1808 > 0.0)
        {
            _2039 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2039 = frontier_phi_26_22_ladder;
        }
        float _2282;
        if (_1811 > 0.0)
        {
            _2282 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2282 = frontier_phi_38_33_ladder;
        }
        float _2284 = isnan(_2039) ? _1839 : (isnan(_1839) ? _2039 : min(_1839, _2039));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1805) + _1794;
        float _2290 = (_2285 * _1808) + _1798;
        float _2291 = (_2285 * _1811) + _1802;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_16_38_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1827 = frontier_phi_16_38_ladder_2;
        _1829 = frontier_phi_16_38_ladder_1;
        _1831 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1747);
        _1827 = _1815.x * cbModelParam._m0[1u].y;
        _1829 = _1815.y * cbModelParam._m0[1u].y;
        _1831 = _1815.z * cbModelParam._m0[1u].y;
    }
    float _1835 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1835 : min(cbModelParam._m0[25u].w, _1835));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1903 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1906 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2044;
        if (_1900 > 0.0)
        {
            _2044 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2044 = frontier_phi_28_24_ladder;
        }
        float _2309;
        if (_1903 > 0.0)
        {
            _2309 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2309 = frontier_phi_40_35_ladder;
        }
        float _2514;
        if (_1906 > 0.0)
        {
            _2514 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2514 = frontier_phi_49_46_ladder;
        }
        float _2516 = isnan(_2309) ? _2044 : (isnan(_2044) ? _2309 : min(_2044, _2309));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1900) + _1889;
        float _2522 = (_2517 * _1903) + _1893;
        float _2523 = (_2517 * _1906) + _1897;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1836);
            frontier_phi_25_49_ladder = _2722.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2722.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2722.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_25_49_ladder_2;
        _1927 = frontier_phi_25_49_ladder_1;
        _1929 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1836);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1941 = ((((1.0 - _929) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_929 * _916)) * _900;
    float _1942 = _1941 * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1943 = _1941 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1944 = _1941 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    uvec4 _1963 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1965 = _1963.x * 14u;
    uint _1966 = _1965 + 13u;
    float _1973 = _900 + (-1.0);
    float _1978 = (cbLight._m0[_1966].x * _1973) + 1.0;
    float _1979 = (cbLight._m0[_1966].y * _1973) + 1.0;
    float _1980 = (cbLight._m0[_1966].z * _1973) + 1.0;
    float _1981 = (cbLight._m0[_1966].w * _1973) + 1.0;
    uint _1982 = _1965 + 5u;
    float _1988 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _1992 = _1965 + 4u;
    float _1998 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _2002 = _1965 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_738, _739, _740));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_738, _739, _740));
    float _4234 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4245 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1982].x * _1988) * _2023) + ((cbLight._m0[_1992].x * _1998) * _2021);
    float _2031 = ((_1988 * cbLight._m0[_1982].y) * _2023) + ((_1998 * cbLight._m0[_1992].y) * _2021);
    float _2032 = ((_1988 * cbLight._m0[_1982].z) * _2023) + ((_1998 * cbLight._m0[_1992].z) * _2021);
    uvec4 _2036 = floatBitsToUint(cbLight._m0[_1965 + 12u]);
    bool _2038 = _2036.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2038)
    {
        _2049 = _2030;
        _2051 = _2031;
        _2053 = _2032;
    }
    else
    {
        uint _2057 = _1965 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1965 + 2u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4256 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2076 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _2030;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _2031;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _2032;
    }
    bool _2056 = _2036.y == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2056)
    {
        _2094 = _2049;
        _2096 = _2051;
        _2098 = _2053;
    }
    else
    {
        uint _2253 = _1965 + 7u;
        float _2269 = (dot(vec3(cbLight._m0[_1965 + 3u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4272 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2272 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2094 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2049;
        _2096 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2051;
        _2098 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2053;
    }
    uint _2101 = _1965 + 8u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _741) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1965].x + _817;
    float _2117 = cbLight._m0[_1965].y + _818;
    float _2118 = cbLight._m0[_1965].z + _819;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_1965].xyz));
    float _4288 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2130 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2131 = dot(vec3(_738, _739, _740), vec3(_2123, _2124, _2125));
    float _4310 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2123, _2124, _2125));
    float _4321 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2115 * _2115;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2130 * ((_2129 * _2155) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2155) + _2115) * _2129))) * _2129;
    float _4332 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    uint _2179 = _1965 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _741) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2002].x + _817;
    float _2193 = cbLight._m0[_2002].y + _818;
    float _2194 = cbLight._m0[_2002].z + _819;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2002].xyz));
    float _4343 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2206 = dot(vec3(_738, _739, _740), vec3(_2199, _2200, _2201));
    float _4354 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2199, _2200, _2201));
    float _4365 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2191;
    float _2238 = (0.5 / (((_2130 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2228) + _2191) * _2205))) * _2205;
    float _4376 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2250 = (((_2227 * cbLight._m0[_2179].x) * _2240) * _1988) + (((_2154 * cbLight._m0[_2101].x) * _2168) * _1998);
    float _2251 = (((_2227 * cbLight._m0[_2179].y) * _2240) * _1988) + (((_2154 * cbLight._m0[_2101].y) * _2168) * _1998);
    float _2252 = (((_2227 * cbLight._m0[_2179].z) * _2240) * _1988) + (((_2154 * cbLight._m0[_2101].z) * _2168) * _1998);
    float _2314;
    float _2316;
    float _2318;
    if (_2038)
    {
        _2314 = _2250;
        _2316 = _2251;
        _2318 = _2252;
    }
    else
    {
        uint _2320 = _1965 + 2u;
        uint _2324 = _1965 + 10u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _741) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _817;
        float _2341 = cbLight._m0[_2320].y + _818;
        float _2342 = cbLight._m0[_2320].z + _819;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2320].xyz));
        float _4387 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2354 = dot(vec3(_738, _739, _740), vec3(_2347, _2348, _2349));
        float _4398 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4409 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2376 = 1.0 - _2339;
        float _2386 = (0.5 / (((_2130 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2376) + _2339) * _2353))) * _2353;
        float _4420 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2314 = (((_2375 * cbLight._m0[_2324].x) * _2388) * _2389) + _2250;
        _2316 = (((_2375 * cbLight._m0[_2324].y) * _2388) * _2389) + _2251;
        _2318 = (((_2375 * cbLight._m0[_2324].z) * _2388) * _2389) + _2252;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2056)
    {
        _2424 = _2314;
        _2426 = _2316;
        _2428 = _2318;
    }
    else
    {
        uint _2435 = _1965 + 3u;
        uint _2439 = _1965 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _741) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _817;
        float _2456 = cbLight._m0[_2435].y + _818;
        float _2457 = cbLight._m0[_2435].z + _819;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2435].xyz));
        float _4436 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2469 = dot(vec3(_738, _739, _740), vec3(_2462, _2463, _2464));
        float _4447 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4458 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2490 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2491 = 1.0 - _2454;
        float _2501 = (0.5 / (((_2130 * ((_2468 * _2491) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2491) + _2454) * _2468))) * _2468;
        float _4469 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2424 = (((_2490 * cbLight._m0[_2439].x) * _2503) * _2504) + _2314;
        _2426 = (((_2490 * cbLight._m0[_2439].y) * _2503) * _2504) + _2316;
        _2428 = (((_2490 * cbLight._m0[_2439].z) * _2503) * _2504) + _2318;
    }
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_1963.y == 0u)
    {
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2579;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2579;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2579;
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.x;
        uint _2606 = uint((float(_2594.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2595))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2595)));
        float _2616 = (log2(_2582 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2617 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        uint _2620 = uint(isnan(14.0) ? _2617 : (isnan(_2617) ? 14.0 : min(_2617, 14.0)));
        uvec4 _2625 = texelFetch(g_lightClusterGridBuffer, int(((_2620 << 2u) + (_2606 << 6u)) >> 2u));
        uint _2626 = _2625.x;
        uint _2627 = _2594.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2627 >> 4u) & 15u)) + 4294967295u) & _2626) == 0u) || ((_2627 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2896)
                {
                    frontier_phi_66_pred = _2880;
                    frontier_phi_66_pred_1 = _2885;
                    frontier_phi_66_pred_2 = _2884;
                    frontier_phi_66_pred_3 = _2883;
                    frontier_phi_66_pred_4 = _2882;
                    frontier_phi_66_pred_5 = _2881;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2895;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2886 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _2580;
                        float _3092 = _3051.y - _2581;
                        float _3093 = _3051.z - _2582;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_856, _859, _862), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4495 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _2580;
                        float _3127 = (-0.0) - _2581;
                        float _3128 = (-0.0) - _2582;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3143 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3144 = 1.0 - _916;
                        float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                        float _3152 = _3151 * _3151;
                        float _3153 = _3152 * _3152;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3164 = dot(vec3(_856, _859, _862), vec3(_3133, _3134, _3135));
                        float _4511 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3168 = dot(vec3(_856, _859, _862), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                        float _4522 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                        float _3176 = _3111 * _3152;
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3101) + _3177;
                        float _4533 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3182 = 1.0 - _3152;
                        float _3192 = (0.5 / (((_3181 * ((_3167 * _3182) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3152) * _3167))) * _3181;
                        float _4544 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3203 = (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3175 * _3175) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2955 = (_3122 * _3070.x) + _3028;
                        _2956 = (_3122 * _3070.y) + _3029;
                        _2957 = (_3122 * _3070.z) + _3030;
                        _2952 = (_3203 * _3087.x) + _3025;
                        _2953 = (_3203 * _3087.y) + _3026;
                        _2954 = (_3203 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_66_pred = _2952;
                    frontier_phi_66_pred_1 = _2957;
                    frontier_phi_66_pred_2 = _2956;
                    frontier_phi_66_pred_3 = _2955;
                    frontier_phi_66_pred_4 = _2954;
                    frontier_phi_66_pred_5 = _2953;
                }
                _2728 = frontier_phi_66_pred;
                _2738 = frontier_phi_66_pred_1;
                _2736 = frontier_phi_66_pred_2;
                _2734 = frontier_phi_66_pred_3;
                _2732 = frontier_phi_66_pred_4;
                _2730 = frontier_phi_66_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2728;
                    _2881 = _2730;
                    _2882 = _2732;
                    _2883 = _2734;
                    _2884 = _2736;
                    _2885 = _2738;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2744) & _2626) == 0u)
        {
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
            float _2874 = _2873 * _2580;
            float _2875 = _2873 * _2581;
            float _2876 = _2873 * _2582;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _3008 = _2727;
                float _3009 = _2729;
                float _3010 = _2731;
                float _3011 = _2733;
                float _3012 = _2735;
                float _3013 = _2737;
                uint _3014 = _2744;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3024)
                    {
                        frontier_phi_77_pred = _3013;
                        frontier_phi_77_pred_1 = _3012;
                        frontier_phi_77_pred_2 = _3011;
                        frontier_phi_77_pred_3 = _3010;
                        frontier_phi_77_pred_4 = _3009;
                        frontier_phi_77_pred_5 = _3008;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        uint _3236 = _3023;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        vec3 _3290;
                        vec4 _3305;
                        vec4 _3320;
                        float _3366;
                        bool _3367;
                        for (;;)
                        {
                            uint _3247 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3247 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3292 = (_3247 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3247 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3247 * 40u) + 24u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3341 = (_3247 * 40u) + 28u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3366 = fma(_2582, _3354.z, fma(_2581, _3354.y, _3354.x * _2580)) + _3354.w;
                            _3367 = !((fma(_2582, _3335.z, fma(_2581, _3335.y, _3335.x * _2580)) + _3335.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3367)
                            {
                                float _3394 = _3262.x - _2580;
                                float _3395 = _3262.y - _2581;
                                float _3396 = _3262.z - _2582;
                                float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                                float _3400 = inversesqrt(_3397);
                                float _3401 = _3400 * _3394;
                                float _3402 = _3400 * _3395;
                                float _3403 = _3400 * _3396;
                                float _3407 = 1.0 - (_3397 / (_3263 * _3263));
                                float _4555 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3412 = sqrt(_3397) * _3278.w;
                                float _3414 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                                float _3415 = _3414 * _3414;
                                float _3418 = ((1.0 - _3415) * dot(vec3(_3401, _3402, _3403), vec3(_856, _859, _862))) + _3415;
                                float _3421 = _3412 * _3412;
                                float _3425 = (fma(_2582, _3305.z, fma(_2581, _3305.y, _3305.x * _2580)) + _3305.w) / _3366;
                                float _3426 = (fma(_2582, _3320.z, fma(_2581, _3320.y, _3320.x * _2580)) + _3320.w) / _3366;
                                float _3430 = 1.0 - dot(vec2(_3425, _3426), vec2(_3425, _3426));
                                float _4571 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3432 = _3431 * (((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3408) / ((_3421 * 0.699999988079071044921875) + 1.0));
                                float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                                float _3445 = 1.0 - _916;
                                float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                                float _3453 = _3452 * _3452;
                                float _3454 = _3453 * _3453;
                                float _3455 = _3401 - _2874;
                                float _3456 = _3402 - _2875;
                                float _3457 = _3403 - _2876;
                                float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                                float _3465 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4582 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3469 = dot(vec3(_856, _859, _862), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                                float _4593 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                                float _3477 = _3414 * _3453;
                                float _3478 = _3477 * _3477;
                                float _3484 = ((1.0 - _3478) * dot(vec3(_856, _859, _862), vec3(_3401, _3402, _3403))) + _3478;
                                float _4604 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3486 = 1.0 - _3453;
                                float _3496 = (0.5 / (((_3485 * ((_3468 * _3486) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3453) * _3468))) * _3485;
                                float _4615 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3506 = (_3431 * _3408) * (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3432 * _3278.y;
                                frontier_phi_83_pred_1 = _3432 * _3278.x;
                                frontier_phi_83_pred_2 = _3506 * _3290.z;
                                frontier_phi_83_pred_3 = _3506 * _3290.y;
                                frontier_phi_83_pred_4 = _3506 * _3290.x;
                                frontier_phi_83_pred_5 = _3432 * _3278.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3514 = frontier_phi_83_pred;
                            _3513 = frontier_phi_83_pred_1;
                            _3512 = frontier_phi_83_pred_2;
                            _3511 = frontier_phi_83_pred_3;
                            _3510 = frontier_phi_83_pred_4;
                            _3515 = frontier_phi_83_pred_5;
                            _3220 = _3513 + _3233;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3222;
                        frontier_phi_77_pred_1 = _3221;
                        frontier_phi_77_pred_2 = _3220;
                        frontier_phi_77_pred_3 = _3219;
                        frontier_phi_77_pred_4 = _3218;
                        frontier_phi_77_pred_5 = _3217;
                    }
                    _2859 = frontier_phi_77_pred;
                    _2857 = frontier_phi_77_pred_1;
                    _2855 = frontier_phi_77_pred_2;
                    _2853 = frontier_phi_77_pred_3;
                    _2851 = frontier_phi_77_pred_4;
                    _2849 = frontier_phi_77_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2849;
                        _3009 = _2851;
                        _3010 = _2853;
                        _3011 = _2855;
                        _3012 = _2857;
                        _3013 = _2859;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2853;
                frontier_phi_58_59_ladder_1 = _2859;
                frontier_phi_58_59_ladder_2 = _2857;
                frontier_phi_58_59_ladder_3 = _2855;
                frontier_phi_58_59_ladder_4 = _2851;
                frontier_phi_58_59_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_58_59_ladder = _2731;
                frontier_phi_58_59_ladder_1 = _2737;
                frontier_phi_58_59_ladder_2 = _2735;
                frontier_phi_58_59_ladder_3 = _2733;
                frontier_phi_58_59_ladder_4 = _2729;
                frontier_phi_58_59_ladder_5 = _2727;
            }
            _2848 = frontier_phi_58_59_ladder_5;
            _2850 = frontier_phi_58_59_ladder_4;
            _2852 = frontier_phi_58_59_ladder;
            _2854 = frontier_phi_58_59_ladder_3;
            _2856 = frontier_phi_58_59_ladder_2;
            _2858 = frontier_phi_58_59_ladder_1;
        }
        float _2863 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2639 = (_2863 * _2854) + _2094;
        _2641 = (_2863 * _2856) + _2096;
        _2643 = (_2863 * _2858) + _2098;
        _2645 = ((_2848 * 0.039999999105930328369140625) * _2863) + _2424;
        _2647 = ((_2850 * 0.039999999105930328369140625) * _2863) + _2426;
        _2649 = ((_2852 * 0.039999999105930328369140625) * _2863) + _2428;
    }
    else
    {
        _2639 = _2094;
        _2641 = _2096;
        _2643 = _2098;
        _2645 = _2424;
        _2647 = _2426;
        _2649 = _2428;
    }
    float _4631 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4642 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4653 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2666 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2639 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _900))) + ((_2645 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2667 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2641 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _900))) + ((_2647 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2643 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _900))) + ((_2649 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    uint _2669 = _255 + 6u;
    float _2677 = _837 / cbSceneParam._m0[86u].x;
    float _2678 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2692 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2694 = _2692.x;
    float _2695 = _2692.y;
    float _2696 = _2692.z;
    float _2697 = _2692.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2753 = _2752 / _759;
        float _2764 = _2753 * _810;
        float _2765 = _811 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2768 = _2753 * _812;
        float _2770 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2765;
        float _2778 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2766 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2911 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2965 = ((abs(_2778 / _2766) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2788 * _2920) - exp2(_2788 * _2921)) * _2909))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2697);
        _2790 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2694;
        _2792 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2695;
        _2794 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2696;
        _2796 = _2976 * _2697;
    }
    else
    {
        _2790 = _2694;
        _2792 = _2695;
        _2794 = _2696;
        _2796 = _2697;
    }
    bool _3003;
    vec4 _2806;
    vec4 _2828;
    float _2830;
    float _2834;
    float _2835;
    float _2836;
    float _2837;
    bool _2847;
    for (;;)
    {
        _2806 = cbMatDynParam._m0[0u];
        float _2808 = roundEven(_2806.y);
        bool _2809 = _2808 == 3.0;
        float _2810 = log2(_2796);
        float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * _2666;
        float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * _2667;
        float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * _2668;
        float _2826 = _826 + (-0.5);
        _2828 = cbMtdParam._m0[1u];
        _2830 = _2828.y * _2826;
        float _2833 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2834 = _2833 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
        _2835 = _2833 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
        _2836 = _2833 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
        _2837 = _2826 * 0.999000012874603271484375;
        _2847 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2847)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2837) < 0.5)
            {
                _3003 = true;
                break;
            }
        }
        uint _2944 = _875 + uint(_2806.w);
        if ((cbInstanceData._m0[_2944].w < 1.0) && ((cbInstanceData._m0[_2944].w + _2837) < 0.5))
        {
            _3003 = true;
            break;
        }
        if ((_2830 + 1.0) < _2828.x)
        {
            _3003 = true;
            break;
        }
        _3003 = false;
        break;
    }
    float _3208;
    if (_3003)
    {
        discard_state = true;
        _3208 = 0.0;
    }
    else
    {
        _3208 = cbInstanceData._m0[_2669].w;
    }
    SV_Target.x = _2834;
    SV_Target.y = _2835;
    SV_Target.z = _2836;
    SV_Target.w = _3208;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2669].w;
    discard_exit();
}


