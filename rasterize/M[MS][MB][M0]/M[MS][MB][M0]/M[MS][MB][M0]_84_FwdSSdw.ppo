#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1094;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3425 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _423 = ((_393.z - _414) * _366) + _414;
    float _426 = ((((_393.x - _412) * _366) + _412) * 2.0) + (-1.0);
    float _428 = ((((_393.y - _413) * _366) + _413) * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3436 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _477 = _475.x;
    float _478 = 1.0 - _477;
    float _491 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_477 - _478) * cbMtdParam._m0[24u].z) + _478) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3447 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _499 = (_492 * (cbMtdParam._m0[17u].x - _373)) + _373;
    float _500 = (_492 * (cbMtdParam._m0[17u].y - _374)) + _374;
    float _501 = (_492 * (cbMtdParam._m0[17u].z - _375)) + _375;
    float _505 = (cbMtdParam._m0[19u].w * (_450.z - _423)) + _423;
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3458 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _535 = (_492 * (_518.z - _505)) + _505;
    float _538 = (((_450.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _426;
    float _539 = (((_450.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _428;
    float _551 = (((_525 - _538) + (cbMtdParam._m0[21u].x * _538)) * _492) + _538;
    float _552 = (((_526 - _539) + (cbMtdParam._m0[21u].x * _539)) * _492) + _539;
    float _553 = (_492 * (sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) - _434)) + _434;
    float _558 = cbMtdParam._m0[22u].x + _450.w;
    float _561 = fma(_553, _217 * NORMAL.x, fma(_552, _224 * TANGENT.x, (_210 * _202) * _551));
    float _564 = fma(_553, _217 * NORMAL.y, fma(_552, _224 * TANGENT.y, (_210 * _203) * _551));
    float _567 = fma(_553, _217 * NORMAL.z, fma(_552, _224 * TANGENT.z, (_210 * _204) * _551));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3469 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _575 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3491 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3502 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3513 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _682 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _685 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _699 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _705 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_699].x;
    float _706 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_699].y;
    float _707 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_699].z;
    float _3524 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    vec4 _719 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _723 = ((isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * TEXCOORD_5.w) * _719.x;
    float _724 = dot(vec3(_572, _573, _574), vec3(_652, _653, _654));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _572) - _652;
    float _732 = (_727 * _573) - _653;
    float _733 = (_727 * _574) - _654;
    float _737 = abs(dot(vec3(_652, _653, _654), vec3(_572, _573, _574)));
    float _3557 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_575);
    float _752 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _822 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _826 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _851 = _784 + _572;
        float _852 = _788 + _573;
        float _853 = _792 + _574;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_572, _573, _574), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3605 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_572, _573, _574), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3638 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_572, _573, _574), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3671 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1137 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1141 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1164 = _784 + _572;
        float _1165 = _788 + _573;
        float _1166 = _792 + _574;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_572, _573, _574), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3734 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_572, _573, _574), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3767 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_572, _573, _574), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3800 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1094;
        _1403 = _1094;
        _1404 = _1094;
        _1405 = _1094;
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _731 * 0.5;
    float _1471 = _732 * 0.5;
    float _1472 = _733 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1601 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1604 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1632 = frontier_phi_14_12_ladder;
        }
        float _1854;
        if (_1601 > 0.0)
        {
            _1854 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1854 = frontier_phi_23_19_ladder;
        }
        float _2100;
        if (_1604 > 0.0)
        {
            _2100 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2100 = frontier_phi_35_30_ladder;
        }
        float _2102 = isnan(_1854) ? _1632 : (isnan(_1632) ? _1854 : min(_1632, _1854));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1598) + _1587;
        float _2108 = (_2103 * _1601) + _1591;
        float _2109 = (_2103 * _1604) + _1595;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_13_35_ladder = _2233.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2233.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2233.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_13_35_ladder_2;
        _1622 = frontier_phi_13_35_ladder_1;
        _1624 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1539);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1697 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1700 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1859;
        if (_1694 > 0.0)
        {
            _1859 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1859 = frontier_phi_25_21_ladder;
        }
        float _2127;
        if (_1697 > 0.0)
        {
            _2127 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2127 = frontier_phi_37_32_ladder;
        }
        float _2332;
        if (_1700 > 0.0)
        {
            _2332 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2332 = frontier_phi_46_43_ladder;
        }
        float _2334 = isnan(_2127) ? _1859 : (isnan(_1859) ? _2127 : min(_1859, _2127));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1694) + _1683;
        float _2340 = (_2335 * _1697) + _1687;
        float _2341 = (_2335 * _1700) + _1691;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_22_46_ladder = _2540.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2540.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2540.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_22_46_ladder_2;
        _1721 = frontier_phi_22_46_ladder_1;
        _1723 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1629);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _752) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_752 * _739)) * _723;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1620)) + _1620);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1622)) + _1622);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1624)) + _1624);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    vec4 _1755 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1757 = _1755.w;
    float _1769 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1757);
    float _1770 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1757);
    float _1771 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1757);
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _723 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1813 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1817 = _1777 | 1u;
    float _1828 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_572, _573, _574));
    float _1831 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_572, _573, _574));
    float _3936 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _3947 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1836 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1838 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1845 = ((cbLight._m0[_1794].x * _1800) * _1838) + (((cbLight._m0[_1804].x * _1769) * _1813) * _1836);
    float _1846 = ((_1800 * cbLight._m0[_1794].y) * _1838) + (((cbLight._m0[_1804].y * _1770) * _1813) * _1836);
    float _1847 = ((_1800 * cbLight._m0[_1794].z) * _1838) + (((cbLight._m0[_1804].z * _1771) * _1813) * _1836);
    uvec4 _1851 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1853 = _1851.x == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1853)
    {
        _1864 = _1845;
        _1866 = _1846;
        _1868 = _1847;
    }
    else
    {
        uint _1872 = _1777 + 6u;
        float _1888 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _3958 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1891 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1864 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1845;
        _1866 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1846;
        _1868 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1847;
    }
    bool _1871 = _1851.y == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1871)
    {
        _1909 = _1864;
        _1911 = _1866;
        _1913 = _1868;
    }
    else
    {
        uint _2071 = _1777 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _3974 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2090 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1909 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1864;
        _1911 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1866;
        _1913 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1868;
    }
    uint _1916 = _1777 + 8u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _575) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1777].x + _652;
    float _1932 = cbLight._m0[_1777].y + _653;
    float _1933 = cbLight._m0[_1777].z + _654;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1777].xyz));
    float _3990 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _1945 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1946 = dot(vec3(_572, _573, _574), vec3(_1938, _1939, _1940));
    float _4012 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1938, _1939, _1940));
    float _4023 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1954 = _1930 * _1930;
    float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1930;
    float _1981 = (0.5 / (((_1945 * ((_1944 * _1970) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _1970) + _1930) * _1944))) * _1944;
    float _4034 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
    uint _1997 = _1777 + 9u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _575) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1817].x + _652;
    float _2011 = cbLight._m0[_1817].y + _653;
    float _2012 = cbLight._m0[_1817].z + _654;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1817].xyz));
    float _4045 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2024 = dot(vec3(_572, _573, _574), vec3(_2017, _2018, _2019));
    float _4056 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_2017, _2018, _2019));
    float _4067 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2009 * _2009;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2009;
    float _2056 = (0.5 / (((_1945 * ((_2023 * _2046) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2046) + _2009) * _2023))) * _2023;
    float _4078 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    float _2068 = (((_2045 * cbLight._m0[_1997].x) * _2058) * _1800) + ((((cbLight._m0[_1916].x * _1769) * _1969) * _1983) * _1813);
    float _2069 = (((_2045 * cbLight._m0[_1997].y) * _2058) * _1800) + ((((cbLight._m0[_1916].y * _1770) * _1969) * _1983) * _1813);
    float _2070 = (((_2045 * cbLight._m0[_1997].z) * _2058) * _1800) + ((((cbLight._m0[_1916].z * _1771) * _1969) * _1983) * _1813);
    float _2132;
    float _2134;
    float _2136;
    if (_1853)
    {
        _2132 = _2068;
        _2134 = _2069;
        _2136 = _2070;
    }
    else
    {
        uint _2138 = _1777 + 2u;
        uint _2142 = _1777 + 10u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _575) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _652;
        float _2159 = cbLight._m0[_2138].y + _653;
        float _2160 = cbLight._m0[_2138].z + _654;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2138].xyz));
        float _4089 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2172 = dot(vec3(_572, _573, _574), vec3(_2165, _2166, _2167));
        float _4100 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4111 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2194 = 1.0 - _2157;
        float _2204 = (0.5 / (((_1945 * ((_2171 * _2194) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2194) + _2157) * _2171))) * _2171;
        float _4122 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2206 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2207 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2132 = (((_2193 * cbLight._m0[_2142].x) * _2206) * _2207) + _2068;
        _2134 = (((_2193 * cbLight._m0[_2142].y) * _2206) * _2207) + _2069;
        _2136 = (((_2193 * cbLight._m0[_2142].z) * _2206) * _2207) + _2070;
    }
    float _2242;
    float _2244;
    float _2246;
    if (_1871)
    {
        _2242 = _2132;
        _2244 = _2134;
        _2246 = _2136;
    }
    else
    {
        uint _2253 = _1777 + 3u;
        uint _2257 = _1777 + 11u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _575) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _652;
        float _2274 = cbLight._m0[_2253].y + _653;
        float _2275 = cbLight._m0[_2253].z + _654;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2253].xyz));
        float _4138 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2287 = dot(vec3(_572, _573, _574), vec3(_2280, _2281, _2282));
        float _4149 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4160 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2309 = 1.0 - _2272;
        float _2319 = (0.5 / (((_1945 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2309) + _2272) * _2286))) * _2286;
        float _4171 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2242 = (((_2308 * cbLight._m0[_2257].x) * _2321) * _2322) + _2132;
        _2244 = (((_2308 * cbLight._m0[_2257].y) * _2321) * _2322) + _2134;
        _2246 = (((_2308 * cbLight._m0[_2257].z) * _2321) * _2322) + _2136;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1775.y == 0u)
    {
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2397;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2397;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2397;
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2413)));
        float _2434 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
        }
        else
        {
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            uint _2696 = 0u;
            uint _2705;
            bool _2706;
            for (;;)
            {
                _2705 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                _2706 = _2705 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2706)
                {
                    frontier_phi_61_pred = _2690;
                    frontier_phi_61_pred_1 = _2695;
                    frontier_phi_61_pred_2 = _2694;
                    frontier_phi_61_pred_3 = _2693;
                    frontier_phi_61_pred_4 = _2692;
                    frontier_phi_61_pred_5 = _2691;
                }
                else
                {
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    uint _2820;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2705;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2824 = uint(findLSB(_2820)) + (_2696 << 5u);
                        uint _2821 = (_2820 + 4294967295u) & _2820;
                        uint _2826 = _2824 * 48u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2846 = (_2824 * 48u) + 4u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2865 = (_2824 * 48u) + 8u;
                        vec3 _2876 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x));
                        float _2880 = _2840.x - _2398;
                        float _2881 = _2840.y - _2399;
                        float _2882 = _2840.z - _2400;
                        float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                        float _2886 = inversesqrt(_2883);
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2890 = dot(vec3(_679, _682, _685), vec3(_2887, _2888, _2889));
                        float _2895 = 1.0 - (_2883 * _2840.w);
                        float _4197 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2897 = sqrt(_2883) * _2859.w;
                        float _2900 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2890) + _2901;
                        float _2907 = _2897 * _2897;
                        float _2911 = ((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2896) / ((_2907 * 0.699999988079071044921875) + 1.0);
                        float _2915 = (-0.0) - _2398;
                        float _2916 = (-0.0) - _2399;
                        float _2917 = (-0.0) - _2400;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2932 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                        float _2933 = 1.0 - _739;
                        float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                        float _2941 = _2940 * _2940;
                        float _2942 = _2941 * _2941;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2953 = dot(vec3(_679, _682, _685), vec3(_2922, _2923, _2924));
                        float _4213 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2957 = dot(vec3(_679, _682, _685), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                        float _4224 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                        float _2965 = _2900 * _2941;
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2890) + _2966;
                        float _4235 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2971 = 1.0 - _2941;
                        float _2981 = (0.5 / (((_2970 * ((_2956 * _2971) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2941) * _2956))) * _2970;
                        float _4246 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2992 = (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_2964 * _2964) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125))) * _2896;
                        _2749 = (_2911 * _2859.x) + _2817;
                        _2750 = (_2911 * _2859.y) + _2818;
                        _2751 = (_2911 * _2859.z) + _2819;
                        _2746 = (_2992 * _2876.x) + _2814;
                        _2747 = (_2992 * _2876.y) + _2815;
                        _2748 = (_2992 * _2876.z) + _2816;
                        if (_2821 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2821;
                        }
                    }
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                _2546 = frontier_phi_61_pred;
                _2556 = frontier_phi_61_pred_1;
                _2554 = frontier_phi_61_pred_2;
                _2552 = frontier_phi_61_pred_3;
                _2550 = frontier_phi_61_pred_4;
                _2548 = frontier_phi_61_pred_5;
                uint _2697 = _2696 + 1u;
                if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2690 = _2546;
                    _2691 = _2548;
                    _2692 = _2550;
                    _2693 = _2552;
                    _2694 = _2554;
                    _2695 = _2556;
                    _2696 = _2697;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
        }
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.z;
        uint _2562 = (_2560 >> 8u) & 15u;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((4294967295u << _2562) & _2444) == 0u)
        {
            _2658 = _2545;
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
        }
        else
        {
            float _2683 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _2684 = _2683 * _2398;
            float _2685 = _2683 * _2399;
            float _2686 = _2683 * _2400;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2562 < ((_2560 >> 12u) & 15u))
            {
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2797 = _2545;
                float _2798 = _2547;
                float _2799 = _2549;
                float _2800 = _2551;
                float _2801 = _2553;
                float _2802 = _2555;
                uint _2803 = _2562;
                uint _2812;
                bool _2813;
                for (;;)
                {
                    _2812 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                    _2813 = _2812 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2813)
                    {
                        frontier_phi_67_pred = _2800;
                        frontier_phi_67_pred_1 = _2801;
                        frontier_phi_67_pred_2 = _2802;
                        frontier_phi_67_pred_3 = _2799;
                        frontier_phi_67_pred_4 = _2798;
                        frontier_phi_67_pred_5 = _2797;
                    }
                    else
                    {
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        uint _3016 = _2812;
                        uint _3017;
                        vec4 _3042;
                        float _3043;
                        vec4 _3058;
                        vec3 _3070;
                        vec4 _3085;
                        vec4 _3101;
                        float _3147;
                        bool _3148;
                        for (;;)
                        {
                            uint _3027 = ((_2803 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3016));
                            _3017 = (_3016 + 4294967295u) & _3016;
                            uint _3029 = _3027 * 40u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3043 = _3042.w;
                            uint _3045 = (_3027 * 40u) + 4u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_3027 * 40u) + 8u;
                            _3070 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x));
                            uint _3072 = (_3027 * 40u) + 16u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_3027 * 40u) + 20u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3027 * 40u) + 24u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3122 = (_3027 * 40u) + 28u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3147 = fma(_2400, _3135.z, fma(_2399, _3135.y, _3135.x * _2398)) + _3135.w;
                            _3148 = !((fma(_2400, _3116.z, fma(_2399, _3116.y, _3116.x * _2398)) + _3116.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3148)
                            {
                                float _3175 = _3042.x - _2398;
                                float _3176 = _3042.y - _2399;
                                float _3177 = _3042.z - _2400;
                                float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                                float _3181 = inversesqrt(_3178);
                                float _3182 = _3181 * _3175;
                                float _3183 = _3181 * _3176;
                                float _3184 = _3181 * _3177;
                                float _3188 = 1.0 - (_3178 / (_3043 * _3043));
                                float _4257 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3193 = sqrt(_3178) * _3058.w;
                                float _3195 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                                float _3196 = _3195 * _3195;
                                float _3199 = ((1.0 - _3196) * dot(vec3(_3182, _3183, _3184), vec3(_679, _682, _685))) + _3196;
                                float _3202 = _3193 * _3193;
                                float _3206 = (fma(_2400, _3085.z, fma(_2399, _3085.y, _3085.x * _2398)) + _3085.w) / _3147;
                                float _3207 = (fma(_2400, _3101.z, fma(_2399, _3101.y, _3101.x * _2398)) + _3101.w) / _3147;
                                float _3211 = 1.0 - dot(vec2(_3206, _3207), vec2(_3206, _3207));
                                float _4273 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3213 = _3212 * (((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3189) / ((_3202 * 0.699999988079071044921875) + 1.0));
                                float _3225 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                                float _3226 = 1.0 - _739;
                                float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                                float _3234 = _3233 * _3233;
                                float _3235 = _3234 * _3234;
                                float _3236 = _3182 - _2684;
                                float _3237 = _3183 - _2685;
                                float _3238 = _3184 - _2686;
                                float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                                float _3246 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2684, (-0.0) - _2685, (-0.0) - _2686));
                                float _4284 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3250 = dot(vec3(_679, _682, _685), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                                float _4295 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                                float _3258 = _3195 * _3234;
                                float _3259 = _3258 * _3258;
                                float _3265 = ((1.0 - _3259) * dot(vec3(_679, _682, _685), vec3(_3182, _3183, _3184))) + _3259;
                                float _4306 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3267 = 1.0 - _3234;
                                float _3277 = (0.5 / (((_3266 * ((_3249 * _3267) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3234) * _3249))) * _3266;
                                float _4317 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3287 = (_3212 * _3189) * (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_3257 * _3257) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3287 * _3070.x;
                                frontier_phi_73_pred_1 = _3287 * _3070.y;
                                frontier_phi_73_pred_2 = _3213 * _3058.z;
                                frontier_phi_73_pred_3 = _3213 * _3058.y;
                                frontier_phi_73_pred_4 = _3213 * _3058.x;
                                frontier_phi_73_pred_5 = _3287 * _3070.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_73_pred;
                            _3292 = frontier_phi_73_pred_1;
                            _3296 = frontier_phi_73_pred_2;
                            _3295 = frontier_phi_73_pred_3;
                            _3294 = frontier_phi_73_pred_4;
                            _3293 = frontier_phi_73_pred_5;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            if (_3017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3017;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3000;
                        frontier_phi_67_pred_1 = _3001;
                        frontier_phi_67_pred_2 = _3002;
                        frontier_phi_67_pred_3 = _2999;
                        frontier_phi_67_pred_4 = _2998;
                        frontier_phi_67_pred_5 = _2997;
                    }
                    _2665 = frontier_phi_67_pred;
                    _2667 = frontier_phi_67_pred_1;
                    _2669 = frontier_phi_67_pred_2;
                    _2663 = frontier_phi_67_pred_3;
                    _2661 = frontier_phi_67_pred_4;
                    _2659 = frontier_phi_67_pred_5;
                    uint _2804 = _2803 + 1u;
                    if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2797 = _2659;
                        _2798 = _2661;
                        _2799 = _2663;
                        _2800 = _2665;
                        _2801 = _2667;
                        _2802 = _2669;
                        _2803 = _2804;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2667;
                frontier_phi_55_56_ladder_1 = _2669;
                frontier_phi_55_56_ladder_2 = _2665;
                frontier_phi_55_56_ladder_3 = _2663;
                frontier_phi_55_56_ladder_4 = _2661;
                frontier_phi_55_56_ladder_5 = _2659;
            }
            else
            {
                frontier_phi_55_56_ladder = _2553;
                frontier_phi_55_56_ladder_1 = _2555;
                frontier_phi_55_56_ladder_2 = _2551;
                frontier_phi_55_56_ladder_3 = _2549;
                frontier_phi_55_56_ladder_4 = _2547;
                frontier_phi_55_56_ladder_5 = _2545;
            }
            _2658 = frontier_phi_55_56_ladder_5;
            _2660 = frontier_phi_55_56_ladder_4;
            _2662 = frontier_phi_55_56_ladder_3;
            _2664 = frontier_phi_55_56_ladder_2;
            _2666 = frontier_phi_55_56_ladder;
            _2668 = frontier_phi_55_56_ladder_1;
        }
        float _2673 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2457 = (_2673 * _2664) + _1909;
        _2459 = (_2673 * _2666) + _1911;
        _2461 = (_2673 * _2668) + _1913;
        _2463 = ((_2658 * 0.039999999105930328369140625) * _2673) + _2242;
        _2465 = ((_2660 * 0.039999999105930328369140625) * _2673) + _2244;
        _2467 = ((_2662 * 0.039999999105930328369140625) * _2673) + _2246;
    }
    else
    {
        _2457 = _1909;
        _2459 = _1911;
        _2461 = _1913;
        _2463 = _2242;
        _2465 = _2244;
        _2467 = _2246;
    }
    float _4333 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4344 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4355 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    uint _2487 = _230 + 6u;
    float _2495 = _660 / cbSceneParam._m0[86u].x;
    float _2496 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2510 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2512 = _2510.x;
    float _2513 = _2510.y;
    float _2514 = _2510.z;
    float _2515 = _2510.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2570 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2571 = _2570 / _593;
        float _2582 = _2571 * _645;
        float _2583 = _646 * _2571;
        float _2584 = (-0.0) - _2583;
        float _2586 = _2571 * _647;
        float _2588 = (cbSceneParam._m0[77u].w * _2584) / _2570;
        float _2589 = _2588 + cbSceneParam._m0[79u].w;
        float _2590 = cbSceneParam._m0[79u].w - _2583;
        float _2596 = sqrt(((_2582 * _2582) + (_2583 * _2583)) + (_2586 * _2586));
        float _2599 = (1.0 - (cbSceneParam._m0[77u].w / _2570)) * _2596;
        float _2604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2584 - _2588) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2589 > 0.0) ? exp2(_2604 * _2589) : (2.0 - exp2(_2606 * _2589))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2599;
        }
        else
        {
            float _2719 = 1.0 / cbSceneParam._m0[80u].x;
            float _2720 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : max(_2589, _2590));
            float _2721 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : min(_2589, _2590));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            _2759 = ((abs(_2596 / _2584) * cbSceneParam._m0[80u].y) * ((((_2730 - _2731) * 2.0) - ((exp2(_2604 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)))) - exp2(_2604 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))))) * _2719)) - ((exp2(_2606 * _2730) - exp2(_2606 * _2731)) * _2719))) + (_2599 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2515);
        _2608 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2512;
        _2610 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2513;
        _2612 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2514;
        _2614 = _2770 * _2515;
    }
    else
    {
        _2608 = _2512;
        _2610 = _2513;
        _2612 = _2514;
        _2614 = _2515;
    }
    float _2626 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2627 = _2626 == 3.0;
    float _2628 = log2(_2614);
    float _2635 = exp2(_2628 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2457 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _723))) + ((_2463 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2636 = exp2(_2628 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2459 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _723))) + ((_2465 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2637 = exp2(_2628 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2461 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _723))) + ((_2467 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2646 = (_2626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2646 * (_2627 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.y = _2646 * (_2627 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.z = _2646 * (_2627 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.w = cbInstanceData._m0[_2487].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2487].w;
}


