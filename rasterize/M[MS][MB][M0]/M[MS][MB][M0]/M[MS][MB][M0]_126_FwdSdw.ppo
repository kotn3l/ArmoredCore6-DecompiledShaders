#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3707 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3718 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _502 = _500.x;
    float _503 = 1.0 - _502;
    float _516 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_502 - _503) * cbMtdParam._m0[24u].z) + _503) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3729 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _524 = (_517 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) + _377;
    float _525 = (_517 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) + _378;
    float _526 = (_517 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) + _379;
    float _530 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _550 = (_543.x * 2.0) + (-1.0);
    float _551 = (_543.y * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3740 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _560 = (_517 * (_543.z - _530)) + _530;
    float _563 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _564 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _576 = (((_550 - _563) + (cbMtdParam._m0[21u].x * _563)) * _517) + _563;
    float _577 = (((_551 - _564) + (cbMtdParam._m0[21u].x * _564)) * _517) + _564;
    float _578 = (_517 * (sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) - _459)) + _459;
    float _583 = cbMtdParam._m0[22u].x + _475.w;
    float _586 = fma(_578, _221 * NORMAL.x, fma(_577, _228 * TANGENT.x, (_214 * _206) * _576));
    float _589 = fma(_578, _221 * NORMAL.y, fma(_577, _228 * TANGENT.y, (_214 * _207) * _576));
    float _592 = fma(_578, _221 * NORMAL.z, fma(_577, _228 * TANGENT.z, (_214 * _208) * _576));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3751 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _600 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3773 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3784 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3795 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _618 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _707 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _710 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _724 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3806 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _748 = ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _597) - _677;
    float _757 = (_752 * _598) - _678;
    float _758 = (_752 * _599) - _679;
    float _762 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3839 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_600);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _847 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _851 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _597;
        float _877 = _813 + _598;
        float _878 = _817 + _599;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _843;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _847;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _851;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_597, _598, _599), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3887 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_597, _598, _599), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3920 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_597, _598, _599), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3953 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1162 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1166 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1189 = _809 + _597;
        float _1190 = _813 + _598;
        float _1191 = _817 + _599;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_597, _598, _599), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4016 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_597, _598, _599), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4049 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_597, _598, _599), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4082 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1119;
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1132)) + _1132;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1133)) + _1133;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _756 * 0.5;
    float _1496 = _757 * 0.5;
    float _1497 = _758 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1611 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1615 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1619 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1622 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1625 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1628 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1656;
        if (_1622 > 0.0)
        {
            _1656 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1656 = frontier_phi_14_12_ladder;
        }
        float _1825;
        if (_1625 > 0.0)
        {
            _1825 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1825 = frontier_phi_23_19_ladder;
        }
        float _2120;
        if (_1628 > 0.0)
        {
            _2120 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2120 = frontier_phi_35_30_ladder;
        }
        float _2122 = isnan(_1825) ? _1656 : (isnan(_1656) ? _1825 : min(_1656, _1825));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1622) + _1611;
        float _2128 = (_2123 * _1625) + _1615;
        float _2129 = (_2123 * _1628) + _1619;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_13_35_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1644 = frontier_phi_13_35_ladder_2;
        _1646 = frontier_phi_13_35_ladder_1;
        _1648 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1564);
        _1644 = _1632.x * cbModelParam._m0[1u].y;
        _1646 = _1632.y * cbModelParam._m0[1u].y;
        _1648 = _1632.z * cbModelParam._m0[1u].y;
    }
    float _1652 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1652 : min(cbModelParam._m0[25u].w, _1652));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1706 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1710 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1714 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1717 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1720 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1723 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1830;
        if (_1717 > 0.0)
        {
            _1830 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1830 = frontier_phi_25_21_ladder;
        }
        float _2147;
        if (_1720 > 0.0)
        {
            _2147 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2147 = frontier_phi_37_32_ladder;
        }
        float _2474;
        if (_1723 > 0.0)
        {
            _2474 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2474 = frontier_phi_47_44_ladder;
        }
        float _2476 = isnan(_2147) ? _1830 : (isnan(_1830) ? _2147 : min(_1830, _2147));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1717) + _1706;
        float _2482 = (_2477 * _1720) + _1710;
        float _2483 = (_2477 * _1723) + _1714;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1653);
            frontier_phi_22_47_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1742 = frontier_phi_22_47_ladder_2;
        _1744 = frontier_phi_22_47_ladder_1;
        _1746 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1653);
        _1742 = _1726.x * cbModelParam._m0[1u].z;
        _1744 = _1726.y * cbModelParam._m0[1u].z;
        _1746 = _1726.z * cbModelParam._m0[1u].z;
    }
    float _1758 = ((((1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _764)) * _748;
    float _1759 = _1758 * ((cbModelParam._m0[1u].w * (_1742 - _1644)) + _1644);
    float _1760 = _1758 * ((cbModelParam._m0[1u].w * (_1744 - _1646)) + _1646);
    float _1761 = _1758 * ((cbModelParam._m0[1u].w * (_1746 - _1648)) + _1648);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1759 * cbSceneParam._m0[91u].x));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1817 = _1804 / _1816;
    float _1818 = _1808 / _1816;
    float _1819 = _1812 / _1816;
    float _1966;
    float _1967;
    float _1968;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1846 = ((uint(_1819 > cbSceneParam._m0[59u].y) + uint(_1819 > cbSceneParam._m0[59u].x)) + uint(_1819 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1847 = _1846 + 43u;
        uint _1855 = _1846 + 44u;
        uint _1863 = _1846 + 45u;
        uint _1871 = _1846 + 46u;
        float _1882 = fma(_1816, cbSceneParam._m0[_1847].w, fma(_1812, cbSceneParam._m0[_1847].z, fma(_1808, cbSceneParam._m0[_1847].y, _1804 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1816, cbSceneParam._m0[_1855].w, fma(_1812, cbSceneParam._m0[_1855].z, fma(_1808, cbSceneParam._m0[_1855].y, _1804 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1816, cbSceneParam._m0[_1871].w, fma(_1812, cbSceneParam._m0[_1871].z, fma(_1808, cbSceneParam._m0[_1871].y, _1804 * cbSceneParam._m0[_1871].x)));
        float _1899 = cbSceneParam._m0[33u].z * _1894;
        float _1901 = cbSceneParam._m0[33u].w * _1894;
        float _1904 = fma(_1816, cbSceneParam._m0[_1863].w, fma(_1812, cbSceneParam._m0[_1863].z, fma(_1808, cbSceneParam._m0[_1863].y, _1804 * cbSceneParam._m0[_1863].x))) / _1894;
        float _1952 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
        float _4208 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1959 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1882) / _1894, (_1901 + _1886) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1882) / _1894, (_1886 - _1899) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1899) / _1894, (_1886 - _1901) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1901) / _1894, (_1899 + _1886) / _1894), _1904), 0.0)).x), vec4(0.25)));
        _1966 = 1.0 - (_1959 * cbSceneParam._m0[34u].x);
        _1967 = 1.0 - (_1959 * cbSceneParam._m0[34u].y);
        _1968 = 1.0 - (_1959 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1966 = 1.0;
        _1967 = 1.0;
        _1968 = 1.0;
    }
    float _2032;
    float _2034;
    float _2036;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2020 = fma(_1816, cbSceneParam._m0[63u].w, fma(_1812, cbSceneParam._m0[63u].z, fma(_1808, cbSceneParam._m0[63u].y, _1804 * cbSceneParam._m0[63u].x)));
        float _2021 = fma(_1816, cbSceneParam._m0[60u].w, fma(_1812, cbSceneParam._m0[60u].z, fma(_1808, cbSceneParam._m0[60u].y, _1804 * cbSceneParam._m0[60u].x))) / _2020;
        float _2022 = fma(_1816, cbSceneParam._m0[61u].w, fma(_1812, cbSceneParam._m0[61u].z, fma(_1808, cbSceneParam._m0[61u].y, _1804 * cbSceneParam._m0[61u].x))) / _2020;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2021 >= cbSceneParam._m0[64u].x) && (_2022 >= cbSceneParam._m0[64u].y)) && (_2021 <= cbSceneParam._m0[64u].z)) && (_2022 <= cbSceneParam._m0[64u].w))
        {
            float _2160 = fma(_1816, cbSceneParam._m0[62u].w, fma(_1812, cbSceneParam._m0[62u].z, fma(_1808, cbSceneParam._m0[62u].y, _1804 * cbSceneParam._m0[62u].x))) / _2020;
            float _2164 = isnan(cbSceneParam._m0[41u].w) ? _2160 : (isnan(_2160) ? cbSceneParam._m0[41u].w : max(_2160, cbSceneParam._m0[41u].w));
            float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
            float _4224 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
            float _2214 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2021, cbSceneParam._m0[33u].w + _2022), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2021, _2022 - cbSceneParam._m0[33u].z), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].z, _2022 - cbSceneParam._m0[33u].w), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2022), _2164), 0.0)).x), vec4(0.25)));
            float _2218 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
            float _2219 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
            float _2220 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
            frontier_phi_34_33_ladder_1 = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
            frontier_phi_34_33_ladder_2 = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
        }
        else
        {
            frontier_phi_34_33_ladder = _1968;
            frontier_phi_34_33_ladder_1 = _1967;
            frontier_phi_34_33_ladder_2 = _1966;
        }
        _2032 = frontier_phi_34_33_ladder_2;
        _2034 = frontier_phi_34_33_ladder_1;
        _2036 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2032 = _1966;
        _2034 = _1967;
        _2036 = _1968;
    }
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _748 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2079 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2083 = _2043 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_597, _598, _599));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_597, _598, _599));
    float _4260 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4271 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2060].x * _2066) * _2104) + (((cbLight._m0[_2070].x * _2032) * _2079) * _2102);
    float _2112 = ((_2066 * cbLight._m0[_2060].y) * _2104) + (((cbLight._m0[_2070].y * _2034) * _2079) * _2102);
    float _2113 = ((_2066 * cbLight._m0[_2060].z) * _2104) + (((cbLight._m0[_2070].z * _2036) * _2079) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2119)
    {
        _2221 = _2111;
        _2223 = _2112;
        _2225 = _2113;
    }
    else
    {
        uint _2229 = _2043 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4282 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2248 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2111;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2112;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2113;
    }
    bool _2228 = _2117.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2228)
    {
        _2283 = _2221;
        _2285 = _2223;
        _2287 = _2225;
    }
    else
    {
        uint _2445 = _2043 + 7u;
        float _2461 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4298 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2464 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2283 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2221;
        _2285 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2223;
        _2287 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2225;
    }
    uint _2290 = _2043 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _600) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2043].x + _677;
    float _2306 = cbLight._m0[_2043].y + _678;
    float _2307 = cbLight._m0[_2043].z + _679;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2043].xyz));
    float _4314 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2319 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2320 = dot(vec3(_597, _598, _599), vec3(_2312, _2313, _2314));
    float _4336 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2312, _2313, _2314));
    float _4347 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2344 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2319 * ((_2318 * _2344) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2344) + _2304) * _2318))) * _2318;
    float _4358 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2371 = _2043 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _600) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2083].x + _677;
    float _2385 = cbLight._m0[_2083].y + _678;
    float _2386 = cbLight._m0[_2083].z + _679;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2083].xyz));
    float _4369 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2398 = dot(vec3(_597, _598, _599), vec3(_2391, _2392, _2393));
    float _4380 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2391, _2392, _2393));
    float _4391 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2420 = 1.0 - _2383;
    float _2430 = (0.5 / (((_2319 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2420) + _2383) * _2397))) * _2397;
    float _4402 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2442 = (((_2419 * cbLight._m0[_2371].x) * _2432) * _2066) + ((((cbLight._m0[_2290].x * _2032) * _2343) * _2357) * _2079);
    float _2443 = (((_2419 * cbLight._m0[_2371].y) * _2432) * _2066) + ((((cbLight._m0[_2290].y * _2034) * _2343) * _2357) * _2079);
    float _2444 = (((_2419 * cbLight._m0[_2371].z) * _2432) * _2066) + ((((cbLight._m0[_2290].z * _2036) * _2343) * _2357) * _2079);
    float _2500;
    float _2502;
    float _2504;
    if (_2119)
    {
        _2500 = _2442;
        _2502 = _2443;
        _2504 = _2444;
    }
    else
    {
        uint _2506 = _2043 + 2u;
        uint _2510 = _2043 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _600) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _677;
        float _2527 = cbLight._m0[_2506].y + _678;
        float _2528 = cbLight._m0[_2506].z + _679;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2506].xyz));
        float _4413 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2540 = dot(vec3(_597, _598, _599), vec3(_2533, _2534, _2535));
        float _4424 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4435 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2319 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2562) + _2525) * _2539))) * _2539;
        float _4446 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2500 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2442;
        _2502 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2443;
        _2504 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2444;
    }
    float _2606;
    float _2608;
    float _2610;
    if (_2228)
    {
        _2606 = _2500;
        _2608 = _2502;
        _2610 = _2504;
    }
    else
    {
        uint _2617 = _2043 + 3u;
        uint _2621 = _2043 + 11u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _600) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _677;
        float _2638 = cbLight._m0[_2617].y + _678;
        float _2639 = cbLight._m0[_2617].z + _679;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2617].xyz));
        float _4462 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2651 = dot(vec3(_597, _598, _599), vec3(_2644, _2645, _2646));
        float _4473 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4484 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2672 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2673 = 1.0 - _2636;
        float _2683 = (0.5 / (((_2319 * ((_2650 * _2673) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2673) + _2636) * _2650))) * _2650;
        float _4495 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2606 = (((_2672 * cbLight._m0[_2621].x) * _2685) * _2686) + _2500;
        _2608 = (((_2672 * cbLight._m0[_2621].y) * _2685) * _2686) + _2502;
        _2610 = (((_2672 * cbLight._m0[_2621].z) * _2685) * _2686) + _2504;
    }
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_2041.y == 0u)
    {
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2708)));
        float _2729 = (log2(_1819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
        }
        else
        {
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            uint _2970 = 0u;
            uint _2979;
            bool _2980;
            for (;;)
            {
                _2979 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                _2980 = _2979 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2980)
                {
                    frontier_phi_66_pred = _2969;
                    frontier_phi_66_pred_1 = _2968;
                    frontier_phi_66_pred_2 = _2967;
                    frontier_phi_66_pred_3 = _2966;
                    frontier_phi_66_pred_4 = _2965;
                    frontier_phi_66_pred_5 = _2964;
                }
                else
                {
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    uint _3094;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2979;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    for (;;)
                    {
                        uint _3098 = uint(findLSB(_3094)) + (_2970 << 5u);
                        uint _3095 = (_3094 + 4294967295u) & _3094;
                        uint _3100 = _3098 * 48u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3120 = (_3098 * 48u) + 4u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3139 = (_3098 * 48u) + 8u;
                        vec3 _3150 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x));
                        float _3154 = _3114.x - _1817;
                        float _3155 = _3114.y - _1818;
                        float _3156 = _3114.z - _1819;
                        float _3157 = dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156));
                        float _3160 = inversesqrt(_3157);
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3164 = dot(vec3(_704, _707, _710), vec3(_3161, _3162, _3163));
                        float _3169 = 1.0 - (_3157 * _3114.w);
                        float _4521 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3171 = sqrt(_3157) * _3133.w;
                        float _3174 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3164) + _3175;
                        float _3181 = _3171 * _3171;
                        float _3185 = ((isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))) * _3170) / ((_3181 * 0.699999988079071044921875) + 1.0);
                        float _3189 = (-0.0) - _1817;
                        float _3190 = (-0.0) - _1818;
                        float _3191 = (-0.0) - _1819;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3205 = exp2(log2(1.0 / ((_3181 * 3.5) + 5.0)) * 0.25);
                        float _3206 = 1.0 - _764;
                        float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                        float _3214 = _3213 * _3213;
                        float _3215 = _3214 * _3214;
                        float _3216 = _3196 + _3161;
                        float _3217 = _3197 + _3162;
                        float _3218 = _3198 + _3163;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3226 = dot(vec3(_704, _707, _710), vec3(_3196, _3197, _3198));
                        float _4537 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3230 = dot(vec3(_704, _707, _710), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                        float _4548 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                        float _3238 = _3174 * _3214;
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3164) + _3239;
                        float _4559 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3244 = 1.0 - _3214;
                        float _3254 = (0.5 / (((_3243 * ((_3229 * _3244) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3214) * _3229))) * _3243;
                        float _4570 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3265 = (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3237 * _3237) * ((_3181 * 2.1991131305694580078125) + 3.141590118408203125))) * _3170;
                        _3023 = (_3185 * _3133.x) + _3091;
                        _3024 = (_3185 * _3133.y) + _3092;
                        _3025 = (_3185 * _3133.z) + _3093;
                        _3020 = (_3265 * _3150.x) + _3088;
                        _3021 = (_3265 * _3150.y) + _3089;
                        _3022 = (_3265 * _3150.z) + _3090;
                        if (_3095 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3095;
                        }
                    }
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3024;
                    frontier_phi_66_pred_2 = _3023;
                    frontier_phi_66_pred_3 = _3022;
                    frontier_phi_66_pred_4 = _3021;
                    frontier_phi_66_pred_5 = _3020;
                }
                _2830 = frontier_phi_66_pred;
                _2828 = frontier_phi_66_pred_1;
                _2826 = frontier_phi_66_pred_2;
                _2824 = frontier_phi_66_pred_3;
                _2822 = frontier_phi_66_pred_4;
                _2820 = frontier_phi_66_pred_5;
                uint _2971 = _2970 + 1u;
                if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2964 = _2820;
                    _2965 = _2822;
                    _2966 = _2824;
                    _2967 = _2826;
                    _2968 = _2828;
                    _2969 = _2830;
                    _2970 = _2971;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
        }
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.z;
        uint _2836 = (_2834 >> 8u) & 15u;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((4294967295u << _2836) & _2739) == 0u)
        {
            _2932 = _2819;
            _2934 = _2821;
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
        }
        else
        {
            float _2957 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
            float _2958 = _2957 * _1817;
            float _2959 = _2957 * _1818;
            float _2960 = _2957 * _1819;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2836 < ((_2834 >> 12u) & 15u))
            {
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _3071 = _2819;
                float _3072 = _2821;
                float _3073 = _2823;
                float _3074 = _2825;
                float _3075 = _2827;
                float _3076 = _2829;
                uint _3077 = _2836;
                uint _3086;
                bool _3087;
                for (;;)
                {
                    _3086 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                    _3087 = _3086 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3087)
                    {
                        frontier_phi_72_pred = _3076;
                        frontier_phi_72_pred_1 = _3075;
                        frontier_phi_72_pred_2 = _3074;
                        frontier_phi_72_pred_3 = _3073;
                        frontier_phi_72_pred_4 = _3072;
                        frontier_phi_72_pred_5 = _3071;
                    }
                    else
                    {
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        float _3288 = _3076;
                        uint _3289 = _3086;
                        uint _3290;
                        vec4 _3315;
                        float _3316;
                        vec4 _3331;
                        vec3 _3343;
                        vec4 _3358;
                        vec4 _3374;
                        float _3420;
                        bool _3421;
                        for (;;)
                        {
                            uint _3300 = ((_3077 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3289));
                            _3290 = (_3289 + 4294967295u) & _3289;
                            uint _3302 = _3300 * 40u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3316 = _3315.w;
                            uint _3318 = (_3300 * 40u) + 4u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3300 * 40u) + 8u;
                            _3343 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x));
                            uint _3345 = (_3300 * 40u) + 16u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3300 * 40u) + 20u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3300 * 40u) + 24u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3395 = (_3300 * 40u) + 28u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3420 = fma(_1819, _3408.z, fma(_1818, _3408.y, _3408.x * _1817)) + _3408.w;
                            _3421 = !((fma(_1819, _3389.z, fma(_1818, _3389.y, _3389.x * _1817)) + _3389.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3421)
                            {
                                float _3448 = _3315.x - _1817;
                                float _3449 = _3315.y - _1818;
                                float _3450 = _3315.z - _1819;
                                float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                                float _3454 = inversesqrt(_3451);
                                float _3455 = _3454 * _3448;
                                float _3456 = _3454 * _3449;
                                float _3457 = _3454 * _3450;
                                float _3461 = 1.0 - (_3451 / (_3316 * _3316));
                                float _4581 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3466 = sqrt(_3451) * _3331.w;
                                float _3468 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                                float _3469 = _3468 * _3468;
                                float _3472 = ((1.0 - _3469) * dot(vec3(_3455, _3456, _3457), vec3(_704, _707, _710))) + _3469;
                                float _3475 = _3466 * _3466;
                                float _3479 = (fma(_1819, _3358.z, fma(_1818, _3358.y, _3358.x * _1817)) + _3358.w) / _3420;
                                float _3480 = (fma(_1819, _3374.z, fma(_1818, _3374.y, _3374.x * _1817)) + _3374.w) / _3420;
                                float _3484 = 1.0 - dot(vec2(_3479, _3480), vec2(_3479, _3480));
                                float _4597 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3486 = _3485 * (((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3462) / ((_3475 * 0.699999988079071044921875) + 1.0));
                                float _3498 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                                float _3499 = 1.0 - _764;
                                float _3506 = sqrt(1.0 - ((1.0 - (_3499 * _3499)) * (1.0 - (_3498 * _3498))));
                                float _3507 = _3506 * _3506;
                                float _3508 = _3507 * _3507;
                                float _3509 = _3455 - _2958;
                                float _3510 = _3456 - _2959;
                                float _3511 = _3457 - _2960;
                                float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                                float _3519 = dot(vec3(_704, _707, _710), vec3((-0.0) - _2958, (-0.0) - _2959, (-0.0) - _2960));
                                float _4608 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3523 = dot(vec3(_704, _707, _710), vec3(_3515 * _3509, _3515 * _3510, _3515 * _3511));
                                float _4619 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3530 = ((_3526 * _3526) * (_3508 + (-1.0))) + 1.0;
                                float _3531 = _3468 * _3507;
                                float _3532 = _3531 * _3531;
                                float _3538 = ((1.0 - _3532) * dot(vec3(_704, _707, _710), vec3(_3455, _3456, _3457))) + _3532;
                                float _4630 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3540 = 1.0 - _3507;
                                float _3550 = (0.5 / (((_3539 * ((_3522 * _3540) + _3507)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3507) * _3522))) * _3539;
                                float _4641 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3560 = (_3485 * _3462) * (((_3508 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3530 * _3530) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3486 * _3331.y;
                                frontier_phi_78_pred_1 = _3486 * _3331.x;
                                frontier_phi_78_pred_2 = _3560 * _3343.z;
                                frontier_phi_78_pred_3 = _3560 * _3343.y;
                                frontier_phi_78_pred_4 = _3560 * _3343.x;
                                frontier_phi_78_pred_5 = _3486 * _3331.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3568 = frontier_phi_78_pred;
                            _3567 = frontier_phi_78_pred_1;
                            _3566 = frontier_phi_78_pred_2;
                            _3565 = frontier_phi_78_pred_3;
                            _3564 = frontier_phi_78_pred_4;
                            _3569 = frontier_phi_78_pred_5;
                            _3273 = _3567 + _3286;
                            _3274 = _3568 + _3287;
                            _3275 = _3569 + _3288;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            if (_3290 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3290;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3275;
                        frontier_phi_72_pred_1 = _3274;
                        frontier_phi_72_pred_2 = _3273;
                        frontier_phi_72_pred_3 = _3272;
                        frontier_phi_72_pred_4 = _3271;
                        frontier_phi_72_pred_5 = _3270;
                    }
                    _2943 = frontier_phi_72_pred;
                    _2941 = frontier_phi_72_pred_1;
                    _2939 = frontier_phi_72_pred_2;
                    _2937 = frontier_phi_72_pred_3;
                    _2935 = frontier_phi_72_pred_4;
                    _2933 = frontier_phi_72_pred_5;
                    uint _3078 = _3077 + 1u;
                    if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3071 = _2933;
                        _3072 = _2935;
                        _3073 = _2937;
                        _3074 = _2939;
                        _3075 = _2941;
                        _3076 = _2943;
                        _3077 = _3078;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2943;
                frontier_phi_60_61_ladder_1 = _2941;
                frontier_phi_60_61_ladder_2 = _2937;
                frontier_phi_60_61_ladder_3 = _2935;
                frontier_phi_60_61_ladder_4 = _2933;
                frontier_phi_60_61_ladder_5 = _2939;
            }
            else
            {
                frontier_phi_60_61_ladder = _2829;
                frontier_phi_60_61_ladder_1 = _2827;
                frontier_phi_60_61_ladder_2 = _2823;
                frontier_phi_60_61_ladder_3 = _2821;
                frontier_phi_60_61_ladder_4 = _2819;
                frontier_phi_60_61_ladder_5 = _2825;
            }
            _2932 = frontier_phi_60_61_ladder_4;
            _2934 = frontier_phi_60_61_ladder_3;
            _2936 = frontier_phi_60_61_ladder_2;
            _2938 = frontier_phi_60_61_ladder_5;
            _2940 = frontier_phi_60_61_ladder_1;
            _2942 = frontier_phi_60_61_ladder;
        }
        float _2947 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2752 = (_2947 * _2938) + _2283;
        _2754 = (_2947 * _2940) + _2285;
        _2756 = (_2947 * _2942) + _2287;
        _2758 = ((_2932 * 0.039999999105930328369140625) * _2947) + _2606;
        _2760 = ((_2934 * 0.039999999105930328369140625) * _2947) + _2608;
        _2762 = ((_2936 * 0.039999999105930328369140625) * _2947) + _2610;
    }
    else
    {
        _2752 = _2283;
        _2754 = _2285;
        _2756 = _2287;
        _2758 = _2606;
        _2760 = _2608;
        _2762 = _2610;
    }
    float _4657 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4668 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4679 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    uint _2782 = _234 + 6u;
    float _2790 = _685 / cbSceneParam._m0[86u].x;
    float _2791 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2805 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2790, _2791, (log2((isnan(cbSceneParam._m0[77u].w) ? _618 : (isnan(_618) ? cbSceneParam._m0[77u].w : min(_618, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2807 = _2805.x;
    float _2808 = _2805.y;
    float _2809 = _2805.z;
    float _2810 = _2805.w;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_618 > cbSceneParam._m0[78u].w)
    {
        float _2844 = isnan(_618) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _618 : min(cbSceneParam._m0[80u].w, _618));
        float _2845 = _2844 / _618;
        float _2856 = _2845 * _670;
        float _2857 = _671 * _2845;
        float _2858 = (-0.0) - _2857;
        float _2860 = _2845 * _672;
        float _2862 = (cbSceneParam._m0[77u].w * _2858) / _2844;
        float _2863 = _2862 + cbSceneParam._m0[79u].w;
        float _2864 = cbSceneParam._m0[79u].w - _2857;
        float _2870 = sqrt(((_2856 * _2856) + (_2857 * _2857)) + (_2860 * _2860));
        float _2873 = (1.0 - (cbSceneParam._m0[77u].w / _2844)) * _2870;
        float _2878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3033;
        if (abs((_2858 - _2862) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3033 = ((((_2863 > 0.0) ? exp2(_2878 * _2863) : (2.0 - exp2(_2880 * _2863))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2873;
        }
        else
        {
            float _2993 = 1.0 / cbSceneParam._m0[80u].x;
            float _2994 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : max(_2863, _2864));
            float _2995 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : min(_2863, _2864));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            _3033 = ((abs(_2870 / _2858) * cbSceneParam._m0[80u].y) * ((((_3004 - _3005) * 2.0) - ((exp2(_2878 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0)))) - exp2(_2878 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))))) * _2993)) - ((exp2(_2880 * _3004) - exp2(_2880 * _3005)) * _2993))) + (_2873 * cbSceneParam._m0[80u].z);
        }
        vec4 _3035 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2790, _2791, 1.0), 0.0);
        float _3044 = exp2((_3033 * (-1.44269502162933349609375)) * (1.0 - _3035.w));
        float _3045 = log2(_3044);
        float _3061 = log2(_2810);
        _2882 = (exp2(_3061 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].x)) * _3035.x) / cbSceneParam._m0[78u].x)) + _2807;
        _2884 = (exp2(_3061 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].y)) * _3035.y) / cbSceneParam._m0[78u].y)) + _2808;
        _2886 = (exp2(_3061 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].z)) * _3035.z) / cbSceneParam._m0[78u].z)) + _2809;
        _2888 = _3044 * _2810;
    }
    else
    {
        _2882 = _2807;
        _2884 = _2808;
        _2886 = _2809;
        _2888 = _2810;
    }
    float _2900 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2901 = _2900 == 3.0;
    float _2902 = log2(_2888);
    float _2909 = exp2(_2902 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2752 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _748))) + ((_2758 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2910 = exp2(_2902 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2754 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _748))) + ((_2760 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2911 = exp2(_2902 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2756 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _748))) + ((_2762 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2920 = (_2900 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2920 * (_2901 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.y = _2920 * (_2901 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.z = _2920 * (_2901 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2886)));
    SV_Target.w = cbInstanceData._m0[_2782].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2782].w;
}


