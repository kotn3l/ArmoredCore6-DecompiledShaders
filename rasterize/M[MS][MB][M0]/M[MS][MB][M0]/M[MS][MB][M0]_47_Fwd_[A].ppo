#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1123;
float _3483;
float _3484;
float _3485;
float _3486;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3495 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3506 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3517 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) + _327;
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _274) + cbTextureTilingScale._m0[14u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = _401.z;
    float _409 = (_401.x * 2.0) + (-1.0);
    float _410 = (_401.y * 2.0) + (-1.0);
    float _411 = dot(vec2(_409, _410), vec2(_409, _410));
    float _3528 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    float _421 = _409 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_375.x * 2.0) + (-1.0)));
    float _422 = _410 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_375.y * 2.0) + (-1.0)));
    float _425 = fma(_416, _221, fma(_422, _228, _421 * _214));
    float _428 = fma(_416, _222, fma(_422, _229, _421 * _215));
    float _431 = fma(_416, _223, fma(_422, _230, _421 * _216));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _473 = _471.x;
    float _474 = 1.0 - _473;
    float _483 = (cbMtdParam._m0[19u].x + dot(vec4(_435 * _425, _435 * _428, _435 * _431, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_473 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[21u].z);
    float _3539 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _491 = (_484 * ((_355.x * cbMtdParam._m0[18u].x) - _334)) + _334;
    float _492 = (_484 * ((_355.y * cbMtdParam._m0[18u].y) - _335)) + _335;
    float _493 = (_484 * ((_355.z * cbMtdParam._m0[18u].z) - _336)) + _336;
    float _498 = (((_375.z - _405) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _405;
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3550 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _528 = ((_511.z - _498) * _484) + _498;
    float _538 = ((sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _416) * _484) + _416;
    float _541 = (((_518 - _421) * _484) + _421) + (cbMtdParam._m0[21u].x * _421);
    float _542 = (((_519 - _422) * _484) + _422) + (cbMtdParam._m0[21u].x * _422);
    float _544 = cbMtdParam._m0[22u].x + _401.w;
    float _547 = fma(_538, _221, fma(_542, _228, _541 * _214));
    float _550 = fma(_538, _222, fma(_542, _229, _541 * _215));
    float _553 = fma(_538, _223, fma(_542, _230, _541 * _216));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3561 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _561 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3583 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3594 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3605 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _630 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _620);
    float _631 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _620);
    float _632 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _620);
    float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
    float _637 = _630 * _636;
    float _638 = _631 * _636;
    float _639 = _632 * _636;
    vec4 _644 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _646 = _644.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _803 = sqrt(((_630 * _630) + (_631 * _631)) + (_632 * _632));
        float _809 = (cbMatDynParam._m0[5u].x * _803) + cbMatDynParam._m0[5u].y;
        float _3616 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _814 = (cbMatDynParam._m0[5u].z * _803) + cbMatDynParam._m0[5u].w;
        float _3627 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) - _810)) + _810) < ((_646 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _682 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _685 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    uint _698 = _254 + 9u;
    uint _699 = _698 + uint(cbMatDynParam._m0[0u].w);
    float _705 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_699].x;
    float _706 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_699].y;
    float _707 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_699].z;
    float _3638 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    vec4 _719 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _723 = ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * TEXCOORD_5.w) * _719.x;
    float _724 = dot(vec3(_558, _559, _560), vec3(_637, _638, _639));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _558) - _637;
    float _732 = (_727 * _559) - _638;
    float _733 = (_727 * _560) - _639;
    float _737 = abs(dot(vec3(_637, _638, _639), vec3(_558, _559, _560)));
    float _3671 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_561);
    float _752 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1122;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _851 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _855 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _880 = _784 + _558;
        float _881 = _788 + _559;
        float _882 = _792 + _560;
        float _892 = fma(_882, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880)) - _847;
        float _893 = fma(_882, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880)) - _851;
        float _894 = fma(_882, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880)) - _855;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_847 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_851 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[34u].z) + ((((((_855 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _950 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_916.x + (-0.5));
        float _952 = _950 * (_916.y + (-0.5));
        float _953 = _950 * (_916.z + (-0.5));
        float _960 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_923.x + (-0.5));
        float _962 = _960 * (_923.y + (-0.5));
        float _963 = _960 * (_923.z + (-0.5));
        float _970 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_930.x + (-0.5));
        float _972 = _970 * (_930.y + (-0.5));
        float _973 = _970 * (_930.z + (-0.5));
        float _980 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_937.x + (-0.5));
        float _982 = _980 * (_937.y + (-0.5));
        float _983 = _980 * (_937.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1004 = (dot(vec3(_558, _559, _560), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1014 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3719 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1016 + 1.0))) + _1021) * _984;
        float _1031 = _952 * 0.5;
        float _1032 = _962 * 0.5;
        float _1033 = _972 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_558, _559, _560), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3752 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1058 + 1.0))) + _1063) * _985;
        float _1073 = _953 * 0.5;
        float _1074 = _963 * 0.5;
        float _1075 = _973 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_558, _559, _560), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3785 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1100 + 1.0))) + _1105) * _986;
        _1122 = _953;
        _1124 = _952;
        _1125 = _951;
        _1126 = _963;
        _1127 = _962;
        _1128 = _961;
        _1129 = _973;
        _1130 = _972;
        _1131 = _971;
        _1132 = _986;
        _1133 = _985;
        _1134 = _984;
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
    }
    else
    {
        _1122 = _1123;
        _1124 = _1123;
        _1125 = _1123;
        _1126 = _1123;
        _1127 = _1123;
        _1128 = _1123;
        _1129 = _1123;
        _1130 = _1123;
        _1131 = _1123;
        _1132 = _1123;
        _1133 = _1123;
        _1134 = _1123;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1169 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1173 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1196 = _784 + _558;
        float _1197 = _788 + _559;
        float _1198 = _792 + _560;
        float _1208 = fma(_1198, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196)) - _1165;
        float _1209 = fma(_1198, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196)) - _1169;
        float _1210 = fma(_1198, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196)) - _1173;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1165 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1169 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[35u].z) + ((((((_1173 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1264 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1231.x + (-0.5));
        float _1266 = _1264 * (_1231.y + (-0.5));
        float _1267 = _1264 * (_1231.z + (-0.5));
        float _1274 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1238.x + (-0.5));
        float _1276 = _1274 * (_1238.y + (-0.5));
        float _1277 = _1274 * (_1238.z + (-0.5));
        float _1284 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1245.x + (-0.5));
        float _1286 = _1284 * (_1245.y + (-0.5));
        float _1287 = _1284 * (_1245.z + (-0.5));
        float _1294 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1252.x + (-0.5));
        float _1296 = _1294 * (_1252.y + (-0.5));
        float _1297 = _1294 * (_1252.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_558, _559, _560), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3848 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1328 + 1.0))) + _1333) * _1298;
        float _1343 = _1266 * 0.5;
        float _1344 = _1276 * 0.5;
        float _1345 = _1286 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_558, _559, _560), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3881 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1370 + 1.0))) + _1375) * _1299;
        float _1385 = _1267 * 0.5;
        float _1386 = _1277 * 0.5;
        float _1387 = _1287 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_558, _559, _560), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3914 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1412 + 1.0))) + _1417) * _1300;
        _1434 = _1267;
        _1435 = _1266;
        _1436 = _1265;
        _1437 = _1277;
        _1438 = _1276;
        _1439 = _1275;
        _1440 = _1287;
        _1441 = _1286;
        _1442 = _1285;
        _1443 = _1300;
        _1444 = _1299;
        _1445 = _1298;
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1123;
        _1435 = _1123;
        _1436 = _1123;
        _1437 = _1123;
        _1438 = _1123;
        _1439 = _1123;
        _1440 = _1123;
        _1441 = _1123;
        _1442 = _1123;
        _1443 = _1123;
        _1444 = _1123;
        _1445 = _1123;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1135)) + _1135;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1136)) + _1136;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1137)) + _1137;
    float _1481 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1458));
    float _1502 = _731 * 0.5;
    float _1503 = _732 * 0.5;
    float _1504 = _733 * 0.5;
    float _1505 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1508 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1511 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1545;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1518 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1122, _1126, _1129, _1132));
        float _1522 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1526 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1533 = dot(vec4(cbModelParam._m0[39u]), vec4(_1502, _1503, _1504, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1556;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1547 = dot(vec4(cbModelParam._m0[40u]), vec4(_1502, _1503, _1504, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1560 = (_1556 * cbModelParam._m0[1u].x) + (_1545 * (1.0 - cbModelParam._m0[1u].x));
    float _1570 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _561);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1570 : min(cbModelParam._m0[25u].z, _1570));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1618 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1622 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1626 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1629 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1632 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1635 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1663;
        if (_1629 > 0.0)
        {
            _1663 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1663 = frontier_phi_17_15_ladder;
        }
        float _1865;
        if (_1632 > 0.0)
        {
            _1865 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1865 = frontier_phi_26_22_ladder;
        }
        float _2108;
        if (_1635 > 0.0)
        {
            _2108 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2108 = frontier_phi_38_33_ladder;
        }
        float _2110 = isnan(_1865) ? _1663 : (isnan(_1663) ? _1865 : min(_1663, _1865));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1629) + _1618;
        float _2116 = (_2111 * _1632) + _1622;
        float _2117 = (_2111 * _1635) + _1626;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2241 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1571);
            frontier_phi_16_38_ladder = _2241.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2241.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2241.x * cbModelParam._m0[1u].y;
        }
        _1651 = frontier_phi_16_38_ladder_2;
        _1653 = frontier_phi_16_38_ladder_1;
        _1655 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1571);
        _1651 = _1639.x * cbModelParam._m0[1u].y;
        _1653 = _1639.y * cbModelParam._m0[1u].y;
        _1655 = _1639.z * cbModelParam._m0[1u].y;
    }
    float _1659 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _561);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1659 : min(cbModelParam._m0[25u].w, _1659));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1727 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1730 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1870;
        if (_1724 > 0.0)
        {
            _1870 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1870 = frontier_phi_28_24_ladder;
        }
        float _2135;
        if (_1727 > 0.0)
        {
            _2135 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2135 = frontier_phi_40_35_ladder;
        }
        float _2340;
        if (_1730 > 0.0)
        {
            _2340 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2340 = frontier_phi_49_46_ladder;
        }
        float _2342 = isnan(_2135) ? _1870 : (isnan(_1870) ? _2135 : min(_1870, _2135));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1724) + _1713;
        float _2348 = (_2343 * _1727) + _1717;
        float _2349 = (_2343 * _1730) + _1721;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1660);
            frontier_phi_25_49_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_25_49_ladder_2;
        _1751 = frontier_phi_25_49_ladder_1;
        _1753 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1660);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1765 = ((((1.0 - _752) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_752 * _739)) * _723;
    float _1766 = _1765 * ((cbModelParam._m0[1u].w * (_1749 - _1651)) + _1651);
    float _1767 = _1765 * ((cbModelParam._m0[1u].w * (_1751 - _1653)) + _1653);
    float _1768 = _1765 * ((cbModelParam._m0[1u].w * (_1753 - _1655)) + _1655);
    float _1771 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1766 * cbSceneParam._m0[91u].x));
    uvec4 _1787 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1789 = _1787.x * 14u;
    uint _1790 = _1789 + 13u;
    float _1797 = _723 + (-1.0);
    float _1802 = (cbLight._m0[_1790].x * _1797) + 1.0;
    float _1803 = (cbLight._m0[_1790].y * _1797) + 1.0;
    float _1804 = (cbLight._m0[_1790].z * _1797) + 1.0;
    float _1805 = (cbLight._m0[_1790].w * _1797) + 1.0;
    uint _1806 = _1789 + 5u;
    float _1812 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1816 = _1789 + 4u;
    float _1823 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1827 = _1789 | 1u;
    float _1838 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_558, _559, _560));
    float _1841 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_558, _559, _560));
    float _4050 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _4061 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1846 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1848 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1855 = ((cbLight._m0[_1806].x * _1812) * _1848) + ((cbLight._m0[_1816].x * _1823) * _1846);
    float _1856 = ((_1812 * cbLight._m0[_1806].y) * _1848) + ((_1823 * cbLight._m0[_1816].y) * _1846);
    float _1857 = ((_1812 * cbLight._m0[_1806].z) * _1848) + ((_1823 * cbLight._m0[_1816].z) * _1846);
    uvec4 _1862 = floatBitsToUint(cbLight._m0[_1789 + 12u]);
    bool _1864 = _1862.x == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1864)
    {
        _1875 = _1855;
        _1877 = _1856;
        _1879 = _1857;
    }
    else
    {
        uint _1883 = _1789 + 6u;
        float _1899 = (dot(vec3(cbLight._m0[_1789 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _4072 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1902 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _1875 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1855;
        _1877 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1856;
        _1879 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1857;
    }
    bool _1882 = _1862.y == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1882)
    {
        _1920 = _1875;
        _1922 = _1877;
        _1924 = _1879;
    }
    else
    {
        uint _2079 = _1789 + 7u;
        float _2095 = (dot(vec3(cbLight._m0[_1789 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4088 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2098 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1920 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1875;
        _1922 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1877;
        _1924 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1879;
    }
    uint _1927 = _1789 + 8u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _561) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1789].x + _637;
    float _1943 = cbLight._m0[_1789].y + _638;
    float _1944 = cbLight._m0[_1789].z + _639;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1789].xyz));
    float _4104 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _1956 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1957 = dot(vec3(_558, _559, _560), vec3(_1949, _1950, _1951));
    float _4126 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1949, _1950, _1951));
    float _4137 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1941 * _1941;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1956 * ((_1955 * _1981) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _1981) + _1941) * _1955))) * _1955;
    float _4148 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    uint _2005 = _1789 + 9u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _561) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1827].x + _637;
    float _2019 = cbLight._m0[_1827].y + _638;
    float _2020 = cbLight._m0[_1827].z + _639;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1827].xyz));
    float _4159 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2032 = dot(vec3(_558, _559, _560), vec3(_2025, _2026, _2027));
    float _4170 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2025, _2026, _2027));
    float _4181 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2017 * _2017;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2054 = 1.0 - _2017;
    float _2064 = (0.5 / (((_1956 * ((_2031 * _2054) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2054) + _2017) * _2031))) * _2031;
    float _4192 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    float _2076 = (((_2053 * cbLight._m0[_2005].x) * _2066) * _1812) + (((_1980 * cbLight._m0[_1927].x) * _1994) * _1823);
    float _2077 = (((_2053 * cbLight._m0[_2005].y) * _2066) * _1812) + (((_1980 * cbLight._m0[_1927].y) * _1994) * _1823);
    float _2078 = (((_2053 * cbLight._m0[_2005].z) * _2066) * _1812) + (((_1980 * cbLight._m0[_1927].z) * _1994) * _1823);
    float _2140;
    float _2142;
    float _2144;
    if (_1864)
    {
        _2140 = _2076;
        _2142 = _2077;
        _2144 = _2078;
    }
    else
    {
        uint _2146 = _1789 + 2u;
        uint _2150 = _1789 + 10u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _561) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _637;
        float _2167 = cbLight._m0[_2146].y + _638;
        float _2168 = cbLight._m0[_2146].z + _639;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2146].xyz));
        float _4203 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2180 = dot(vec3(_558, _559, _560), vec3(_2173, _2174, _2175));
        float _4214 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4225 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2202 = 1.0 - _2165;
        float _2212 = (0.5 / (((_1956 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2202) + _2165) * _2179))) * _2179;
        float _4236 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2215 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2140 = (((_2201 * cbLight._m0[_2150].x) * _2214) * _2215) + _2076;
        _2142 = (((_2201 * cbLight._m0[_2150].y) * _2214) * _2215) + _2077;
        _2144 = (((_2201 * cbLight._m0[_2150].z) * _2214) * _2215) + _2078;
    }
    float _2250;
    float _2252;
    float _2254;
    if (_1882)
    {
        _2250 = _2140;
        _2252 = _2142;
        _2254 = _2144;
    }
    else
    {
        uint _2261 = _1789 + 3u;
        uint _2265 = _1789 + 11u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _561) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _637;
        float _2282 = cbLight._m0[_2261].y + _638;
        float _2283 = cbLight._m0[_2261].z + _639;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2261].xyz));
        float _4252 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2295 = dot(vec3(_558, _559, _560), vec3(_2288, _2289, _2290));
        float _4263 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4274 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2317 = 1.0 - _2280;
        float _2327 = (0.5 / (((_1956 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2317) + _2280) * _2294))) * _2294;
        float _4285 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2250 = (((_2316 * cbLight._m0[_2265].x) * _2329) * _2330) + _2140;
        _2252 = (((_2316 * cbLight._m0[_2265].y) * _2329) * _2330) + _2142;
        _2254 = (((_2316 * cbLight._m0[_2265].z) * _2329) * _2330) + _2144;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1787.y == 0u)
    {
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2405;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2405;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2405;
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.x;
        uint _2432 = uint((float(_2420.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2421))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2421)));
        float _2442 = (log2(_2408 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2443 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        uint _2446 = uint(isnan(14.0) ? _2443 : (isnan(_2443) ? 14.0 : min(_2443, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2446 << 2u) + (_2432 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2420.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            uint _2712 = 0u;
            uint _2721;
            bool _2722;
            for (;;)
            {
                _2721 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                _2722 = _2721 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2722)
                {
                    frontier_phi_66_pred = _2706;
                    frontier_phi_66_pred_1 = _2711;
                    frontier_phi_66_pred_2 = _2710;
                    frontier_phi_66_pred_3 = _2709;
                    frontier_phi_66_pred_4 = _2708;
                    frontier_phi_66_pred_5 = _2707;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2721;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2712 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _2406;
                        float _2918 = _2877.y - _2407;
                        float _2919 = _2877.z - _2408;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_679, _682, _685), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4311 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _2406;
                        float _2953 = (-0.0) - _2407;
                        float _2954 = (-0.0) - _2408;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2969 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2970 = 1.0 - _739;
                        float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                        float _2978 = _2977 * _2977;
                        float _2979 = _2978 * _2978;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2990 = dot(vec3(_679, _682, _685), vec3(_2959, _2960, _2961));
                        float _4327 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _2994 = dot(vec3(_679, _682, _685), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                        float _4338 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                        float _3002 = _2937 * _2978;
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2927) + _3003;
                        float _4349 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3008 = 1.0 - _2978;
                        float _3018 = (0.5 / (((_3007 * ((_2993 * _3008) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2978) * _2993))) * _3007;
                        float _4360 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3029 = (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3001 * _3001) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2781 = (_2948 * _2896.x) + _2854;
                        _2782 = (_2948 * _2896.y) + _2855;
                        _2783 = (_2948 * _2896.z) + _2856;
                        _2778 = (_3029 * _2913.x) + _2851;
                        _2779 = (_3029 * _2913.y) + _2852;
                        _2780 = (_3029 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_66_pred = _2778;
                    frontier_phi_66_pred_1 = _2783;
                    frontier_phi_66_pred_2 = _2782;
                    frontier_phi_66_pred_3 = _2781;
                    frontier_phi_66_pred_4 = _2780;
                    frontier_phi_66_pred_5 = _2779;
                }
                _2554 = frontier_phi_66_pred;
                _2564 = frontier_phi_66_pred_1;
                _2562 = frontier_phi_66_pred_2;
                _2560 = frontier_phi_66_pred_3;
                _2558 = frontier_phi_66_pred_4;
                _2556 = frontier_phi_66_pred_5;
                uint _2713 = _2712 + 1u;
                if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2706 = _2554;
                    _2707 = _2556;
                    _2708 = _2558;
                    _2709 = _2560;
                    _2710 = _2562;
                    _2711 = _2564;
                    _2712 = _2713;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((4294967295u << _2570) & _2452) == 0u)
        {
            _2674 = _2553;
            _2676 = _2555;
            _2678 = _2557;
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
        }
        else
        {
            float _2699 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
            float _2700 = _2699 * _2406;
            float _2701 = _2699 * _2407;
            float _2702 = _2699 * _2408;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2834 = _2553;
                float _2835 = _2555;
                float _2836 = _2557;
                float _2837 = _2559;
                float _2838 = _2561;
                float _2839 = _2563;
                uint _2840 = _2570;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2850)
                    {
                        frontier_phi_77_pred = _2839;
                        frontier_phi_77_pred_1 = _2838;
                        frontier_phi_77_pred_2 = _2837;
                        frontier_phi_77_pred_3 = _2836;
                        frontier_phi_77_pred_4 = _2835;
                        frontier_phi_77_pred_5 = _2834;
                    }
                    else
                    {
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        uint _3062 = _2849;
                        uint _3063;
                        vec4 _3088;
                        float _3089;
                        vec4 _3104;
                        vec3 _3116;
                        vec4 _3131;
                        vec4 _3146;
                        float _3192;
                        bool _3193;
                        for (;;)
                        {
                            uint _3073 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3062));
                            _3063 = (_3062 + 4294967295u) & _3062;
                            uint _3075 = _3073 * 40u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            _3089 = _3088.w;
                            uint _3091 = (_3073 * 40u) + 4u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3106 = (_3073 * 40u) + 8u;
                            _3116 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x));
                            uint _3118 = (_3073 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3073 * 40u) + 20u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3073 * 40u) + 24u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3167 = (_3073 * 40u) + 28u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3192 = fma(_2408, _3180.z, fma(_2407, _3180.y, _3180.x * _2406)) + _3180.w;
                            _3193 = !((fma(_2408, _3161.z, fma(_2407, _3161.y, _3161.x * _2406)) + _3161.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3193)
                            {
                                float _3220 = _3088.x - _2406;
                                float _3221 = _3088.y - _2407;
                                float _3222 = _3088.z - _2408;
                                float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                                float _3226 = inversesqrt(_3223);
                                float _3227 = _3226 * _3220;
                                float _3228 = _3226 * _3221;
                                float _3229 = _3226 * _3222;
                                float _3233 = 1.0 - (_3223 / (_3089 * _3089));
                                float _4371 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3238 = sqrt(_3223) * _3104.w;
                                float _3240 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                                float _3241 = _3240 * _3240;
                                float _3244 = ((1.0 - _3241) * dot(vec3(_3227, _3228, _3229), vec3(_679, _682, _685))) + _3241;
                                float _3247 = _3238 * _3238;
                                float _3251 = (fma(_2408, _3131.z, fma(_2407, _3131.y, _3131.x * _2406)) + _3131.w) / _3192;
                                float _3252 = (fma(_2408, _3146.z, fma(_2407, _3146.y, _3146.x * _2406)) + _3146.w) / _3192;
                                float _3256 = 1.0 - dot(vec2(_3251, _3252), vec2(_3251, _3252));
                                float _4387 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3258 = _3257 * (((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3234) / ((_3247 * 0.699999988079071044921875) + 1.0));
                                float _3270 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                                float _3271 = 1.0 - _739;
                                float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                                float _3279 = _3278 * _3278;
                                float _3280 = _3279 * _3279;
                                float _3281 = _3227 - _2700;
                                float _3282 = _3228 - _2701;
                                float _3283 = _3229 - _2702;
                                float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                                float _3291 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2700, (-0.0) - _2701, (-0.0) - _2702));
                                float _4398 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3295 = dot(vec3(_679, _682, _685), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                                float _4409 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                                float _3303 = _3240 * _3279;
                                float _3304 = _3303 * _3303;
                                float _3310 = ((1.0 - _3304) * dot(vec3(_679, _682, _685), vec3(_3227, _3228, _3229))) + _3304;
                                float _4420 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3312 = 1.0 - _3279;
                                float _3322 = (0.5 / (((_3311 * ((_3294 * _3312) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3279) * _3294))) * _3311;
                                float _4431 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3332 = (_3257 * _3234) * (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) / ((_3302 * _3302) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3258 * _3104.y;
                                frontier_phi_83_pred_1 = _3258 * _3104.x;
                                frontier_phi_83_pred_2 = _3332 * _3116.z;
                                frontier_phi_83_pred_3 = _3332 * _3116.y;
                                frontier_phi_83_pred_4 = _3332 * _3116.x;
                                frontier_phi_83_pred_5 = _3258 * _3104.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3340 = frontier_phi_83_pred;
                            _3339 = frontier_phi_83_pred_1;
                            _3338 = frontier_phi_83_pred_2;
                            _3337 = frontier_phi_83_pred_3;
                            _3336 = frontier_phi_83_pred_4;
                            _3341 = frontier_phi_83_pred_5;
                            _3046 = _3339 + _3059;
                            _3047 = _3340 + _3060;
                            _3048 = _3341 + _3061;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            if (_3063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3063;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3048;
                        frontier_phi_77_pred_1 = _3047;
                        frontier_phi_77_pred_2 = _3046;
                        frontier_phi_77_pred_3 = _3045;
                        frontier_phi_77_pred_4 = _3044;
                        frontier_phi_77_pred_5 = _3043;
                    }
                    _2685 = frontier_phi_77_pred;
                    _2683 = frontier_phi_77_pred_1;
                    _2681 = frontier_phi_77_pred_2;
                    _2679 = frontier_phi_77_pred_3;
                    _2677 = frontier_phi_77_pred_4;
                    _2675 = frontier_phi_77_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2675;
                        _2835 = _2677;
                        _2836 = _2679;
                        _2837 = _2681;
                        _2838 = _2683;
                        _2839 = _2685;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2679;
                frontier_phi_58_59_ladder_1 = _2685;
                frontier_phi_58_59_ladder_2 = _2683;
                frontier_phi_58_59_ladder_3 = _2681;
                frontier_phi_58_59_ladder_4 = _2677;
                frontier_phi_58_59_ladder_5 = _2675;
            }
            else
            {
                frontier_phi_58_59_ladder = _2557;
                frontier_phi_58_59_ladder_1 = _2563;
                frontier_phi_58_59_ladder_2 = _2561;
                frontier_phi_58_59_ladder_3 = _2559;
                frontier_phi_58_59_ladder_4 = _2555;
                frontier_phi_58_59_ladder_5 = _2553;
            }
            _2674 = frontier_phi_58_59_ladder_5;
            _2676 = frontier_phi_58_59_ladder_4;
            _2678 = frontier_phi_58_59_ladder;
            _2680 = frontier_phi_58_59_ladder_3;
            _2682 = frontier_phi_58_59_ladder_2;
            _2684 = frontier_phi_58_59_ladder_1;
        }
        float _2689 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2465 = (_2689 * _2680) + _1920;
        _2467 = (_2689 * _2682) + _1922;
        _2469 = (_2689 * _2684) + _1924;
        _2471 = ((_2674 * 0.039999999105930328369140625) * _2689) + _2250;
        _2473 = ((_2676 * 0.039999999105930328369140625) * _2689) + _2252;
        _2475 = ((_2678 * 0.039999999105930328369140625) * _2689) + _2254;
    }
    else
    {
        _2465 = _1920;
        _2467 = _1922;
        _2469 = _1924;
        _2471 = _2250;
        _2473 = _2252;
        _2475 = _2254;
    }
    float _4447 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4458 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4469 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2492 = ((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2465 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _723))) + ((_2471 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    float _2493 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2467 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _723))) + ((_2473 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    float _2494 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2469 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _723))) + ((_2475 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    uint _2495 = _254 + 6u;
    float _2503 = _658 / cbSceneParam._m0[86u].x;
    float _2504 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2579 = _2578 / _579;
        float _2590 = _2579 * _630;
        float _2591 = _631 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _632;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2791;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2791 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2735 = 1.0 / cbSceneParam._m0[80u].x;
            float _2736 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2737 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            _2791 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2746 - _2747) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))))) * _2735)) - ((exp2(_2614 * _2746) - exp2(_2614 * _2747)) * _2735))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2793 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2802 = exp2((_2791 * (-1.44269502162933349609375)) * (1.0 - _2793.w));
        float _2803 = log2(_2802);
        float _2819 = log2(_2523);
        _2616 = (exp2(_2819 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].x)) * _2793.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2618 = (exp2(_2819 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].y)) * _2793.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2620 = (exp2(_2819 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].z)) * _2793.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2622 = _2802 * _2523;
    }
    else
    {
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
        _2622 = _2523;
    }
    bool _2829;
    vec4 _2632;
    vec4 _2654;
    float _2656;
    float _2660;
    float _2661;
    float _2662;
    float _2663;
    bool _2673;
    for (;;)
    {
        _2632 = cbMatDynParam._m0[0u];
        float _2634 = roundEven(_2632.y);
        bool _2635 = _2634 == 3.0;
        float _2636 = log2(_2622);
        float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * _2492;
        float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * _2493;
        float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * _2494;
        float _2652 = _646 + (-0.5);
        _2654 = cbMtdParam._m0[1u];
        _2656 = _2654.y * _2652;
        float _2659 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2660 = _2659 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
        _2661 = _2659 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
        _2662 = _2659 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
        _2663 = _2652 * 0.999000012874603271484375;
        _2673 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2673)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2663) < 0.5)
            {
                _2829 = true;
                break;
            }
        }
        uint _2770 = _698 + uint(_2632.w);
        if ((cbInstanceData._m0[_2770].w < 1.0) && ((cbInstanceData._m0[_2770].w + _2663) < 0.5))
        {
            _2829 = true;
            break;
        }
        if ((_2656 + 1.0) < _2654.x)
        {
            _2829 = true;
            break;
        }
        _2829 = false;
        break;
    }
    float _3034;
    if (_2829)
    {
        discard_state = true;
        _3034 = 0.0;
    }
    else
    {
        _3034 = cbInstanceData._m0[_2495].w;
    }
    SV_Target.x = _2660;
    SV_Target.y = _2661;
    SV_Target.z = _2662;
    SV_Target.w = _3034;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
    discard_exit();
}


