#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1177;
float _3536;
float _3537;
float _3538;
float _3539;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3548 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3559 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    float _462 = fma(_459, _222, fma(_453, _229, _451 * _215));
    float _465 = fma(_459, _223, fma(_453, _230, _451 * _216));
    float _468 = fma(_459, _224, fma(_453, _231, _451 * _217));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _523 = ((_518 - _519) * cbMtdParam._m0[24u].z) + _519;
    float _525 = (cbMtdParam._m0[19u].x + dot(vec4(_472 * _462, _472 * _465, _472 * _468, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_523 * cbMtdParam._m0[21u].z);
    float _3570 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _541 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_523 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3581 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _546 = ((_526 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) * _542) + _377;
    float _547 = ((_526 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) * _542) + _378;
    float _548 = ((_526 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) * _542) + _379;
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _568 = (_561.x * 2.0) + (-1.0);
    float _569 = (_561.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3592 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _579 = (((_561.z - _448) * _526) * _542) + _448;
    float _594 = (((cbMtdParam._m0[21u].x * _451) + ((_568 - _451) * _526)) * _542) + _451;
    float _595 = (((cbMtdParam._m0[21u].x * _453) + ((_569 - _453) * _526)) * _542) + _453;
    float _596 = (((sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _459) * _526) * _542) + _459;
    float _601 = cbMtdParam._m0[22u].x + _488.w;
    float _604 = fma(_596, _222, fma(_595, _229, _594 * _215));
    float _607 = fma(_596, _223, fma(_595, _230, _594 * _216));
    float _610 = fma(_596, _224, fma(_595, _231, _594 * _217));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3603 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _618 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3625 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3636 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3647 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _858 = sqrt(((_688 * _688) + (_689 * _689)) + (_690 * _690));
        float _864 = (cbMatDynParam._m0[5u].x * _858) + cbMatDynParam._m0[5u].y;
        float _3658 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _869 = (cbMatDynParam._m0[5u].z * _858) + cbMatDynParam._m0[5u].w;
        float _3669 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) - _865)) + _865) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _737 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _740 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _753 = _234 + 9u;
    uint _754 = _753 + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3680 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _778 = ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * TEXCOORD_5.w) * _774.x;
    float _779 = dot(vec3(_615, _616, _617), vec3(_695, _696, _697));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _615) - _695;
    float _787 = (_782 * _616) - _696;
    float _788 = (_782 * _617) - _697;
    float _792 = abs(dot(vec3(_695, _696, _697), vec3(_615, _616, _617)));
    float _3713 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_618);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1176;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _901 = fma(_847, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839));
        float _905 = fma(_847, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839));
        float _909 = fma(_847, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839));
        float _934 = _839 + _615;
        float _935 = _843 + _616;
        float _936 = _847 + _617;
        float _946 = fma(_936, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934)) - _901;
        float _947 = fma(_936, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934)) - _905;
        float _948 = fma(_936, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934)) - _909;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_901 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_905 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[34u].z) + ((((((_909 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1004 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_970.x + (-0.5));
        float _1006 = _1004 * (_970.y + (-0.5));
        float _1007 = _1004 * (_970.z + (-0.5));
        float _1014 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_977.x + (-0.5));
        float _1016 = _1014 * (_977.y + (-0.5));
        float _1017 = _1014 * (_977.z + (-0.5));
        float _1024 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_984.x + (-0.5));
        float _1026 = _1024 * (_984.y + (-0.5));
        float _1027 = _1024 * (_984.z + (-0.5));
        float _1034 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_991.x + (-0.5));
        float _1036 = _1034 * (_991.y + (-0.5));
        float _1037 = _1034 * (_991.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1058 = (dot(vec3(_615, _616, _617), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1068 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3761 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1070 + 1.0))) + _1075) * _1038;
        float _1085 = _1006 * 0.5;
        float _1086 = _1016 * 0.5;
        float _1087 = _1026 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_615, _616, _617), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3794 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1112 + 1.0))) + _1117) * _1039;
        float _1127 = _1007 * 0.5;
        float _1128 = _1017 * 0.5;
        float _1129 = _1027 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_615, _616, _617), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3827 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1154 + 1.0))) + _1159) * _1040;
        _1176 = _1007;
        _1178 = _1006;
        _1179 = _1005;
        _1180 = _1017;
        _1181 = _1016;
        _1182 = _1015;
        _1183 = _1027;
        _1184 = _1026;
        _1185 = _1025;
        _1186 = _1040;
        _1187 = _1039;
        _1188 = _1038;
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _1177;
        _1178 = _1177;
        _1179 = _1177;
        _1180 = _1177;
        _1181 = _1177;
        _1182 = _1177;
        _1183 = _1177;
        _1184 = _1177;
        _1185 = _1177;
        _1186 = _1177;
        _1187 = _1177;
        _1188 = _1177;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_847, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839));
        float _1223 = fma(_847, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839));
        float _1227 = fma(_847, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839));
        float _1250 = _839 + _615;
        float _1251 = _843 + _616;
        float _1252 = _847 + _617;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_615, _616, _617), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3890 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_615, _616, _617), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3923 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_615, _616, _617), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3956 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1177;
        _1489 = _1177;
        _1490 = _1177;
        _1491 = _1177;
        _1492 = _1177;
        _1493 = _1177;
        _1494 = _1177;
        _1495 = _1177;
        _1496 = _1177;
        _1497 = _1177;
        _1498 = _1177;
        _1499 = _1177;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1190)) + _1190;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1191)) + _1191;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _786 * 0.5;
    float _1557 = _787 * 0.5;
    float _1558 = _788 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1176, _1180, _1183, _1186));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_847, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_847, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_847, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1686 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1689 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1717 = frontier_phi_17_15_ladder;
        }
        float _1917;
        if (_1686 > 0.0)
        {
            _1917 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1917 = frontier_phi_26_22_ladder;
        }
        float _2160;
        if (_1689 > 0.0)
        {
            _2160 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2160 = frontier_phi_38_33_ladder;
        }
        float _2162 = isnan(_1917) ? _1717 : (isnan(_1717) ? _1917 : min(_1717, _1917));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1683) + _1672;
        float _2168 = (_2163 * _1686) + _1676;
        float _2169 = (_2163 * _1689) + _1680;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2170;
        float _2174 = _2170 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 > _2174) || ((_2168 < _2172) || ((_2167 < _2172) || (_2167 > _2174))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_16_38_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_16_38_ladder_2;
        _1707 = frontier_phi_16_38_ladder_1;
        _1709 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1625);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1767 = fma(_847, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839)) + cbModelParam._m0[21u].w;
        float _1771 = fma(_847, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839)) + cbModelParam._m0[22u].w;
        float _1775 = fma(_847, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839)) + cbModelParam._m0[23u].w;
        float _1778 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1781 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1784 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1922;
        if (_1778 > 0.0)
        {
            _1922 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1922 = frontier_phi_28_24_ladder;
        }
        float _2187;
        if (_1781 > 0.0)
        {
            _2187 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2187 = frontier_phi_40_35_ladder;
        }
        float _2392;
        if (_1784 > 0.0)
        {
            _2392 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2392 = frontier_phi_49_46_ladder;
        }
        float _2394 = isnan(_2187) ? _1922 : (isnan(_1922) ? _2187 : min(_1922, _2187));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1778) + _1767;
        float _2400 = (_2395 * _1781) + _1771;
        float _2401 = (_2395 * _1784) + _1775;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2402;
        float _2405 = _2402 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2401 > _2405) || ((_2401 < _2403) || ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 < _2403) || (_2399 > _2405))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2401, cbModelParam._m0[17u].z, fma(_2400, cbModelParam._m0[17u].y, _2399 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2401, cbModelParam._m0[18u].z, fma(_2400, cbModelParam._m0[18u].y, _2399 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2401, cbModelParam._m0[19u].z, fma(_2400, cbModelParam._m0[19u].y, _2399 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_25_49_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1803 = frontier_phi_25_49_ladder_2;
        _1805 = frontier_phi_25_49_ladder_1;
        _1807 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1714);
        _1803 = _1787.x * cbModelParam._m0[1u].z;
        _1805 = _1787.y * cbModelParam._m0[1u].z;
        _1807 = _1787.z * cbModelParam._m0[1u].z;
    }
    float _1819 = ((((1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_807 * _794)) * _778;
    float _1820 = _1819 * ((cbModelParam._m0[1u].w * (_1803 - _1705)) + _1705);
    float _1821 = _1819 * ((cbModelParam._m0[1u].w * (_1805 - _1707)) + _1707);
    float _1822 = _1819 * ((cbModelParam._m0[1u].w * (_1807 - _1709)) + _1709);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1820 * cbSceneParam._m0[91u].x));
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _778 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1876 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1880 = _1843 | 1u;
    float _1891 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_615, _616, _617));
    float _1894 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_615, _616, _617));
    float _4092 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _4103 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1899 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1901 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1908 = ((cbLight._m0[_1860].x * _1866) * _1901) + ((cbLight._m0[_1870].x * _1876) * _1899);
    float _1909 = ((_1866 * cbLight._m0[_1860].y) * _1901) + ((_1876 * cbLight._m0[_1870].y) * _1899);
    float _1910 = ((_1866 * cbLight._m0[_1860].z) * _1901) + ((_1876 * cbLight._m0[_1870].z) * _1899);
    uvec4 _1914 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1916 = _1914.x == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1916)
    {
        _1927 = _1908;
        _1929 = _1909;
        _1931 = _1910;
    }
    else
    {
        uint _1935 = _1843 + 6u;
        float _1951 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _1952 = _1951 * _1951;
        float _4114 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1954 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1927 = (((cbLight._m0[_1935].x * 0.3183098733425140380859375) * _1953) * _1954) + _1908;
        _1929 = (((cbLight._m0[_1935].y * 0.3183098733425140380859375) * _1953) * _1954) + _1909;
        _1931 = (((cbLight._m0[_1935].z * 0.3183098733425140380859375) * _1953) * _1954) + _1910;
    }
    bool _1934 = _1914.y == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1934)
    {
        _1972 = _1927;
        _1974 = _1929;
        _1976 = _1931;
    }
    else
    {
        uint _2131 = _1843 + 7u;
        float _2147 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _4130 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2150 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1972 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _1927;
        _1974 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _1929;
        _1976 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _1931;
    }
    uint _1979 = _1843 + 8u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _618) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1843].x + _695;
    float _1995 = cbLight._m0[_1843].y + _696;
    float _1996 = cbLight._m0[_1843].z + _697;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1843].xyz));
    float _4146 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2008 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2009 = dot(vec3(_615, _616, _617), vec3(_2001, _2002, _2003));
    float _4168 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2001, _2002, _2003));
    float _4179 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1993 * _1993;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2033 = 1.0 - _1993;
    float _2044 = (0.5 / (((_2008 * ((_2007 * _2033) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2033) + _1993) * _2007))) * _2007;
    float _4190 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    uint _2057 = _1843 + 9u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _618) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1880].x + _695;
    float _2071 = cbLight._m0[_1880].y + _696;
    float _2072 = cbLight._m0[_1880].z + _697;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1880].xyz));
    float _4201 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2084 = dot(vec3(_615, _616, _617), vec3(_2077, _2078, _2079));
    float _4212 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2077, _2078, _2079));
    float _4223 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2069 * _2069;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2106 = 1.0 - _2069;
    float _2116 = (0.5 / (((_2008 * ((_2083 * _2106) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2106) + _2069) * _2083))) * _2083;
    float _4234 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    float _2128 = (((_2105 * cbLight._m0[_2057].x) * _2118) * _1866) + (((_2032 * cbLight._m0[_1979].x) * _2046) * _1876);
    float _2129 = (((_2105 * cbLight._m0[_2057].y) * _2118) * _1866) + (((_2032 * cbLight._m0[_1979].y) * _2046) * _1876);
    float _2130 = (((_2105 * cbLight._m0[_2057].z) * _2118) * _1866) + (((_2032 * cbLight._m0[_1979].z) * _2046) * _1876);
    float _2192;
    float _2194;
    float _2196;
    if (_1916)
    {
        _2192 = _2128;
        _2194 = _2129;
        _2196 = _2130;
    }
    else
    {
        uint _2198 = _1843 + 2u;
        uint _2202 = _1843 + 10u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _618) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _695;
        float _2219 = cbLight._m0[_2198].y + _696;
        float _2220 = cbLight._m0[_2198].z + _697;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2198].xyz));
        float _4245 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2232 = dot(vec3(_615, _616, _617), vec3(_2225, _2226, _2227));
        float _4256 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4267 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2254 = 1.0 - _2217;
        float _2264 = (0.5 / (((_2008 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2254) + _2217) * _2231))) * _2231;
        float _4278 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2192 = (((_2253 * cbLight._m0[_2202].x) * _2266) * _2267) + _2128;
        _2194 = (((_2253 * cbLight._m0[_2202].y) * _2266) * _2267) + _2129;
        _2196 = (((_2253 * cbLight._m0[_2202].z) * _2266) * _2267) + _2130;
    }
    float _2302;
    float _2304;
    float _2306;
    if (_1934)
    {
        _2302 = _2192;
        _2304 = _2194;
        _2306 = _2196;
    }
    else
    {
        uint _2313 = _1843 + 3u;
        uint _2317 = _1843 + 11u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _618) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _695;
        float _2334 = cbLight._m0[_2313].y + _696;
        float _2335 = cbLight._m0[_2313].z + _697;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2313].xyz));
        float _4294 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2347 = dot(vec3(_615, _616, _617), vec3(_2340, _2341, _2342));
        float _4305 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4316 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2368 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2369 = 1.0 - _2332;
        float _2379 = (0.5 / (((_2008 * ((_2346 * _2369) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2369) + _2332) * _2346))) * _2346;
        float _4327 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2302 = (((_2368 * cbLight._m0[_2317].x) * _2381) * _2382) + _2192;
        _2304 = (((_2368 * cbLight._m0[_2317].y) * _2381) * _2382) + _2194;
        _2306 = (((_2368 * cbLight._m0[_2317].z) * _2381) * _2382) + _2196;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1841.y == 0u)
    {
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2457;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2457;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2457;
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.x;
        uint _2484 = uint((float(_2472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2473))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2473)));
        float _2494 = (log2(_2460 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2495 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        uint _2498 = uint(isnan(14.0) ? _2495 : (isnan(_2495) ? 14.0 : min(_2495, 14.0)));
        uvec4 _2503 = texelFetch(g_lightClusterGridBuffer, int(((_2498 << 2u) + (_2484 << 6u)) >> 2u));
        uint _2504 = _2503.x;
        uint _2505 = _2472.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2505 >> 4u) & 15u)) + 4294967295u) & _2504) == 0u) || ((_2505 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            uint _2764 = 0u;
            uint _2773;
            bool _2774;
            for (;;)
            {
                _2773 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                _2774 = _2773 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2774)
                {
                    frontier_phi_66_pred = _2758;
                    frontier_phi_66_pred_1 = _2763;
                    frontier_phi_66_pred_2 = _2762;
                    frontier_phi_66_pred_3 = _2761;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                else
                {
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    uint _2909;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2773;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    for (;;)
                    {
                        uint _2913 = uint(findLSB(_2909)) + (_2764 << 5u);
                        uint _2910 = (_2909 + 4294967295u) & _2909;
                        uint _2915 = _2913 * 48u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2935 = (_2913 * 48u) + 4u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2954 = (_2913 * 48u) + 8u;
                        vec3 _2965 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x));
                        float _2969 = _2929.x - _2458;
                        float _2970 = _2929.y - _2459;
                        float _2971 = _2929.z - _2460;
                        float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                        float _2975 = inversesqrt(_2972);
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2979 = dot(vec3(_734, _737, _740), vec3(_2976, _2977, _2978));
                        float _2984 = 1.0 - (_2972 * _2929.w);
                        float _4353 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _2986 = sqrt(_2972) * _2948.w;
                        float _2989 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2979) + _2990;
                        float _2996 = _2986 * _2986;
                        float _3000 = ((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2985) / ((_2996 * 0.699999988079071044921875) + 1.0);
                        float _3004 = (-0.0) - _2458;
                        float _3005 = (-0.0) - _2459;
                        float _3006 = (-0.0) - _2460;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3021 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _794;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_734, _737, _740), vec3(_3011, _3012, _3013));
                        float _4369 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3046 = dot(vec3(_734, _737, _740), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4380 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2989 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2979) + _3055;
                        float _4391 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4402 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3053 * _3053) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2985;
                        _2833 = (_3000 * _2948.x) + _2906;
                        _2834 = (_3000 * _2948.y) + _2907;
                        _2835 = (_3000 * _2948.z) + _2908;
                        _2830 = (_3081 * _2965.x) + _2903;
                        _2831 = (_3081 * _2965.y) + _2904;
                        _2832 = (_3081 * _2965.z) + _2905;
                        if (_2910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2910;
                        }
                    }
                    frontier_phi_66_pred = _2830;
                    frontier_phi_66_pred_1 = _2835;
                    frontier_phi_66_pred_2 = _2834;
                    frontier_phi_66_pred_3 = _2833;
                    frontier_phi_66_pred_4 = _2832;
                    frontier_phi_66_pred_5 = _2831;
                }
                _2606 = frontier_phi_66_pred;
                _2616 = frontier_phi_66_pred_1;
                _2614 = frontier_phi_66_pred_2;
                _2612 = frontier_phi_66_pred_3;
                _2610 = frontier_phi_66_pred_4;
                _2608 = frontier_phi_66_pred_5;
                uint _2765 = _2764 + 1u;
                if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2758 = _2606;
                    _2759 = _2608;
                    _2760 = _2610;
                    _2761 = _2612;
                    _2762 = _2614;
                    _2763 = _2616;
                    _2764 = _2765;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((4294967295u << _2622) & _2504) == 0u)
        {
            _2726 = _2605;
            _2728 = _2607;
            _2730 = _2609;
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
        }
        else
        {
            float _2751 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
            float _2752 = _2751 * _2458;
            float _2753 = _2751 * _2459;
            float _2754 = _2751 * _2460;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2886 = _2605;
                float _2887 = _2607;
                float _2888 = _2609;
                float _2889 = _2611;
                float _2890 = _2613;
                float _2891 = _2615;
                uint _2892 = _2622;
                uint _2901;
                bool _2902;
                for (;;)
                {
                    _2901 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                    _2902 = _2901 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2902)
                    {
                        frontier_phi_77_pred = _2891;
                        frontier_phi_77_pred_1 = _2890;
                        frontier_phi_77_pred_2 = _2889;
                        frontier_phi_77_pred_3 = _2888;
                        frontier_phi_77_pred_4 = _2887;
                        frontier_phi_77_pred_5 = _2886;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        float _3112 = _2890;
                        float _3113 = _2891;
                        uint _3114 = _2901;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3183;
                        vec4 _3199;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3125 = ((_2892 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3170 = (_3125 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3125 * 40u) + 20u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3125 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3125 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_2460, _3233.z, fma(_2459, _3233.y, _3233.x * _2458)) + _3233.w;
                            _3246 = !((fma(_2460, _3214.z, fma(_2459, _3214.y, _3214.x * _2458)) + _3214.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3140.x - _2458;
                                float _3274 = _3140.y - _2459;
                                float _3275 = _3140.z - _2460;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3141 * _3141));
                                float _4413 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3291 = sqrt(_3276) * _3156.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_734, _737, _740))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_2460, _3183.z, fma(_2459, _3183.y, _3183.x * _2458)) + _3183.w) / _3245;
                                float _3305 = (fma(_2460, _3199.z, fma(_2459, _3199.y, _3199.x * _2458)) + _3199.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4429 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _794;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2752;
                                float _3335 = _3281 - _2753;
                                float _3336 = _3282 - _2754;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2752, (-0.0) - _2753, (-0.0) - _2754));
                                float _4440 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3348 = dot(vec3(_734, _737, _740), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4451 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_734, _737, _740), vec3(_3280, _3281, _3282))) + _3357;
                                float _4462 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4473 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3311 * _3156.y;
                                frontier_phi_83_pred_1 = _3311 * _3156.x;
                                frontier_phi_83_pred_2 = _3385 * _3168.z;
                                frontier_phi_83_pred_3 = _3385 * _3168.y;
                                frontier_phi_83_pred_4 = _3385 * _3168.x;
                                frontier_phi_83_pred_5 = _3311 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_83_pred;
                            _3392 = frontier_phi_83_pred_1;
                            _3391 = frontier_phi_83_pred_2;
                            _3390 = frontier_phi_83_pred_3;
                            _3389 = frontier_phi_83_pred_4;
                            _3394 = frontier_phi_83_pred_5;
                            _3098 = _3392 + _3111;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3100;
                        frontier_phi_77_pred_1 = _3099;
                        frontier_phi_77_pred_2 = _3098;
                        frontier_phi_77_pred_3 = _3097;
                        frontier_phi_77_pred_4 = _3096;
                        frontier_phi_77_pred_5 = _3095;
                    }
                    _2737 = frontier_phi_77_pred;
                    _2735 = frontier_phi_77_pred_1;
                    _2733 = frontier_phi_77_pred_2;
                    _2731 = frontier_phi_77_pred_3;
                    _2729 = frontier_phi_77_pred_4;
                    _2727 = frontier_phi_77_pred_5;
                    uint _2893 = _2892 + 1u;
                    if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2886 = _2727;
                        _2887 = _2729;
                        _2888 = _2731;
                        _2889 = _2733;
                        _2890 = _2735;
                        _2891 = _2737;
                        _2892 = _2893;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2731;
                frontier_phi_58_59_ladder_1 = _2737;
                frontier_phi_58_59_ladder_2 = _2735;
                frontier_phi_58_59_ladder_3 = _2733;
                frontier_phi_58_59_ladder_4 = _2729;
                frontier_phi_58_59_ladder_5 = _2727;
            }
            else
            {
                frontier_phi_58_59_ladder = _2609;
                frontier_phi_58_59_ladder_1 = _2615;
                frontier_phi_58_59_ladder_2 = _2613;
                frontier_phi_58_59_ladder_3 = _2611;
                frontier_phi_58_59_ladder_4 = _2607;
                frontier_phi_58_59_ladder_5 = _2605;
            }
            _2726 = frontier_phi_58_59_ladder_5;
            _2728 = frontier_phi_58_59_ladder_4;
            _2730 = frontier_phi_58_59_ladder;
            _2732 = frontier_phi_58_59_ladder_3;
            _2734 = frontier_phi_58_59_ladder_2;
            _2736 = frontier_phi_58_59_ladder_1;
        }
        float _2741 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2517 = (_2741 * _2732) + _1972;
        _2519 = (_2741 * _2734) + _1974;
        _2521 = (_2741 * _2736) + _1976;
        _2523 = ((_2726 * 0.039999999105930328369140625) * _2741) + _2302;
        _2525 = ((_2728 * 0.039999999105930328369140625) * _2741) + _2304;
        _2527 = ((_2730 * 0.039999999105930328369140625) * _2741) + _2306;
    }
    else
    {
        _2517 = _1972;
        _2519 = _1974;
        _2521 = _1976;
        _2523 = _2302;
        _2525 = _2304;
        _2527 = _2306;
    }
    float _4489 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4500 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4511 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _2544 = ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2517 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _778))) + ((_2523 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2545 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2519 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _778))) + ((_2525 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2546 = ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2521 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _778))) + ((_2527 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    uint _2547 = _234 + 6u;
    float _2555 = _715 / cbSceneParam._m0[86u].x;
    float _2556 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2631 = _2630 / _636;
        float _2642 = _2631 * _688;
        float _2643 = _689 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2646 = _2631 * _690;
        float _2648 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2649 = _2648 + cbSceneParam._m0[79u].w;
        float _2650 = cbSceneParam._m0[79u].w - _2643;
        float _2656 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2646 * _2646));
        float _2659 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2656;
        float _2664 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2666 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2843;
        if (abs((_2644 - _2648) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2843 = ((((_2649 > 0.0) ? exp2(_2664 * _2649) : (2.0 - exp2(_2666 * _2649))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2659;
        }
        else
        {
            float _2787 = 1.0 / cbSceneParam._m0[80u].x;
            float _2788 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : max(_2649, _2650));
            float _2789 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : min(_2649, _2650));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            _2843 = ((abs(_2656 / _2644) * cbSceneParam._m0[80u].y) * ((((_2798 - _2799) * 2.0) - ((exp2(_2664 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0)))) - exp2(_2664 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))))) * _2787)) - ((exp2(_2666 * _2798) - exp2(_2666 * _2799)) * _2787))) + (_2659 * cbSceneParam._m0[80u].z);
        }
        vec4 _2845 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2854 = exp2((_2843 * (-1.44269502162933349609375)) * (1.0 - _2845.w));
        float _2855 = log2(_2854);
        float _2871 = log2(_2575);
        _2668 = (exp2(_2871 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].x)) * _2845.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2670 = (exp2(_2871 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].y)) * _2845.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2672 = (exp2(_2871 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].z)) * _2845.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2674 = _2854 * _2575;
    }
    else
    {
        _2668 = _2572;
        _2670 = _2573;
        _2672 = _2574;
        _2674 = _2575;
    }
    bool _2881;
    vec4 _2684;
    vec4 _2706;
    float _2708;
    float _2712;
    float _2713;
    float _2714;
    float _2715;
    bool _2725;
    for (;;)
    {
        _2684 = cbMatDynParam._m0[0u];
        float _2686 = roundEven(_2684.y);
        bool _2687 = _2686 == 3.0;
        float _2688 = log2(_2674);
        float _2695 = exp2(_2688 * cbSceneParam._m0[78u].x) * _2544;
        float _2696 = exp2(_2688 * cbSceneParam._m0[78u].y) * _2545;
        float _2697 = exp2(_2688 * cbSceneParam._m0[78u].z) * _2546;
        float _2704 = _704 + (-0.5);
        _2706 = cbMtdParam._m0[1u];
        _2708 = _2706.y * _2704;
        float _2711 = (_2686 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2712 = _2711 * (_2687 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2668)));
        _2713 = _2711 * (_2687 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2670)));
        _2714 = _2711 * (_2687 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2672)));
        _2715 = _2704 * 0.999000012874603271484375;
        _2725 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2725)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2715) < 0.5)
            {
                _2881 = true;
                break;
            }
        }
        uint _2822 = _753 + uint(_2684.w);
        if ((cbInstanceData._m0[_2822].w < 1.0) && ((cbInstanceData._m0[_2822].w + _2715) < 0.5))
        {
            _2881 = true;
            break;
        }
        if ((_2708 + 1.0) < _2706.x)
        {
            _2881 = true;
            break;
        }
        _2881 = false;
        break;
    }
    float _3086;
    if (_2881)
    {
        discard_state = true;
        _3086 = 0.0;
    }
    else
    {
        _3086 = cbInstanceData._m0[_2547].w;
    }
    SV_Target.x = _2712;
    SV_Target.y = _2713;
    SV_Target.z = _2714;
    SV_Target.w = _3086;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
    discard_exit();
}


